<?xml version="1.0"?>
<?metis version="5.2.2"?>
<?metisxml version="1.2"?>
<!DOCTYPE metis PUBLIC "-//METIS/METIS XML 1.2//EN" "http://xml.metis.no/metis12.dtd">
<metis
 xmlns="http://www.metis.no/metis"
 xmlns:xlink="http://www.w3.org/1999/xlink"
 types="1"
 instances="47"
 instanceviews="92"
 nextoid="1">

 <model id="_002asj602701vd83c0rc" name="CVW Script Library" title="CVW Script Library" standalone-flag="true">
  <metamodel-links size="1">
   <metamodel-link xlink:role="metamodel" xlink:title="EKA core types" xlink:href="../../eka/templates/eka_core_modeling.kmd#MetaModel_EKA:CoreTypes_UUID" xlink:actuate="user"/>
  </metamodel-links>
  <valueset size="3" xlink:role="type" xlink:title="Container" xlink:href="metis:stdtypes#oid3" xlink:actuate="user">
   <string name="name"></string>
   <string name="description"></string>
   <string name="externalID"></string>
  </valueset>
  <part-link xlink:role="object" xlink:href="#_002asj6027323dphmg96"/>
  <part-link xlink:role="object" xlink:title="Function isEnabled" xlink:href="#_002asj6028o9465h5hug"/>
  <part-link xlink:role="object" xlink:title="Function isValid" xlink:href="#_002asj6028rh529dh8bp"/>
  <part-link xlink:role="object" xlink:title="Function hasInstance" xlink:href="#_002asj6028se6qftnj9o"/>
  <part-link xlink:role="object" xlink:title="Class CVW_ArgumentValue" xlink:href="#_002asj60293vp049tq4d"/>
  <part-link xlink:role="object" xlink:title="Class CVW_Window" xlink:href="#_002asj60295oc1kdekg3"/>
  <part-link xlink:role="object" xlink:title="Class CVW_ContentSpecification" xlink:href="#_002asj7020mpovuqbbcp"/>
  <part-link xlink:role="object" xlink:title="Function instanceInList" xlink:href="#_002asj7020r6sqhf7gk8"/>
  <part-link xlink:role="object" xlink:title="Class CVW_SelectDialog" xlink:href="#_002asj7029832idt4u9s"/>
  <part-link xlink:role="object" xlink:title="Function findInstanceView" xlink:href="#_002asj8016otki1udemj"/>
  <part-link xlink:role="object" xlink:title="Class CVW_ViewstyleSpecification&#10;" xlink:href="#_002asj801aq2dr8okkmv"/>
  <part-link xlink:role="object" xlink:title="Function generateTree" xlink:href="#_002asja014sj0quajf7q"/>
  <part-link xlink:role="object" xlink:title="Function cleanTree" xlink:href="#_002asja014v6prkuj8n4"/>
  <part-link xlink:role="object" xlink:title="Class CVW_Action" xlink:href="#_002asja01opig6r3prga"/>
  <part-link xlink:role="object" xlink:title="Class CVW_Workarea&#10;" xlink:href="#_002asjb01dkcl46pjf25"/>
  <part-link xlink:role="object" xlink:title="Class CVW_ViewSpecification&#10;" xlink:href="#_002asjb0252ci9nuc8k9"/>
  <part-link xlink:role="object" xlink:title="Class CVW_ViewStrategy&#10;" xlink:href="#_002asjb026gg9qkrj8v9"/>
  <part-link xlink:role="object" xlink:title="Class CVW_StatusBar&#10;" xlink:href="#_002asjd00rcftrmj7m16"/>
  <part-link xlink:role="object" xlink:title="Function getInstModel" xlink:href="#_002asjd0145f98c06sku"/>
  <part-link xlink:role="object" xlink:title="Class EKA_Property&#10;" xlink:href="#_002asje013tjoooo5pr4"/>
  <part-link xlink:role="object" xlink:title="Class CVW_MenuTree&#10;" xlink:href="#_002asjg014c2omdm04hr"/>
  <part-link xlink:role="object" xlink:title="Function getCVWmodel" xlink:href="#_002asjl01df812jtoh62"/>
  <part-link xlink:role="object" xlink:title="Class CVW_CircularLayout&#10;" xlink:href="#_002ask0025779hdakt36"/>
  <part-link xlink:role="object" xlink:title="Class CVW_Workspace" xlink:href="#_002ask0025hc03qbnha6"/>
  <part-link xlink:role="object" xlink:title="Sub configureCVWcomponent" xlink:href="#_002ask100rfrjmjr5sni"/>
  <part-link xlink:role="object" xlink:title="Sub resetCVWcomponent" xlink:href="#_002ask100rhe34g4akuf"/>
  <part-link xlink:role="object" xlink:title="Function findCVWcomponent" xlink:href="#_002ask100rj1vbaut17c"/>
  <part-link xlink:role="object" xlink:title="Function viewExists" xlink:href="#_002ask301crpfu5k5ie8"/>
  <part-link xlink:role="object" xlink:title="Class CVW_MenuAction" xlink:href="#_002ask401587s2ov7fp5"/>
  <part-link xlink:role="object" xlink:title="Class CVW_Object" xlink:href="#_002ask5018nbv9mcnm5d"/>
  <part-link xlink:role="object" xlink:title="Function findInstModel" xlink:href="#_002ask501f2mk407o9ri"/>
  <part-link xlink:role="object" xlink:title="Sub copyPropertyValues" xlink:href="#_002ask501ir2e0r3b061"/>
  <part-link xlink:role="object" xlink:title="Class EKA_Context&#10;" xlink:href="#_002ask70127nuosr5tis"/>
  <part-link xlink:role="object" xlink:title="Sub relocate" xlink:href="#_002ask70247pvb4q1ble"/>
  <part-link xlink:role="object" xlink:title="Function instancesInModel" xlink:href="#_002ask800s0j83rhe8bt"/>
  <part-link xlink:role="object" xlink:title="Function findParts" xlink:href="#_002ask801bsu5ne1tf0u"/>
  <part-link xlink:role="object" xlink:title="Function buildInstRules, buildRelRules" xlink:href="#_002ask901aavg0a9fq9u"/>
  <part-link xlink:role="object" xlink:title="Class CVW_InstRule,  CVW_RelRule" xlink:href="#_002ask901e9l3j13kn7d"/>
  <part-link xlink:role="object" xlink:title="Function isInView" xlink:href="#_002aski012b5i49rod62"/>
  <bundle-rules>
   <bundle-rule>
    <origin-link xlink:role="model" xlink:title="CVW Script Library" xlink:href="#_002asj602701vd83c0rc" xlink:actuate="user"/>
    <target-link xlink:role="model" xlink:title="CVW Script Library" xlink:href="#_002asj602701vd83c0rc" xlink:actuate="user"/>
   </bundle-rule>
  </bundle-rules>
  <bundle>
   <relationship-link xlink:role="relationship" xlink:href="#_002ask701treatrjkfbo"/>
  </bundle>
 </model>

 <object id="_002asj60272bqgti3c9a">
  <valueset size="3" xlink:role="type" xlink:title="Container" xlink:href="metis:stdtypes#oid3" xlink:actuate="user">
   <string name="name">EKA Classes</string>
   <string name="description"></string>
   <string name="externalID"></string>
  </valueset>
 </object>

 <object id="_002asj602731tohevjet">
  <valueset size="3" xlink:role="type" xlink:title="Container" xlink:href="metis:stdtypes#oid3" xlink:actuate="user">
   <string name="name">CVW Classes</string>
   <string name="description"></string>
   <string name="externalID"></string>
  </valueset>
 </object>

 <object id="_002asj6027323dphmg96">
  <valueset size="3" xlink:role="type" xlink:title="Container" xlink:href="metis:stdtypes#oid3" xlink:actuate="user">
   <string name="name"></string>
   <string name="description"></string>
   <string name="externalID"></string>
  </valueset>
  <part-link xlink:role="object" xlink:title="EKA Classes" xlink:href="#_002asj60272bqgti3c9a"/>
  <part-link xlink:role="object" xlink:title="CVW Classes" xlink:href="#_002asj602731tohevjet"/>
  <part-link xlink:role="object" xlink:title="Utilities" xlink:href="#_002asj60273283vqvfr0"/>
  <part-link xlink:role="object" xlink:title="Context" xlink:href="#_002ask701tmsf9rqqa6k"/>
 </object>

 <object id="_002asj60273283vqvfr0">
  <valueset size="3" xlink:role="type" xlink:title="Container" xlink:href="metis:stdtypes#oid3" xlink:actuate="user">
   <string name="name">Utilities</string>
   <string name="description"></string>
   <string name="externalID"></string>
  </valueset>
 </object>

 <object id="_002asj6028o9465h5hug">
  <valueset size="10" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="../languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Function isEnabled</string>
   <string name="description"></string>
   <integer name="dbms-admin.commitFlag">1</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20070306 212450784</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="comments"></string>
   <string name="script">option explicit

    function isEnabled(inst)
        on error resume next
        isEnabled = true
        if isEmpty(inst) then
            isEnabled = false
        elseif isNull(inst) then
            isEnabled = false
        elseif inst is Nothing then
            isEnabled = false
        elseif not inst.isValid then
            isEnabled = false
        end if
    end function

</string>
  </valueset>
 </object>

 <object id="_002asj6028rh529dh8bp">
  <valueset size="10" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="../languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Function isValid</string>
   <string name="description"></string>
   <integer name="dbms-admin.commitFlag">0</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20070118 052833657</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="comments"></string>
   <string name="script">option explicit

    function isValid(inst)
        isValid = true
        if isEmpty(inst) then
            isValid = false
        elseif isNull(inst) then
            isValid = false
        elseif inst is Nothing then
            isValid = false
        end if
    end function
</string>
  </valueset>
 </object>

 <object id="_002asj6028se6qftnj9o">
  <valueset size="10" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="../languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Function hasInstance</string>
   <string name="description"></string>
   <integer name="dbms-admin.commitFlag">0</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20070118 185424518</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="comments"></string>
   <string name="script">option explicit

    function hasInstance(instView)
        hasInstance = false
        if isValid(instView) then
            if instView.hasInstance then
                hasInstance = true
            end if
        end if
    end function
</string>
  </valueset>
 </object>

 <object id="_002asj60293vp049tq4d">
  <valueset size="10" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="../languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Class CVW_ArgumentValue</string>
   <string name="description"></string>
   <integer name="dbms-admin.commitFlag">1</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20070214 161356507</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="comments"></string>
   <string name="script">option explicit

Class CVW_ArgumentValue

    Private argType
    Private argsType
    Private propertyType
    Private equalsType
    Private hasArgType
    Private hasArg2Type
    Private hasArgsType
    Private hasPropertyType
    Private valueProperty
    Private tempValueProperty
    Private datatypeProperty
    Private buttonType
    Private isType
    Private hasValueType

   &#39;---------------------------------------------------------------------------------------------------
    Public Function findArgument(inst, argName)
        dim argument, arguments, group, groups
        dim parent, parents
        dim found

        set findArgument = Nothing
        found = false
        set arguments = inst.getNeighbourObjects(0, hasPropertyType, propertyType)
        for each argument in arguments
            if argument.name = argName then
                set findArgument = argument
                found = true
                exit for
            end if
        next
        if not found then
            &#39; Check if property has properties
            set groups = inst.getNeighbourObjects(0, hasPropertyType, propertyType)
            for each group in groups
                set arguments = group.getNeighbourObjects(0, hasPropertyType, propertyType)
                for each argument in arguments
                    if argument.name = argName then
                        set findArgument = argument
                        found = true
                        exit for
                    end if
                next
            next
        end if
        if not found then
            &#39; Check if action inherits from other actions
            set parents = inst.getNeighbourObjects(0, isType, buttonType)
            for each parent in parents
                if isEnabled(parent) then
                    set findArgument = findArgument(parent, argName)
                    if isEnabled(findArgument) then
                        found = true
                        exit for
                    end if
                end if
            next
        end if
        if not found then
            set arguments = inst.getNeighbourObjects(0, hasArgType, argType)
            for each argument in arguments
                if argument.name = argName then
                    set findArgument = argument
                    found = true
                    exit for
                end if
            next
        end if
        if not found then
            &#39; Check if argument groups
            set groups = inst.getNeighbourObjects(0, hasArgsType, argsType)
            for each group in groups
                set arguments = group.getNeighbourObjects(0, hasArg2Type, argType)
                for each argument in arguments
                    if argument.name = argName then
                        set findArgument = argument
                        found = true
                        exit for
                    end if
                next
            next
        end if
        if not found then
            set arguments = inst.parts
            for each argument in arguments
                if isEnabled(argument) then
                    if argument.type.uri = argType.uri then
                        if argument.name = argName then
                            set findArgument = argument
                            found = true
                            exit for
                        end if
                    end if
                end if
            next
        end if
    End Function

   &#39;---------------------------------------------------------------------------------------------------
    Public Function getArgumentValue(inst, argName)
        dim argument, arguments

        getArgumentValue = &#34;&#34;
        set argument = findArgument(inst, argName)
        if isEnabled(argument) then
            getArgumentValue = argument.getNamedStringValue(valueProperty)
        end if
    End Function

   &#39;---------------------------------------------------------------------------------------------------
    Public Function getConfiguredValue(inst, argName)
        dim argument, arguments

        getConfiguredValue = &#34;&#34;
        set argument = findArgument(inst, argName)
        if isEnabled(argument) then
            getConfiguredValue = argument.getNamedStringValue(tempValueProperty)
            if Len(getConfiguredValue) = 0 then
                getConfiguredValue = argument.getNamedStringValue(valueProperty)
            end if
        end if
    End Function

    &#39;---------------------------------------------------------------------------------------------------
    Public Function getArgValue(component, configObject, argName)
        dim argument, arguments
        dim prop, props
        dim obj, objects
        dim spec, specs
        dim found

        getArgValue = &#34;&#34;
        found = false
        set arguments = component.getNeighbourObjects(0, hasPropertyType, propertyType)
        for each argument in arguments
            if argument.name = argName then
                &#39; Follow equals to find configuring property
                set props = argument.getNeighbourObjects(0, equalsType, propertyType)
                for each prop in props
                    &#39; Check if property belongs to the configuring object
                    set objects = prop.getNeighbourRelationships(1, hasPropertyType)
                    for each obj in objects
                        if obj.uri = configObject.uri then
                            &#39; Check for specification container
                            set specs = prop.getNeighbourRelationships(0, hasValueType)
                            if specs.count &#62; 0 then
                                for each spec in specs
                                    if isEnabled(spec) then
                                        getArgValue = spec.uri
                                        found = true
                                        exit for
                                    end if
                                next
                            else
                                &#39; No specification container - just get the value
                                getArgValue = prop.getNamedStringValue(valueProperty)
                                found = true
                            end if
                        end if
                        if found then exit for
                    next
                    if found then exit for
                next
            end if
        next
        if not found then
            getArgValue = getArgumentValue(component, argName)
        end if
    End Function

    &#39;---------------------------------------------------------------------------------------------------

    Private Sub Class_Initialize
        set propertyType    = metis.findType(&#34;http://xml.activeknowledgemodeling.com/eka/languages/eka_property.kmd#ObjType_EKA:Property_UUID&#34;)
        set hasPropertyType = metis.findType(&#34;http://xml.activeknowledgemodeling.com/eka/languages/eka_relships.kmd#RelType_EKA:HasProperty_UUID&#34;)
        set argType         = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/action_objects.kmd#ObjType_CVW:ActionArgument_UUID&#34;)
        set argsType        = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/action_objects.kmd#ObjType_CVW:ActionArguments_UUID&#34;)
        set hasArgType      = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/action_relships.kmd#RelType_CVW:hasArgument_UUID&#34;)
        set hasArg2Type     = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/action_relships.kmd#RelType_CVW:hasArgument2_UUID&#34;)
        set hasArgsType     = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/action_relships.kmd#RelType_CVW:hasArguments_UUID&#34;)
        set buttonType      = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/action_objects.kmd#ObjType_CVW:Button_UUID&#34;)
        set isType          = metis.findType(&#34;http://xml.activeknowledgemodeling.com/eka/languages/eka_relships.kmd#RelType_EKA:Is_UUID&#34;)
        set hasValueType    = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/cvw_relships.kmd#RelType_CVW:hasValue_UUID&#34;)
        set equalsType      = metis.findType(&#34;http://xml.activeknowledgemodeling.com/eka/languages/eka_relships.kmd#RelType_EKA:Equals_UUID&#34;)
        valueProperty       = &#34;value&#34;
        tempValueProperty   = &#34;tempvalue&#34;
        datatypeProperty    = &#34;datatype&#34;
    End Sub
   &#39;---------------------------------------------------------------------------------------------------

End Class

</string>
  </valueset>
 </object>

 <object id="_002asj60295oc1kdekg3">
  <valueset size="10" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="../languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Class CVW_Window</string>
   <string name="description"></string>
   <integer name="dbms-admin.commitFlag">0</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20070306 222400398</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="comments"></string>
   <string name="script">option explicit


&#39;-----------------------------------------------------------
&#39;-----------------------------------------------------------
Class CVW_Window

    Public title                  &#39; String
    Public size                   &#39; IMetisRect
    Public layoutStrategy         &#39; IMetisInstance
    Public objectView             &#39; IMetisObjectView
    Private model                 &#39; IMetisModel
    Private modelView             &#39; IMetisModelView
    Private noSubWindows          &#39; Integer
    Private subWindows()          &#39; Array of CVW_Window&#39;s
    Private pos                   &#39; Enum of strings

&#39;-----------------------------------------------------------
    Public Function create(name, winType, parentView)    &#39; as Boolean
        dim parent, obj, window

        create = false
        if isEnabled(parentView) then
            if parentView.hasInstance then
                set parent = parentView.instance
                set obj = parent.newPart(winType)
	            call obj.setNamedStringValue(&#34;name&#34;, name)
	            set window = parentView.newObjectView(obj)
                if isEnabled(window) then
                    set objectView = window
                    title = name
                    create = true
                end if
            end if
        end if
    End Function

&#39;-----------------------------------------------------------
    Public Function find(name, winType, parentView)      &#39; as Boolean
        dim objViews, objView, obj

        find = false
        if isValid(parentView) then
            set objViews = parentView.children
            for each objView in objViews
                if isEnabled(objView) then
                    if objView.hasInstance then
                        set obj = objView.instance
                        if obj.name = name then
                            set objectView = objView
                            find = true
                            exit for
                        end if
                    end if
                end if
            next
        end if
    End Function

&#39;-----------------------------------------------------------
    Public Function find2(winType, parentView, instView)      &#39; as Boolean
        dim objViews, objView, obj

        find2 = false
        if isValid(parentView) then
            set objViews = parentView.children
            for each objView in objViews
                if isEnabled(objView) then
                    if objView.uri = instView.uri then
                        set objectView = objView
                        find2 = true
                        exit for
                    end if
                end if
            next
        end if
    End Function

&#39;-----------------------------------------------------------
    Public Sub addSubWindow(pos, name, winType)
        dim cvwWin
        dim indx, found
        
        found = false
        for indx = 1 to noSubWindows
            set cvwWin = subWindows(indx)
            if not cvwWin is Nothing then
                if cvwWin.title = name and cvwWin.Position = pos then
                    found = true
                    exit for
                end if
            end if
        next
        if not found then
            set cvwWin = new CVW_Window
            call cvwWin.create(name, winType, objectView)
            cvwWin.title = name
            cvwWin.Position = pos
            &#39; Maintain the array
            noSubWindows = noSubWindows + 1
            ReDim Preserve subWindows(noSubWindows)
            set subWindows(noSubWindows) = cvwWin
        end if

    End Sub

&#39;-----------------------------------------------------------
    Public Sub removeSubWindow(pos, name, winType)
        dim cvwWin
        dim indx, ix, found

        found = false
        for indx = 1 to noSubWindows
            set cvwWin = subWindows(indx)
            if not cvwWin is Nothing then
                if cvwWin.title = name and cvwWin.Position = pos then
                    found = true
                    cvwWin.remove
                    if indx = noSubWindows then
                        noSubWindows = noSubWindows - 1
                        ReDim Preserve subWindows(noSubWindows)
                    end if
                    exit for
                end if
            end if
        next
        if found  and indx &#60; noSubWindows then
            for ix = indx to noSubWindows - 1
                set subWindows(ix) = subWindows(ix + 1)
            next
            noSubWindows = noSubWindows - 1
            ReDim Preserve subWindows(noSubWindows)
        end if

    End Sub

&#39;-----------------------------------------------------------
    Public Sub clean()
        dim children, childView

        if isEnabled(objectView) then
            set children = objectView.children
            for each childView in children
                modelView.deleteObjectView(childView)
            next
        end if
    End Sub

&#39;-----------------------------------------------------------
    Public Sub remove()
        if isEnabled(model) and isEnabled(objectView) then
            if objectView.hasInstance then
                call model.deleteObject(objectView.instance)
                set objectView = Nothing
            end if
        end if
    End Sub

&#39;-----------------------------------------------------------
    Public Sub populate()
    End Sub

&#39;-----------------------------------------------------------
    Public Sub doLayout()
        if isEnabled(objectView) then
            call metis.doLayout(objectView)
        end if
    End Sub

&#39;-----------------------------------------------------------
    Public Sub doParentLayout()
        if isEnabled(objectView) then
            call metis.doLayout(objectView.parent)
        end if
    End Sub

&#39;-----------------------------------------------------------
    Public Property Let Position(strPos)
        select case strPos
            case &#34;Top&#34;    pos = 1
            case &#34;Bottom&#34; pos = 2
            case &#34;Left&#34;   pos = 3
            case &#34;Right&#34;  pos = 4
        End select
    End Property

    Public Property Get Position
        Select Case pos
            case 1  Position = &#34;Top&#34;
            case 2  Position = &#34;Bottom&#34;
            case 3  Position = &#34;Left&#34;
            case 4  Position = &#34;Right&#34;
        End Select
    End Property

&#39;-----------------------------------------------------------
    Public Sub Class_Initialize()
        set model = metis.currentModel
        set modelView = model.currentModelView
        set objectView = Nothing
        set size = Nothing
        set layoutStrategy = Nothing
        noSubWindows = 0
        ReDim subWindows(noSubWindows)
    End Sub

&#39;-----------------------------------------------------------
    Public Sub Class_Terminate()
    End Sub


&#39;------------------------------------------------------------------------------------------
&#39; -------------------------ST ----------------------------------------------------------
&#39;------------------------------------------------------------------------------------------

    Public Function getInstView(objectType, propertyName, PropertyValue)
     dim inst

     set inst = model.findInstances(objectType ,propertyName,PropertyValue)
     if inst.count &#62; 0 then
        set getInstView =  inst.item(1).views(1)
    else
        set getInstView = Nothing
   end if
   End Function

&#39;-----------------------------------------------------------
    Public Sub populateMenu(objectMenu, objectTargetType)
    &#39;[a]-------------------------------
        Dim objectMenuType, objectMenuItems
        Dim  newObjectMenu, newObjectMenuView, objectMenuView

           For each objectMenuItems in objectMenu.instance.neighbourRelationships
              Set newObjectMenu = objectMenuItems.target
              if objectMenuItems.target.type.uri = objectTargetType.uri THEN
                  if objectMenuItems.target.title &#60;&#62; objectMenu.title THEN
                       Set newObjectMenuView                 = objectView.newObjectView(newObjectMenu)
                       newobjectMenuView.openSymbol    = newObjectMenu.Views(1).openSymbol
                       newobjectMenuView.closedSymbol  = newObjectMenu.Views(1).closedSymbol
                       newobjectMenuView.textScale         = 0.08
                       newobjectMenuView.close
                  end if
              end if
            next

    End Sub


End Class
&#39;-----------------------------------------------------------
&#39;-----------------------------------------------------------

</string>
  </valueset>
 </object>

 <object id="_002asj7020mpovuqbbcp">
  <valueset size="10" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="../languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Class CVW_ContentSpecification</string>
   <string name="description"></string>
   <integer name="dbms-admin.commitFlag">0</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20070308 143036115</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="comments"></string>
   <string name="script">option explicit


&#39;-----------------------------------------------------------
&#39;-----------------------------------------------------------
Class CVW_ContentSpecification   &#39; A CVW Component

    &#39; Variant parameters
    Public Title
    Public ContextMode                   &#39; String
    Public SearchMode                    &#39; String
    Public SpecificationModel            &#39; String

    &#39; Context variables
    Public  currentModel
    Public  currentModelView
    Public currentInstance
    Public currentInstanceView
    Private cObject                      &#39; Component object   - IMetisInstance
    Private aObject                      &#39; Configuring object - IMetisInstance

    &#39; Types
    Private isTopType                    &#39; IMetisType
    Private propertyType                 &#39; IMetisType
    Private hasValueConstraintType       &#39; IMetisType

    &#39; Others
    Private cvwArg                       &#39; CVW_ArgumentValue
    Private specObject                   &#39; IMetisInstance
    Private specObjectView               &#39; IMetisInstanceView
    Private instances                    &#39; Collection of IMetisInstance
    Private datatypeProp                 &#39; String
    Private operatorProp                 &#39; String
    Private valueProp                    &#39; String
    
    Private noTopObjectRules
    Private topObjectRules()
    Private noObjectRules
    Private objectRules()
    Public  noPathRules
    Public  pathRules()
    Private noRelRules
    Private relRules()

&#39;-----------------------------------------------------------
    Public Property Get component           &#39;IMetisObject
        set component = cObject
    End Property

    Public Property Set component(obj)
        if isEnabled(obj) then
            set cObject = obj
        end if
    End Property

&#39;-----------------------------------------------------------
    Public Property Get configObject           &#39;IMetisObject
        set configObject = aObject
    End Property

    Public Property Set configObject(obj)
        if isEnabled(obj) then
            set aObject = obj
        end if
    End Property

&#39;-----------------------------------------------------------
    &#39; Build internal structures
    Public Sub build
        &#39; Find configuring parameter values
        SearchMode         = cvwArg.getConfiguredValue(component, &#34;SearchMode&#34;)                  &#39; SelectAll | SelectOneFromList | SelectManyFromList
        ContextMode        = cvwArg.getConfiguredValue(component, &#34;ContextMode&#34;)                 &#39; CurrentModel | SubModel
        SpecificationModel = cvwArg.getConfiguredValue(component, &#34;ContentSpecification_Model&#34;)
        if Len(SpecificationModel)&#62; 0 then
            set specObject = metis.findInstance(SpecificationModel)
            if isEnabled(specObject) then
                set specObjectView = specObject.views(1)
            end if
        end if
   End Sub

&#39;-----------------------------------------------------------
    &#39; Configure used components
    Public Sub configure
        &#39; Only relevant if this component uses other components
    End Sub

&#39;-----------------------------------------------------------
    &#39; Execute: Find the instances and return the result
    Public Function execute
        dim rel, relships, relList, pathList, pathRel
        dim inst, insts
        dim instType
        dim childView, children
        dim contView
        dim askForType
        dim i, j, rule

        set execute = Nothing
        &#39; Check if this is a path specification
        &#39; If so, only find the top objects
        if not isEnabled(specObject) then
            exit function
        end if
        set relships = specObject.getNeighbourRelationships(0, isTopType)
        if relships.count &#62; 0 then
            &#39; This is a path query - find top object types and path rules
            for each rel in relships
                set inst = rel.target
                set instType = inst.type
                if isEnabled(instType) then
                    call buildInstRules(inst, topObjectRules, noTopObjectRules, hasValueConstraintType)
                    call buildRelRules(inst, pathRules, noPathRules, isTopType)
                end if
            next
        else
            &#39; Find all object types
            if SearchMode = &#34;SelectTypeFromList&#34; then
                askForType = true
                set insts = metis.newInstanceList
            else
                askForType = false
            end if
            set children = specObjectView.children
            for each childView in children
                if hasInstance(childView) then
                    set inst = childView.instance
                    if isEnabled(inst) and not isSpecificationObject(inst) and not inst.isRelationship then
                        set instType = inst.type
                        if isEnabled(instType) then
                            if askForType then
                                if not instanceInList(inst, insts) then
                                    insts.addLast inst
                                end if
                            else
                                call buildInstRules(inst, objectRules, noObjectRules, hasValueConstraintType)
                            end if
                        end if
                    end if
                end if
            next
            &#39; Find all relationship types
            for each childView in children
                if hasInstance(childView) then
                    set inst = childView.instance
                    if isEnabled(inst) and inst.isRelationship then
                        set instType = inst.type
                        if isEnabled(instType) then
                            call buildRelRule(inst, inst.origin, relRules, noRelRules, isTopType)
                        end if
                    end if
                end if
            next
        end if
        &#39; Now all content specification rules are captured
        &#39; Go on to finding the instances
        if noTopObjectRules &#62; 0 then
            set pathList = metis.newInstanceList
            for i = 1 to noTopObjectRules
                set rule = topObjectRules(i)
                if isValid(rule) then
                    set insts = findConstrainedInstances(rule)
                    if isValid(insts) then
                        for each inst in insts
                            if not instanceInList(inst, instances) then
                                instances.addLast inst
                            end if
                        next
                    end if
                end if
            next
        elseif noObjectRules &#62; 0 then
            &#39; This is an instance search
            for i = 1 to noObjectRules
                set rule = objectRules(i)
                if isValid(rule) then
                    set insts = findConstrainedInstances(rule)
                    if isValid(insts) then
                        for each inst in insts
                            if not instanceInList(inst, instances) then
                                instances.addLast inst
                            end if
                        next
                    end if
                end if
            next
        elseif isValid(insts) then
            if insts.count &#62; 0 then
                set instances = getInstancesSelectedFromList(insts, SearchMode)
            end if
        end if
        if not askForType and instances.count &#62; 0 then
            set instances = getInstancesSelectedFromList(instances, SearchMode)
        end if
        if instances.count &#62; 0 then
            &#39; Check connected relationships
            if isValid(pathList) then
                for each inst in instances
                    call addPathToList(inst, pathList)
                    for each pathRel in pathList
                        if not instanceInList(pathRel, instances) then
                            instances.addLast pathRel
                        end if
                    next
                next
                for each inst in instances
                    if inst.isObject then
                        call addPathToList(inst, pathList)
                        for each pathRel in pathList
                            if not instanceInList(pathRel, instances) then
                                instances.addLast pathRel
                            end if
                        next
                    end if
                next
            end if
        end if
        if noRelRules &#62; 0 then
            &#39; Find the relationships
            for j = 1 to 2
                for i = 1 to noRelRules
                    set rule = relRules(i)
                    if isValid(rule) then
                        set relList = metis.newInstanceList
                        set insts = findRelationships(relList, instances, rule)
                        if isValid(insts) then
                            for each inst in insts
                                if not instanceInList(inst, instances) then
                                    instances.addLast inst
                                end if
                            next
                        end if
                        set relList = Nothing
                    end if
                next
            next
        end if
        set execute = instances
    End Function

   &#39;---------------------------------------------------------------------------------------------------
    Private Function getInstancesSelectedFromList(instances, searchMode)
        dim cvwSelectDialog, context
        dim instType, contentModel
        dim askForType

        &#39; Handle select dialog if specified
        askForType = false
        if searchMode = &#34;SelectAll&#34; then
            set getInstancesSelectedFromList = instances
        else
            set cvwSelectDialog = new CVW_SelectDialog
            if searchMode = &#34;SelectOneFromList&#34; then
                cvwSelectDialog.singleSelect = true
            elseif searchMode = &#34;SelectManyFromList&#34; then
                cvwSelectDialog.singleSelect = false
            elseif searchMode = &#34;SelectTypeFromList&#34; then
                cvwSelectDialog.singleSelect = true
                askForType = true
            end if
            set getInstancesSelectedFromList = cvwSelectDialog.show(instances)
            if askForType then
                set instances = getInstancesSelectedFromList
                if instances.count = 1 then
                    set instType = instances(1).type
                    &#39; Find all instances of this type
                    set context = new EKA_Context
                    if isValid(context) then
                        set context.currentModel = currentModel
                        set context.currentModelView = currentModelView
                        set contentModel = context.contentModel
                    end if
                    set instances = findParts(contentModel, instType, &#34;&#34;, &#34;&#34;)
                    if instances.count &#62; 0 then
                        cvwSelectDialog.singleSelect = false
                        set getInstancesSelectedFromList = cvwSelectDialog.show(instances)
                    else
                        set getInstancesSelectedFromList = instances
                    end if
                end if
            end if
            set cvwSelectDialog = Nothing
        end if
    End Function

&#39;-----------------------------------------------------------
    Private Function findConstrainedInstances(rule)
        DIM contentModel, context
        dim instType, insts, inst
        dim relships, rels, rel
        dim prop, propName, propValue, value
        dim datatype, operator
        dim i, removed

        set findConstrainedInstances = Nothing
        &#39;set contentModel = findInstModel(ContextMode, &#34;ContentModel&#34;)
        set context = new EKA_Context
        if isValid(context) then
            set context.currentModel = currentModel
            set context.currentModelView = currentModelView
            set contentModel = context.contentModel
        end if
        if isValid(rule) and isEnabled(contentModel) then
            set metis.currentModel = currentModel
            set currentModel.currentModelView = currentModelView
            if rule.operator = &#34;eq&#34; then
                set insts = findParts(contentModel, rule.instType, rule.propname, rule.propvalue)
            end if
            if not isValid(insts) then
                set insts = findParts(contentModel, rule.instType, &#34;&#34;, &#34;&#34;)
                if insts.count &#62; 0 then
                    for each inst in insts
                        i = 1
                        removed = false
                        if isEnabled(inst) then
                            if not valueIsValid(inst, rule.propname, rule.operator, rule.propvalue) then
                                insts.removeAt(i)
                                removed = true
                            end if
                            if not removed then
                                i = i + 1
                            end if
                        end if
                    next
                end if
            end if
            if insts.count &#62; 0 then
                set findConstrainedInstances = insts
            end if
        end if
    End Function


   &#39;---------------------------------------------------------------------------------------------------
    Private Sub addPathToList(inst, instances)
        dim rule
        dim rel, rels
        dim j

        if isEnabled(inst) and isValid(instances) then
            for j = 1 to noPathRules
                set rule = pathRules(j)
                if isValid(rule) then
                    set rels = inst.getNeighbourRelationships(rule.relDir, rule.relType)
                    for each rel in rels
                        if rule.relDir = 0 then
                            if rel.target.type.uri = rule.childType.uri then
                                if not instanceInList(rel, instances) then
                                    instances.addLast rel
                                end if
                                if not instanceInList(rel.target, instances) then
                                    instances.addLast rel.target
                                end if
                            end if
                        else
                            if rel.origin.type.uri = rule.parentType.uri then
                                if not instanceInList(rel, instances) then
                                    instances.addLast rel
                                end if
                                if not instanceInList(rel.origin, instances) then
                                    instances.addLast rel.origin
                                end if
                            end if
                        end if
                    next
                end if
            next
        end if
    End Sub

   &#39;---------------------------------------------------------------------------------------------------
    Private Function findRelationships(relList, objects, rule)
        dim obj
        dim rel, rels
        dim indx
        dim type1, type2

        for each obj in objects
            set rels = obj.neighbourRelationships
            if isValid(rels) then
                for each rel in rels
                    if rel.origin.uri = obj.uri then
                        if rule.relDir = 0 then
                            set type1 = rule.parentType
                            set type2 = rule.childType
                        else
                            set type1 = rule.childType
                            set type2 = rule.parentType
                        end if
                        if rel.type.uri = rule.relType.uri then
                            if rel.origin.type.uri = type1.uri then
                                if rel.target.type.uri = type2.uri then
                                    if not instanceInList(rel, relList) then
                                        if instanceInList(rel.target, objects) then
                                            relList.addLast rel
                                        end if
                                    end if
                                end if
                            end if
                        end if
                    end if
                next
            end if
        next
        set findRelationships = relList
    End Function

&#39;-----------------------------------------------------------
    Private Function valueIsValid(inst, propName, operator, value)
        dim propValue, numValue, stringValue, strValue
        dim isNumber, number

        valueIsValid = false
        if Len(propName) = 0 then
            valueIsValid = true
            exit function
        end if
        set propValue = inst.getNamedValue(propName)
        if propValue.isInteger then
            isNumber = true
            numValue = propValue.getInteger
            if value = &#34;true&#34; then 
                value = &#34;1&#34;
            elseif value = &#34;false&#34; then 
                value = &#34;0&#34;
            end if
            number = CInt(value)
        elseif propValue.isFloat then
            isNumber = true
            numValue = propValue.getFloat
            number = CDbl(value)
        else
            isNumber = false
            stringValue = propValue.getString
        end if
        if isNumber then
            select case operator
            case &#34;lt&#34;
                if numValue &#60; number then
                    valueIsValid = true
                end if
            case &#34;le&#34;
                if numValue &#60;= number then
                    valueIsValid = true
                end if
            case &#34;eq&#34;
                if numValue = number then
                    valueIsValid = true
                end if
            case &#34;ne&#34;
                if numValue &#60;&#62; number then
                    valueIsValid = true
                end if
            case &#34;ge&#34;
                if numValue &#62;= number then
                    valueIsValid = true
                end if
            case &#34;gt&#34;
                if numValue &#62; number then
                    valueIsValid = true
                end if
            end select
        else
            select case operator
            case &#34;eq&#34;
                if stringValue = value then
                    valueIsValid = true
                end if
            case &#34;ne&#34;
                if stringValue &#60;&#62; value then
                    valueIsValid = true
                end if
            end select
        end if

    End Function

&#39;-----------------------------------------------------------
    Private Function isSpecificationObject(inst)
        dim rels

        isSpecificationObject = false
        if isEnabled(inst) then
            set rels = inst.getNeighbourRelationships(1, hasValueConstraintType)
            if rels.count &#62; 0 then
                isSpecificationObject = true
            end if
        end if
    End Function

&#39;-----------------------------------------------------------
    Private Sub addRelType(rtype)
        dim relType
        dim indx, found

        found = false
        for indx = 1 to noRelTypes
            set relType = relTypes(indx)
            if isValid(relType) then
                if relType.uri = rtype.uri then
                    found = true
                    exit for
                end if
            end if
        next
        if not found then
            noRelTypes = noRelTypes + 1
            ReDim Preserve relTypes(noRelTypes)
            set relTypes(noRelTypes) = rtype
        end if
    End Sub

&#39;-----------------------------------------------------------
    Private Sub addTypeToList(itype, list, no)
        dim instType
        dim indx, found

        found = false
        for indx = 1 to no
            set instType = list(indx)
            if isValid(instType) then
                if instType.uri = itype.uri then
                    found = true
                    exit for
                end if
            end if
        next
        if not found then
            no = no + 1
            ReDim Preserve list(no)
            set list(no) = itype
        end if
    End Sub


&#39;-----------------------------------------------------------
    Private Sub Class_Initialize()
        dim instView, children

        set currentModel     = metis.currentModel
        set currentModelView = currentModel.currentModelView
        set currentInstance     = currentModel.currentInstance
        set currentInstanceView = currentModelView.currentInstanceView
        set cObject   = currentInstance
        set aObject   = currentInstance
        set cvwArg    = new CVW_ArgumentValue
        &#39; Correct current model
        set instView  = currentModelView.currentInstanceView
        set children = currentModelView.children
        &#39; Types
        set isTopType              = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/spec_relships.kmd#RelType_CVW:isTop_UUID&#34;)
        set hasValueConstraintType = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/spec_relships.kmd#RelType_CVW:hasValueConstraint_UUID&#34;)
        set propertyType           = metis.findType(&#34;http://xml.activeknowledgemodeling.com/eka/languages/eka_property.kmd#ObjType_EKA:Property_UUID&#34;)
        &#39; Others
        set instances = metis.newInstanceList
        datatypeProp  = &#34;datatype&#34;
        operatorProp  = &#34;operator&#34;
        valueProp     = &#34;value&#34;
    End Sub

&#39;-----------------------------------------------------------
    Private Sub Class_Terminate()
        set cvwArg = Nothing
    End Sub

End Class

</string>
  </valueset>
 </object>

 <object id="_002asj7020r6sqhf7gk8">
  <valueset size="10" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="../languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Function instanceInList</string>
   <string name="description"></string>
   <integer name="dbms-admin.commitFlag">0</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20070118 185320747</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="comments"></string>
   <string name="script">option explicit

function instanceInList(instance, list)
  dim item
  instanceInList = false

  for each item in list
   if StrComp(instance.URI,item.URI) = 0 then instanceInList = true
  next
end function

</string>
  </valueset>
 </object>

 <object id="_002asj7029832idt4u9s">
  <valueset size="10" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="../languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Class CVW_SelectDialog</string>
   <string name="description"></string>
   <integer name="dbms-admin.commitFlag">0</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20070118 212057903</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="comments"></string>
   <string name="script">option explicit

Class CVW_SelectDialog

    Private dialog

&#39;-----------------------------------------------------------
    Public Property Let title(str1)
        if isValid(dialog) then
            dialog.title = str1
        end if
    End Property

&#39;-----------------------------------------------------------
    Public Property Let heading(str1)
        if isValid(dialog) then
            dialog.heading = str1
        end if
    End Property

&#39;-----------------------------------------------------------
    Public Property Let singleSelect(str1)
        if isValid(dialog) then
            dialog.singleSelect = str1
        end if
    End Property

&#39;-----------------------------------------------------------
    Public Function show(instances)
        set show = Nothing
        if isValid(dialog) and isValid(instances) then
            dialog.clear
            if instances.count &#62; 0 then
                dialog.addData instances
                set show = dialog.show
            end if
        end if
    End Function

&#39;-----------------------------------------------------------
    Public Sub Class_Initialize()
        set dialog = CreateObject(&#34;Metis.SelectDialog.&#34; &#38; metis.versionMajor &#38; &#34;.&#34; &#38; metis.versionMinor)
        if isValid(dialog) then
            with dialog
				.title = &#34;Select&#34;
				.heading = &#34;Select dialog&#34;
    .singleSelect = False
    .columnLabel = True
    .columnURI = False
    .columnType = False
            end with
  &#39;else
            &#39; Error handling
        end if
    End Sub

&#39;-----------------------------------------------------------
    Public Sub Class_Terminate()
        set dialog = Nothing
    End Sub

&#39;-----------------------------------------------------------

End Class</string>
  </valueset>
 </object>

 <object id="_002asj8016otki1udemj">
  <valueset size="10" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="../languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Function findInstanceView</string>
   <string name="description"></string>
   <integer name="dbms-admin.commitFlag">1</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20070120 141304928</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="comments"></string>
   <string name="script">Function findInstanceView(model, objectType, propertyName, propertyValue)
     dim insts, inst, views
     
    set findInstanceView = Nothing
    set insts = model.findInstances(objectType, propertyName, propertyValue)
    for each inst in insts
        if isEnabled(inst) then
            set views = inst.views
            if views.count &#62; 0 then
                set findInstanceView =  views(1)
                exit for
            end if
        end if
    next
End Function
</string>
  </valueset>
 </object>

 <object id="_002asj801aq2dr8okkmv">
  <valueset size="10" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="../languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Class CVW_ViewstyleSpecification
</string>
   <string name="description"></string>
   <integer name="dbms-admin.commitFlag">1</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20070124 070754703</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="comments"></string>
   <string name="script">option explicit


&#39;-----------------------------------------------------------
&#39;-----------------------------------------------------------
Class CVW_ViewstyleSpecification

    Public  title                       &#39; String
    Public viewStyle                    &#39; URI

    Private model
    Private modelView
    Private noObjectVisualizations      &#39; Integer
    Private noRelshipVisualizations     &#39; Integer
    Private objectVisualizations()      &#39; Array of CVW_ObjectVisualization
    Private relshipVisualizations()     &#39; Array of CVW_RelshipVisualization
    &#39; Types
    Private argumentType

&#39;-----------------------------------------------------------
    Public Sub build(spec_object)
        dim argObj
    
        if isEnabled(spec_object) then
            &#39; Check for viewstyle
            set argObj = new CVW_ArgumentValue
            viewStyle = argObj.getArgumentValue(spec_object, &#34;WorkareaViewstyle&#34;)
            &#39; Check for Object viewstyle specification object

            &#39; Check for Relship viewstyle specification object

        end if

    End Sub

&#39;-----------------------------------------------------------
    Public Sub setViewstyle
        on error resume next
        if Len(viewStyle) &#62; 0 then
            modelView.setViewStyle(viewStyle)
        end if
    End Sub

&#39;-----------------------------------------------------------
    Public Function findObjectVisualization(visTitle)
        dim indx, objVis

        set findObjectVisualization = Nothing
        for indx = 1 to noObjectVisualizations
            set objVis = objectVisualizations(indx)
            if not objVis is Nothing then
                if objVis.title = visTitle then
                    set findObjectVisualization = objVis
                    exit for
                end if
            end if
        next

    End Function

&#39;-----------------------------------------------------------
    Public Function findRelshipVisualization(visTitle)
        dim indx, relVis

        set findRelshipVisualization = Nothing
        for indx = 1 to noRelshipVisualizations
            set relVis = relshipVisualizations(indx)
            if not relVis is Nothing then
                if relVis.title = visTitle then
                    set findRelshipVisualization = relVis
                    exit for
                end if
            end if
        next

    End Function

&#39;-----------------------------------------------------------
    Public Sub addObjectVisualization(objVisualization)
        dim cvwObjVisualization
        dim indx, found

        found = false
        for indx = 1 to noObjectVisualizations
            set cvwObjVisualization = objectVisualizations(indx)
            if not cvwObjVisualization is Nothing then
                if cvwObjVisualization.title = objVisualization.title then
                    found = true
                    exit for
                end if
            end if
        next
        if not found then
            noObjectVisualizations = noObjectVisualizations + 1
            ReDim Preserve objectVisualizations(noObjectVisualizations)
            set objectVisualizations(noObjectVisualizations) = objVisualization
        end if
    End Sub

&#39;-----------------------------------------------------------
    Public Sub addRelshipVisualization(relVisualization)
        dim cvwRelVisualization
        dim indx, found

        found = false
        for indx = 1 to noRelshipVisualizations
            set cvwRelVisualization = relshipVisualizations(indx)
            if not cvwRelVisualization is Nothing then
                if cvwRelVisualization.title = relVisualization.title then
                    found = true
                    exit for
                end if
            end if
        next
        if not found then
            noRelshipVisualizations = noRelshipVisualizations + 1
            ReDim Preserve relshipVisualizations(noRelshipVisualizations)
            set relshipVisualizations(noRelshipVisualizations) = relVisualization
        end if
    End Sub

&#39;-----------------------------------------------------------
    Public Sub Class_Initialize()
        set model = metis.currentModel
        set modelView = model.currentModelView
        noObjectVisualizations = 0
        ReDim objectVisualizations(noObjectVisualizations)
        noRelshipVisualizations = 0
        ReDim relshipVisualizations(noRelshipVisualizations)
    End Sub

&#39;-----------------------------------------------------------
    Public Sub Class_Terminate()
    End Sub
End Class

&#39;-----------------------------------------------------------
&#39;-----------------------------------------------------------
Class CVW_ObjectVisualization

    Public title              &#39; String
    Public layoutStrategy     &#39; IMetisInstance
    Public symbolOpen         &#39; Uri
    Public symbolClosed       &#39; Uri
    Public icon               &#39; Uri
    Public scaleFactor        &#39; Float
    Public textFactor         &#39; Float
    Public fillColor          &#39; String
    Public lineColor          &#39; String

End Class

&#39;-----------------------------------------------------------
&#39;-----------------------------------------------------------
Class CVW_RelshipVisualization

    Public title             &#39; String
    Public lineColor         &#39; String
    Public lineWidth         &#39; Integer
    Public lineStyle         &#39; String
    Public arrowKind         &#39; String
    Public useAutoline       &#39; Boolean
    Public useSpline         &#39; Boolean
    Public showStartText     &#39; Boolean
    Public showMiddleText    &#39; Boolean
    Public showEndText       &#39; Boolean

End Class
</string>
  </valueset>
 </object>

 <object id="_002asja014sj0quajf7q">
  <valueset size="10" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="../languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Function generateTree</string>
   <string name="description"></string>
   <integer name="dbms-admin.commitFlag">0</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20070121 161233483</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="comments"></string>
   <string name="script">option explicit

    sub generateTree(sourceNodeView, targetNodeView, hasNodeType, nodeType, textScale, scaleFactor)    &#39; textScale = 0.05, scaleFactor = 1.3
        dim  node, itemView, newItemView

        if not (hasInstance(sourceNodeView) and isEnabled(nodeType) and isEnabled(hasNodeType)) then
            exit sub
        end if

        set node = sourceNodeView.instance
        For each itemView in node.getNeighbourRelationships(0, hasNodeType)
            set newItemView             = targetNodeView.newObjectView(itemView.target)
            newItemView.openSymbol      = itemView.target.Views(1).openSymbol
            newItemView.closedSymbol    = itemView.target.Views(1).closedSymbol
            newItemView.textScale       = textScale
            newItemView.geometry.width  = newItemView.parent.geometry.width * scaleFactor
            newItemView.geometry.height = newItemView.parent.geometry.height * scaleFactor
            newItemView.close
            newItemView.parent.open
        next
    end sub
</string>
  </valueset>
 </object>

 <object id="_002asja014v6prkuj8n4">
  <valueset size="10" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="../languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Function cleanTree</string>
   <string name="description"></string>
   <integer name="dbms-admin.commitFlag">0</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20070121 112458411</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="comments"></string>
   <string name="script">option explicit

    sub cleanTree(modelView, nodeView)
        dim  itemView

        for each itemView in nodeView.children
            call modelView.deleteObjectView(itemView)
        next

    end sub
</string>
  </valueset>
 </object>

 <object id="_002asja01opig6r3prga">
  <valueset size="10" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="../languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Class CVW_Action</string>
   <string name="description"></string>
   <integer name="dbms-admin.commitFlag">0</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20070206 122714721</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="comments"></string>
   <string name="script">option explicit

Class CVW_Action

    Private model
    Private modelView
    Private aObject
    Private kind
    Private kindProperty

    &#39; Types
    Private actionType
    Private hasContentSpecType
    Private specContainerType
    Private specRelType
    Private hasViewSpecificationType
    Private hasViewSpecification2Type
    Private hasLanguageSpecificationType
    Private hasViewStrategyType
    Private hasViewstyleType
    Private consistsOfType

    &#39; Arguments
    Private argContextMode
    Private argInputContainerName
    Private argInputContainerType
    Private argModelName
    Private argSearchMode
    Private argToolbarTitle
    Private argWorkareaTitle
    Private argWorkareaMode
    Private argWorkspaceMode
    Private argViewstyle

    &#39; CVW classes
    Private cvwArgValue

   &#39;---------------------------------------------------------------------------------------------------
    Public Property Get actionObject()
        set actionObject = aObject
    End Property

    Public Property Set actionObject(obj)
        if isEnabled(obj) then
            set aObject = obj
            call getArguments(cvwArgValue, aObject)
        end if
    End Property

   &#39;---------------------------------------------------------------------------------------------------
    Private Sub getArguments(cvwArgValue, obj)
        argContextMode   = cvwArgValue.getArgumentValue(obj, &#34;ContextMode&#34;)   &#39; CurrentModel | Repository | SubModel
        argSearchMode    = cvwArgValue.getArgumentValue(obj, &#34;SearchMode&#34;)    &#39; SelectAll | SelectOneFromList | SelectManyFromList
        argToolbarTitle  = cvwArgValue.getArgumentValue(obj, &#34;ToolbarTitle&#34;)  &#39; &#34;&#34; | &#34;Name of toolbar&#34;
        argWorkareaTitle = cvwArgValue.getArgumentValue(obj, &#34;WorkareaTitle&#34;) &#39; &#34;&#34; | &#34;Name of workarea&#34;
        if Len(argWorkareaTitle) = 0 then argWorkareaTitle = obj.title
        argWorkareaMode  = cvwArgValue.getArgumentValue(obj, &#34;WorkareaMode&#34;)  &#39; None | New | Reuse | ReuseAndClear
        if Len(argWorkareaMode) = 0 then argWorkareaMode = &#34;None&#34;
        argWorkspaceMode = cvwArgValue.getArgumentValue(obj, &#34;WorkspaceMode&#34;) &#39; Clear | NoAction
        argModelName          = cvwArgValue.getArgumentValue(obj, &#34;ModelName&#34;)
        argInputContainerType = cvwArgValue.getArgumentValue(obj, &#34;InputContainerType&#34;)
        argInputContainerName = cvwArgValue.getArgumentValue(obj, &#34;InputContainerName&#34;)
        argViewstyle          = cvwArgValue.getArgumentValue(obj, &#34;Viewstyle&#34;)
    End Sub

   &#39;---------------------------------------------------------------------------------------------------
    Public Sub initialize(aObj)
        set aObject = aObj
        &#39; Get arguments
        set cvwArgValue = new CVW_ArgumentValue
            call getArguments(cvwArgValue, aObject)
    End Sub

   &#39;---------------------------------------------------------------------------------------------------
    Public Sub execute
        dim contentModel, instances
        dim containers, cont
        dim objects, obj, rel
        dim topContainerType
        dim cvwWorkarea, cvwViewSpec, cvwSubAction
        dim clearMode, newMode, searchMode, copyMode, moveMode

        if isEnabled(aObject) then
            &#39; Initialize
            set cvwWorkarea = Nothing

            &#39; Perform action on actionObject
            &#39; [1] Handle workspace
            if argWorkspaceMode = &#34;Clear&#34; then
                set cvwWorkarea = new CVW_Workarea
                cvwWorkarea.clearWorkspace
            end if
            &#39; [2] Handle workarea
            clearMode = false
            newMode = true
            copyMode = false
            moveMode = false
            if argWorkareaMode &#60;&#62; &#34;None&#34; then
                if argWorkareaMode = &#34;New&#34; then
                    newMode = true
                elseif argWorkareaMode = &#34;Reuse&#34; then
                    newMode = false
                elseif argWorkareaMode = &#34;ReuseAndClear&#34; then
                    clearMode = true
                    newMode = false
                elseif argWorkareaMode = &#34;CopyView&#34; then
                    copyMode = true
                elseif argWorkareaMode = &#34;MoveView&#34; then
                    moveMode = true
                end if
                if not isValid(cvwWorkarea) then
                    set cvwWorkarea = new CVW_Workarea
                end if
                set cvwWorkarea.actionObject = aObject
                call cvwWorkarea.build(argWorkareaTitle, argToolbarTitle, newMode)
                if clearMode then
                    cvwWorkarea.clean
                end if
            end if
            &#39; Then set viewstyle - if given
            if Len(argViewstyle) &#62; 0 then
                call modelView.setViewStyle(argViewstyle)
            end if
            if copyMode then
                set contentModel  = getInstanceModel
                set topContainerType = metis.findType(argInputContainerType)
                if isEnabled(contentModel) and isEnabled(topContainerType) then
                    call cvwWorkarea.copyViewToWorkarea(contentModel, topContainerType, argInputContainerName)
                end if
                call cvwWorkarea.doParentLayout
                modelView.clearSelection
                exit sub
            end if
            if moveMode then
                set contentModel  = getInstanceModel
                set topContainerType = metis.findType(argInputContainerType)
                if isEnabled(contentModel) and isEnabled(topContainerType) then
                    call cvwWorkarea.moveViewToWorkarea(contentModel, topContainerType, argInputContainerName)
                end if
                call cvwWorkarea.doParentLayout
                modelView.clearSelection
                exit sub
            end if
            &#39; [3] Handle contents
            set instances = getInstancesFromContentSpecification
            if isValid(instances) then
                set instances = getInstancesSelectedFromList(instances, argSearchMode)
            end if
            &#39; [4] Handle view specifications
            &#39; Set view specification
            if isValid(instances) then
                set containers = actionObject.getNeighbourObjects(0, hasViewSpecificationType, specContainerType)
                if containers.count &#62; 0 then
                    set cont = containers(1)
                    if isEnabled(cont) then
                        set obj = cvwWorkarea.objectView.instance
                        set rel = model.newRelationship(hasViewSpecification2Type, obj, cont)
                    end if
                end if
            end if
            &#39; [5] Generate views
            if isValid(cvwWorkarea) and isValid(instances) then
                call cvwWorkarea.populateView(instances)
                call cvwWorkarea.doLayout()
            end if

            &#39; Finally - Perform action on  sub-actionobjects
            set objects = actionObject.getNeighbourObjects(0, consistsOfType, actionType)
            if isValid(objects) then
                for each obj in objects
                    if isEnabled(obj) then
                        kind = obj.getNamedStringValue(kindProperty)
                        if kind = &#34;Action&#34; then
                            set cvwSubAction = new CVW_Action
                            call cvwSubAction.initialize(obj)
                            call cvwSubAction.execute()
                        end if
                    end if
                next
            end if
        end if
    End Sub

   &#39;---------------------------------------------------------------------------------------------------
    Private Sub connectWorkareaToViewspec(objView, cont)
        if hasInstance(objView) and isEnabled(cont) then
            set obj = objView.instance
            set rel = model.newRelationship(relType, obj, cont)
        end if
    End Sub

   &#39;---------------------------------------------------------------------------------------------------
    Private Function getInstancesSelectedFromList(instances, searchMode)
        dim cvwSelectDialog

        &#39; Handle select dialog if specified
        if searchMode = &#34;SelectAll&#34; then
            set getInstancesSelectedFromList = instances
        else
            set cvwSelectDialog = new CVW_SelectDialog
            if searchMode = &#34;SelectOneFromList&#34; then
                cvwSelectDialog.singleSelect = true
            elseif searchMode = &#34;SelectManyFromList&#34; then
                cvwSelectDialog.singleSelect = false
            end if
            set getInstancesSelectedFromList = cvwSelectDialog.show(instances)
            set cvwSelectDialog = Nothing
        end if
    End Function

   &#39;---------------------------------------------------------------------------------------------------
    Private Function getInstancesFromContentSpecification
        dim containers, cont
        dim cvwContentSpec

        set getInstancesFromContentSpecification = Nothing
        set containers = aObject.getNeighbourObjects(0, hasContentSpecType, specContainerType)
        for each cont in containers
            if isEnabled(cont) then
                set cvwContentSpec = new CVW_ContentSpecification
                set cvwContentSpec.model = getInstanceModel
                set getInstancesFromContentSpecification = cvwContentSpec.findInstances(cont.views(1))
                set cvwContentSpec = Nothing
            end if
        next
    End Function

   &#39;---------------------------------------------------------------------------------------------------
    Private Function getInstanceModel
        dim connector
        dim child, children
        dim part, parts
        dim m, mv, modelViews

        set getInstanceModel = Nothing
        select case argContextMode
        case &#34;CurrentModel&#34;
            set getInstanceModel = model
        case &#34;SubModel&#34;
            set connector = Nothing
            set m = getCVWmodel
            set modelViews = m.views
            for each mv in modelViews
                set children = mv.children
                for each child in children
                    if child.isConnector then
                        set connector = child
                        set children = connector.children
                        if children.count &#62; 0 then
                            set child = children(1)
                            set parts = child.instance.parts
                            for each part in parts
                                if isEnabled(part) then
                                    set m = part.ownerModel
                                    if Len(argModelName) &#62; 0 then
                                        if m.title = argModelName then
                                            set getInstanceModel = part.ownerModel
                                            exit for
                                        end if
                                    else
                                        set getInstanceModel = m
                                        exit for
                                    end if
                                end if
                            next
                        end if
                    end if
                    if isEnabled(getInstanceModel) then
                        exit for
                    end if
                next
                if isEnabled(getInstanceModel) then
                    exit for
                end if
            next
        end select
    End Function

   &#39;---------------------------------------------------------------------------------------------------
    Private Sub Class_Initialize
        set model     = metis.currentModel
        set modelView = model.currentModelView
        set aObject   = model.currentInstance
        kindProperty  = &#34;kind&#34;
        &#39; Types
        set actionType                   = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/action_objects.kmd#ObjType_CVW:Button_UUID&#34;)
        set hasContentSpecType           = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/spec_relships.kmd#RelType_CVW:hasContentSpecification_UUID&#34;)
        set specContainerType            = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/spec_objects.kmd#ObjType_CVW:Specification_Container_UUID&#34;)
        set specRelType                  = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/spec_relships.kmd#RelType_CVW:specificationRel_UUID&#34;)
        set hasViewSpecificationType     = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/spec_relships.kmd#RelType_CVW:hasViewSpecification1_UUID&#34;)
        set hasViewSpecification2Type    = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/spec_relships.kmd#RelType_CVW:hasViewSpecification2_UUID&#34;)
        set hasLanguageSpecificationType = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/spec_relships.kmd#RelType_CVW:hasLanguageSpecification_UUID&#34;)
        set hasViewStrategyType          = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/spec_relships.kmd#RelType_CVW:hasViewStrategy_UUID&#34;)
        set hasViewstyleType             = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/spec_relships.kmd#RelType_CVW:hasViewstyleSpecification_UUID&#34;)
        set consistsOfType               = metis.findType(&#34;http://xml.activeknowledgemodeling.com/eka/languages/eka_relships.kmd#RelType_EKA:Member_UUID&#34;)
        &#39; Get arguments
        set cvwArgValue = new CVW_ArgumentValue
        call getArguments(cvwArgValue, aObject)
    End Sub
   &#39;---------------------------------------------------------------------------------------------------

End Class

</string>
  </valueset>
 </object>

 <object id="_002asjb01dkcl46pjf25">
  <valueset size="10" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="../languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Class CVW_Workarea
</string>
   <string name="description"></string>
   <integer name="dbms-admin.commitFlag">0</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20070307 071024658</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="comments"></string>
   <string name="script">option explicit


&#39;-----------------------------------------------------------
&#39;-----------------------------------------------------------
Class CVW_Workarea

    &#39; Variant parameters
    Public Title                          &#39; String
    Public Mode                           &#39; String
    Public TitleBar                       &#39; String
    Public LayoutStrategy                 &#39; URI
    Public WindowLayoutStrategy           &#39; URI
    Public WindowLayoutMode               &#39; String
    Public HierarchyLayout                &#39; URI
    Public SymbolOpen                     &#39; URI
    Public SymbolClosed                   &#39; URI
    Public TextScale                      &#39; Float as String
    Public Height                         &#39; Integer as String
    Public Width                          &#39; Integer as String
    Public ViewStrategyModel              &#39; URI
    Public LanguageModel                  &#39; URI
    Public Workspace                      &#39; IMetisObjectView
    &#39; Context variables (public)
    Public currentModel
    Public currentModelView
    Public currentInstance
    Public currentInstanceView

    &#39; Context variables (private)
    Private model
    Private cObject                      &#39; Component object   - IMetisInstance
    Private aObject                      &#39; Configuring object - IMetisInstance
    Private currentWorkarea              &#39; IMetisObjectView

    &#39; Types
    Private buttonType                   &#39; IMetisType
    Private consistsOfType               &#39; IMetisType
    Private titlebarType                 &#39; IMetisType
    Private windowType                   &#39; IMetisType
    Private window2Type                  &#39; IMetisType
    Private hasLanguageType              &#39; IMetisType
    Private hasViewStrategyType          &#39; IMetisType
    Private specContainerType            &#39; IMetisType
    
    &#39; Methods
    Private addMetamodelMethod           &#39; IMetisMethod
    Private addPartRuleMethod            &#39; IMetisMethod

    &#39; Layout strategies
    Private workareaLayoutStrategy       &#39; IMetisInstance
    Private workwinLayoutStrategy        &#39; IMetisInstance
    Private hierarchy_layout             &#39; IMetisInstance

    &#39; Components
    Private cvwArg                       &#39; CVW_ArgumentValue
    Private compTitleBar                 &#39; CVW_Component
    Private compWorkareaWindow           &#39; CVW_Component
    Private window                       &#39; CVW_Window

    &#39; Others
    Private workwindow
    Private WorkspaceName                &#39; String
    Private titleBarIndex                &#39; Integer
    Private workareaIndex                &#39; Integer
    Private sourceContainerView          &#39; IMetisInstanceView

&#39;-----------------------------------------------------------
    Public Property Get component           &#39;IMetisObject
        set component = cObject
    End Property

    Public Property Set component(obj)
        if isEnabled(obj) then
            set cObject = obj
        end if
    End Property

&#39;-----------------------------------------------------------
    Public Property Get configObject           &#39;IMetisObject
        set configObject = aObject
    End Property

    Public Property Set configObject(obj)
        if isEnabled(obj) then
            set aObject = obj
        end if
    End Property

&#39;-----------------------------------------------------------
    &#39; Build internal structures
    Public Sub build
        &#39; Set variant parameters from configuring object - if given
        Title                = cvwArg.getConfiguredValue(component, &#34;Name&#34;)
        Mode                 = cvwArg.getConfiguredValue(component, &#34;Mode&#34;)
        TitleBar             = cvwArg.getConfiguredValue(component, &#34;TitleBar&#34;)
        LayoutStrategy       = cvwArg.getConfiguredValue(component, &#34;LayoutStrategy&#34;)
        WindowLayoutStrategy = cvwArg.getConfiguredValue(component, &#34;WorkwinLayoutStrategy&#34;)
        WindowLayoutMode     = cvwArg.getConfiguredValue(component, &#34;WorkwinLayoutMode&#34;)
        SymbolOpen           = cvwArg.getConfiguredValue(component, &#34;SymbolOpen&#34;)
        SymbolClosed         = cvwArg.getConfiguredValue(component, &#34;SymbolClosed&#34;)
        TextScale            = cvwArg.getConfiguredValue(component, &#34;Textscale&#34;)
        Height               = cvwArg.getConfiguredValue(component, &#34;Height&#34;)
        Width                = cvwArg.getConfiguredValue(component, &#34;Width&#34;)
        LanguageModel        = cvwArg.getConfiguredValue(component, &#34;Language_Model&#34;)
        ViewStrategyModel    = cvwArg.getConfiguredValue(component, &#34;ViewStrategy_Model&#34;)
        if Len(TextScale) = 0 then
            TextScale = 1
        end if
        set workareaLayoutStrategy = metis.findLayoutStrategy(LayoutStrategy)
        set workwinLayoutStrategy = metis.findLayoutStrategy(WindowLayoutStrategy)

        &#39; Find used components
        set compTitleBar       = findCVWcomponent(component, &#34;TitleBar&#34;)
        set compWorkareaWindow = findCVWcomponent(component, &#34;WorkareaWindow&#34;)
   End Sub

&#39;-----------------------------------------------------------
    &#39; Configure used components
    Public Sub configure
        &#39; Propagate parameters to sub-components
        call resetCVWcomponent(compTitleBar)
        call configureCVWcomponent(component, compTitleBar, true)
        call resetCVWcomponent(compWorkareaWindow)
        call configureCVWcomponent(component, compWorkareaWindow, true)
    End Sub

&#39;-----------------------------------------------------------
    &#39; Do what the component is built for - return result
    Public Function execute
        dim index
        dim clearMode, newMode, copyMode, moveMode

        set execute = Nothing
        &#39; The code
        &#39; Check workspace view
        if not isValid(Workspace) then
            exit function
        end if
        &#39; Set some flags
        newMode   = true
        clearMode = false
        copyMode  = false
        moveMode  = false
        if Mode   = &#34;New&#34; then
            newMode = true
        elseif Mode = &#34;Reuse&#34; then
            newMode = false
        elseif Mode = &#34;ReuseAndClear&#34; then
            clearMode = true
            newMode = false
        elseif Mode = &#34;CopyView&#34; then
            copyMode = true
        elseif Mode = &#34;MoveView&#34; then
            moveMode = true
        end if

        set currentWorkarea = currentInstanceView.parent.parent
        if newMode or not find(Title, Workspace, currentWorkarea) then
            &#39; Create workarea
            if window.create(Title, windowType, Workspace) then
                with window.objectView
                    on error resume next
                    set .layoutStrategy = workareaLayoutStrategy
                    .openSymbol         = SymbolOpen
                    .closedSymbol       = SymbolClosed
                    if Len(TextScale) &#62; 0 then
                        .absTextScale   = CInt(TextScale)
                    end if
                    if Len(Height) &#62; 0 then
                        .geometry.height = CInt(Height)
                    end if
                    if Len(Width) &#62; 0 then
                        .geometry.width  = CInt(Width)
                    end if
                end with
                index = 1
                if Len(TitleBar) &#62; 0 then
                    &#39; Create title bar
                    titlebarIndex = index
                    if isEnabled(compTitleBar) then
                        call createTitleBar(compTitleBar)
                    end if
                    index = index + 1
                end if
                &#39; Create work window
                workareaIndex = index
                call createWorkareaWindow(compWorkareaWindow)
                index = index + 1
            end if
        else
            workareaIndex = 2
            set workwindow = window.objectView.children(workareaIndex)
            if not isEnabled(workwindow) then
                workareaIndex = 1
                set workwindow = window.objectView.children(workareaIndex)
            end if
        end if
        if clearMode then
            call window.clean()
        end if
        if copyMode then
            call copyViewToWorkarea()
        end if
        call window.doParentLayout
        &#39; End code
        execute = true
    End Function

&#39;-----------------------------------------------------------
    Public Function find(name, parentView, instance)              &#39; as Boolean
        if name = &#34;$Current$&#34; then
            find = window.find2(windowType, parentView, instance)
        else
            find = window.find(name, windowType, parentView)
        end if
    End Function

&#39;-----------------------------------------------------------
    Private Sub createTitleBar(compTitleBar)
        dim TitleBarName, TemplateName
        dim OpenSymbol, ClosedSymbol
        dim TextScale, Height
        dim TitleLayout, layout_strategy
        dim m, objectMenu, titleView, itemView

        &#39; Get variant parameter values
        TitleBarName      = cvwArg.getConfiguredValue(compTitleBar, &#34;Name&#34;)
        TemplateName      = cvwArg.getConfiguredValue(compTitleBar, &#34;TemplateName&#34;)
        TitleLayout       = cvwArg.getConfiguredValue(compTitleBar, &#34;LayoutStrategy&#34;)
        OpenSymbol        = cvwArg.getConfiguredValue(compTitleBar, &#34;SymbolOpen&#34;)
        ClosedSymbol      = cvwArg.getConfiguredValue(compTitleBar, &#34;SymbolClosed&#34;)
        TextScale         = cvwArg.getConfiguredValue(compTitleBar, &#34;Textscale&#34;)
        Height            = cvwArg.getConfiguredValue(compTitleBar, &#34;Height&#34;)
        set layout_strategy = metis.findLayoutStrategy(TitleLayout)

        &#39; Create title bar according to configuration
        set m = getCVWmodel
        call window.addSubWindow(&#34;Top&#34;, TitleBarName, titlebarType)
        set titleView = window.objectView.children(titlebarIndex)
        set objectMenu = m.findInstances(buttonType, &#34;name&#34;, TemplateName)
        if isValid(objectMenu) then
            set itemView = objectMenu(1).views(1)
            call generateTree(itemView, titleView, consistsOfType, buttonType, 0.05, 1.3)
        end if
        with titleView
            on error resume next
            set .layoutStrategy = layout_strategy
            .openSymbol         = OpenSymbol
            .closedSymbol       = ClosedSymbol
            if Len(TextScale) &#62; 0 then
                .absTextScale       = CInt(TextScale)
            end if
            if Len(Height) &#62; 0 then
                .geometry.height    = CInt(Height)
            end if
        end with

    End Sub

&#39;-----------------------------------------------------------
    Private Sub createWorkareaWindow(compWorkareaWindow)
        dim WindowName, TemplateName
        dim OpenSymbol, ClosedSymbol
        dim TextScale, Height, Width
        dim WindowLayout, layout_strategy
        dim m

        &#39; Get variant parameter values
        WindowName          = cvwArg.getConfiguredValue(compWorkareaWindow, &#34;Name&#34;)
        TemplateName        = cvwArg.getConfiguredValue(compWorkareaWindow, &#34;TemplateName&#34;)
        WindowLayout        = cvwArg.getConfiguredValue(compWorkareaWindow, &#34;LayoutStrategy&#34;)
        HierarchyLayout     = cvwArg.getConfiguredValue(compWorkareaWindow, &#34;TreeLayout&#34;)
        OpenSymbol          = cvwArg.getConfiguredValue(compWorkareaWindow, &#34;SymbolOpen&#34;)
        ClosedSymbol        = cvwArg.getConfiguredValue(compWorkareaWindow, &#34;SymbolClosed&#34;)
        TextScale           = cvwArg.getConfiguredValue(compWorkareaWindow, &#34;Textscale&#34;)
        Height              = cvwArg.getConfiguredValue(compWorkareaWindow, &#34;Height&#34;)
        Width               = cvwArg.getConfiguredValue(compWorkareaWindow, &#34;Width&#34;)
        set layout_strategy  = metis.findLayoutStrategy(WindowLayout)
        set hierarchy_layout = metis.findLayoutStrategy(HierarchyLayout)

        &#39; Create workarea window according to configuration
        set m = getCVWmodel
        if WindowLayoutMode = &#34;Manual&#34; then
            call window.addSubWindow(&#34;Top&#34;, &#34;WorkArea_[&#34;&#38; WindowName &#38;&#34;]&#34;, window2Type)
            set workwindow = window.objectView.children(workareaIndex)
            set currentModel.currentInstance = workwindow.instance
            set currentModelView.currentInstanceView = workwindow
            metis.runCommand(&#34;toggle-next-fixed-layout&#34;)
            set currentModel.currentInstance = currentInstance
            set currentModelView.currentInstanceView = currentInstanceView
        else
            call window.addSubWindow(&#34;Top&#34;, &#34;WorkArea_[&#34;&#38; WindowName &#38;&#34;]&#34;, windowType)
            set workwindow = window.objectView.children(workareaIndex)
        end if
        with workwindow
            on error resume next
            set .layoutStrategy = layout_strategy
            .openSymbol         = OpenSymbol
            .closedSymbol       = ClosedSymbol
            if Len(TextScale) &#62; 0 then
                .absTextScale       = CInt(TextScale)
            end if
            if Len(Height) &#62; 0 then
                .geometry.height = CInt(Height)
            end if
            if Len(Width) &#62; 0 then
                .geometry.width  = CInt(Width)
            end if
        end with

        &#39; Set view strategy if given
        call connectLanguageModel()
        call connectViewStrategy()
    End Sub

&#39;-----------------------------------------------------------
    Public Sub populate(instances, cvwContentSpec)
        dim obj, obj1, obj2, objView
        dim origin, target
        dim relType, type1, type2
        dim inst, workarea, wObject
        dim viewStrategies, viewStrategy
        dim strategyConts, strategyCont
        dim cvwViewStrategy, cvwCircularLayout
        dim rel, relView, hasViewList
        dim originView, originViews, targetView, targetViews
        dim done

        set wObject = workwindow.instance
        if WindowLayoutStrategy = &#34;akm:layout#CircularLayout1&#34; then
            for each inst in instances
                if isEnabled(inst) then
                    if inst.isObject then
                        set cvwCircularLayout = new CVW_CircularLayout
                        call cvwCircularLayout.build
                        call cvwCircularLayout.execute(workwindow, inst)
                        exit for
                    end if
                end if
            next
        else
            set strategyConts = wObject.getNeighbourObjects(0, hasViewStrategyType, specContainerType)
            if strategyConts.count &#62; 0 then
                set strategyCont = strategyConts(1)
                set cvwViewStrategy = new CVW_ViewStrategy
                call cvwViewStrategy.build(strategyCont)
            end if
            set hasViewList = metis.newInstanceList
            call addViewsToList(hasViewList, workwindow)
            for each obj in instances
                if not obj.isRelationship then
                    if not instanceInList(obj, hasViewList) then
                        set objView = creTreeView(obj, true, hasViewList, workwindow, cvwViewStrategy)
                    end if
                end if
            next
            for each rel in instances
                done = false
                if rel.isRelationship then
                    set origin = rel.origin
                    set originViews = currentModelView.findInstanceViews(origin)
                    set target = rel.target
                    set targetViews = currentModelView.findInstanceViews(target)
                    for each originView in originViews
                        if isInView(originView, workwindow) then
                            for each targetView in targetViews
                                if isInView(targetView, workwindow) then
                                    if isValid(cvwViewStrategy) then
                                        done = isHierarchyRelView(rel, originView, targetView, cvwViewStrategy)
                                    end if
                                    if not done then
                                        set relView = currentModelView.newRelationshipView(rel, originView, targetView)
                                    end if
                                end if
                            next
                        end if
                    next
                end if
            next
        end if

        &#39; Do the layout on workwindow
        if workwindow.instance.type.uri &#60;&#62; window2Type.uri then
            call metis.doLayout(workwindow)
        end if

        &#39; Set layout strategy on topObject
        if isEnabled(hierarchy_layout) and isEnabled(objView) then
            set objView.layoutStrategy = hierarchy_layout
        end if
        if isEnabled(objView) then
            &#39; Do the layout on topObject
            call metis.doLayout(objView)
        end if
    End Sub

&#39;-----------------------------------------------------------
    Private Function creTreeView(obj, isTop, hasViewList, parentView, cvwViewStrategy)
        dim obj1, obj2, objView
        dim relType, type1, type2
        dim workarea, wObject
        dim strategies, strategy
        dim relDir, rels, rel
        dim childInst, childInstView
        dim textScale, parentAbsScale, objAbsScale
        dim i, found
        dim rule

        if isEnabled(obj) then
            &#39; Create view of each of the top instances
            set objView = parentView.newObjectView(obj)
            &#39; Handle textscale
            if isTop then
                objView.textScale = 0.5
            else
                objView.textScale = 0.25
            end if
            if objView.isNested then
                objView.close
                textScale = parentView.textScale
                if isTop then
                    objView.textScale = textScale * 0.5
                else
                    objView.textScale = textScale * 1.1
                end if
            end if
            if isValid(hasViewList) then
                hasViewList.addLast obj
            end if
            if isValid(cvwViewStrategy) then
                for i = 1 to cvwViewStrategy.noHierarchyRules
                    set rule = cvwViewStrategy.hierarchyRules(i)
                    if obj.type.uri = rule.parentType.uri then
                        set rels = obj.getNeighbourRelationships(rule.relDir, rule.relType)
                        for each rel in rels
                            if rule.relDir = 0 then
                                set childInst = rel.target
                            else
                                set childInst = rel.origin
                            end if
                            if not instanceInList(childInst, hasViewList) then
                                set childInstView = creTreeView(childInst, false, hasViewList, objView, cvwViewStrategy)
                            end if
                        next
                    end if
                next
            end if
        end if
        if objView.isNested then
            call objView.doLayout
            if isTop then
                objView.open
            end if
        end if
        set creTreeView = objView
    End Function

    &#39;---------------------------------------------------------------------------------------------------
    Private Function isHierarchyRelView(rel, originView, targetView, cvwViewStrategy)
        dim rule
        dim i

        isHierarchyRelView = false
        for i = 1 to cvwViewStrategy.noHierarchyRules
            set rule = cvwViewStrategy.hierarchyRules(i)
            if rule.relType.uri = rel.type.uri then
                if rule.relDir = 0 then
                    if rel.origin.type.uri = rule.parentType.uri then
                        if rel.target.type.uri = rule.childType.uri then
                            isHierarchyRelView = true
                        end if
                    end if
                elseif rule.relDir = 1 then
                    if rel.target.type.uri = rule.parentType.uri then
                        if rel.origin.type.uri = rule.childType.uri then
                            isHierarchyRelView = true
                        end if
                    end if
                end if
            end if
        next
    End Function

   &#39;---------------------------------------------------------------------------------------------------
    Public Sub copyViewToWorkarea()
        dim topContainer
        dim instance
        dim workwin

        if isEnabled(sourceContainerView) then
            set workwin = window.objectView.children(workareaIndex)
            set currentModelView.currentInstanceView = sourceContainerView
            Call metis.runCommand(&#34;copy&#34;)
            set currentModelView.currentInstanceView = workwin
            Call metis.runCommand(&#34;paste-structure&#34;)
            &#39;Call metis.runCommand(&#34;paste-synchronized-view&#34;)
            &#39;Call metis.runCommand(&#34;paste-auto-virtual-synchronized-view&#34;)
            set currentModelView.currentInstanceView = currentInstanceView
            currentModelView.clearSelection
        end if
    End Sub

   &#39;---------------------------------------------------------------------------------------------------
    Private Sub addViewsToList(hasViewList, parentView)
        dim child, children
        dim inst
    
        set children = parentView.children
        for each child in children
            if hasInstance(child) then
                set inst = child.instance
                if not instanceInList(inst, hasViewList) then
                    hasViewList.addLast inst
                end if
            end if
            call addViewsToList(hasViewList, child)
        next

    End Sub

   &#39;---------------------------------------------------------------------------------------------------
    Private Function findContainer(parent, contType, contName)
        dim container, containers
        dim foundContainer

        set findContainer = Nothing
        set foundContainer = Nothing
        set containers = parent.parts
        for each container in containers
            if container.type.uri = contType.uri then
                if container.name = contName then
                    set foundContainer = container
                    exit for
                else
                    set foundContainer = findContainer(container, contType, contName)
                end if
            end if
        next
        if isEnabled(foundContainer) then
            set findContainer = foundContainer
        end if
    End Function

&#39;-----------------------------------------------------------
    Private Sub connectLanguageModel()
        dim langModel
        dim obj, rel
        dim langObjView

        if Len(LanguageModel) &#62; 0 then
            set langModel = metis.findInstance(LanguageModel)
            if isEnabled(langModel) then
                set langObjView = langModel.views(1)
                if isEnabled(workwindow) then
                    &#39; Connect rel from workwindow to language model specification container
                    set obj = workwindow.instance
                    set rel = currentModel.newRelationship(hasLanguageType, obj, langModel)
                    &#39; Create metamodel and connect to model
                    if isEnabled(addMetamodelMethod) then
                        set currentModel.currentInstance = langModel
                        set currentModelView.currentInstanceView = langObjView
                        call currentModel.runMethodOnInst(addMetamodelMethod, langModel)
                        set currentModel.currentInstance = currentInstance
                        set currentModelView.currentInstanceView = currentInstanceView
                    end if
                end if
            end if
        end if
    End Sub

&#39;-----------------------------------------------------------
    Private Sub connectViewStrategy()
        dim specModel
        dim obj, rel
        dim specObjView

        if Len(ViewStrategyModel) &#62; 0 then
            set specModel = metis.findInstance(ViewStrategyModel)
            if isEnabled(specModel) then
                set specObjView = specModel.views(1)
                if isEnabled(workwindow) then
                    &#39; Connect rel from workwindow to viewstrategy specification container
                    set obj = workwindow.instance
                    set rel = currentModel.newRelationship(hasViewStrategyType, obj, specModel)
                    &#39; Create metamodel and connect to model
                    if isEnabled(addPartRuleMethod) then
                        set currentModel.currentInstance = specModel
                        set currentModelView.currentInstanceView = specObjView
                        call currentModel.runMethodOnInst(addPartRuleMethod, specModel)
                        set currentModel.currentInstance = currentInstance
                        set currentModelView.currentInstanceView = currentInstanceView
                    end if
                end if
            end if
        end if
    End Sub

&#39;-----------------------------------------------------------
    Private Sub Class_Initialize()
        set currentModel        = metis.currentModel
        set currentModelView    = currentModel.currentModelView
        set currentInstance     = currentModel.currentInstance
        set currentInstanceView = currentModelView.currentInstanceView
        &#39; Assume started on button
        set currentWorkarea = currentInstanceView.parent.parent

        set cObject   = currentInstance
        set aObject   = currentInstance
        &#39; Types
        set titlebarType    = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/view_objects.kmd#UiType_CVW:Workarea_UUID&#34;)
        set windowType      = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/view_objects.kmd#UiType_CVW:Workarea_UUID&#34;)
        set window2Type     = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/view_objects.kmd#UiType_CVW:Workarea2_UUID&#34;)
        set buttonType      = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/action_objects.kmd#ObjType_CVW:Button_UUID&#34;)
        set consistsOfType  = metis.findType(&#34;http://xml.activeknowledgemodeling.com/eka/languages/eka_relships.kmd#RelType_EKA:Member_UUID&#34;)
        set hasLanguageType = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/spec_relships.kmd#RelType_CVW:hasLanguageSpecification2_UUID&#34;)
        set hasViewStrategyType = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/spec_relships.kmd#RelType_CVW:hasViewStrategy2_UUID&#34;)
        set specContainerType   = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/spec_objects.kmd#ObjType_CVW:Specification_Container_UUID&#34;)
        &#39; Methods
        set addMetamodelMethod  = metis.findMethod(&#34;http://xml.activeknowledgemodeling.com/cvw/operations/spec_methods.kmd#addVirtualMetamodel&#34;)
        set addPartRuleMethod   = metis.findMethod(&#34;http://xml.activeknowledgemodeling.com/cvw/operations/spec_methods.kmd#addPartRules&#34;)
        &#39; Arguments
        set cvwArg    = new CVW_ArgumentValue
        set Workspace = Nothing
        set window    = new CVW_Window

    End Sub

&#39;-----------------------------------------------------------
    Private Sub Class_Terminate()
        set cvwArg = Nothing
    End Sub

End Class

</string>
  </valueset>
 </object>

 <object id="_002asjb0252ci9nuc8k9">
  <valueset size="10" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="../languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Class CVW_ViewSpecification
</string>
   <string name="description"></string>
   <integer name="dbms-admin.commitFlag">0</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20070129 132817394</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="comments"></string>
   <string name="script">option explicit


&#39;-----------------------------------------------------------
&#39;-----------------------------------------------------------
Class CVW_ViewSpecification

    Public  title                   &#39; String
    Public  languageSpecification   &#39; CVW_LanguageSpecification
    Public  viewStrategy            &#39; CVW_ViewStrategy
    Public  viewstyleSpecification  &#39; CVW_ViewstyleSpecification
    Public  layoutStrategy          &#39; IMetisInstance
    Public  backgroundSymbol        &#39; Uri

    Private model
    Private modelView
    Private hasLanguageSpecType
    Private hasViewStrategyType
    Private hasViewstyleSpecType
    Private hasLayoutStrategyType
    Private viewStyle

&#39;-----------------------------------------------------------
    Public Sub build(specObject)
        dim obj, rel, relships

        set languageSpecification  = new CVW_LanguageSpecification
        &#39; Find language specification (in model)
        set relships = specObject.getNeighbourRelationships(0, hasLanguageSpecType)
        for each rel in relships
            if isEnabled(rel) then
                set obj = rel.target
                if isEnabled(obj) then
                    languageSpecification.build(obj)
                end if
            end if
        next

        set viewStrategy = new CVW_ViewStrategy
        &#39; Find view strategy (in model)
        set relships = specObject.getNeighbourRelationships(0, hasViewStrategyType)
        for each rel in relships
            if isEnabled(rel) then
                set obj = rel.target
                if isEnabled(obj) then
                    viewStrategy.build(obj)
                end if
            end if
        next

        set viewstyleSpecification = new CVW_ViewstyleSpecification
        &#39; Find view strategy (in model)
        set relships = specObject.getNeighbourRelationships(0, hasViewstyleSpecType)
        for each rel in relships
            if isEnabled(rel) then
                set obj = rel.target
                if isEnabled(obj) then
                    viewstyleSpecification.build(obj)
                end if
            end if
        next
        if not isValid(relships) then
            set argObj = new CVW_Argument
            viewstyle = argObj.getArgumentValue(specObject, &#34;Viewstyle&#34;)
            viewstyleSpecification.setViewstyle(viewstyle)
        end if

        set relships = specObject.getNeighbourRelationships(0, hasLayoutStrategyType)
        for each rel in relships
            if isEnabled(rel) then
                set obj = rel.target
                if isEnabled(obj) then
                    set layoutStrategy = obj
                    exit for
                end if
            end if
        next
    End Sub

&#39;-----------------------------------------------------------
    Public Sub Class_Initialize()
        dim argObj
        on error resume next

        set model = metis.currentModel
        set modelView = model.currentModelView
        set hasLanguageSpecType  = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/spec_relships.kmd#RelType_CVW:hasLanguageSpecification_UUID&#34;)
        set hasViewStrategyType  = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/spec_relships.kmd#RelType_CVW:hasViewStrategySpecification_UUID&#34;)
        set hasViewstyleSpecType = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/spec_relships.kmd#RelType_CVW:hasViewstyleSpecification_UUID&#34;)
        set hasLayoutStrategyType    = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/spec_relships.kmd#RelType_CVW:hasLayoutStrategy_UUID&#34;)
        set argObj = new CVW_ArgumentValue
        viewstyle  = argObj.getArgumentValue(aObject, &#34;Viewstyle&#34;)
        if Len(viewStyle) &#62; 0 then
            modelView.setViewStyle(viewStyle)
        end if
    End Sub

&#39;-----------------------------------------------------------
    Public Sub Class_Terminate()
    End Sub
End Class

</string>
  </valueset>
 </object>

 <object id="_002asjb026gg9qkrj8v9">
  <valueset size="10" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="../languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Class CVW_ViewStrategy
</string>
   <string name="description"></string>
   <integer name="dbms-admin.commitFlag">0</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20070221 133452638</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="comments"></string>
   <string name="script">option explicit


&#39;-----------------------------------------------------------
&#39;-----------------------------------------------------------
Class CVW_ViewStrategy

    Public  title

    &#39; Parameters
    Public SpecificationModel            &#39; String
    Public noHierarchyRules              &#39; Integer
    Public hierarchyRules()              &#39; Collection of CVW_RelRule

    &#39; Context variables
    Private model
    Private modelView
    Private cObject                      &#39; Component object   - IMetisInstance
    Private aObject                      &#39; Configuring object - IMetisInstance

    &#39; Types
    Private anyObjectType                &#39; IMetisType
    Private isTopType                    &#39; IMetisType
    Private hasViewStrategyType          &#39; IMetisType

    &#39; Others
    Private cvwArg                       &#39; CVW_ArgumentValue

&#39;-----------------------------------------------------------
    Public Property Get component           &#39;IMetisObject
        set component = cObject
    End Property

    Public Property Set component(obj)
        if isEnabled(obj) then
            set cObject = obj
        end if
    End Property

&#39;-----------------------------------------------------------
    Public Property Get configObject           &#39;IMetisObject
        set configObject = aObject
    End Property

    Public Property Set configObject(obj)
        if isEnabled(obj) then
            set aObject = obj
        end if
    End Property

&#39;-----------------------------------------------------------
    &#39; Build internal structures
    Public Sub build(strategyCont)
        dim indx
        dim strategies
        dim contUri, specObject
        dim obj1, obj2, rel, rels
        dim relDir
        dim type1, type2, relType
        dim cvwRule

        &#39; Build code
        indx = 1
        &#39; Find view strategy specification
        if isEnabled(strategyCont) then
            &#39; Find view strategies
            set strategies = strategyCont.getNeighbourObjects(0, isTopType, anyObjectType)
            for each obj1 in strategies
                if isEnabled(obj1) then
                    call buildRelRules(obj1, hierarchyRules, noHierarchyRules, isTopType)
                end if
            next
        end if
    End Sub

&#39;-----------------------------------------------------------
    &#39; Configure used components
    Public Sub configure
        &#39; Only relevant if CVW_ViewStrategy uses other components
    End Sub

&#39;-----------------------------------------------------------
    &#39; Do what the component is built for - return result
    Public Function execute
        dim Something

        set execute = Nothing
        &#39; The code
        set execute = Something
    End Function

&#39;-----------------------------------------------------------
    Private Sub Class_Initialize()
        set model     = metis.currentModel
        set modelView = model.currentModelView
        set cObject   = model.currentInstance
        set aObject   = model.currentInstance
        set cvwArg    = new CVW_ArgumentValue
        noHierarchyRules  = 0
        ReDim hierarchyRules(noHierarchyRules)
        set anyObjectType       = metis.findType(&#34;metis:stdtypes#oid1&#34;)
        set isTopType           = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/spec_relships.kmd#RelType_CVW:isTop_UUID&#34;)
        set hasViewStrategyType = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/spec_relships.kmd#RelType_CVW:hasViewStrategy_UUID&#34;)
    End Sub

&#39;-----------------------------------------------------------
    Private Sub Class_Terminate()
        set cvwArg = Nothing
    End Sub

End Class

</string>
  </valueset>
 </object>

 <object id="_002asjd00rcftrmj7m16">
  <valueset size="10" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="../languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Class CVW_StatusBar
</string>
   <string name="description"></string>
   <integer name="dbms-admin.commitFlag">0</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20070124 075946477</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="comments"></string>
   <string name="script">option explicit

class CVW_StatusBar
&#39;[1] ------------------------------------------------------------
 Public Sub topMenuStatus (instView)
  dim topMenuObject, inst

  set inst = instView.instance 
  For each topMenuObject in instView.parent.children 
    if topMenuObject.title = inst.title THEN  
      topMenuObject.open
    else
      topMenuObject.close
    end if
   next

 end sub

&#39;[2] ------------------------------------------------------------
Public  sub populateStatusBars(instView)
 &#39;[a]-------------------------------
 Dim  InputContainerName, InputContainerType
 Dim  titleBarType, titleBar, titleBarString  
 &#39;[b]-------------------------------
 InputContainerName = &#34;CVW_NavigationHome&#34;
 InputContainerType = &#34;metis:stdtypes#oid3&#34;
 &#39;[c]-------------------------------
  set titleBarType  = metis.findType(&#34;http://metadata.troux.info/meaf/objecttypes/general_object.kmd#CompType_MEAF:GeneralObject_UUID&#34;)
 set titleBar  = model.findInstances(titleBarType, &#34;comments&#34; ,&#34;CVW_TitleBar&#34;)
   &#39; --- Updater Navigation Bar 
   titleBarString = &#34;&#62; &#34; &#38; instView.title
   titleBar.item(1).setNamedStringValue &#34;name&#34;, titleBarString  
 end sub



end class
</string>
  </valueset>
 </object>

 <object id="_002asjd0145f98c06sku">
  <valueset size="10" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="../languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Function getInstModel</string>
   <string name="description"></string>
   <integer name="dbms-admin.commitFlag">0</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20070218 115726302</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="comments"></string>
   <string name="script">    Function getInstModel(contextMode, modelName)
        dim model, connector
        dim child, children
        dim part, parts
        dim m, modelView, modelViews

        set getInstModel = Nothing
        set model = getCVWmodel
        select case contextMode
        case &#34;CurrentModel&#34;
            set getInstModel = model
        case &#34;SubModel&#34;
            set connector = Nothing
            set modelViews = model.views
            for each modelView in modelViews
                set children = modelView.children
                for each child in children
                    if child.isConnector then
                        set connector = child
                        set children = connector.children
                        if children.count &#62; 0 then
                            set child = children(1)
                            set parts = child.instance.parts
                            for each part in parts
                                if isEnabled(part) then
                                    set m = part.ownerModel
                                    if Len(modelName) &#62; 0 then
                                        if m.title = modelName then
                                            set getInstModel = part.ownerModel
                                            exit for
                                        end if
                                    else
                                        set getInstModel = m
                                        exit for
                                    end if
                                end if
                            next
                        end if
                        if isEnabled(getInstModel) then
                            exit for
                        end if
                    end if
                next
                if isEnabled(getInstModel) then
                    exit for
                end if
            next
        end select
    End Function
</string>
  </valueset>
 </object>

 <object id="_002asje013tjoooo5pr4">
  <valueset size="10" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="../languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Class EKA_Property
</string>
   <string name="description"></string>
   <integer name="dbms-admin.commitFlag">0</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20070207 122411244</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="comments"></string>
   <string name="script">option explicit

Function ekaGetPropertyLabel
    on error resume next
    dim ekaProp

    ekaGetPropertyLabel = &#34;&#34;
    set ekaProp = new EKA_Property
    set ekaProp.metisObject = metis.currentModel.currentInstance
    ekaGetPropertyLabel = ekaProp.Label
    set ekaProp = Nothing

End Function

Function ekaGetPropertyIcon
    on error resume next
    dim ekaProp

    ekaGetPropertyIcon = &#34;&#34;
    set ekaProp = new EKA_Property
    set ekaProp.metisObject = metis.currentModel.currentInstance
    ekaGetPropertyIcon = ekaProp.getIcon
    set ekaProp = Nothing

End Function

&#39;-----------------------------------------------------------
&#39;-----------------------------------------------------------
Class EKA_Property

    Public metisObject

    Private IsType
    Private PropertyType
    Private PropertyIcon
    Private ValueIcon
    Private PropertyAndValueIcon
    Private types_ok

&#39;-----------------------------------------------------------
    Public Property Let Name(strName)
        if isEnabled(metisObject) then
            call metisObject.setNamedStringValue(&#34;name&#34;, strName)
        end if
    End Property

    Public Property Get Name
        if isEnabled(metisObject) then
            Name = metisObject.getNamedStringValue(&#34;name&#34;)
        end if
    End Property

&#39;-----------------------------------------------------------
    Public Property Let Value(strVal)
        on error resume next
        if isEnabled(metisObject) then
            call metisObject.setNamedStringValue(&#34;value&#34;, strVal)
            call metisObject.setNamedStringValue(&#34;tempvalue&#34;, strVal)
        end if
    End Property

    Public Property Get Value
        if isEnabled(metisObject) then
            Value = metisObject.getNamedStringValue(&#34;value&#34;)
        end if
    End Property

&#39;-----------------------------------------------------------
    Public Property Get Label
        if isEnabled(metisObject) then
            if Len(Name) &#62; 0 then
                Label = Name
            elseif types_ok then
                Label = getValue(metisObject)
            end if
        end if
    End Property

&#39;-----------------------------------------------------------
    Private Function getValue(inst)
        dim value
        dim prop, parentProps

        getValue = &#34;&#34;
        if isEnabled(inst) then
            value = inst.getNamedStringValue(&#34;value&#34;)
            if Len(value) = 0 then
                set parentProps = inst.getNeighbourObjects(1, IsType, PropertyType)
                for each prop in parentProps
                    if isEnabled(prop) then
                        value = getValue(prop)
                        if Len(value) &#62; 0 then
                            getValue = value
                            exit for
                        end if
                    end if
                next
            else
                getValue = value
            end if
        end if
    End Function

&#39;-----------------------------------------------------------
    Public Function getIcon
    
            getIcon = PropertyIcon
            if Len(Name) &#62; 0 and Len(Value) &#62; 0 then
                getIcon = PropertyAndValueIcon
            elseif Len(Value) &#62; 0 then
                getIcon = ValueIcon
            end if

    End Function

&#39;-----------------------------------------------------------
    Public Sub Class_Initialize()
        types_ok = false
        set PropertyType = metis.findType(&#34;http://xml.activeknowledgemodeling.com/eka/languages/eka_property.kmd#ObjType_EKA:Property_UUID&#34;)
        if isEnabled(PropertyType) then
            set IsType = metis.findType(&#34;http://xml.activeknowledgemodeling.com/eka/languages/eka_relships.kmd#RelType_EKA:Is_UUID&#34;)
            if isEnabled(IsType) then
                types_ok = true
            end if
        end if
        PropertyIcon         = &#34;http://xml.activeknowledgemodeling.com/eka/views/symbols/productproperty.svg#oid1&#34;
        ValueIcon            = &#34;http://xml.activeknowledgemodeling.com/eka/views/symbols/productmethod.svg#oid1&#34;
        PropertyAndValueIcon = &#34;http://xml.activeknowledgemodeling.com/eka/views/symbols/productmodule.svg#oid1&#34;
        if not types_ok then
            MsgBox &#34;Initialization of EKA_Property failed!&#34;
        end if
    End Sub

&#39;-----------------------------------------------------------
    Public Sub Class_Terminate()
    End Sub


End Class
&#39;-----------------------------------------------------------
&#39;-----------------------------------------------------------
</string>
  </valueset>
 </object>

 <object id="_002asjg014c2omdm04hr">
  <valueset size="10" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="../languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Class CVW_MenuTree
</string>
   <string name="description"></string>
   <integer name="dbms-admin.commitFlag">0</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20070131 210717500</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="comments"></string>
   <string name="script">option explicit

Class CVW_MenuTree

    &#39; Context variables
    Private model
    Private modelView
    Private inst
    Private instView

    &#39; Arguments
    Private MenuLayout
    Private LeftPaneLayout
    Private LeftPaneTreeLayout
    Private MenuSymbol
    Private LeftPaneSymbol

    &#39; Types
    Private winType
    Private buttonType
    Private consistsOfType
    Private menuLayoutStrategy
    Private leftPaneLayoutStrategy
    Private leftPaneTreeLayoutStrategy

    &#39; Others
    Private kindProperty
    Private kind
    Private argObj
    Private cvwWindow
    Private winName
    Private parentView

   &#39;---------------------------------------------------------------------------------------------------
    Public Sub build(mode, textScale, scaleFactor)    &#39; mode = &#34;TopMenu&#34; | &#34;NodeMenu&#34;
        dim parentView

        if mode = &#34;MenuTree&#34; then
            set parentView = findInstanceView(model, winType, &#34;name&#34;, &#34;CVW_LeftPane&#34;)
            winName = &#34;CVW_MenuLevel1&#34;
            &#39; Check if window already exists. If so, remove
            if cvwWindow.find(winName, winType, parentView) then
                cvwWindow.remove
            end if
            &#39; Create new window
            if cvwWindow.create(winName, winType, parentView) then
                call populateMenu1()
                if isValid(menuLayoutStrategy) then
                    set parentView.children(1).layoutStrategy = menuLayoutStrategy
                end if
                parentView.openSymbol   = LeftPaneSymbol
                parentView.closedSymbol = LeftPaneSymbol
                parentView.children(1).openSymbol      = MenuSymbol
                parentView.children(1).closedSymbol    = MenuSymbol
                parentView.children(1).textScale       = textScale
                parentView.children(1).geometry.width  = parentView.children(1).geometry.width * scaleFactor
                parentView.children(1).geometry.height = parentView.children(1).geometry.height * scaleFactor
                call cvwWindow.doParentLayout
            end if
        elseif mode = &#34;MenuNode&#34; then
            set parentView = instView
            if parentView.children.count &#62; 0 then
                call cleanTree(modelView, parentView)
                call parentView.close
            else
                call populateMenu2(textScale, scaleFactor)
                if isValid(leftPaneTreeLayoutStrategy) then
                    set parentView.layoutStrategy = leftPaneTreeLayoutStrategy
                end if
                call cvwWindow.doParentLayout
            end if
        end if
    End Sub

&#39;-----------------------------------------------------------
    Public Sub populateMenu1()
        Dim objectMenuType, objectMenuItem
        Dim  newObjectMenu, newObjectMenuView, objectMenuView

            For each objectMenuItem in inst.neighbourRelationships
                Set newObjectMenu = objectMenuItem.target
                if newObjectMenu.type.uri = buttonType.uri THEN
                    if newObjectMenu.title &#60;&#62; inst.title THEN
                        kind = newObjectMenu.getNamedStringValue(kindProperty)
                        if kind = &#34;Menu&#34; then
                            Set newObjectMenuView           = cvwWindow.objectView.newObjectView(newObjectMenu)
                            newobjectMenuView.openSymbol    = newObjectMenu.Views(1).openSymbol
                            newobjectMenuView.closedSymbol  = newObjectMenu.Views(1).closedSymbol
                            newobjectMenuView.textScale     = 0.08
                            newobjectMenuView.close
                        end if
                  end if
              end if
            next

    End Sub

&#39;---------------------------------------------------------------------------------------------------
    sub populateMenu2(textScale, scaleFactor)    &#39; textScale = 0.05, scaleFactor = 1.3
        dim  item, itemView, newItemView, rel
        on error resume next

        For each rel in inst.getNeighbourRelationships(0, consistsOfType)
            if isEnabled(rel) then
                set item = rel.target
                kind = &#34;Menu&#34;
                if isEnabled(item) then
                    kind = item.getNamedStringValue(kindProperty)
                    if kind = &#34;Menu&#34; then
                        set newItemView             = instView.newObjectView(item)
                        newItemView.openSymbol      = item.Views(1).openSymbol
                        newItemView.closedSymbol    = item.Views(1).closedSymbol
                        newItemView.textScale       = textScale
                        newItemView.geometry.width  = newItemView.parent.geometry.width * scaleFactor
                        newItemView.geometry.height = newItemView.parent.geometry.height * scaleFactor
                        newItemView.close
                        newItemView.parent.open
                    end if
                end if
            end if
        next
    end sub

   &#39;---------------------------------------------------------------------------------------------------
    Private Sub Class_Initialize
        set model           = metis.currentModel
        set modelView       = model.currentModelView
        set inst            = model.currentInstance
        set instView        = modelView.currentInstanceView
        set buttonType      = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/action_objects.kmd#ObjType_CVW:Button_UUID&#34;)
        set consistsOfType  = metis.findType(&#34;http://xml.activeknowledgemodeling.com/eka/languages/eka_relships.kmd#RelType_EKA:Member_UUID&#34;)
        set winType         = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/view_objects.kmd#UiType_CVW:Workarea_UUID&#34;)
        set cvwWindow       = new CVW_Window
        set argObj          = new CVW_ArgumentValue
        kindProperty        = &#34;kind&#34;
        MenuLayout          = argObj.getArgumentValue(inst, &#34;MenuLayout&#34;)
        LeftPaneLayout      = argObj.getArgumentValue(inst, &#34;LeftPaneLayout&#34;)
        LeftPaneTreeLayout  = argObj.getArgumentValue(inst, &#34;LeftPaneTreeLayout&#34;)
        MenuSymbol          = argObj.getArgumentValue(inst, &#34;MenuSymbol&#34;)
        LeftPaneSymbol      = argObj.getArgumentValue(inst, &#34;LeftPaneSymbol&#34;)
        set menuLayoutStrategy          = metis.findLayoutStrategy(MenuLayout)
        set leftPaneLayoutStrategy      = metis.findLayoutStrategy(LeftPaneLayout)
        set leftPaneTreeLayoutStrategy  = metis.findLayoutStrategy(LeftPaneTreeLayout)
    End Sub
   &#39;---------------------------------------------------------------------------------------------------


End Class</string>
  </valueset>
 </object>

 <object id="_002asjl01df812jtoh62">
  <valueset size="10" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="../languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Function getCVWmodel</string>
   <string name="description"></string>
   <integer name="dbms-admin.commitFlag">0</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20070220 130029434</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="comments"></string>
   <string name="script">    Function getCVWmodel
        dim model, modelView
        dim child, children
        dim part

        set model = metis.currentModel
        set modelView = model.currentModelView

        set getCVWmodel = model

        if isEnabled(modelView) then
            &#39; Find CVW model
            set children = modelView.children
            if children.count &#62; 0 then
                for each child in children
                    if hasInstance(child) then
                        set part = child.instance
                        if isEnabled(part) then
                            set getCVWmodel = part.ownerModel
                            exit for
                        end if
                    end if
                next
            end if
        end if
    End Function
</string>
  </valueset>
 </object>

 <object id="_002ask0025779hdakt36">
  <valueset size="10" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="../languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Class CVW_CircularLayout
</string>
   <string name="description"></string>
   <integer name="dbms-admin.commitFlag">0</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20070302 143443909</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="comments"></string>
   <string name="script">option explicit

Class CVW_CircularLayout

    Public Title
    
    &#39; Variant parameters
    Public NoLevels

    &#39; Local variables
    Private model
    Private modelView
    Private a0                      &#39; Angle 1
    Private a1                      &#39; Angle 2
    Private a2                      &#39; Angle 3
    Private x0                      &#39; X-position
    Private y0                      &#39; Y-position
    Private level                   &#39; Current level
    Private tsRatio0                &#39; Text factor ratio
    Private tsRatio1                &#39; Text factor ratio
    Private tsRatio2                &#39; Text factor ratio

    &#39; The number pi
    Private pi

    &#39; Methods
&#39;-----------------------------------------------------------
    Public Sub build
    End Sub

&#39;-----------------------------------------------------------
    Public Sub execute(workareaView, inst)
        dim objView
        dim childView, children
        dim winGeo, objGeo
        dim winSize, objSize
        dim x0, y0, h, radius
        dim winTs, ts, sf
        dim size0, w0, h0
        dim level

        &#39; First remove all
        set children = workareaView.children
        for each childView in children
            modelView.deleteObjectView(childView)
        next

        &#39; Set level
        level = 0
        &#39; Then create objView in center
        set objView = workareaView.newObjectView(inst)

        &#39; Get geometry of center object
        set winGeo = workareaView.absScaleGeometry
        set objGeo = objView.absScaleGeometry
        &#39; Calculate size of center object
        set size0 = getSize(winGeo, objGeo, level)
        set objGeo.size = size0

        &#39; Calculate position of center object
        x0 = objGeo.x - objGeo.width / 4
        y0 = objGeo.y - objGeo.height / 2
        objGeo.x = x0
        objGeo.y = y0
        &#39; Set size and position
        set objView.absScaleGeometry = objGeo

        &#39; Calculate text size
        winTs = workareaView.textScale
        ts = winTs * tsRatio0
        ts = getTextScaleFactor(level)
        objView.textScale = ts

        &#39; Get radius to be used in circular layout
        radius = getRadius(objGeo)

        &#39; Create neighbour objects
        call populateObjects(workareaView, objView, level+1, radius, 0, 0, 2*pi, x0, y0)
        &#39; Create the connecting relationships
        call populateRelationships(workareaView, objView, level+1)
    End Sub

&#39;-----------------------------------------------------------
    Private Sub populateObjects(parentView, instView, level, radius, a0, a1, a2, x0, y0)
        dim pnt, size, size1, geo1, objGeo, winGeo
        dim da, a, x, y, dx, dy, sf, ts
        dim inst, objView
        dim obj, objects
        dim i, no, no1
        dim test
 &#39;stop
        sf = getScaleFactor(level)
        ts = getTextScaleFactor(level)

        set inst = instView.instance
        set objects = inst.neighbourObjects
        no = objects.count
&#39;stop
        if no &#62; 0 then
            &#39; Get geometry of parent object
            set winGeo = parentView.absScaleGeometry
            set objGeo = instView.absScaleGeometry
            &#39; Calculate size of parent object
            set size1 = getSize(winGeo, objGeo, level)

            set pnt = modelView.newPoint(x0, y0)
            set size = modelView.newSize(size1.width * sf, size1.height * sf)
            dx = size.width / 2
            dy = size.height / 2
            set objGeo = modelView.newRect(pnt, size)
            da = (a2 - a1) / no
        end if
        i = 1
        for each obj in objects
            if isEnabled(obj) then
                &#39;if not obj.type.inherits(valueType) then
                    if not viewExists(obj, parentView) then
                        &#39; Create object view
                        a = a0 -pi/2 + a1 + da*(i-0.5)
                        &#39;a = a0 + a1 + da*(i-1)
                        x = x0 + (radius + size.width) * cos(a) + dx
                        y = y0 + (radius) * sin(a) + dy
                        pnt.x = x
                        pnt.y = y
                        set objGeo.point = pnt
                        set objView = parentView.newObjectView(obj)
                        objView.textScale = ts
                        set objView.absScaleGeometry = objGeo
                        i = i + 1
                        &#39; Recursive call
                        if level &#60; NoLevels then
                            call populateObjects(parentView, objView, level+1, radius, a, 0, 7*pi/8, x, y)
                        end if
                    end if
                &#39;end if
            end if
        next
    End Sub

&#39;-----------------------------------------------------------
    Private Sub populateRelationships(parentView, objView, level)
        dim obj
        dim relship, relships
        dim origin, target
        dim originView, targetView
        dim originViews, targetViews
        dim relView
        dim done

        set obj = objView.instance
        set relships = obj.neighbourRelationships
        for each relship in relships
            done = false
            set origin = relship.origin
            set target = relship.target
            if obj.uri = origin.uri then
                set originView = objView
                set targetViews = target.views
                for each targetView in targetViews
                    if isInParentView(parentView, targetView) then
                        set relView = modelView.newRelationshipView(relship, originView, targetView)
                        if level &#60; NoLevels then
                            call populateRelationships(parentView, targetView, level+1)
                        end if
                        exit for
                    end if
                next
            elseif obj.uri = target.uri then
                set targetView = objView
                set originViews = origin.views
                for each originView in originViews
                    if isInParentView(parentView, originView) then
                        set relView = modelView.newRelationshipView(relship, originView, targetView)
                        if level &#60; NoLevels then
                            call populateRelationships(parentView, originView, level+1)
                        end if
                        exit for
                    end if
                next
            end if
        next
    End Sub

&#39;-----------------------------------------------------------
    Private Function isInParentView(parentView, objView)
        dim children, childView

        isInParentView = false
        set children = parentView.children
        for each childView in children
            if objView.uri = childView.uri then
                isInParentView = true
            end if
        next
    End Function

&#39;-----------------------------------------------------------
    Private Function getRadius(objGeo)
        dim w, h, distance_ratio

        w = objGeo.width
        h = objGeo.height
        select case NoLevels
        case 1      distance_ratio = 1
        case 2      distance_ratio = 1.25
        case 3      distance_ratio = 1.5
        case else
                    distance_ratio = 1.5
        end select
        getRadius = w * distance_ratio
    End Function

&#39;-----------------------------------------------------------
    Private Function getSize(winGeo, objGeo, level)
        dim winSize, objSize
        dim w0, h0
        dim sf

        set winSize = winGeo.size
        set objSize = objGeo.size
        select case level
        case 0      sf = 0.1 / NoLevels
        case 1      sf = 0.1 / NoLevels
        case 2      sf = 0.1 / NoLevels
        case else   sf = 0.1 / NoLevels
        end select
        h0 = winSize.height * sf
        w0 = h0 * objGeo.width / objGeo.height
        set getSize = modelView.newSize(w0, h0)
    End Function

&#39;-----------------------------------------------------------
    Private Function getScaleFactor(level)
        select case level
        case 0      getScaleFactor = 1.0
        case 1      getScaleFactor = 0.7
        case 2      getScaleFactor = 0.5
        case 3      getScaleFactor = 0.25
        case else   getScaleFactor = 0.125
        end select
    End Function

&#39;-----------------------------------------------------------
    Private Function getTextScaleFactor(level)
        select case level
        case 0      getTextScaleFactor = 0.35
        case 1      getTextScaleFactor = 0.5
        case 2      getTextScaleFactor = 0.75       &#39;ts * (NoLevels + 16)
        case 3      getTextScaleFactor = 1       &#39;ts * (NoLevels + 20)
        case else   getTextScaleFactor = 1.25       &#39;ts * (NoLevels + 24)
        end select
    End Function

&#39;-----------------------------------------------------------
    Private Sub Class_Initialize()

        set model     = metis.currentModel
        set modelView = model.currentModelView

        pi       = 3.1415926535897932

        tsRatio0 = 0.1
        tsRatio1 = 1
        tsRatio2 = 1

        NoLevels = 2

    End Sub

End Class</string>
  </valueset>
 </object>

 <object id="_002ask0025hc03qbnha6">
  <valueset size="10" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="../languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Class CVW_Workspace</string>
   <string name="description"></string>
   <integer name="dbms-admin.commitFlag">0</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20070306 085152944</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="comments"></string>
   <string name="script">option explicit


&#39;-----------------------------------------------------------
&#39;-----------------------------------------------------------
Class CVW_Workspace


    &#39; Variant parameters
    Public Title                        &#39; String
    Public ClearMode                    &#39; String
    Public LayoutStrategy               &#39; String
    Public SymbolOpen                   &#39; String
    Public SymbolClosed                 &#39; String
    Public ViewStyle                    &#39; String
    Public MetamodelMethod              &#39; String
    Public DClickMethod                 &#39; String

    &#39; Context variables (public)
    Public currentModel
    Public currentModelView

    &#39; Context variables (private)
    Private cObject
    Private aObject

    &#39; Types
    Private windowType                   &#39; IMetisType
    
    &#39; Methods
    Private removeMetamodelMethod        &#39; IMetisMethod
    Private removePartRules              &#39; IMetisMethod

    &#39; Layout strategies
    Private workspaceLayoutStrategy     &#39; IMetisInstance

    &#39; Others
    Private cvwArg                      &#39; CVW_ArgumentValue
    Private window                      &#39; CVW_Window

&#39;-----------------------------------------------------------
    Public Property Get component           &#39;IMetisObject
        set component = cObject
    End Property

    Public Property Set component(obj)
        if isEnabled(obj) then
            set cObject = obj
        end if
    End Property

&#39;-----------------------------------------------------------
    Public Property Get configObject           &#39;IMetisObject
        set configObject = aObject
    End Property

    Public Property Set configObject(obj)
        if isEnabled(obj) then
            set aObject = obj
        end if
    End Property

&#39;-----------------------------------------------------------
    &#39; Build internal structures
    Public Sub build
        &#39; Set variant parameters from configuring object - if given
        Title               = cvwArg.getConfiguredValue(component, &#34;Name&#34;)
        Viewstyle           = cvwArg.getConfiguredValue(component, &#34;Viewstyle&#34;)
        ClearMode           = cvwArg.getConfiguredValue(component, &#34;ClearMode&#34;)
        LayoutStrategy      = cvwArg.getConfiguredValue(component, &#34;LayoutStrategy&#34;)
        SymbolOpen          = cvwArg.getConfiguredValue(component, &#34;SymbolOpen&#34;)
        SymbolClosed        = cvwArg.getConfiguredValue(component, &#34;SymbolClosed&#34;)
        MetamodelMethod     = cvwArg.getConfiguredValue(component, &#34;MetamodelMethod&#34;)
        DClickMethod        = cvwArg.getConfiguredValue(component, &#34;DClickMethod&#34;)
        &#39; Set default values
        if Len(Title) = 0 then Title = &#34;CVW_Workspace&#34;
        &#39; Set argument dependent values
        if Len(LayoutStrategy) &#62; 0 then
            set workspaceLayoutStrategy = metis.findLayoutStrategy(LayoutStrategy)
        end if
    End Sub

&#39;-----------------------------------------------------------
    &#39; Configure used components
    Public Sub configure
        &#39; Only relevant if CVW_Workspace uses other components
    End Sub

&#39;-----------------------------------------------------------
    Public Function execute             &#39; Return workspace objectview
        dim m, parentView
        dim method, strategy

        set execute = Nothing
        &#39; Find workspace
        set m = getCVWmodel
        set parentView = findInstanceView(m, windowType, &#34;name&#34;, Title)
        if not isEnabled(parentView) then
            exit function
        end if

        if ClearMode = &#34;Clear&#34; then
            call clearWorkspace
        end if
        if isEnabled(workspaceLayoutStrategy) then
            set parentView.layoutStrategy = workspaceLayoutStrategy
        end if
        if Len(Viewstyle) &#62; 0 then
            call currentModelView.setViewStyle(Viewstyle)
        end if
        if Len(SymbolOpen) &#62; 0 then
            parentView.openSymbol = SymbolOpen
        end if
        if Len(SymbolClosed) &#62; 0 then
            parentView.closedSymbol = SymbolClosed
        end if
        if Len(MetamodelMethod) &#62; 0 then
            set method = metis.findMethod(MetamodelMethod)
            if isEnabled(method) then
                currentModel.runMethod(method)
            end if
        end if
        if Len(DClickMethod) &#62; 0 then
            set method = metis.findMethod(DClickMethod)
            if isEnabled(method) then
                currentModel.runMethod(method)
            end if
        end if
        set execute = parentView

    End Function

&#39;-----------------------------------------------------------
    Private Sub clearWorkspace
        dim m, parentView
        dim childView, children

        set m = getCVWmodel
        set parentView = findInstanceView(m, windowType, &#34;name&#34;, Title)
        if not isEnabled(parentView) then
            exit sub
        end if
        set children = parentView.children
        for each childView in children
            call currentModel.deleteObject(childView.instance)
        next
        &#39; Remove virtual metamodels
        call currentModel.runMethod(removeMetamodelMethod)
        &#39; Remove added part rules
        call currentModel.runMethod(removePartRules)

    End Sub

&#39;-----------------------------------------------------------
    Public Sub Class_Initialize()
        set currentModel     = metis.currentModel
        set currentModelView = currentModel.currentModelView
        set cObject          = currentModel.currentInstance
        set aObject          = currentModel.currentInstance
        &#39; Types
        set windowType       = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/view_objects.kmd#UiType_CVW:Workarea_UUID&#34;)
        &#39; Methods
        set removeMetamodelMethod = metis.findMethod(&#34;http://xml.activeknowledgemodeling.com/cvw/operations/spec_methods.kmd#removeVirtualMetamodels&#34;)
        set removePartRules       = metis.findMethod(&#34;http://xml.activeknowledgemodeling.com/cvw/operations/spec_methods.kmd#removePartRules&#34;)
        &#39; CVW objects
        set window           = new CVW_Window
        set cvwArg           = new CVW_ArgumentValue
        &#39; Variant parameters
        Title                = &#34;CVW_Workspace&#34;
        Viewstyle            = &#34;&#34;
        ClearMode            = &#34;&#34;
        LayoutStrategy       = &#34;&#34;
        SymbolOpen           = &#34;&#34;
        SymbolClosed         = &#34;&#34;
        MetamodelMethod      = &#34;&#34;
        DClickMethod         = &#34;&#34;

    End Sub

&#39;-----------------------------------------------------------
    Public Sub Class_Terminate()
        set window = Nothing
        set cvwArg = Nothing
    End Sub

End Class
</string>
  </valueset>
 </object>

 <object id="_002ask100rfrjmjr5sni">
  <valueset size="10" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="../languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Sub configureCVWcomponent</string>
   <string name="description"></string>
   <integer name="dbms-admin.commitFlag">0</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20070220 135146238</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="comments"></string>
   <string name="script">   &#39;---------------------------------------------------------------------------------------------------
    Sub configureCVWcomponent(configuringObject, component, useConfiguredValue)
        dim compProp, configProp
        dim compProps, configProps
        dim spec, specs
        dim hasPropertyType, hasValueType, propertyType, compType, specContainerType
        dim propValue, checkEquals

        set compType        = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/cvw_objects.kmd#ObjType_CVW:CVW_Component_UUID&#34;)
        set propertyType    = metis.findType(&#34;http://xml.activeknowledgemodeling.com/eka/languages/eka_property.kmd#ObjType_EKA:Property_UUID&#34;)
        set hasPropertyType = metis.findType(&#34;http://xml.activeknowledgemodeling.com/eka/languages/eka_relships.kmd#RelType_EKA:HasProperty_UUID&#34;)
        set hasValueType    = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/cvw_relships.kmd#RelType_CVW:hasValue_UUID&#34;)
        set specContainerType = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/spec_objects.kmd#ObjType_CVW:Specification_Container_UUID&#34;)

        if configuringObject.type.uri &#60;&#62; compType.uri then
            checkEquals = true
        else
            checkEquals = false
        end if
        set compProps   = component.getNeighbourObjects(0, hasPropertyType, propertyType)
        set configProps = configuringObject.getNeighbourObjects(0, hasPropertyType, propertyType)
        for each compProp in compProps
            set configProp = getConfiguringProperty(configProps, compProp, checkEquals)
            if isEnabled(configProp) then
                &#39; Check for specification container
                set specs = configProp.getNeighbourObjects(0, hasValueType, specContainerType)
                if specs.count &#62; 0 then
                    for each spec in specs
                        if isEnabled(spec) then
                            call compProp.setNamedStringValue(&#34;tempvalue&#34;, spec.uri)
                            exit for
                        end if
                    next
                else
                    if useConfiguredValue then
                        propValue = configProp.getNamedStringValue(&#34;tempvalue&#34;)
                    else
                        propValue = configProp.getNamedStringValue(&#34;value&#34;)
                    end if
                    if Len(propValue) &#62; 0 then
                        call compProp.setNamedStringValue(&#34;tempvalue&#34;, propValue)
                    end if
                end if
            end if
        next
    End Sub

   &#39;---------------------------------------------------------------------------------------------------
    Function getConfiguringProperty(configProps, compProp, checkEquals)
        dim equalsType, propertyType
        dim equalProps
        dim prop, configProp

        set getConfiguringProperty = Nothing

        set equalsType   = metis.findType(&#34;http://xml.activeknowledgemodeling.com/eka/languages/eka_relships.kmd#RelType_EKA:Equals_UUID&#34;)
        set propertyType = metis.findType(&#34;http://xml.activeknowledgemodeling.com/eka/languages/eka_property.kmd#ObjType_EKA:Property_UUID&#34;)

        set equalProps = compProp.getNeighbourObjects(0, equalsType, propertyType)
        for each prop in equalProps
            for each configProp in configProps
                if prop.uri = configProp.uri then
                    set getConfiguringProperty = configProp
                    exit for
                end if
            next
        next
        if not isEnabled(getConfiguringProperty) and checkEquals then
            for each configProp in configProps
                if compProp.title = configProp.title then
                    set getConfiguringProperty = configProp
                    exit for
                end if
            next
        end if
    End Function

   &#39;---------------------------------------------------------------------------------------------------
</string>
  </valueset>
 </object>

 <object id="_002ask100rhe34g4akuf">
  <valueset size="10" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="../languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Sub resetCVWcomponent</string>
   <string name="description"></string>
   <integer name="dbms-admin.commitFlag">0</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20070213 221956477</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="comments"></string>
   <string name="script">    Sub resetCVWcomponent(component)
        dim prop, properties
        dim hasPropertyType, propertyType

        set propertyType    = metis.findType(&#34;http://xml.activeknowledgemodeling.com/eka/languages/eka_property.kmd#ObjType_EKA:Property_UUID&#34;)
        set hasPropertyType = metis.findType(&#34;http://xml.activeknowledgemodeling.com/eka/languages/eka_relships.kmd#RelType_EKA:HasProperty_UUID&#34;)

        set properties = component.getNeighbourObjects(0, hasPropertyType, propertyType)
        for each prop in properties
            on error resume next
            propValue = prop.getNamedStringValue(&#34;value&#34;)
            call prop.setNamedStringValue(&#34;tempvalue&#34;, propValue)
        next
    End Sub
</string>
  </valueset>
 </object>

 <object id="_002ask100rj1vbaut17c">
  <valueset size="10" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="../languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Function findCVWcomponent</string>
   <string name="description"></string>
   <integer name="dbms-admin.commitFlag">0</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20070213 095534156</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="comments"></string>
   <string name="script">    Function findCVWcomponent(inst, componentName)
        dim uses1Type, uses2Type, compType
        dim comp, components
        dim found

        set findCVWcomponent = Nothing

        set compType  = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/cvw_objects.kmd#ObjType_CVW:CVW_Component_UUID&#34;)
        set usesType  = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/cvw_relships.kmd#RelType_CVW:usesComponent_UUID&#34;)
        set uses2Type = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/cvw_relships.kmd#RelType_CVW:uses2Component_UUID&#34;)

        found = false
        if isEnabled(inst) then
            if inst.type.uri = compType.uri then
                set components = inst.getNeighbourObjects(0, usesType, compType)
                for each comp in components
                    if isEnabled(comp) then
                        if comp.title = componentName then
                            set findCVWcomponent = comp
                            found = true
                            exit for
                        end if
                    end if
                next
            end if
            if not found then
                set components = inst.getNeighbourObjects(0, uses2Type, compType)
                for each comp in components
                    if isEnabled(comp) then
                        if comp.title = componentName then
                            set findCVWcomponent = comp
                            found = true
                            exit for
                        end if
                    end if
                next
            end if
        end if
    End Function
</string>
  </valueset>
 </object>

 <object id="_002ask301crpfu5k5ie8">
  <valueset size="10" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="../languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Function viewExists</string>
   <string name="description"></string>
   <integer name="dbms-admin.commitFlag">0</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20070302 143357552</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="comments"></string>
   <string name="script">&#39;---------------------------------------------------------------------------------------------------
    function viewExists(inst, parentView)
        dim v, view, views

        viewExists = false
        set views = inst.views
        for each view in views
            if isInView(view, parentView) then
                viewExists = true
                exit for
            end if
        next
    end function

</string>
  </valueset>
 </object>

 <object id="_002ask401587s2ov7fp5">
  <valueset size="10" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="../languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Class CVW_MenuAction</string>
   <string name="description"></string>
   <integer name="dbms-admin.commitFlag">0</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20070307 063114429</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="comments"></string>
   <string name="script">option explicit


&#39;-----------------------------------------------------------
&#39;-----------------------------------------------------------
Class CVW_MenuAction

    &#39; Variant parameters
    Public Title
    Public ParameterName                 &#39; String

    &#39; Context variables
    Public  currentModel
    Public  currentModelView
    Public currentInstance
    Public currentInstanceView
    Private cObject                      &#39; Component object   - IMetisInstance
    Private aObject                      &#39; Configuring object - IMetisInstance

    &#39; Types
    Private actionType                   &#39; IMetisType
    Private componentType                &#39; IMetisType
    Private consistsOfType               &#39; IMetisType
    Private usesType                     &#39; IMetisType

    &#39; Others
    Private cvwArg                       &#39; CVW_ArgumentValue
    Private kind                         &#39; String

&#39;-----------------------------------------------------------
    Public Property Get component           &#39;IMetisObject
        set component = cObject
    End Property

    Public Property Set component(obj)
        if isEnabled(obj) then
            set cObject = obj
        end if
    End Property

&#39;-----------------------------------------------------------
    Public Property Get configObject           &#39;IMetisObject
        set configObject = aObject
    End Property

    Public Property Set configObject(obj)
        if isEnabled(obj) then
            set aObject = obj
        end if
    End Property

&#39;-----------------------------------------------------------
    &#39; Build internal structures
    Public Sub build
        kind = configObject.getNamedStringValue(&#34;kind&#34;)
   End Sub

&#39;-----------------------------------------------------------
    &#39; Configure used components
    Public Sub configure
        &#39; Only relevant if this component uses other components
    End Sub

&#39;-----------------------------------------------------------
    &#39; Do what the component is built for - return result
    Public Function execute
        dim action, actions
        dim comp, components
        dim instances
        dim workarea, workspace
        dim contentSpec

        execute = false
        &#39; The code
        if kind = &#34;Menu&#34; then
            &#39; Find actions
            set actions = configObject.getNeighbourObjects(0, consistsOfType, actionType)
            for each action in actions
                if isEnabled(action) then
                    set cvwAction = new CVW_MenuAction
                    set cvwAction.configObject = action
                    call cvwAction.build
                    call cvwAction.execute
                end if
            next
        elseif kind = &#34;Action&#34; then
            set instances = Nothing
            set components = configObject.getNeighbourObjects(0, usesType, componentType)
            for each comp in components
                if isEnabled(comp) then
                    if comp.name = &#34;ContentSpecification&#34; then
                        set contentSpec = comp
                        set instances = execContentSpecification(contentSpec)
                        exit for
                    end if
                end if
            next
            for each comp in components
                if isEnabled(comp) then
                    if comp.name = &#34;Workspace&#34; then
                        set workspace = execWorkspace(comp)
                        exit for
                    end if
                end if
            next
            for each comp in components
                if isEnabled(comp) then
                    if comp.name = &#34;Workarea&#34; then
                        set workarea = execWorkarea(comp, workspace)
                        if isValid(workarea) and isValid(instances) then
                            call workarea.populate(instances, contentSpec)
                        end if
                        exit for
                    end if
                end if
            next
        end if
        execute = true
    End Function

&#39;-----------------------------------------------------------
    Private Function execWorkarea(comp, workspace)
        dim cvwWorkarea, cvwWorkspace

        set execWorkarea = Nothing
        &#39; Configure workarea
        call resetCVWcomponent(comp)
        call configureCVWcomponent(configObject, comp, false)
        &#39; Build and execute
        set cvwWorkarea = new CVW_Workarea
        set cvwWorkarea.currentInstance = currentInstance
        set cvwWorkarea.currentInstanceView = currentInstanceView
        set cvwWorkarea.component = comp
        set cvwWorkarea.configObject = configObject
        if not isValid(workspace) then
            set cvwWorkspace = new CVW_Workspace
            set workspace = cvwWorkspace.execute             &#39; Execute methods dependent on configuration
        end if
        set cvwWorkarea.workspace = workspace
        set cvwWorkarea.currentModel = currentModel
        set cvwWorkarea.currentModelView = currentModelView
        call cvwWorkarea.build                          &#39; Build internal structures
        call cvwWorkarea.configure
        call cvwWorkarea.execute                        &#39; Execute: Builds workarea (as an empty window w titlebar)

        set execWorkarea = cvwWorkarea
    End Function

&#39;-----------------------------------------------------------
    Private Function execWorkspace(comp)
        dim workspace, cvwWorkspace

        set execWorkspace = Nothing
        &#39; Configure workspace
        call resetCVWcomponent(comp)
        call configureCVWcomponent(configObject, comp, false)
        &#39; Build and execute
        set cvwWorkspace = new CVW_Workspace
        set cvwWorkspace.component = comp
        set cvwWorkspace.configObject = configObject
        call cvwWorkspace.build                          &#39; Build internal structures
        set workspace = cvwWorkspace.execute             &#39; Execute methods dependent on configuration
        if isValid(workspace) then
            set execWorkspace = workspace
        end if
    End Function

&#39;-----------------------------------------------------------
    Private Function execContentSpecification(comp)
        dim instances
        dim cvwContentSpec

        &#39; Configure content specification
        set execContentSpecification = Nothing
        call resetCVWcomponent(component)
        call configureCVWcomponent(configObject, comp, false)
        &#39; Build and execute
        set cvwContentSpec = new CVW_ContentSpecification
        set cvwContentSpec.currentModel     = currentModel
        set cvwContentSpec.currentModelView = currentModelView
        set cvwContentSpec.component    = comp
        set cvwContentSpec.configObject = configObject
        call cvwContentSpec.build                          &#39; Build internal structures
        set instances = cvwContentSpec.execute             &#39; Execute methods dependent on configuration
        if isValid(instances) then
            if instances.count &#62; 0 then
                set execContentSpecification = instances
            end if
        end if
    End Function

&#39;-----------------------------------------------------------
    Private Sub Class_Initialize()
        set currentModel        = metis.currentModel
        set currentModelView    = currentModel.currentModelView
        set currentInstance     = currentModel.currentInstance
        set currentInstanceView = currentModelView.currentInstanceView
        set cObject   = currentInstance
        set aObject   = currentInstance
        set cvwArg    = new CVW_ArgumentValue

        set actionType      = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/action_objects.kmd#ObjType_CVW:Button_UUID&#34;)
        set componentType   = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/cvw_objects.kmd#ObjType_CVW:CVW_Component_UUID&#34;)
        set consistsOfType  = metis.findType(&#34;http://xml.activeknowledgemodeling.com/eka/languages/eka_relships.kmd#RelType_EKA:Member_UUID&#34;)
        set usesType        = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/cvw_relships.kmd#RelType_CVW:usesComponent2_UUID&#34;)

    End Sub

&#39;-----------------------------------------------------------
    Private Sub Class_Terminate()
        set cvwArg = Nothing
    End Sub

End Class

</string>
  </valueset>
 </object>

 <object id="_002ask5018nbv9mcnm5d">
  <valueset size="10" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="../languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Class CVW_Object</string>
   <string name="description"></string>
   <integer name="dbms-admin.commitFlag">0</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20070218 115840538</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="comments"></string>
   <string name="script">option explicit

&#39;-----------------------------------------------------------
&#39;-----------------------------------------------------------
Class CVW_Object

    Public  object
    Public  objectView

    Public  ModelContext            &#39; String
    Public  ModelViewName           &#39; String
    Public  ModelType               &#39; String

    Private model
    Private modelView
    Private modlType


&#39;-----------------------------------------------------------
    Public Sub relocateToModel
        dim relocated

        if modelObject.ownerModel.uri = model.uri then
            if isEnabled(object) then
                set object.parent = modelObject
            end if
        else
            &#39; Instance and view models are not in the same file
            &#39; Create new element and copy property values
            set relocated = modelObject.newPart(object.type)
            call copyPropertyValues(object, relocated)
            call objectView.setInstance(relocated)
            model.deleteObject(object)
        end if
    End Sub

&#39;-----------------------------------------------------------
    Public Sub connectViewAsChild
    End Sub

&#39;-----------------------------------------------------------
    Public Property  Get modelObject
        dim modlType, instModel

        if Len(ModelType) &#62; 0 then
            set modlType = metis.findType(ModelType)
        end if
        if ModelContext = &#34;SubModel&#34; then
            if Len(ModelViewName) &#62; 0 then
                set instModel = findInstModel(ModelContext, modelViewName)
            else
                set instModel = getInstModel(ModelContext, &#34;&#34;)
            end if
            if isEnabled(instModel) then
                set modelObject = findModelObject(instModel, modlType)
            end if
        elseif ModelContext = &#34;ContainerType&#34; then
            if Len(ModelType) &#62; 0 then
                set modlType = metis.findType(ModelType)
                if isEnabled(modlType) then
                    set modelObject = findModelObject(model, modlType)
                end if
            end if
        else
            set modelObject = findModelObject(model, modlType)
        end if
    End Property


&#39;-----------------------------------------------------------------
    Private Function findModelObject(instModel, modelObjectType)
        dim inst, instances, obj

        set findModelObject = Nothing
        set obj = metis.findInstance(instModel.uri)
        set instances = obj.parts
        for each inst in instances
            if isEnabled(inst) then
                if inst.type.uri = modelObjectType.uri then
                    set findModelObject = inst
                    exit for
                end if
            end if
        next
        if not isEnabled(findModelObject) then
            set findModelObject = metis.findInstance(instModel.uri)
        end if
    End function

&#39;-----------------------------------------------------------
    Private Sub Class_Initialize()
        set model      = metis.currentModel
        set modelView  = model.currentModelView
        set object     = model.currentInstance
        set objectView = modelView.currentInstanceView
    End Sub

End Class
</string>
  </valueset>
 </object>

 <object id="_002ask501f2mk407o9ri">
  <valueset size="10" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="../languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Function findInstModel</string>
   <string name="description"></string>
   <integer name="dbms-admin.commitFlag">0</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20070218 115756806</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="comments"></string>
   <string name="script">    Function findInstModel(modelContext, modelViewName)
        dim model, connector
        dim child, children
        dim part, parts
        dim m, modelView, modelViews

        set findInstModel = Nothing
        set model = getCVWmodel
        select case modelContext
        case &#34;CurrentModel&#34;
            set findInstModel = model
        case &#34;SubModel&#34;
            set connector = Nothing
            set modelViews = getCVWmodel.views
            for each modelView in modelViews
                if modelView.title = modelViewName then
                    set children = modelView.children
                    for each child in children
                        if child.isConnector then
                            set connector = child
                            set children = connector.children
                            if children.count &#62; 0 then
                                set child = children(1)
                                set parts = child.instance.parts
                                for each part in parts
                                    if isEnabled(part) then
                                        set m = part.ownerModel
                                        set findInstModel = m
                                        exit for
                                    end if
                                next
                            end if
                            if isEnabled(findInstModel) then
                                exit for
                            end if
                        end if
                    next
                    exit for
                end if
            next
        end select
    End Function
</string>
  </valueset>
 </object>

 <object id="_002ask501ir2e0r3b061">
  <valueset size="10" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="../languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Sub copyPropertyValues</string>
   <string name="description"></string>
   <integer name="dbms-admin.commitFlag">0</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20070217 145256536</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="comments"></string>
   <string name="script">    sub copyPropertyValues(fromInstance, toInstance)
        dim prop, properties
        dim value

        if isEnabled(fromInstance) and isEnabled(toInstance) then
            set properties = fromInstance.type.allProperties
            for each prop in properties
                on error resume next
                set value = fromInstance.getValue(prop)
                call toInstance.setValue(prop, value)
            next
        end if
    end sub
</string>
  </valueset>
 </object>

 <object id="_002ask70127nuosr5tis">
  <valueset size="10" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="../languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Class EKA_Context
</string>
   <string name="description"></string>
   <integer name="dbms-admin.commitFlag">0</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20070221 064102734</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="comments"></string>
   <string name="script">option explicit

&#39;-----------------------------------------------------------
&#39;-----------------------------------------------------------
Class EKA_Context

    Public contextMode                      &#39; String
    Public modelViewName                    &#39; String
    Public modelObjectType                  &#39; IMetisType
    Public operationModelViewName           &#39; String
    Public currentModel
    Public currentModelView
    Public currentInstance
    Public currentInstanceView

    Private model
    Private modelView
    Private contextType                     &#39; IMetisType
    Private propertyType                    &#39; IMetisType
    Private hasPropertyType                 &#39; IMetisType
    Private modelObject                     &#39; IMetisInstance

   &#39;---------------------------------------------------------------------------------------------------
    Public Property Get contentModel
        set contentModel = getContentModel
    End Property

   &#39;---------------------------------------------------------------------------------------------------
    Private Function getParentModel
        dim child, children
        dim part, parentInst

        set getParentModel = currentModel
        if isEnabled(currentModelView) then
            &#39; Find parent model
            set children = currentModelView.children
            if children.count &#62; 0 then
                for each child in children
                    if hasInstance(child) then
                        set part = child.instance
                        if isEnabled(part) then
                            set getParentModel = part.ownerModel
                            exit for
                        end if
                    end if
                next
            end if
        end if
    End Function

&#39;-----------------------------------------------------------------
    Private Function findModelObject(instModel, modelObjectType)
        dim inst, instances, obj

        set findModelObject = Nothing
        set obj = metis.findInstance(instModel.uri)
        set instances = obj.parts
        for each inst in instances
            if isEnabled(inst) then
                if inst.type.uri = modelObjectType.uri then
                    set findModelObject = inst
                    exit for
                end if
            end if
        next
        if not isEnabled(findModelObject) then
            set findModelObject = metis.findInstance(instModel.uri)
        end if
    End function

&#39;-----------------------------------------------------------------
    Private Function getContentModel()
        dim modelUri
        dim context, contexts
        dim prop, properties
        dim modelObjectTypeUri
        dim parentModel, instModel

        set getContentModel = Nothing
        set parentModel = currentModel &#39;getParentModel
        if isEnabled(parentModel) then
            set contexts = parentModel.findInstances(contextType, &#34;&#34;, &#34;&#34;)
            if isValid(contexts) then
                set contexts = instancesInModel(contexts, parentModel)
            end if
            for each context in contexts
                if isEnabled(context) then
                    set properties = context.getNeighbourObjects(0, hasPropertyType, propertyType)
                    for each prop  in properties
                        if prop.title = &#34;ContextMode&#34; then
                            contextMode = prop.getNamedStringValue(&#34;value&#34;)
                        elseif prop.title = &#34;ContentModelView&#34; then
                            modelViewName = prop.getNamedStringValue(&#34;value&#34;)
                        elseif prop.title = &#34;OperationModelView&#34; then
                            operationModelViewName = prop.getNamedStringValue(&#34;value&#34;)
                        elseif prop.title = &#34;ModelObjectType&#34; then
                            modelObjectTypeUri = prop.getNamedStringValue(&#34;value&#34;)
                            if Len(modelObjectTypeUri) &#62; 0 then
                                set modelObjectType = metis.findType(modelObjectTypeUri)
                            end if
                        end if
                    next
                    if Len(operationModelViewName) &#62; 0 then
                        if currentModelView.title &#60;&#62; operationModelViewName then
                            exit for
                        end if
                    end if
                    select case contextMode
                    case &#34;CurrentModel&#34;
                        if isEnabled(modelObjectType) then
                            set getContentModel = findModelObject(parentModel, modelObjectType)
                        end if
                    case &#34;SubModel&#34;
                        if Len(modelViewName) &#62; 0 then
                            set instModel = findInstModel(contextMode, modelViewName)
                        else
                            set instModel = getInstModel(contextMode, &#34;&#34;)
                        end if
                        if isEnabled(instModel) then
                            if isEnabled(modelObjectType) then
                                set getContentModel = findModelObject(instModel, modelObjectType)
                            else
                                set getContentModel = metis.findInstance(instModel.uri)
                            end if
                        else
                            set getContentModel = metis.findInstance(parentModel.uri)
                        end if
                    end select
                end if
            next
        end if
    End Function

&#39;-----------------------------------------------------------
    Public Sub Class_Initialize()

        set currentModel        = metis.currentModel
        set currentModelView    = currentModel.currentModelView
        set currentInstance     = currentModel.currentInstance
        set currentInstanceView = currentModelView.currentInstanceView
        set contextType         = metis.findType(&#34;http://xml.activeknowledgemodeling.com/eka/languages/eka_context.kmd#ObjType_EKA:Context_UUID&#34;)
        set propertyType        = metis.findType(&#34;http://xml.activeknowledgemodeling.com/eka/languages/eka_property.kmd#ObjType_EKA:Property_UUID&#34;)
        set hasPropertyType     = metis.findType(&#34;http://xml.activeknowledgemodeling.com/eka/languages/eka_relships.kmd#RelType_EKA:HasProperty_UUID&#34;)

    End Sub

End Class
</string>
  </valueset>
 </object>

 <object id="_002ask701tmsf9rqqa6k">
  <valueset size="3" xlink:role="type" xlink:title="Container" xlink:href="metis:stdtypes#oid3" xlink:actuate="user">
   <string name="name">Context</string>
   <string name="description"></string>
   <string name="externalID"></string>
  </valueset>
  <part-link xlink:role="object" xlink:title="Context" xlink:href="#_002ask701tnrvjm9ptfh"/>
  <part-link xlink:role="object" xlink:title="ContextMode" xlink:href="#_002ask701tokg58d9bkp"/>
 </object>

 <object id="_002ask701tnrvjm9ptfh">
  <valueset size="9" xlink:role="type" xlink:title="Context (EKA)" xlink:href="../../eka/languages/eka_context.kmd#ObjType_EKA:Context_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Context</string>
   <string name="description"></string>
   <integer name="dbms-admin.commitFlag">1</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20070219 180140101</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="comments"></string>
  </valueset>
 </object>

 <object id="_002ask701tokg58d9bkp">
  <valueset size="16" xlink:role="type" xlink:title="Property (EKA)" xlink:href="../../eka/languages/eka_property.kmd#ObjType_EKA:Property_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">ContextMode</string>
   <string name="description"></string>
   <integer name="dbms-admin.commitFlag">1</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20070219 180156225</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="comments"></string>
   <integer name="datatype">0</integer>
   <string name="value">CurrentModel</string>
   <string name="tempvalue"></string>
   <string name="unit"></string>
   <string name="tolerance"></string>
   <string name="labelProp" class="volatile">ContextMode</string>
   <string name="iconProp" class="volatile">http://xml.activeknowledgemodeling.com/eka/views/symbols/productmodule.svg#oid1</string>
  </valueset>
 </object>

 <relationship id="_002ask701treatrjkfbo">
  <valueset size="6" xlink:role="type" xlink:title="Has property" xlink:href="../../eka/languages/eka_relships.kmd#RelType_EKA:HasProperty_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <integer name="dbms-admin.commitFlag">1</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20070219 180102557</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <integer name="connectionStrength">100</integer>
  </valueset>
  <origin seq="0" xlink:role="object" xlink:title="Context" xlink:href="#_002ask701tnrvjm9ptfh"/>
  <target seq="0" xlink:role="object" xlink:title="ContextMode" xlink:href="#_002ask701tokg58d9bkp"/>
 </relationship>

 <object id="_002ask70247pvb4q1ble">
  <valueset size="10" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="../languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Sub relocate</string>
   <string name="description"></string>
   <integer name="dbms-admin.commitFlag">0</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20070220 085015756</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="comments"></string>
   <string name="script">    Sub relocate(inst, modelObject, instView)
        dim relocated

        if inst.parent.uri &#60;&#62; modelObject.uri then
            set relocated = modelObject.newPart(inst.type)
            call copyPropertyValues(inst, relocated)
            call instView.setInstance(relocated)
            model.deleteObject(inst)
        end if
    End Sub
</string>
  </valueset>
 </object>

 <object id="_002ask800s0j83rhe8bt">
  <valueset size="10" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="../languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Function instancesInModel</string>
   <string name="description"></string>
   <integer name="dbms-admin.commitFlag">0</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20070220 080959441</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="comments"></string>
   <string name="script">    function instancesInModel(instances, model)
        dim inst
        dim i, removed

        set instancesInModel = Nothing
        if isValid(instances) then
            &#39; If not in model, remove from list
            i = 1
            for each inst in instances
                removed = false
                if inst.ownerModel.uri &#60;&#62; model.uri then
                    instances.removeAt(i)
                    removed = true
                end if
                if not removed then
                    i = i + 1
                end if
            next
            set instancesInModel = instances
        end if
    end function
</string>
  </valueset>
 </object>

 <object id="_002ask801bsu5ne1tf0u">
  <valueset size="10" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="../languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Function findParts</string>
   <string name="description"></string>
   <integer name="dbms-admin.commitFlag">0</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20070308 140716252</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="comments"></string>
   <string name="script">    function findParts(parentObj, instType, propName, propValue)
        dim part, parts
        dim hasConstraint
        dim i, removed

        set findParts = Nothing
        hasConstraint = false
        if Len(propName) &#62; 0 and Len(propValue) &#62; 0 then
            hasConstraint = true
        end if
        if isEnabled(parentObj) then
            set parts = parentObj.parts
            i = 1
            for each part in parts
                removed = false
                if part.isObject then
                    if part.type.inherits(instType) then
                        if hasConstraint then
                            sval = part.getNamedStringValue(propName)
                            if not sval = propValue then
                                if sval = &#34;true&#34; then sval = &#34;1&#34;
                                elseif sval = &#34;false&#34; then sval = &#34;0&#34;
                            end if
                            if not sval = propValue then
                                parts.removeAt(i)
                                removed = true
                            end if
                        end if
                    else
                        parts.removeAt(i)
                        removed = true
                    end if
                else
                    parts.removeAt(i)
                    removed = true
                end if
                if not removed then i = i + 1
            next
            set findParts = parts
        end if
    end function
</string>
  </valueset>
 </object>

 <object id="_002ask901aavg0a9fq9u">
  <valueset size="10" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="../languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Function buildInstRules, buildRelRules</string>
   <string name="description"></string>
   <integer name="dbms-admin.commitFlag">0</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20070308 133538283</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="comments"></string>
   <string name="script">&#39;---------------------------------------------------------------------------------------------------
    function buildRelRules(obj1, list, noList, excludeRelType)
        dim obj2, rel, rels
        dim relDir
        dim type1, type2, relType
        dim cvwRule, isTopType
        dim exclude

        buildRelRules = false

        if isEnabled(obj1) then
            set rels = obj1.neighbourRelationships
            for each rel in rels
                if isEnabled(rel) then
                    exclude = false
                    if isEnabled(excludeRelType) then
                        if excludeRelType.uri = rel.type.uri then
                            exclude = true
                        end if
                    end if
                    if not exclude then
                        call buildRelRule(rel, obj1, list, noList, excludeRelType)
                        buildRelRules = true
                    end if
                end if
            next
        end if
    end function

&#39;-----------------------------------------------------------
    sub buildInstRules(inst, list, noList, hasConstraintType)
        dim instType
        dim rel, relships, prop
        dim operator, propName, propValue
        dim operatorProp, valueProp
        dim cvwRule

        if isEnabled(inst) then
            operatorProp = &#34;operator&#34;
            valueProp    = &#34;value&#34;
            set instType = inst.type
            set relships = inst.getNeighbourRelationships(0, hasConstraintType)
            if relships.count = 0 then
                set cvwRule = new CVW_InstRule
                set cvwRule.instType = instType
                cvwRule.title     = instType.title
                cvwRule.propname  = &#34;&#34;
                cvwRule.operator  = &#34;&#34;
                cvwRule.propValue = &#34;&#34;
                call addRuleToList(cvwRule, list, noList)
                exit sub
            end if
            for each rel in relships
                if isEnabled(rel) then
                    operator = rel.getNamedStringValue(operatorProp)
                    set prop = rel.target
                    if isEnabled(prop) then
                        propName = prop.name
                        propValue = prop.getNamedStringValue(valueProp)
                        set cvwRule = new CVW_InstRule
                        set cvwRule.instType = instType
                        cvwRule.title = instType.title &#38; &#34;_has_&#34; &#38; propName &#38; &#34;_&#34; &#38; operator &#38; &#34;_&#34; &#38; propValue
                        cvwRule.propname  = propName
                        cvwRule.operator  = operator
                        cvwRule.propvalue = propValue
                        call addRuleToList(cvwRule, list, noList)
                    end if
                end if
            next
        end if
    end sub

&#39;-----------------------------------------------------------
    sub buildRelRule(rel, obj1, list, noList, excludeRelType)
        dim relType, relDir
        dim type1, type2
        dim obj2, rel2, rels
        dim exclude
        dim cvwRule

        set relType = rel.type
        if rel.origin.uri = obj1.uri then
            relDir = 0
            set type1 = obj1.type
            set obj2 = rel.target
            set type2 = obj2.type
        elseif rel.target.uri = obj1.uri then
            relDir = 1
            set type1 = obj1.type
            set obj2 = rel.origin
            set type2 = obj2.type
        end if
        set cvwRule = new CVW_RelRule
        cvwRule.title = type1.title &#38; &#34;_&#34; &#38; relType.title &#38; &#34;_&#34; &#38; type2.title
        set cvwRule.parentType = type1
        set cvwRule.relType = relType
        set cvwRule.childType = type2
        cvwRule.relDir = relDir
        call addRuleToList(cvwRule, list, noList)
        
        set rels = obj2.neighbourRelationships
        for each rel2 in rels
            if isEnabled(rel2) then
                exclude = false
                if isEnabled(excludeRelType) then
                    if excludeRelType.uri = rel2.type.uri then
                        exclude = true
                    end if
                end if
                if not exclude then
                    if not ruleInList(rel2, list, noList) then
                        call buildRelRule(rel2, obj2, list, noList, excludeRelType)
                    end if
                end if
            end if
        next
    end sub

&#39;-----------------------------------------------------------
    Function ruleInList(rel, list, noList)
        dim rule
        dim indx, found
        dim type1, type2, relType
        dim title

        ruleInList = false
        set relType = rel.type
        set type1   = rel.origin.type
        set type2   = rel.target.type
        title = type1.title &#38; &#34;_&#34; &#38; relType.title &#38; &#34;_&#34; &#38; type2.title
        for indx = 1 to noList
            set rule = list(indx)
            if isValid(rule) then
                if title = rule.title then
                    ruleInList = true
                    exit for
                end if
            end if
        next
    End Function

&#39;-----------------------------------------------------------
    Sub addRuleToList(cvwRule, list, noList)
        dim rule
        dim indx, found

        found = false
        for indx = 1 to noList
            set rule = list(indx)
            if isValid(rule) then
                if cvwRule.title = rule.title then
                    found = true
                    exit for
                end if
            end if
        next
        if not found then
            noList = noList + 1
            ReDim Preserve list(noList)
            set list(noList) = cvwRule
        end if
    End Sub

&#39;---------------------------------------------------------------------------------------------------
</string>
  </valueset>
 </object>

 <object id="_002ask901e9l3j13kn7d">
  <valueset size="10" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="../languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Class CVW_InstRule,  CVW_RelRule</string>
   <string name="description"></string>
   <integer name="dbms-admin.commitFlag">0</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20070221 154625848</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="comments"></string>
   <string name="script">option explicit

&#39;-----------------------------------------------------------
&#39;-----------------------------------------------------------
Class CVW_InstRule
    Public title
    Public instType
    Public propname
    Public propvalue
    Public operator

&#39;-----------------------------------------------------------
    Private Sub Class_Initialize()
        title = &#34;InstRule&#34;
        set instType  = Nothing
        propname  = &#34;&#34;
        propvalue = &#34;&#34;
        operator  = &#34;&#34;
    End Sub

End Class

&#39;-----------------------------------------------------------

&#39;-----------------------------------------------------------
Class CVW_RelRule
    Public title
    Public parentType
    Public relType
    Public childType
    Public relDir

&#39;-----------------------------------------------------------
    Private Sub Class_Initialize()
        title = &#34;RelRule&#34;
        set parentType = Nothing
        set relType   = Nothing
        set childType = Nothing
        relDir = 0
    End Sub

End Class

</string>
  </valueset>
 </object>

 <object id="_002aski012b5i49rod62">
  <valueset size="10" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="../languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Function isInView</string>
   <string name="description"></string>
   <integer name="dbms-admin.commitFlag">0</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20070302 100045732</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="comments"></string>
   <string name="script">&#39;---------------------------------------------------------------------------------------------------
    function isInView(instView, containerView)
        dim parentView
        dim found

        isInView = false
        if isEnabled(instView) and isEnabled(containerView) then
            set parentView = instView.parent
            if isEnabled(parentView) then
                if parentView.uri = containerView.uri then
                    isInView = true
                else
                    found = isInView(parentView, containerView)
                    if found then isInView = true
                end if
            end if
        end if

    end function

</string>
  </valueset>
 </object>

 <objectview id="_002asj60272bqgu0h19s" xlink:role="object" xlink:title="EKA Classes" xlink:href="#_002asj60272bqgti3c9a" state="open" behavior="nested" text-scale="0.421782" decomp-scale="0.5" left="64" top="1888.08" width="2304" height="1792">
  <symbol-override state="open" xlink:role="symbol" xlink:title="Open Nested Object" xlink:href="metis:stdsyms#oid67" xlink:actuate="user">
  </symbol-override>
  <symbol-override state="closed" xlink:role="symbol" xlink:title="Closed Nested Object" xlink:href="metis:stdsyms#oid68" xlink:actuate="user">
  </symbol-override>
  <child-link xlink:role="objectview" xlink:title="Class EKA_Property&#10;" xlink:href="#_002asje013tjoov5eqoc"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002asje013tjoo57eua5"/>
  <child-link xlink:role="objectview" xlink:title="Class EKA_Context&#10;" xlink:href="#_002ask70127nuognlp2v"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002ask70127nuo4rf4c1"/>
 </objectview>

 <relationshipview id="_002asj60272bqq7g887b" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:href="#_002asj6027323duqrqb2"/>
  <target-link xlink:role="objectview" xlink:title="EKA Classes" xlink:href="#_002asj60272bqgu0h19s"/>
 </relationshipview>

 <objectview id="_002asj602731to4i2b9a" xlink:role="object" xlink:title="CVW Classes" xlink:href="#_002asj602731tohevjet" state="open" behavior="nested" text-scale="0.421782" decomp-scale="0.5" left="2368" top="96.08" width="2304" height="1792">
  <symbol-override state="open" xlink:role="symbol" xlink:title="Open Nested Object" xlink:href="metis:stdsyms#oid67" xlink:actuate="user">
  </symbol-override>
  <symbol-override state="closed" xlink:role="symbol" xlink:title="Closed Nested Object" xlink:href="metis:stdsyms#oid68" xlink:actuate="user">
  </symbol-override>
  <child-link xlink:role="objectview" xlink:title="Class CVW_ArgumentValue" xlink:href="#_002asj6029412ueje009"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002asj6029412utbh6m0"/>
  <child-link xlink:role="objectview" xlink:title="Class CVW_Window" xlink:href="#_002asj60295oc1l4laav"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002asj60295ocb7vivgn"/>
  <child-link xlink:role="objectview" xlink:title="Class CVW_ContentSpecification" xlink:href="#_002asj7020mpov8h8om2"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002asj7020mpovh0hv81"/>
  <child-link xlink:role="objectview" xlink:title="Class CVW_SelectDialog" xlink:href="#_002asj7029832ihh81ps"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002asj7029832itd6mf5"/>
  <child-link xlink:role="objectview" xlink:title="Class CVW_ViewstyleSpecification&#10;" xlink:href="#_002asj801aq3hgu8et1t"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002asj801aq3hgjh9nve"/>
  <child-link xlink:role="objectview" xlink:title="Class CVW_Action" xlink:href="#_002asja01opig6pcgi41"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002asja01opig6i4mvad"/>
  <child-link xlink:role="objectview" xlink:title="Class CVW_Workarea&#10;" xlink:href="#_002asjb01dkcl45hj97c"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002asjb01dkcl4pr5hrp"/>
  <child-link xlink:role="objectview" xlink:title="Class CVW_ViewSpecification&#10;" xlink:href="#_002asjb0252ci98v7p1p"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002asjb0252ci9cjeh7v"/>
  <child-link xlink:role="objectview" xlink:title="Class CVW_ViewStrategy&#10;" xlink:href="#_002asjb026gg9qk39uvh"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002asjb026gg9q1hj88d"/>
  <child-link xlink:role="objectview" xlink:title="Class CVW_StatusBar&#10;" xlink:href="#_002asjd00rcftrt4le1g"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002asjd00rcftrl6qseo"/>
  <child-link xlink:role="objectview" xlink:title="Class CVW_MenuTree&#10;" xlink:href="#_002asjg014c2om96ja33"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002asjg014c2omb2rsjf"/>
  <child-link xlink:role="objectview" xlink:title="Class CVW_CircularLayout&#10;" xlink:href="#_002ask0025779hp85ckn"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002ask0025779hc62sgd"/>
  <child-link xlink:role="objectview" xlink:title="Class CVW_Workspace" xlink:href="#_002ask0025hc03jv8qa6"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002ask0025hc03toaroj"/>
  <child-link xlink:role="objectview" xlink:title="Class CVW_MenuAction" xlink:href="#_002ask401587s2ehspvf"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002ask401587scscu39a"/>
  <child-link xlink:role="objectview" xlink:title="Class CVW_Object" xlink:href="#_002ask5018nbv97prg0k"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002ask5018nbv901i5qc"/>
  <child-link xlink:role="objectview" xlink:title="Class CVW_InstRule,  CVW_RelRule" xlink:href="#_002ask901e9l3jcij714"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002ask901e9l3jjal9u1"/>
 </objectview>

 <relationshipview id="_002asj602731tor4rp3q" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:href="#_002asj6027323duqrqb2"/>
  <target-link xlink:role="objectview" xlink:title="CVW Classes" xlink:href="#_002asj602731to4i2b9a"/>
 </relationshipview>

 <relationshipview id="_002asj6027323d42dctp" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:href="#_002asj6027323duqrqb2"/>
  <target-link xlink:role="objectview" xlink:href="#_002asj6027323duqrqb2"/>
 </relationshipview>

 <objectview id="_002asj6027323duqrqb2" xlink:role="object" xlink:href="#_002asj6027323dphmg96" state="open" behavior="nested" text-scale="0.843564" decomp-scale="0.25" left="-1632" top="-712.02" width="1184" height="936.02">
  <symbol-override state="open" xlink:role="symbol" xlink:title="Open Nested Object" xlink:href="metis:stdsyms#oid67" xlink:actuate="user">
  </symbol-override>
  <symbol-override state="closed" xlink:role="symbol" xlink:title="Closed Nested Object" xlink:href="metis:stdsyms#oid68" xlink:actuate="user">
  </symbol-override>
  <child-link xlink:role="relationshipview" xlink:href="#_002asj6027323d42dctp"/>
  <child-link xlink:role="objectview" xlink:title="EKA Classes" xlink:href="#_002asj60272bqgu0h19s"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002asj60272bqq7g887b"/>
  <child-link xlink:role="objectview" xlink:title="CVW Classes" xlink:href="#_002asj602731to4i2b9a"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002asj602731tor4rp3q"/>
  <child-link xlink:role="objectview" xlink:title="Utilities" xlink:href="#_002asj6027328323iv1c"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002asj60273283dcp1pi"/>
  <child-link xlink:role="objectview" xlink:title="Context" xlink:href="#_002ask701tmsf99c81tn"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002ask701tmsf979j6eg"/>
 </objectview>

 <objectview id="_002asj6027328323iv1c" xlink:role="object" xlink:title="Utilities" xlink:href="#_002asj60273283vqvfr0" state="open" behavior="nested" text-scale="0.421782" decomp-scale="0.5" left="64" top="96.08" width="2304" height="1792">
  <symbol-override state="open" xlink:role="symbol" xlink:title="Open Nested Object" xlink:href="metis:stdsyms#oid67" xlink:actuate="user">
  </symbol-override>
  <symbol-override state="closed" xlink:role="symbol" xlink:title="Closed Nested Object" xlink:href="metis:stdsyms#oid68" xlink:actuate="user">
  </symbol-override>
  <child-link xlink:role="objectview" xlink:title="Function isEnabled" xlink:href="#_002asj6028o946uvcohe"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002asj6028o94gjerv76"/>
  <child-link xlink:role="objectview" xlink:title="Function isValid" xlink:href="#_002asj6028rh52gj2jqo"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002asj6028rh5250q4mq"/>
  <child-link xlink:role="objectview" xlink:title="Function hasInstance" xlink:href="#_002asj6028se6qugpvhl"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002asj6028se6qs6nvk1"/>
  <child-link xlink:role="objectview" xlink:title="Function instanceInList" xlink:href="#_002asj7020r6sq3sddlj"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002asj7020r6sqkein9i"/>
  <child-link xlink:role="objectview" xlink:title="Function findInstanceView" xlink:href="#_002asj8016ouuqkkae3q"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002asj8016ouuq08tsme"/>
  <child-link xlink:role="objectview" xlink:title="Function generateTree" xlink:href="#_002asja014sj0q5c5qkg"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002asja014sj0qcuk4cb"/>
  <child-link xlink:role="objectview" xlink:title="Function cleanTree" xlink:href="#_002asja014v6prer1ikd"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002asja014v6pr5gevtd"/>
  <child-link xlink:role="objectview" xlink:title="Function getInstModel" xlink:href="#_002asjd0145f9828vr7c"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002asjd0145f98h871f2"/>
  <child-link xlink:role="objectview" xlink:title="Function getCVWmodel" xlink:href="#_002asjl01df812n4lf1k"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002asjl01df812h1s8n9"/>
  <child-link xlink:role="objectview" xlink:title="Sub configureCVWcomponent" xlink:href="#_002ask100rfrjmb7t4hn"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002ask100rfrjmp16tje"/>
  <child-link xlink:role="objectview" xlink:title="Sub resetCVWcomponent" xlink:href="#_002ask100rhe349v46f5"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002ask100rhe34sahehg"/>
  <child-link xlink:role="objectview" xlink:title="Function findCVWcomponent" xlink:href="#_002ask100rj1vbtl7l9f"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002ask100rj1vbnoujlc"/>
  <child-link xlink:role="objectview" xlink:title="Function viewExists" xlink:href="#_002ask301crpfua1el51"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002ask301crpg89u8ljv"/>
  <child-link xlink:role="objectview" xlink:title="Function findInstModel" xlink:href="#_002ask501f2mk4rpnuhr"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002ask501f2mk4dj57dm"/>
  <child-link xlink:role="objectview" xlink:title="Sub copyPropertyValues" xlink:href="#_002ask501ir2e08qgp6u"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002ask501ir2e035hlpm"/>
  <child-link xlink:role="objectview" xlink:title="Sub relocate" xlink:href="#_002ask70247pvbp9l8p5"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002ask70247pvb47mb0k"/>
  <child-link xlink:role="objectview" xlink:title="Function instancesInModel" xlink:href="#_002ask800s0j83kgrn2f"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002ask800s0j83djp5mt"/>
  <child-link xlink:role="objectview" xlink:title="Function findParts" xlink:href="#_002ask801bsu5naqa6o7"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002ask801bsu5ninum64"/>
  <child-link xlink:role="objectview" xlink:title="Function buildInstRules, buildRelRules" xlink:href="#_002ask901aavg0uvf6bg"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002ask901aavg05cqoma"/>
  <child-link xlink:role="objectview" xlink:title="Function isInView" xlink:href="#_002aski012b5i4rvnv4f"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002aski012b5i49ejnuj"/>
 </objectview>

 <relationshipview id="_002asj60273283dcp1pi" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:href="#_002asj6027323duqrqb2"/>
  <target-link xlink:role="objectview" xlink:title="Utilities" xlink:href="#_002asj6027328323iv1c"/>
 </relationshipview>

 <objectview id="_002asj6028o946uvcohe" xlink:role="object" xlink:title="Function isEnabled" xlink:href="#_002asj6028o9465h5hug" state="open" behavior="nested" text-scale="0.240519" decomp-scale="0.176778" left="256" top="768" width="1323" height="353.048">
 </objectview>

 <relationshipview id="_002asj6028o94gjerv76" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="Utilities" xlink:href="#_002asj6027328323iv1c"/>
  <target-link xlink:role="objectview" xlink:title="Function isEnabled" xlink:href="#_002asj6028o946uvcohe"/>
 </relationshipview>

 <relationshipview id="_002asj6028rh5250q4mq" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="Utilities" xlink:href="#_002asj6027328323iv1c"/>
  <target-link xlink:role="objectview" xlink:title="Function isValid" xlink:href="#_002asj6028rh52gj2jqo"/>
 </relationshipview>

 <objectview id="_002asj6028rh52gj2jqo" xlink:role="object" xlink:title="Function isValid" xlink:href="#_002asj6028rh529dh8bp" state="open" behavior="nested" text-scale="0.240519" decomp-scale="0.176778" left="256" top="1152" width="1323" height="353.048">
 </objectview>

 <relationshipview id="_002asj6028se6qs6nvk1" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="Utilities" xlink:href="#_002asj6027328323iv1c"/>
  <target-link xlink:role="objectview" xlink:title="Function hasInstance" xlink:href="#_002asj6028se6qugpvhl"/>
 </relationshipview>

 <objectview id="_002asj6028se6qugpvhl" xlink:role="object" xlink:title="Function hasInstance" xlink:href="#_002asj6028se6qftnj9o" state="open" behavior="nested" text-scale="0.240519" decomp-scale="0.176778" left="256" top="1536" width="1323" height="353.048">
 </objectview>

 <objectview id="_002asj6029412ueje009" xlink:role="object" xlink:title="Class CVW_ArgumentValue" xlink:href="#_002asj60293vp049tq4d" state="open" behavior="nested" text-scale="0.240519" decomp-scale="0.176778" left="384" top="1152" width="1323" height="353.048">
 </objectview>

 <relationshipview id="_002asj6029412utbh6m0" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="CVW Classes" xlink:href="#_002asj602731to4i2b9a"/>
  <target-link xlink:role="objectview" xlink:title="Class CVW_ArgumentValue" xlink:href="#_002asj6029412ueje009"/>
 </relationshipview>

 <objectview id="_002asj60295oc1l4laav" xlink:role="object" xlink:title="Class CVW_Window" xlink:href="#_002asj60295oc1kdekg3" state="open" behavior="nested" text-scale="0.240519" decomp-scale="0.176778" left="3200" top="768" width="1323" height="353.048">
 </objectview>

 <relationshipview id="_002asj60295ocb7vivgn" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="CVW Classes" xlink:href="#_002asj602731to4i2b9a"/>
  <target-link xlink:role="objectview" xlink:title="Class CVW_Window" xlink:href="#_002asj60295oc1l4laav"/>
 </relationshipview>

 <objectview id="_002asj7020mpov8h8om2" xlink:role="object" xlink:title="Class CVW_ContentSpecification" xlink:href="#_002asj7020mpovuqbbcp" state="open" behavior="nested" text-scale="0.240519" decomp-scale="0.176778" left="384" top="1920" width="1323" height="353.048">
 </objectview>

 <relationshipview id="_002asj7020mpovh0hv81" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="CVW Classes" xlink:href="#_002asj602731to4i2b9a"/>
  <target-link xlink:role="objectview" xlink:title="Class CVW_ContentSpecification" xlink:href="#_002asj7020mpov8h8om2"/>
 </relationshipview>

 <objectview id="_002asj7020r6sq3sddlj" xlink:role="object" xlink:title="Function instanceInList" xlink:href="#_002asj7020r6sqhf7gk8" state="open" behavior="nested" text-scale="0.240519" decomp-scale="0.176778" left="256" top="1920" width="1323" height="353.048">
 </objectview>

 <relationshipview id="_002asj7020r6sqkein9i" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="Utilities" xlink:href="#_002asj6027328323iv1c"/>
  <target-link xlink:role="objectview" xlink:title="Function instanceInList" xlink:href="#_002asj7020r6sq3sddlj"/>
 </relationshipview>

 <objectview id="_002asj7029832ihh81ps" xlink:role="object" xlink:title="Class CVW_SelectDialog" xlink:href="#_002asj7029832idt4u9s" state="open" behavior="nested" text-scale="0.240519" decomp-scale="0.176778" left="1792" top="1152" width="1323" height="353.048">
 </objectview>

 <relationshipview id="_002asj7029832itd6mf5" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="CVW Classes" xlink:href="#_002asj602731to4i2b9a"/>
  <target-link xlink:role="objectview" xlink:title="Class CVW_SelectDialog" xlink:href="#_002asj7029832ihh81ps"/>
 </relationshipview>

 <relationshipview id="_002asj8016ouuq08tsme" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="Utilities" xlink:href="#_002asj6027328323iv1c"/>
  <target-link xlink:role="objectview" xlink:title="Function findInstanceView" xlink:href="#_002asj8016ouuqkkae3q"/>
 </relationshipview>

 <objectview id="_002asj8016ouuqkkae3q" xlink:role="object" xlink:title="Function findInstanceView" xlink:href="#_002asj8016otki1udemj" state="open" behavior="nested" text-scale="0.240519" decomp-scale="0.176778" left="256" top="2304" width="1323" height="353.048">
 </objectview>

 <relationshipview id="_002asj801aq3hgjh9nve" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="CVW Classes" xlink:href="#_002asj602731to4i2b9a"/>
  <target-link xlink:role="objectview" xlink:title="Class CVW_ViewstyleSpecification&#10;" xlink:href="#_002asj801aq3hgu8et1t"/>
 </relationshipview>

 <objectview id="_002asj801aq3hgu8et1t" xlink:role="object" xlink:title="Class CVW_ViewstyleSpecification&#10;" xlink:href="#_002asj801aq2dr8okkmv" state="open" behavior="nested" text-scale="0.240519" decomp-scale="0.176778" left="1792" top="2688" width="1323" height="353.048">
 </objectview>

 <objectview id="_002asja014sj0q5c5qkg" xlink:role="object" xlink:title="Function generateTree" xlink:href="#_002asja014sj0quajf7q" state="open" behavior="nested" text-scale="0.240519" decomp-scale="0.176778" left="1664" top="768" width="1323" height="353.048">
 </objectview>

 <relationshipview id="_002asja014sj0qcuk4cb" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="Utilities" xlink:href="#_002asj6027328323iv1c"/>
  <target-link xlink:role="objectview" xlink:title="Function generateTree" xlink:href="#_002asja014sj0q5c5qkg"/>
 </relationshipview>

 <relationshipview id="_002asja014v6pr5gevtd" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="Utilities" xlink:href="#_002asj6027328323iv1c"/>
  <target-link xlink:role="objectview" xlink:title="Function cleanTree" xlink:href="#_002asja014v6prer1ikd"/>
 </relationshipview>

 <objectview id="_002asja014v6prer1ikd" xlink:role="object" xlink:title="Function cleanTree" xlink:href="#_002asja014v6prkuj8n4" state="open" behavior="nested" text-scale="0.240519" decomp-scale="0.176778" left="1664" top="1152" width="1323" height="353.048">
 </objectview>

 <relationshipview id="_002asja01opig6i4mvad" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="CVW Classes" xlink:href="#_002asj602731to4i2b9a"/>
  <target-link xlink:role="objectview" xlink:title="Class CVW_Action" xlink:href="#_002asja01opig6pcgi41"/>
 </relationshipview>

 <objectview id="_002asja01opig6pcgi41" xlink:role="object" xlink:title="Class CVW_Action" xlink:href="#_002asja01opig6r3prga" state="open" behavior="nested" text-scale="0.240519" decomp-scale="0.176778" left="384" top="768" width="1323" height="353.048">
 </objectview>

 <objectview id="_002asjb01dkcl45hj97c" xlink:role="object" xlink:title="Class CVW_Workarea&#10;" xlink:href="#_002asjb01dkcl46pjf25" state="open" behavior="nested" text-scale="0.240519" decomp-scale="0.176778" left="3200" top="1152" width="1323" height="353.048">
 </objectview>

 <relationshipview id="_002asjb01dkcl4pr5hrp" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="CVW Classes" xlink:href="#_002asj602731to4i2b9a"/>
  <target-link xlink:role="objectview" xlink:title="Class CVW_Workarea&#10;" xlink:href="#_002asjb01dkcl45hj97c"/>
 </relationshipview>

 <objectview id="_002asjb0252ci98v7p1p" xlink:role="object" xlink:title="Class CVW_ViewSpecification&#10;" xlink:href="#_002asjb0252ci9nuc8k9" state="open" behavior="nested" text-scale="0.240519" decomp-scale="0.176778" left="1792" top="1920" width="1323" height="353.048">
 </objectview>

 <relationshipview id="_002asjb0252ci9cjeh7v" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="CVW Classes" xlink:href="#_002asj602731to4i2b9a"/>
  <target-link xlink:role="objectview" xlink:title="Class CVW_ViewSpecification&#10;" xlink:href="#_002asjb0252ci98v7p1p"/>
 </relationshipview>

 <relationshipview id="_002asjb026gg9q1hj88d" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="CVW Classes" xlink:href="#_002asj602731to4i2b9a"/>
  <target-link xlink:role="objectview" xlink:title="Class CVW_ViewStrategy&#10;" xlink:href="#_002asjb026gg9qk39uvh"/>
 </relationshipview>

 <objectview id="_002asjb026gg9qk39uvh" xlink:role="object" xlink:title="Class CVW_ViewStrategy&#10;" xlink:href="#_002asjb026gg9qkrj8v9" state="open" behavior="nested" text-scale="0.240519" decomp-scale="0.176778" left="1792" top="2304" width="1323" height="353.048">
 </objectview>

 <relationshipview id="_002asjd00rcftrl6qseo" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="CVW Classes" xlink:href="#_002asj602731to4i2b9a"/>
  <target-link xlink:role="objectview" xlink:title="Class CVW_StatusBar&#10;" xlink:href="#_002asjd00rcftrt4le1g"/>
 </relationshipview>

 <objectview id="_002asjd00rcftrt4le1g" xlink:role="object" xlink:title="Class CVW_StatusBar&#10;" xlink:href="#_002asjd00rcftrmj7m16" state="open" behavior="nested" text-scale="0.240519" decomp-scale="0.176778" left="1792" top="1536" width="1323" height="353.048">
 </objectview>

 <objectview id="_002asjd0145f9828vr7c" xlink:role="object" xlink:title="Function getInstModel" xlink:href="#_002asjd0145f98c06sku" state="open" behavior="nested" text-scale="0.240519" decomp-scale="0.176778" left="1664" top="1536" width="1323" height="353.048">
 </objectview>

 <relationshipview id="_002asjd0145f98h871f2" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="Utilities" xlink:href="#_002asj6027328323iv1c"/>
  <target-link xlink:role="objectview" xlink:title="Function getInstModel" xlink:href="#_002asjd0145f9828vr7c"/>
 </relationshipview>

 <relationshipview id="_002asje013tjoo57eua5" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="EKA Classes" xlink:href="#_002asj60272bqgu0h19s"/>
  <target-link xlink:role="objectview" xlink:title="Class EKA_Property&#10;" xlink:href="#_002asje013tjoov5eqoc"/>
 </relationshipview>

 <objectview id="_002asje013tjoov5eqoc" xlink:role="object" xlink:title="Class EKA_Property&#10;" xlink:href="#_002asje013tjoooo5pr4" state="open" behavior="nested" text-scale="0.240519" decomp-scale="0.176778" left="1664" top="1152" width="1323" height="353.048">
 </objectview>

 <objectview id="_002asjg014c2om96ja33" xlink:role="object" xlink:title="Class CVW_MenuTree&#10;" xlink:href="#_002asjg014c2omdm04hr" state="open" behavior="nested" text-scale="0.240519" decomp-scale="0.176778" left="384" top="2688" width="1323" height="353.048">
 </objectview>

 <relationshipview id="_002asjg014c2omb2rsjf" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="CVW Classes" xlink:href="#_002asj602731to4i2b9a"/>
  <target-link xlink:role="objectview" xlink:title="Class CVW_MenuTree&#10;" xlink:href="#_002asjg014c2om96ja33"/>
 </relationshipview>

 <relationshipview id="_002asjl01df812h1s8n9" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="Utilities" xlink:href="#_002asj6027328323iv1c"/>
  <target-link xlink:role="objectview" xlink:title="Function getCVWmodel" xlink:href="#_002asjl01df812n4lf1k"/>
 </relationshipview>

 <objectview id="_002asjl01df812n4lf1k" xlink:role="object" xlink:title="Function getCVWmodel" xlink:href="#_002asjl01df812jtoh62" state="open" behavior="nested" text-scale="0.240519" decomp-scale="0.176778" left="3072" top="768" width="1323" height="353.048">
 </objectview>

 <relationshipview id="_002ask0025779hc62sgd" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="CVW Classes" xlink:href="#_002asj602731to4i2b9a"/>
  <target-link xlink:role="objectview" xlink:title="Class CVW_CircularLayout&#10;" xlink:href="#_002ask0025779hp85ckn"/>
 </relationshipview>

 <objectview id="_002ask0025779hp85ckn" xlink:role="object" xlink:title="Class CVW_CircularLayout&#10;" xlink:href="#_002ask0025779hdakt36" state="open" behavior="nested" text-scale="0.240519" decomp-scale="0.176778" left="384" top="1536" width="1323" height="353.048">
 </objectview>

 <objectview id="_002ask0025hc03jv8qa6" xlink:role="object" xlink:title="Class CVW_Workspace" xlink:href="#_002ask0025hc03qbnha6" state="open" behavior="nested" text-scale="0.240519" decomp-scale="0.176778" left="3200" top="1536" width="1323" height="353.048">
 </objectview>

 <relationshipview id="_002ask0025hc03toaroj" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="CVW Classes" xlink:href="#_002asj602731to4i2b9a"/>
  <target-link xlink:role="objectview" xlink:title="Class CVW_Workspace" xlink:href="#_002ask0025hc03jv8qa6"/>
 </relationshipview>

 <objectview id="_002ask100rfrjmb7t4hn" xlink:role="object" xlink:title="Sub configureCVWcomponent" xlink:href="#_002ask100rfrjmjr5sni" state="open" behavior="nested" text-scale="0.240519" decomp-scale="0.176778" left="3072" top="1536" width="1323" height="353.048">
 </objectview>

 <relationshipview id="_002ask100rfrjmp16tje" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="Utilities" xlink:href="#_002asj6027328323iv1c"/>
  <target-link xlink:role="objectview" xlink:title="Sub configureCVWcomponent" xlink:href="#_002ask100rfrjmb7t4hn"/>
 </relationshipview>

 <objectview id="_002ask100rhe349v46f5" xlink:role="object" xlink:title="Sub resetCVWcomponent" xlink:href="#_002ask100rhe34g4akuf" state="open" behavior="nested" text-scale="0.240519" decomp-scale="0.176778" left="3072" top="2304" width="1323" height="353.048">
 </objectview>

 <relationshipview id="_002ask100rhe34sahehg" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="Utilities" xlink:href="#_002asj6027328323iv1c"/>
  <target-link xlink:role="objectview" xlink:title="Sub resetCVWcomponent" xlink:href="#_002ask100rhe349v46f5"/>
 </relationshipview>

 <relationshipview id="_002ask100rj1vbnoujlc" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="Utilities" xlink:href="#_002asj6027328323iv1c"/>
  <target-link xlink:role="objectview" xlink:title="Function findCVWcomponent" xlink:href="#_002ask100rj1vbtl7l9f"/>
 </relationshipview>

 <objectview id="_002ask100rj1vbtl7l9f" xlink:role="object" xlink:title="Function findCVWcomponent" xlink:href="#_002ask100rj1vbaut17c" state="open" behavior="nested" text-scale="0.240519" decomp-scale="0.176778" left="3072" top="1152" width="1323" height="353.048">
 </objectview>

 <objectview id="_002ask301crpfua1el51" xlink:role="object" xlink:title="Function viewExists" xlink:href="#_002ask301crpfu5k5ie8" state="open" behavior="nested" text-scale="0.240519" decomp-scale="0.176778" left="1664" top="3072" width="1323" height="353.048">
 </objectview>

 <relationshipview id="_002ask301crpg89u8ljv" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="Utilities" xlink:href="#_002asj6027328323iv1c"/>
  <target-link xlink:role="objectview" xlink:title="Function viewExists" xlink:href="#_002ask301crpfua1el51"/>
 </relationshipview>

 <objectview id="_002ask401587s2ehspvf" xlink:role="object" xlink:title="Class CVW_MenuAction" xlink:href="#_002ask401587s2ov7fp5" state="open" behavior="nested" text-scale="0.240519" decomp-scale="0.176778" left="384" top="2304" width="1323" height="353.048">
 </objectview>

 <relationshipview id="_002ask401587scscu39a" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="CVW Classes" xlink:href="#_002asj602731to4i2b9a"/>
  <target-link xlink:role="objectview" xlink:title="Class CVW_MenuAction" xlink:href="#_002ask401587s2ehspvf"/>
 </relationshipview>

 <relationshipview id="_002ask5018nbv901i5qc" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="CVW Classes" xlink:href="#_002asj602731to4i2b9a"/>
  <target-link xlink:role="objectview" xlink:title="Class CVW_Object" xlink:href="#_002ask5018nbv97prg0k"/>
 </relationshipview>

 <objectview id="_002ask5018nbv97prg0k" xlink:role="object" xlink:title="Class CVW_Object" xlink:href="#_002ask5018nbv9mcnm5d" state="open" behavior="nested" text-scale="0.240519" decomp-scale="0.176778" left="1792" top="768" width="1323" height="353.048">
 </objectview>

 <relationshipview id="_002ask501f2mk4dj57dm" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="Utilities" xlink:href="#_002asj6027328323iv1c"/>
  <target-link xlink:role="objectview" xlink:title="Function findInstModel" xlink:href="#_002ask501f2mk4rpnuhr"/>
 </relationshipview>

 <objectview id="_002ask501f2mk4rpnuhr" xlink:role="object" xlink:title="Function findInstModel" xlink:href="#_002ask501f2mk407o9ri" state="open" behavior="nested" text-scale="0.240519" decomp-scale="0.176778" left="1664" top="1920" width="1323" height="353.048">
 </objectview>

 <relationshipview id="_002ask501ir2e035hlpm" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="Utilities" xlink:href="#_002asj6027328323iv1c"/>
  <target-link xlink:role="objectview" xlink:title="Sub copyPropertyValues" xlink:href="#_002ask501ir2e08qgp6u"/>
 </relationshipview>

 <objectview id="_002ask501ir2e08qgp6u" xlink:role="object" xlink:title="Sub copyPropertyValues" xlink:href="#_002ask501ir2e0r3b061" state="open" behavior="nested" text-scale="0.240519" decomp-scale="0.176778" left="3072" top="1920" width="1323" height="353.048">
 </objectview>

 <relationshipview id="_002ask70127nuo4rf4c1" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="EKA Classes" xlink:href="#_002asj60272bqgu0h19s"/>
  <target-link xlink:role="objectview" xlink:title="Class EKA_Context&#10;" xlink:href="#_002ask70127nuognlp2v"/>
 </relationshipview>

 <objectview id="_002ask70127nuognlp2v" xlink:role="object" xlink:title="Class EKA_Context&#10;" xlink:href="#_002ask70127nuosr5tis" state="open" behavior="nested" text-scale="0.240519" decomp-scale="0.176778" left="1664" top="768" width="1323" height="353.048">
 </objectview>

 <relationshipview id="_002ask701tmsf979j6eg" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:href="#_002asj6027323duqrqb2"/>
  <target-link xlink:role="objectview" xlink:title="Context" xlink:href="#_002ask701tmsf99c81tn"/>
 </relationshipview>

 <objectview id="_002ask701tmsf99c81tn" xlink:role="object" xlink:title="Context" xlink:href="#_002ask701tmsf9rqqa6k" state="open" behavior="nested" text-scale="0.421782" decomp-scale="0.5" left="2368" top="1888.08" width="2304" height="1792">
  <symbol-override state="open" xlink:role="symbol" xlink:title="Open Nested Object" xlink:href="metis:stdsyms#oid67" xlink:actuate="user">
  </symbol-override>
  <symbol-override state="closed" xlink:role="symbol" xlink:title="Closed Nested Object" xlink:href="metis:stdsyms#oid68" xlink:actuate="user">
  </symbol-override>
  <child-link xlink:role="objectview" xlink:title="Context" xlink:href="#_002ask701tnrvjnn1dnt"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002ask701tnrvjhaha0c"/>
  <child-link xlink:role="objectview" xlink:title="ContextMode" xlink:href="#_002ask701tokg5f77iqg"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002ask701tokhnag63hv"/>
 </objectview>

 <relationshipview id="_002ask701tnrvjhaha0c" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="Context" xlink:href="#_002ask701tmsf99c81tn"/>
  <target-link xlink:role="objectview" xlink:title="Context" xlink:href="#_002ask701tnrvjnn1dnt"/>
 </relationshipview>

 <objectview id="_002ask701tnrvjnn1dnt" xlink:role="object" xlink:title="Context" xlink:href="#_002ask701tnrvjm9ptfh" state="open" behavior="tree" text-scale="0.421782" decomp-scale="0.5" left="1152" top="1152" width="768" height="256">
 </objectview>

 <objectview id="_002ask701tokg5f77iqg" xlink:role="object" xlink:title="ContextMode" xlink:href="#_002ask701tokg58d9bkp" state="open" behavior="tree" text-scale="0.843548" decomp-scale="0.250005" left="1536" top="1536" width="384.007" height="128.002">
 </objectview>

 <relationshipview id="_002ask701tokhnag63hv" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="Context" xlink:href="#_002ask701tmsf99c81tn"/>
  <target-link xlink:role="objectview" xlink:title="ContextMode" xlink:href="#_002ask701tokg5f77iqg"/>
 </relationshipview>

 <relationshipview id="_002ask701treati14ep5" xlink:role="relationship" xlink:href="#_002ask701treatrjkfbo">
  <origin-link xlink:role="objectview" xlink:title="Context" xlink:href="#_002ask701tnrvjnn1dnt"/>
  <target-link xlink:role="objectview" xlink:title="ContextMode" xlink:href="#_002ask701tokg5f77iqg"/>
  <path>
   <origin-point type="fixed" x="480" y="512"/>
   <target-point type="left"/>
  </path>
  <symbol-override state="relationship" xlink:role="symbol" xlink:title="AutoRelation" xlink:href="metis:stdsyms#oid85" xlink:actuate="user">
  </symbol-override>
 </relationshipview>

 <relationshipview id="_002ask70247pvb47mb0k" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="Utilities" xlink:href="#_002asj6027328323iv1c"/>
  <target-link xlink:role="objectview" xlink:title="Sub relocate" xlink:href="#_002ask70247pvbp9l8p5"/>
 </relationshipview>

 <objectview id="_002ask70247pvbp9l8p5" xlink:role="object" xlink:title="Sub relocate" xlink:href="#_002ask70247pvb4q1ble" state="open" behavior="nested" text-scale="0.240519" decomp-scale="0.176778" left="1664" top="2688" width="1323" height="353.048">
 </objectview>

 <relationshipview id="_002ask800s0j83djp5mt" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="Utilities" xlink:href="#_002asj6027328323iv1c"/>
  <target-link xlink:role="objectview" xlink:title="Function instancesInModel" xlink:href="#_002ask800s0j83kgrn2f"/>
 </relationshipview>

 <objectview id="_002ask800s0j83kgrn2f" xlink:role="object" xlink:title="Function instancesInModel" xlink:href="#_002ask800s0j83rhe8bt" state="open" behavior="nested" text-scale="0.240519" decomp-scale="0.176778" left="256" top="2688" width="1323" height="353.048">
 </objectview>

 <objectview id="_002ask801bsu5naqa6o7" xlink:role="object" xlink:title="Function findParts" xlink:href="#_002ask801bsu5ne1tf0u" state="open" behavior="nested" text-scale="0.240519" decomp-scale="0.176778" left="1664" top="2304" width="1323" height="353.048">
 </objectview>

 <relationshipview id="_002ask801bsu5ninum64" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="Utilities" xlink:href="#_002asj6027328323iv1c"/>
  <target-link xlink:role="objectview" xlink:title="Function findParts" xlink:href="#_002ask801bsu5naqa6o7"/>
 </relationshipview>

 <relationshipview id="_002ask901aavg05cqoma" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="Utilities" xlink:href="#_002asj6027328323iv1c"/>
  <target-link xlink:role="objectview" xlink:title="Function buildInstRules, buildRelRules" xlink:href="#_002ask901aavg0uvf6bg"/>
 </relationshipview>

 <objectview id="_002ask901aavg0uvf6bg" xlink:role="object" xlink:title="Function buildInstRules, buildRelRules" xlink:href="#_002ask901aavg0a9fq9u" state="open" behavior="nested" text-scale="0.240519" decomp-scale="0.176778" left="3072" top="2688" width="1323" height="353.048">
 </objectview>

 <objectview id="_002ask901e9l3jcij714" xlink:role="object" xlink:title="Class CVW_InstRule,  CVW_RelRule" xlink:href="#_002ask901e9l3j13kn7d" state="open" behavior="nested" text-scale="0.240519" decomp-scale="0.176778" left="3200" top="1920" width="1323" height="353.048">
 </objectview>

 <relationshipview id="_002ask901e9l3jjal9u1" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="CVW Classes" xlink:href="#_002asj602731to4i2b9a"/>
  <target-link xlink:role="objectview" xlink:title="Class CVW_InstRule,  CVW_RelRule" xlink:href="#_002ask901e9l3jcij714"/>
 </relationshipview>

 <relationshipview id="_002aski012b5i49ejnuj" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="Utilities" xlink:href="#_002asj6027328323iv1c"/>
  <target-link xlink:role="objectview" xlink:title="Function isInView" xlink:href="#_002aski012b5i4rvnv4f"/>
 </relationshipview>

 <objectview id="_002aski012b5i4rvnv4f" xlink:role="object" xlink:title="Function isInView" xlink:href="#_002aski012b5i49rod62" state="open" behavior="nested" text-scale="0.240519" decomp-scale="0.176778" left="256" top="3072" width="1323" height="353.048">
 </objectview>

 <modelview id="oid1" name="Main" title="Main" primary-flag="true" standalone-flag="true" zoom-level="0.922854" x="-972.499" y="-243.796" seq="1" xlink:role="model" xlink:title="CVW Script Library" xlink:href="#_002asj602701vd83c0rc" behavior="nested" text-scale="1" decomp-scale="0" visible-in="browser">
  <child-link xlink:role="objectview" xlink:href="#_002asj6027323duqrqb2"/>
  <viewbundle>
   <relationshipview-link xlink:role="relationshipview" xlink:href="#_002ask701treati14ep5"/>
  </viewbundle>
 </modelview>


</metis>
