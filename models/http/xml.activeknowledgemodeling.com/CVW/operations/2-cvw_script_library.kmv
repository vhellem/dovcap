<?xml version="1.0"?>
<?metis version="5.2.2"?>
<?metisxml version="1.2"?>
<!DOCTYPE metis PUBLIC "-//METIS/METIS XML 1.2//EN" "http://xml.metis.no/metis12.dtd">
<metis
 xmlns="http://www.metis.no/metis"
 xmlns:xlink="http://www.w3.org/1999/xlink"
 types="1"
 instances="108"
 instanceviews="227"
 nextoid="1">

 <model id="_002asj602701vd83c0rc" name="CVW Script Library" title="CVW Script Library" standalone-flag="true">
  <metamodel-links size="2">
   <metamodel-link xlink:role="metamodel" xlink:title="EKA core types" xlink:href="../../eka/templates/eka_core_modeling.kmd#MetaModel_EKA:CoreTypes_UUID" xlink:actuate="user"/>
   <metamodel-link xlink:role="metamodel" xlink:title="Information" xlink:href="../templates/information.kmd#_002asno00mdtjuv39t57" xlink:actuate="user"/>
  </metamodel-links>
  <valueset size="3" xlink:role="type" xlink:title="Container" xlink:href="metis:stdtypes#oid3" xlink:actuate="user">
   <string name="name"></string>
   <string name="description"></string>
   <string name="externalID"></string>
  </valueset>
  <part-link xlink:role="object" xlink:href="#_002asj6027323dphmg96"/>
  <part-link xlink:role="object" xlink:title="Class CVW_GenericWorkarea&#10;" xlink:href="#_002asjb01dkcl46pjf25"/>
  <part-link xlink:role="object" xlink:title="Class CVW_StatusBar&#10;" xlink:href="#_002asjd00rcftrmj7m16"/>
  <part-link xlink:role="object" xlink:title="Class CVW_WorkspaceH" xlink:href="#_002ask0025hc03qbnha6"/>
  <part-link xlink:role="object" xlink:title="Function findParts" xlink:href="#_002ask801bsu5ne1tf0u"/>
  <bundle-rules>
   <bundle-rule>
    <origin-link xlink:role="model" xlink:title="CVW Script Library" xlink:href="#_002asj602701vd83c0rc" xlink:actuate="user"/>
    <target-link xlink:role="model" xlink:title="CVW Script Library" xlink:href="#_002asj602701vd83c0rc" xlink:actuate="user"/>
   </bundle-rule>
  </bundle-rules>
  <bundle>
   <relationship-link xlink:role="relationship" xlink:href="#_002aso001934adrobm0n"/>
   <relationship-link xlink:role="relationship" xlink:href="#_002aso00194br17kss6n"/>
   <relationship-link xlink:role="relationship" xlink:href="#_002aso00194g2hf5t9kd"/>
   <relationship-link xlink:role="relationship" xlink:href="#_002aso00194lolq69nll"/>
   <relationship-link xlink:role="relationship" xlink:href="#_002aso00194sh73fve12"/>
   <relationship-link xlink:role="relationship" xlink:href="#_002aso001954i5vtf3m4"/>
   <relationship-link xlink:role="relationship" xlink:href="#_002aso00195bt5irrs11"/>
   <relationship-link xlink:role="relationship" xlink:href="#_002aso00195rtpiqt9i0"/>
   <relationship-link xlink:role="relationship" xlink:href="#_002aso00197082k207vf"/>
   <relationship-link xlink:role="relationship" xlink:href="#_002aso001984t0kbl9rs"/>
   <relationship-link xlink:role="relationship" xlink:href="#_002aso00198gbeh2aud7"/>
   <relationship-link xlink:role="relationship" xlink:href="#_002aso0019a35r9eqbp4"/>
   <relationship-link xlink:role="relationship" xlink:href="#_002aso0019a9b0tnai9n"/>
   <relationship-link xlink:role="relationship" xlink:href="#_002aso0019fo65ekah9u"/>
   <relationship-link xlink:role="relationship" xlink:href="#_002asqd011lc5usdslfh"/>
   <relationship-link xlink:role="relationship" xlink:href="#_002asre019sqebe7emtb"/>
   <relationship-link xlink:role="relationship" xlink:href="#_002asre019svmp9tbfhj"/>
   <relationship-link xlink:role="relationship" xlink:href="#_002asre019t41uukj367"/>
   <relationship-link xlink:role="relationship" xlink:href="#_002asre019taop6s5hep"/>
   <relationship-link xlink:role="relationship" xlink:href="#_002asrj0168l7l1uoq4f"/>
   <relationship-link xlink:role="relationship" xlink:href="#_002asrj0168plo3rk0pf"/>
   <relationship-link xlink:role="relationship" xlink:href="#_002asrl00vcfsv6ods9h"/>
   <relationship-link xlink:role="relationship" xlink:href="#_002asrs00ua7jtandpt0"/>
  </bundle>
 </model>

 <object id="_002asj60272bqgti3c9a">
  <valueset size="3" xlink:role="type" xlink:title="Container" xlink:href="metis:stdtypes#oid3" xlink:actuate="user">
   <string name="name">Information</string>
   <string name="description"></string>
   <string name="externalID"></string>
  </valueset>
  <part-link xlink:role="object" xlink:title="Class EKA_Inheritance" xlink:href="#_002asnu015cvuge5edr9"/>
  <part-link xlink:role="object" xlink:title="Class EKA_Property&#10;" xlink:href="#_002aspt01b7t9qh92bnn"/>
  <part-link xlink:role="object" xlink:title="Class EKA_Context&#10;" xlink:href="#_002aspt01b7t9qc4bsm6"/>
  <part-link xlink:role="object" xlink:title="Class EKA_Instance" xlink:href="#_002aspt01b7t9q2l2j8k"/>
  <part-link xlink:role="object" xlink:title="Class EKA_Globals" xlink:href="#_002aspt01b7t9qdkqel6"/>
  <part-link xlink:role="object" xlink:title="Class EKA_InformationManager" xlink:href="#_002asre019rp1g5t7ru6"/>
  <part-link xlink:role="object" xlink:title="Class CVW_ParameterManager" xlink:href="#_002aso00190aa1fag2qn"/>
  <part-link xlink:role="object" xlink:title="Class EKA_Import" xlink:href="#_002at1100qtusq4vqp7c"/>
  <part-link xlink:role="object" xlink:title="Class CVW_RoleManager" xlink:href="#_002at11019j8sg4osiij"/>
  <part-link xlink:role="object" xlink:title="Class EKA_Compare" xlink:href="#_002at1d013lge530no0n"/>
 </object>

 <object id="_002asj602731tohevjet">
  <valueset size="3" xlink:role="type" xlink:title="Container" xlink:href="metis:stdtypes#oid3" xlink:actuate="user">
   <string name="name">View</string>
   <string name="description"></string>
   <string name="externalID"></string>
  </valueset>
  <part-link xlink:role="object" xlink:title="Class CVW_GenericAction" xlink:href="#_002asnj01040su1uk5bh"/>
  <part-link xlink:role="object" xlink:title="Class CVW_GenericMenuTree" xlink:href="#_002asnj0106ere7ubme9"/>
  <part-link xlink:role="object" xlink:title="Class CVW_GenericSearch" xlink:href="#_002asnu00uibot2it5a4"/>
  <part-link xlink:role="object" xlink:title="Class CVW_ArgumentValue" xlink:href="#_002aspt01b45jl5k1020"/>
  <part-link xlink:role="object" xlink:title="Class CVW_Window" xlink:href="#_002aspt01b45jl3224de"/>
  <part-link xlink:role="object" xlink:title="Class CVW_ContentSpecification" xlink:href="#_002aspt01b45jldc4n2u"/>
  <part-link xlink:role="object" xlink:title="Class CVW_SelectDialog" xlink:href="#_002aspt01b45jlp5bub2"/>
  <part-link xlink:role="object" xlink:title="Class CVW_ViewstyleSpecification&#10;" xlink:href="#_002aspt01b45jl1ekhjc"/>
  <part-link xlink:role="object" xlink:title="Class CVW_Action" xlink:href="#_002aspt01b45jlge72rt"/>
  <part-link xlink:role="object" xlink:title="Class CVW_Workarea&#10;" xlink:href="#_002aspt01b45jlobokn4"/>
  <part-link xlink:role="object" xlink:title="Class CVW_ViewSpecification&#10;" xlink:href="#_002aspt01b45jlfjobj7"/>
  <part-link xlink:role="object" xlink:title="Class CVW_ViewStrategy&#10;" xlink:href="#_002aspt01b45jlc06ekh"/>
  <part-link xlink:role="object" xlink:title="Class CVW_StatusBar&#10;DK" xlink:href="#_002aspt01b45jl8d8ube"/>
  <part-link xlink:role="object" xlink:title="Class CVW_MenuTree&#10;" xlink:href="#_002aspt01b45jl9r9a26"/>
  <part-link xlink:role="object" xlink:title="Class CVW_CircularLayout&#10;" xlink:href="#_002aspt01b45jlh9i40l"/>
  <part-link xlink:role="object" xlink:title="Class CVW_Workspace" xlink:href="#_002aspt01b45jl2f13mf"/>
  <part-link xlink:role="object" xlink:title="Class CVW_MenuAction" xlink:href="#_002aspt01b45jlp00htf"/>
  <part-link xlink:role="object" xlink:title="Class CVW_Object" xlink:href="#_002aspt01b45jl1ab6p8"/>
  <part-link xlink:role="object" xlink:title="Class CVW_InstRule,  CVW_RelRule, CVW_SymbolRule" xlink:href="#_002aspt01b45jl4rhipd"/>
  <part-link xlink:role="object" xlink:title="Class CVW_LanguageSpecification" xlink:href="#_002aspt01b45jl5t35nd"/>
  <part-link xlink:role="object" xlink:title="Class CVW_Navigate" xlink:href="#_002aspt01b45jlqvtc9l"/>
  <part-link xlink:role="object" xlink:title="Class CVW_ObjectView" xlink:href="#_002aspt01b45jl767joi"/>
  <part-link xlink:role="object" xlink:title="Class CVW_Instance" xlink:href="#_002aspt01b45jl98re3k"/>
  <part-link xlink:role="object" xlink:title="Class CVW_Task" xlink:href="#_002aspt01b45jlqbukmk"/>
  <part-link xlink:role="object" xlink:title="Class CVW_Filter" xlink:href="#_002aspt01b45jla327hk"/>
  <part-link xlink:role="object" xlink:title="Class CVW_Rating" xlink:href="#_002asqb014ve34ijbaoe"/>
 </object>

 <object id="_002asj6027323dphmg96">
  <valueset size="3" xlink:role="type" xlink:title="Container" xlink:href="metis:stdtypes#oid3" xlink:actuate="user">
   <string name="name"></string>
   <string name="description"></string>
   <string name="externalID"></string>
  </valueset>
  <part-link xlink:role="object" xlink:title="Information" xlink:href="#_002asj60272bqgti3c9a"/>
  <part-link xlink:role="object" xlink:title="View" xlink:href="#_002asj602731tohevjet"/>
  <part-link xlink:role="object" xlink:title="Utilities" xlink:href="#_002asj60273283vqvfr0"/>
  <part-link xlink:role="object" xlink:title="Task" xlink:href="#_002ask701tmsf9rqqa6k"/>
  <part-link xlink:role="object" xlink:title="Class Rule_Globals" xlink:href="#_002asr000rddf0mfe626"/>
  <part-link xlink:role="object" xlink:title="Class Rule" xlink:href="#_002asr000re02hqan45t"/>
  <part-link xlink:role="object" xlink:href="#_002aso701iev4geuaqsh"/>
 </object>

 <object id="_002asj60273283vqvfr0">
  <valueset size="3" xlink:role="type" xlink:title="Container" xlink:href="metis:stdtypes#oid3" xlink:actuate="user">
   <string name="name">Utilities</string>
   <string name="description"></string>
   <string name="externalID"></string>
  </valueset>
  <part-link xlink:role="object" xlink:title="Function getEqualObject, getEqualObject2" xlink:href="#_002asnj01gh2uabed0io"/>
  <part-link xlink:role="object" xlink:title="Class ArrayList" xlink:href="#_002asnk01779mdn260qd"/>
  <part-link xlink:role="object" xlink:title="Function isEnabled" xlink:href="#_002aspt01b1nhd6kk1di"/>
  <part-link xlink:role="object" xlink:title="Function isValid" xlink:href="#_002aspt01b1nhd4sbjoh"/>
  <part-link xlink:role="object" xlink:title="Function hasInstance" xlink:href="#_002aspt01b1nhdd9t85l"/>
  <part-link xlink:role="object" xlink:title="Function instanceInList, instanceByNameInList, isInList, addToList" xlink:href="#_002aspt01b1nhd2ubqts"/>
  <part-link xlink:role="object" xlink:title="Function findInstanceView" xlink:href="#_002aspt01b1nhdapthfc"/>
  <part-link xlink:role="object" xlink:title="Function generateTree" xlink:href="#_002aspt01b1nhdh5k34g"/>
  <part-link xlink:role="object" xlink:title="Function cleanTree" xlink:href="#_002aspt01b1nhd5ik2ph"/>
  <part-link xlink:role="object" xlink:title="Function getInstModel" xlink:href="#_002aspt01b1nhd4sgba0"/>
  <part-link xlink:role="object" xlink:title="Function getCVWmodel" xlink:href="#_002aspt01b1nhdk5mefe"/>
  <part-link xlink:role="object" xlink:title="Sub configureCVWcomponent" xlink:href="#_002aspt01b1nhdkvcktm"/>
  <part-link xlink:role="object" xlink:title="Sub resetCVWcomponent" xlink:href="#_002aspt01b1nhdfnp0bn"/>
  <part-link xlink:role="object" xlink:title="Function findCVWcomponent" xlink:href="#_002aspt01b1nhd84rt86"/>
  <part-link xlink:role="object" xlink:title="Function viewExists, relViewExists" xlink:href="#_002aspt01b1nhds9h8st"/>
  <part-link xlink:role="object" xlink:title="Function findInstModel, findInstModel2" xlink:href="#_002aspt01b1nhd7fu9l0"/>
  <part-link xlink:role="object" xlink:title="Sub copyPropertyValues" xlink:href="#_002aspt01b1nhdnqqjs0"/>
  <part-link xlink:role="object" xlink:title="Function relocate" xlink:href="#_002aspt01b1nhdec3ru9"/>
  <part-link xlink:role="object" xlink:title="Function instancesInModel" xlink:href="#_002aspt01b1nhdh7m7l4"/>
  <part-link xlink:role="object" xlink:title="Function findPartsDK" xlink:href="#_002aspt01b1nhd0jcjqc"/>
  <part-link xlink:role="object" xlink:title="Function buildInstRules, buildRelRules, buildSymbolRules" xlink:href="#_002aspt01b1nhdnvmq27"/>
  <part-link xlink:role="object" xlink:title="Function isInView" xlink:href="#_002aspt01b1nhdvuiibc"/>
  <part-link xlink:role="object" xlink:title="Function findWorkWindow, findWorkWindowView, getWorkWindowView" xlink:href="#_002aspt01b1nhd5munni"/>
  <part-link xlink:role="object" xlink:title="Function getWorkareaLabelText" xlink:href="#_002aspt01b1nhd9v94gu"/>
  <part-link xlink:role="object" xlink:title="Function getModelFromConnector" xlink:href="#_002aspt01b1nhdih5b2f"/>
  <part-link xlink:role="object" xlink:title="Function getRatingColor" xlink:href="#_002asqb01632nafng64n"/>
  <part-link xlink:role="object" xlink:title="Function selectAmong" xlink:href="#_002asr901869eg7jqab5"/>
  <part-link xlink:role="object" xlink:title="Function isInMenu, Function getWorkarea" xlink:href="#_002asr901apini85v53v"/>
  <part-link xlink:role="object" xlink:title="Sub setHourGlass" xlink:href="#_002asuc01fbia13dschl"/>
  <part-link xlink:role="object" xlink:title="Function getPropertyViewStatus, getStatusLineColor" xlink:href="#_002at1d013nf8r52a4h0"/>
 </object>

 <object id="_002asjb01dkcl46pjf25">
  <valueset size="10" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="../languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Class CVW_GenericWorkarea
</string>
   <string name="description"></string>
   <integer name="dbms-admin.commitFlag">0</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20080507 093809578</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="comments"></string>
   <string name="script">option explicit


&#39;-----------------------------------------------------------
&#39;-----------------------------------------------------------
Class CVW_GenericWorkarea

 private config
 private inheritance
 private params

    &#39; Variant parameters
    Public Title                          &#39; String
    Public Mode                           &#39; String
    Public TitleBar                       &#39; String
    Public TitleBarAddOn                  &#39; String
    Public LayoutStrategy                 &#39; URI
    Public WindowLayoutStrategy           &#39; URI
    Public WindowLayoutMode               &#39; String
    Public HierarchyLayout                &#39; URI
    Public SymbolOpen                     &#39; URI
    Public SymbolClosed                   &#39; URI
    Public TextScale                      &#39; Float as String
    Public TreeTextScale                  &#39; Float as String
    Public NestedTextScaleTop             &#39; Float as String
    Public NestedTextScale                &#39; Float as String
    Public Height                         &#39; Integer as String
    Public Width                          &#39; Integer as String
    Public FilterModel                    &#39; URI
    Public InstanceContextModel           &#39; URI
    Public ModelContextModel              &#39; URI
    Public ViewStrategyModel              &#39; URI
    Public LanguageModel                  &#39; URI
    Public Workspace                      &#39; CVW_Workspace
    &#39;public WorkspaceWin &#39; instance
    Public ObjectAspectRatio              &#39; Float as String
    Public ObjectTextScale				  &#39; Float as String
    Public ObjectScaleFactor			  &#39; Float as String
    Public ContentInRepository            &#39; Boolean
    Public applyFilter                    &#39; Boolean
    Public symbolRules()
    Public noSymbolRules

    &#39; Context variables (public) &#39; All from context
    &#39;Public currentModel
    &#39;Public currentModelView
    &#39;Public currentInstance
    &#39;Public currentInstanceView
    &#39;Public contextInstance                &#39; IMetisInstance

    &#39; Context variables (private)
    &#39;Private model
    &#39;Private cObject                      &#39; Component object   - IMetisInstance
    &#39;Private aObject                      &#39; Configuring object - IMetisInstance
    Public currentWorkarea              &#39; IMetisObjectView
    Private searchModel

    &#39; Types
    Private buttonType                   &#39; IMetisType
    Private consistsOfType               &#39; IMetisType
    Private titlebarType                 &#39; IMetisType
    Private windowType                   &#39; IMetisType
    Private window2Type                  &#39; IMetisType
    Private hasFilterType                &#39; IMetisType
    Private hasLanguageType              &#39; IMetisType
    Private hasInstanceContextType       &#39; IMetisType
    Private hasInstanceContext2Type      &#39; IMetisType
    Private hasModelContextType          &#39; IMetisType
    Private hasViewStrategyType          &#39; IMetisType
    Private hasSearchSpecificationType   &#39; IMetisType
    Private specContainerType            &#39; IMetisType
    Private propertyType
    Private hasPropertyType
    Private equalsType

    &#39; Methods
    Private addMetamodelMethod           &#39; IMetisMethod
    Private addPartRuleMethod            &#39; IMetisMethod

    &#39; Layout strategies
    Private workareaLayoutStrategy       &#39; IMetisInstance
    Private workwinLayoutStrategy        &#39; IMetisInstance
    Private hierarchy_layout             &#39; IMetisInstance

    &#39; Components
    Private cvwArg                       &#39; CVW_ArgumentValue
    Private compTitleBar                 &#39; CVW_Component
    Private compWorkareaWindow           &#39; CVW_Component
    Private window                       &#39; CVW_Window

    &#39; Others
    Private work_window
    Private WorkspaceName                &#39; String
    Private titleBarIndex                &#39; Integer
    Private workareaIndex                &#39; Integer
    &#39;Private sourceContainerView          &#39; IMetisInstanceView
    Private noFilterRules
    Private filterRules()

	
    Public Property Get parameters        &#39;IRTV_Config
		if not isValid(params) then 
			set config = GLOBAL_Context
			set params = new CVW_ParameterManager
			set params.config = config
			set inheritance = config.inheritance
		end if
        set parameters = params
    End Property

    Public Property Set parameters(obj)
        if isValid(obj) then
			set params = obj
            set config = params.config
            set workspace = config.workspace
            set inheritance = config.inheritance
			&#39; Assume started on button
			if isEnabled (config.instView) then
			    set currentWorkarea = config.instView.parent.parent
			end if
		end if
    End Property


&#39;-----------------------------------------------------------
    Public Property Get WorkWindow
		if not isValid(work_window) then
			set work_window = window.objectView.children(workareaIndex)
		end if
        set WorkWindow = work_window
    End Property

    Public Property Set WorkWindow(win)
        set work_window = win
    End Property


   &#39;---------------------------------------------------------------------------------------------------
  &#39;  should be global, moved her for now:&#39;
  function findNeighbours(inst, reltype, recursive, direction) 
	dim x, d, t
	d = 0
	if direction = 1 then
		d = 1
	end if
	set findNeighbours = metis.newInstanceList()
	if not isValid(reltype) then
		exit function
	end if 
	for each x in inst.getNeighbourRelationships(d, reltype)
		if d = 0 then
			call findNeighbours.AddLast(x.target)
		else
			call findNeighbours.AddLast(x.origin)
		end if
	next
	if recursive then
		for each t in reltype.subtypes
			for each x in findNeighbours(inst, t, false, d)
				call findNeighbours.AddLast(x)
			next
		next
	end if
  end function
    
    Function findComponent(inst, componentName, recursive)
        dim usesType, uses2Type
        dim comp, components

        set findComponent = Nothing
&#39;stop
        &#39;set compType  = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/cvw_objects.kmd#ObjType_CVW:CVW_Component_UUID&#34;)
        set usesType  = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/cvw_relships.kmd#RelType_CVW:usesComponent_UUID&#34;)
        set uses2Type = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/cvw_relships.kmd#RelType_CVW:usesComponent2_UUID&#34;)

        if isEnabled(inst) then
			set components = inst.parts
            for each comp in components
                if isEnabled(comp) then
					if Global_InformationManager.isType(comp, Config.ViewType) then
						if comp.title = componentName then
							set findComponent = comp
							exit function
						end if
					end if
                end if
            next
			set components = findNeighbours(inst, Parameters.ConsistsOfType, true, 0)
            for each comp in components
                if isEnabled(comp) then
                    if comp.title = componentName then
                        set findComponent = comp
                        exit function
                    end if
                end if
            next

            set components = findNeighbours(inst, usesType, true, 0)
            for each comp in components
                if isEnabled(comp) then
                    if comp.title = componentName then
                        set findComponent = comp
                        exit function
                    end if
                end if
            next

			set components = findNeighbours(inst, uses2Type, true, 0)
            for each comp in components
                if isEnabled(comp) then
                    if comp.title = componentName then
                        set findComponent = comp
                        exit function
                    end if
                end if
            next
            
            set components = findNeighbours(inst, Metis.findtype(&#34;http://xml.activeknowledgemodeling.com/eka/languages/eka_relships.kmd#RelType_EKA:DependsOn_UUID&#34;), true, 0) 
            for each comp in components
                if isEnabled(comp) then
                    if comp.title = componentName then
                        set findComponent = comp
                        exit function
                    end if
                end if
            next
            if recursive and (not isValid(findComponent)) then &#39; inheritance
				dim s
				for each s in inheritance.supers(inst)
					if s.uri &#60;&#62; inst.uri then
						set findComponent = findComponent(s, componentName, false)
						if isValid(findComponent) then
							exit function
						end if
					end if
				next
            
            end if
        end if
    End Function


   &#39;-----------------------------------------------------------
    Public Property Get contentModel           &#39;IMetisObject
        dim context, model

        &#39; Find ContentModel

        &#39; Find ContentModel
        set context = new EKA_Context
        if isValid(config) then
			set context.currentModel        = config.model
			set context.currentModelView    = config.modelView
		end if
        set context.currentInstance     = workwindow.instance
        set context.currentInstanceView = workwindow
        if isValid(context) then
            set contentModel = context.contentModel
            ContentInRepository = context.isRepository
        end if

        if not isEnabled (contentModel) then
            if isValid(config) then
				set model = config.model
			else
				set model = metis.currentModel
			end if
			dim x, y
			for each x in model.views &#39; find model view called content ...
				if (instr(1, x.title, &#34;content&#34;, 1) &#62;0) or (instr(1, x.title, &#34;main&#34;, 1) &#62;0) or (instr(1, x.title, &#34;data&#34;, 1) &#62;0) then
					for each y in x.children &#39; find child which is submodel
						if y.instance.type.uri = &#34;metis:stdtypes#oid125&#34; then
							set contentModel = y.instance.parts(1)
							exit property
						end if
					next
				end if
			next
        end if
        if not isEnabled (contentModel) then
			set contentModel = model
		end if
    End Property

&#39;-----------------------------------------------------------
    Public Property Get ContentSearchModel
        set ContentSearchModel = searchModel
    End Property

    Public Property Let ContentSearchModel(search_model)
        if isvalid(workwindow) then
            searchModel = search_model
            call connectContentSearchModel(searchModel)
        end if
    End Property

&#39;-----------------------------------------------------------
    Public Sub setFilterRules(rules, noRules)
        
        dim rule
        dim i

        noFilterRules = noRules
        ReDim Preserve filterRules(noFilterRules)
        for i = 1 to noRules
            set rule = rules(i) 
            set filterRules(i) = rule
        next
    End Sub

&#39;-----------------------------------------------------------
    &#39; Build internal structures
    Public Sub build
    on error resume next
        &#39; Set variant parameters from configuring object - if given

        call value(Config.View, &#34;Name&#34;, Title)
        call value(Config.View, &#34;Mode&#34;, Mode)
        call value(Config.View, &#34;TitleBar&#34;, TitleBar)
        call value(Config.View, &#34;TitleBarAddOn&#34;, TitleBarAddOn)
        call value(Config.View, &#34;LayoutStrategy&#34;, LayoutStrategy)
        call value(Config.View, &#34;WorkwinLayoutStrategy&#34;, WindowLayoutStrategy)
        call value(Config.View, &#34;WorkwinLayoutMode&#34;, WindowLayoutMode)
        call value(Config.View, &#34;SymbolOpen&#34;, SymbolOpen)
        call value(Config.View, &#34;SymbolClosed&#34;, SymbolClosed)
        call value(Config.View, &#34;Textscale&#34;, Textscale)
        call value(Config.View, &#34;TreeTextScale&#34;, TreeTextScale)
        call value(Config.View, &#34;NestedTextScale&#34;, NestedTextScale)
        call value(Config.View, &#34;NestedTextScaleTop&#34;,NestedTextScaleTop)
        call value(Config.View, &#34;Height&#34;,Height)
        call value(Config.View, &#34;Width&#34;,Width)
        call value(Config.View, &#34;ObjectAspectRatio&#34;,ObjectAspectRatio)
        call value(Config.View, &#34;ObjectTextScale&#34;,ObjectTextScale)
        call value(Config.View, &#34;ObjectScaleFactor&#34;,ObjectScaleFactor)
        call value(Config.View, &#34;FilterSpecification_Model&#34;,FilterModel)
        call value(Config.View, &#34;InstanceContext_Model&#34;,InstanceContextModel)
        call value(Config.View, &#34;ModelContext_Model&#34;,ModelContextModel)
        call value(Config.View, &#34;Language_Model&#34;,LanguageModel)
        call value(Config.View, &#34;ViewStrategy_Model&#34;,ViewStrategyModel)
        if Len(TextScale) = 0 then
            TextScale = 1
        else
            TextScale = CDbl(TextScale)
        end if
        if Len(TreeTextScale) = 0 then
            TreeTextScale = -1
        else
            TreeTextScale = CDbl(TreeTextScale)
        end if
        if Len(NestedTextScale) = 0 then
            NestedTextScale = -1
        else
            NestedTextScale = CDbl(NestedTextScale)
        end if
        if Len(NestedTextScaleTop) = 0 then
            NestedTextScaleTop = -1
        else
            NestedTextScaleTop = CDbl(NestedTextScaleTop)
        end if
        if Len(ObjectAspectRatio) = 0 then
            ObjectAspectRatio = -1
        else
            ObjectAspectRatio = CDbl(ObjectAspectRatio)
        end if
        if Len(ObjectTextScale) = 0 then
            ObjectTextScale = -1
        else
            ObjectTextScale = CDbl(ObjectTextScale)
        end if
        if Len(ObjectScaleFactor) = 0 then
            ObjectScaleFactor = -1
        else
            ObjectScaleFactor = CDbl(ObjectScaleFactor)
        end if
        set workareaLayoutStrategy = metis.findLayoutStrategy(LayoutStrategy)
        set workwinLayoutStrategy = metis.findLayoutStrategy(WindowLayoutStrategy)

        &#39; Find used components
        set compTitleBar       = findComponent(config.View, &#34;TitleBar&#34;, true)
        set compWorkareaWindow = findComponent(config.View, &#34;WorkareaWindow&#34;, true)
   End Sub

&#39;-----------------------------------------------------------
    &#39; Configure used components
    Public Sub configure
        &#39; Propagate parameters to sub-components
        &#39;call resetCVWcomponent(compTitleBar)
        &#39;call configureCVWcomponent(parameters, compTitleBar, true)
        &#39;call resetCVWcomponent(compWorkareaWindow)
        &#39;call configureCVWcomponent(parameters, compWorkareaWindow, true)
    End Sub

&#39;-----------------------------------------------------------
    &#39; Do what the component is built for - return result
    Public Function execute
        dim index, noWindows
        dim clearMode, newMode, copyMode, moveMode
        dim layout_strategy
        set execute = Nothing
        &#39; The code
        &#39; Check workspace view
        &#39;stop
        &#39;if not isValid(Workspace) then
        &#39;    exit function
        &#39;end if
        &#39; Set some flags
        newMode   = true
        clearMode = false
        copyMode  = false
        moveMode  = false
        if Mode   = &#34;New&#34; then
            newMode = true
        elseif Mode = &#34;Reuse&#34; then
            newMode = false
        elseif Mode = &#34;ReuseAndClear&#34; then
            clearMode = true
            newMode = false
        elseif Mode = &#34;CopyView&#34; then
            copyMode = true
        elseif Mode = &#34;MoveView&#34; then
            moveMode = true
        end if

        if isEnabled (config.instView) then
            set currentWorkarea = config.instView.parent.parent
        end if
        if not find(Title, Workspace.WorkspaceWindow, currentWorkarea) then
			newMode = true
        end if
        set currentWorkarea = window.objectView
        if newMode then
            &#39; Create workarea
            if window.create(Title, windowType, Workspace.WorkspaceWindow) then
                set currentWorkarea = window.objectView
                with currentWorkarea
                    on error resume next
                    .close
                    set .layoutStrategy = workareaLayoutStrategy
                    .openSymbol         = SymbolOpen
                    .closedSymbol       = SymbolClosed
                    if Len(TextScale) &#62; 0 then
                        .TextScale   = CDbl(TextScale) * 6
                    end if
                    if Len(Height) &#62; 0 then
                        .geometry.height = CInt(Height)
                    end if
                    if Len(Width) &#62; 0 then
                        .geometry.width  = CInt(Width)
                    end if
                end with
                index = 1
                if isValid(compTitleBar) then
                    &#39; Create title bar
                    titlebarIndex = index
                    if isEnabled(compTitleBar) then
                        call createTitleBar(compTitleBar)
                        index = index + 1
                    end if
                end if
                &#39; Create work window
                workareaIndex = index
                call createWorkareaWindow(compWorkareaWindow)
                index = index + 1
            end if
        else
            workareaIndex = 2
            set workwindow = window.objectView.children(workareaIndex)
            if not isEnabled(work_window) then
                workareaIndex = 1
                set workwindow = window.objectView.children(workareaIndex)
            end if
        end if
        if clearMode then
            call window.clean()
        end if
        if copyMode then
            call copyViewToWorkarea()
        end if
        &#39;call window.doParentLayout
        &#39;call doWorkspaceLayout(workwindow.parent.parent)

        &#39; End code
        execute = true
    End Function

&#39;-----------------------------------------------------------
    Public Function find(name, parentView, instance)              &#39; as Boolean
        if name = &#34;$Current$&#34; then
            find = window.find2(windowType, parentView, instance)
        else
            find = window.find(name, windowType, parentView)
        end if
    End Function

&#39; ------------------------------------------------------------
    Public Function value(object, name, byref val)
        val = &#34;&#34;
        if not isValid(object) then
	   	   set object = config.view
        end if
        dim found
        found = parameters.getValueForObject(object, name, val)
        if not found then
            found = parameters.getValueFromSupers(object, name, val)
        end if
        if not found then
            call parameters.putValue(name, val)
            found = isValid(val)
        end if
        if isObject(val) then
            set value = val
        else
            value = val
        end if
&#39;       msgbox object.title&#38;&#34;.&#34;&#38;name&#38;&#34; = &#34;&#38;value
    end Function

&#39;-----------------------------------------------------------
    Private Sub createTitleBar(compTitleBar)
    		on error resume next
        dim TitleBarName, TemplateName, TemplateAddOn
        dim OpenSymbol, ClosedSymbol
        dim TextScale, Height
        dim TitleLayout, layout_strategy
        dim m, objectMenu, objectMenuAddOn, titleView, itemView

        &#39; Get variant parameter values
		&#39;hdj:
		TitleBarName = &#34;&#34;
        &#39;TitleBarName      = parameters.getValue( &#34;Name&#34;)
        dim found
        TitleLayout = value(compTitleBar, &#34;LayoutStrategy&#34;, TitleLayout)
        call value(compTitleBar, &#34;SymbolOpen&#34;, OpenSymbol)
        call value(compTitleBar, &#34;SymbolClosed&#34;, ClosedSymbol)
        call value(compTitleBar, &#34;Textscale&#34;,TextScale)
        call value(compTitleBar, &#34;Height&#34;, Height)
        set layout_strategy = metis.findLayoutStrategy(TitleLayout)

        &#39; Create title bar according to configuration
        set m = getCVWmodel
        call window.addSubWindow(&#34;Top&#34;, TitleBarName, titlebarType)
        set titleView = window.objectView.children(titlebarIndex)
        on error resume next
        with titleView
            set .layoutStrategy = layout_strategy
            .openSymbol         = OpenSymbol
            .closedSymbol       = ClosedSymbol
            if Len(TextScale) &#62; 0 then
                .TextScale       = CDBl(TextScale) / 10
            end if
            if Len(Height) &#62; 0 then
                .geometry.height    = CInt(Height)
            end if
        end with
        dim barGeometry
        set barGeometry = titleView.geometry

        dim service, services, button, buttonview, num
        dim ButtonOpenSymbol, ButtonClosedSymbol, ButtonTextScale, ButtonHeight, ButtonWidth, temp
        call value(config.view, &#34;OpenSymbolAsButton&#34;, ButtonOpenSymbol)
		if isValid(ButtonOpenSymbol) then
		    if isObject(ButtonOpenSymbol) then ButtonOpenSymbol = ButtonOpenSymbol.views(1).openSymbol
		else
		    ButtonOpenSymbol = &#34;&#34;
		end if
		call value(config.view, &#34;ClosedSymbolAsButton&#34;, ButtonClosedSymbol)
		if isValid(ButtonClosedSymbol) then
		    if isObject(ButtonClosedSymbol) then ButtonClosedSymbol = ButtonClosedSymbol.views(1).closedSymbol
		else
		    ButtonClosedSymbol = &#34;&#34;
		end if
	    call value(config.view, &#34;ButtonTextScale&#34;, ButtonTextScale)
        call value(config.view, &#34;ButtonHeight&#34;, ButtonHeight)
		call value(config.view, &#34;ButtonWidth&#34;,ButtonWidth)
		if isValid(ButtonTextScale)  then
		    ButtonTextScale = CDBl(ButtonTextScale) / 10
		else
		    ButtonTextScale = 0
		end if
        if isValid(ButtonHeight) then
            ButtonHeight = CInt(ButtonHeight)
        else
            ButtonHeight = 0
        end if
        set services = config.getTasks()
        num = services.count
        if isValid(ButtonWidth) then
            ButtonWidth = CInt(ButtonWidth)
        else
            ButtonWidth = titleview.geometry.width * 0.7 / num
        end if
        for each service in services
            set button = getEqualObject(service)
            if not Global_InformationManager.isType(button, Global_ViewManager.ButtonType) then
            			&#39; general object without associated actionbutton - create new actionbutton
                call Global_EventManager.sleep() &#39; no relships to context
			    Set button = Global_InformationManager.newElement(buttonType, nothing) &#39;config.model.newObject(buttonType)
			    call Global_EventManager.wakeup()
			    call config.model.newRelationship(equalsType, button, service)
			end if
			call button.setNamedStringValue(&#34;name&#34;, service.getNamedStringValue(&#34;name&#34;))
			temp = service.getNamedStringValue(&#34;description&#34;)
			if temp &#60;&#62; &#34;&#34; then call button.setNamedStringValue(&#34;description&#34;, temp)
			call button.setNamedStringValue(&#34;kind&#34;, &#34;Action&#34;)
		    Set buttonview = titleView.newObjectView(button)
			with buttonview
			    call parameters.getValueForObject(service, &#34;OpenSymbolAsButton&#34;, temp)
			    if isObject(temp) and isEnabled(temp) then
			        temp = temp.views(1).openSymbol
			    else
			        temp = &#34;&#34;
			    end if
			    if temp &#60;&#62; &#34;&#34; then
			        .openSymbol = temp
                elseif ButtonOpenSymbol &#60;&#62; &#34;&#34; then
                    .openSymbol = ButtonOpenSymbol
                end if
                call parameters.getValueForObject(service, &#34;ClosedSymbolAsButton&#34;, temp)
			    if isObject(temp) and isEnabled(temp) then
			        temp = temp.views(1).openSymbol
			    else
			        temp = &#34;&#34;
			    end if
			    if temp &#60;&#62; &#34;&#34; then
			        .closedSymbol = temp
                elseif ButtonClosedSymbol &#60;&#62; &#34;&#34; then
                    .closedSymbol = ButtonClosedSymbol
                end if
                if ButtonTextScale &#62; 0  then .TextScale   = ButtonTextScale
                if ButtonHeight &#62; 0 then .geometry.height = ButtonHeight
                if ButtonWidth &#62; 0 then .geometry.width   = ButtonWidth
			end with
        next
    End Sub

&#39;-----------------------------------------------------------
    Private Sub createWorkareaWindow(compWorkareaWindow)
    		on error resume next
        dim WindowName, TemplateName, TemplateAddOn
        dim OpenSymbol, ClosedSymbol
        dim TextScale, Height, Width
        dim WindowLayout, layout_strategy
        dim workarea, workspace, workWindowName
        dim m

        workWindowName = Title

        &#39; Get variant parameter values
        dim found
        call value(compWorkareaWindow, &#34;Name&#34;, WindowName)
        found = parameters.getValueForObject(compWorkareaWindow, &#34;TemplateName&#34;, TemplateName)
        if not found then
			set TemplateName = parameters.getValue(&#34;TemplateName&#34;)
			if not isValid(TemplateName) then
				TemplateName = parameters.getValue(&#34;TemplateName&#34;)
			end if
		end if
		found = parameters.getValueForObject(compWorkareaWindow, &#34;TemplateAddOn&#34;, TemplateAddOn)
		if not found then
			set TemplateAddOn = parameters.getValue(&#34;TemplateAddOn&#34;)
			if not isValid(TemplateAddOn) then
				TemplateAddOn = parameters.getValue(&#34;TemplateAddOn&#34;)
			end if
		end if
		if isValid(workwinLayoutStrategy) then
            WindowLayout = workwinLayoutStrategy.uri
        else
            call value(compWorkareaWindow, &#34;LayoutStrategy&#34;, WindowLayout)
        end if
        call value(compWorkareaWindow, &#34;TreeLayout&#34;,HierarchyLayout)
        call value(compWorkareaWindow, &#34;SymbolOpen&#34;,OpenSymbol)
        call value(compWorkareaWindow, &#34;SymbolClosed&#34;,ClosedSymbol)
        call value(compWorkareaWindow, &#34;Textscale&#34;,TextScale)
        call value(compWorkareaWindow, &#34;Height&#34;, Height)
        call value(compWorkareaWindow, &#34;Width&#34;,Width)
        set layout_strategy  = metis.findLayoutStrategy(WindowLayout)
        set hierarchy_layout = metis.findLayoutStrategy(HierarchyLayout)

        &#39; Create workarea window according to configuration
        set m = getCVWmodel
        if WindowLayoutMode = &#34;Manual&#34; then
            call window.addSubWindow(&#34;Top&#34;, workWindowName, window2Type)
            set workwindow = window.objectView.children(workareaIndex)
            set config.model.currentInstance = workwindow.instance
            set config.modelView.currentInstanceView = workwindow
            metis.runCommand(&#34;toggle-next-fixed-layout&#34;)
            set config.model.currentInstance = config.inst
            if isEnabled (config.instView) then set config.modelView.currentInstanceView = config.instView
        else
            call window.addSubWindow(&#34;Top&#34;, workWindowName, windowType)
            set workwindow = window.objectView.children(workareaIndex)
        end if
        with workwindow
            on error resume next
            set .layoutStrategy = layout_strategy
            .openSymbol         = OpenSymbol
            .closedSymbol       = ClosedSymbol
            if Len(TextScale) &#62; 0 then
                .TextScale       = CDbl(TextScale)
            end if
            if Len(Height) &#62; 0 then
                .geometry.height = CInt(Height)
            end if
            if Len(Width) &#62; 0 then
                .geometry.width  = CInt(Width)
            end if
        end with
        call metis.doLayout(workwindow.parent)

        &#39; Set textscale if there are parallel workareas
        if Len(TextScale) = 0 then
            set workspace = window.objectView.parent
            if workspace.children.count &#62; 1 then
                set workarea = workspace.children(1).children(2)
                if isValid(workarea) then
                    workwindow.TextScale = workarea.TextScale
                end if
            else
                workwindow.TextScale = workwindow.TextScale / 12
            end if
        end if

        &#39; Set view strategy if given
        call connectFilter()
        call connectLanguageModel()
        call connectModelContext()
        call connectViewStrategy(ViewStrategyModel)
    End Sub

&#39;-----------------------------------------------------------
    Public Sub populate(instances, noLevels)
        dim obj, obj1, obj2, objView
        dim origin, target
        dim relType, type1, type2
        dim inst, workarea, wObject
        dim viewStrategies, viewStrategy
        dim instanceConts, instanceCont
        dim strategyConts, strategyCont
        dim cvwViewStrategy, cvwCircularLayout
        dim cvwObjectView
        dim ekaInstance
        dim rel, relView, hasViewList
        dim originView, originViews, targetView, targetViews
        dim propVal
        dim done

        set wObject = workwindow.instance
        set ekaInstance = new EKA_Instance
        set cvwObjectView = new CVW_ObjectView
        if WindowLayoutStrategy = &#34;akm:layout#CircularLayout1&#34; then
            for each inst in instances
                if isEnabled(inst) then
                    if inst.isObject then
                        set cvwCircularLayout = new CVW_CircularLayout
                        call cvwCircularLayout.build
                        call cvwCircularLayout.execute(workwindow, inst)
                        exit for
                    end if
                end if
            next
        else
            &#39; Get view strategy
            set cvwViewStrategy = new CVW_ViewStrategy
            
            set strategyConts = wObject.getNeighbourObjects(0, hasViewStrategyType, GLOBAL_Type_AnyObject)
            if strategyConts.count &#62; 0 then
                set strategyCont = strategyConts(1)
                call cvwViewStrategy.build(strategyCont)
            else
                call cvwViewStrategy.build(Global_Context.View) &#39; test by håvard in case there is not view strategy
            end if
            &#39; Get instance context parameters
            &#39;set instanceConts = wObject.getNeighbourObjects(0, hasInstanceContextType, specContainerType)
            &#39;if instanceConts.count &#62; 0 then
            &#39;    set instanceCont = instanceConts(1)
            &#39;    propVal = ekaInstance.getPropertyValue(instanceCont, &#34;ObjectAspectRatio&#34;)
            &#39;    if Len(propVal) &#62; 0 then
            &#39;        ObjectAspectRatio = CDbl(propVal)
            &#39;    end if
            &#39;end if
            dim par, parentsinList
            set hasViewList = metis.newInstanceList
            call addViewsToList(hasViewList, workwindow)
            for each obj in instances
                if not obj.isRelationship then
                    if not instanceInList(obj, hasViewList) then
                        set par = obj.parent
                        set parentsinList = metis.newInstanceList()
                        while isEnabled(par) and instances.contains(par) and not instanceInList(par, hasViewList) 
                        &#39; add parents first
                            call parentsInList.addFirst(par)
                            set par = par.parent
                        wend 
                        for each par in parentsInList
                            set objView = creTreeView(par, instances, hasViewList, workwindow, cvwViewStrategy, 0, noLevels)
                        next
                        set objView = creTreeView(obj, instances, hasViewList, workwindow, cvwViewStrategy, 0, noLevels)
                    end if
                end if
            next
            for each rel in instances
                done = false
                if rel.isRelationship then
                    set origin = rel.origin
                    set originViews = config.modelView.findInstanceViews(origin)
                    set target = rel.target
                    set targetViews = config.modelView.findInstanceViews(target)
                    for each originView in originViews
                        if isInView(originView, workwindow) then
                            for each targetView in targetViews
                                if isInView(targetView, workwindow) then
                                    if isValid(cvwViewStrategy) then
                                        done = cvwViewStrategy.isHierarchyRelView(rel, originView, targetView)
                                        if done then
                                            set targetView.parent = originView
                                        elseif cvwViewStrategy.viewAsHierarchy &#60; 0 then
                                            dim pv
                                            set pv = Global_ViewManager.findParentView(originView, target)
                                            if pv.uri = originView.uri then done = true
                                            if done then set targetView.parent = originView
                                        end if
                                    end if
                                    if targetView.parent.uri = originView.uri then
                                        done = true
                                        set targetView.parent = originView
                                    elseif originView.parent.uri = targetView.uri then
                                        done = true
                                    end if
                                    if not done then
                                        if not instanceInList(rel, hasViewList) then
                                            set relView = config.modelView.newRelationshipView(rel, originView, targetView)
                                            hasViewList.addLast rel
                                        end if
                                    end if
                                end if
                            next
                        end if
                    next
                end if
            next
        end if

        &#39; Handle ShowAllRelationships
        if cvwViewStrategy.showAllRelationships then
            dim instViews, cvwWorkspace
            set instViews = metis.newInstanceViewList
            call instViews.addLast(workwindow)
            call config.modelView.select(instViews)
            set cvwWorkspace = new CVW_Workspace
            set cvwWorkspace.WorkspaceWindow = workwindow.parent.parent
            call cvwWorkspace.showRelationships(&#34;ShowIntra&#34;)
            call config.modelView.clearSelection
            set cvwWorkspace = Nothing
        end if
        
        &#39; Do the layout on work_window
        if workwindow.instance.type.uri &#60;&#62; window2Type.uri then
            call metis.doLayout(workwindow)
        end if

        &#39; Set layout strategy on topObject
        if isEnabled(hierarchy_layout) and isEnabled(objView) then
            set objView.layoutStrategy = hierarchy_layout
        end if
        if workwindow.children.count &#62; 0 then
            for each objView in workwindow.children
                call doLayout(objView)
            next
        end if
        &#39;if isEnabled(objView) then
        &#39;    &#39; Do the layout on topObject
        &#39;    call metis.doLayout(objView)
        &#39;end if
        if WindowLayoutMode = &#34;Manual&#34; then
            set config.model.currentInstance = workwindow.instance
            set config.modelView.currentInstanceView = workwindow
            metis.runCommand(&#34;toggle-next-fixed-layout&#34;)
        end if
        set metis.currentModel = config.model
        set metis.currentModelView = config.modelView
        set cvwObjectView = Nothing
        set ekaInstance = Nothing
    End Sub

&#39;--------------------
    private sub doLayout(view)
        dim c
        call metis.doLayout(view)
        if view.children.count &#62; 0 then
            view.open
        elseif view.isNested then
            view.close
        end if
        for each c in view.children
            call doLayout(c)
        next
    end sub
    

&#39;-----------------------------------------------------------
    Private Function creTreeView(obj, instances, hasViewList, parentView, cvwViewStrategy, level, noLevels)
        dim obj1, obj2, objView
        dim relType, type1, type2
        dim workarea, wObject
        dim strategies, strategy
        dim relDir, rels, rel, relView
        dim childInst, childInstView
        dim textScale, parentAbsScale, objAbsScale
        dim i, found
        dim rule
        dim cvwObjView, cvwFilter
        dim objGeo, size
        dim pv

        if isValid(obj.parent) then
            if obj.parent.isConnectorType then
                set creTreeView = Nothing
                exit Function
            end if
        end if

        if level &#62;= noLevels then
            if noLevels &#62; -1 then
                set creTreeView = Nothing
                exit Function
            end if
        end if
        if noLevels = -2 then
            if not instanceInList(obj, instances) then
                set creTreeView = Nothing
                exit Function
            end if
        end if

        if isEnabled(obj) then
            &#39; Create view of each of the top instances
            set cvwObjView = new CVW_ObjectView
            cvwObjView.treeTextFactor    = TreeTextScale
            cvwObjView.nestedTextFactor1 = NestedTextScaleTop
            cvwObjView.nestedTextFactor2 = NestedTextScale
            set cvwObjView.viewStrategy  = cvwViewStrategy
            if cvwViewStrategy.viewAsHierarchy = -1 then
                set pv = Global_ViewManager.findParentView(parentview, obj)
            elseif cvwViewStrategy.viewAsHierarchy &#62; 0 then
                if cvwViewStrategy.isHierarchyObj(obj) then
                    set pv = Global_ViewManager.findParentView(parentview, obj)
                else
                    set pv = parentView
                end if
            else
                set pv = parentview
            end if
            set objView = cvwObjView.create(workwindow, pv, obj, cvwViewStrategy.objectAspectRatio)
			&#39;objView.TextScale = ObjectTextScale &#39;hdj
			&#39;objView.ScaleFactor = ObjectScaleFactor
            &#39;if objView.isNested then
            &#39;    objView.close
            &#39;end if
            if isValid(hasViewList) then
                hasViewList.addLast obj
            end if
            if isValid(cvwViewStrategy) then
                set cvwFilter = new CVW_Filter
                for i = 1 to cvwViewStrategy.noHierarchyRules
                    set rule = cvwViewStrategy.hierarchyRules(i)
                    if obj.type.uri = rule.parentType.uri then
                        set rels = obj.getNeighbourRelationships(rule.relDir, rule.relType)
                        for each rel in rels
                            if not applyFilter or cvwFilter.instIsValid(rel, filterRules, noFilterRules) then
                                if rule.relDir = 0 then
                                    set childInst = rel.target
                                else
                                    set childInst = rel.origin
                                end if
                                if instanceInList(childInst, instances) then
                                    if not applyFilter or cvwFilter.instIsValid(childInst, filterRules, noFilterRules) then
                                        level = level + 1
                                        if not instanceInList(childInst, hasViewList) then
                                            if cvwViewStrategy.viewAsHierarchy &#62; 0 then
                                                set childInstView = creTreeView(childInst, instances, hasViewList, objView, cvwViewStrategy, level, noLevels)
                                            else
                                                set childInstView = creTreeView(childInst, instances, hasViewList, workwindow, cvwViewStrategy, level, noLevels)
                                            end if
                                        else
                                            set childInstView = viewExists(childInst, pv)
                                        end if
                                        if cvwViewStrategy.viewAsHierarchy &#60; 1 then
                                            if isValid(childInstView) then
                                                if not instanceInList(rel, hasViewList) then
                                                    if rule.relDir = 0 then
                                                        set relView = config.modelView.newRelationshipView(rel, objView, childInstView)
                                                    else
                                                        set relView = config.modelView.newRelationshipView(rel, childInstView, objView)
                                                    end if
                                                    if isValid(hasViewList) then
                                                        hasViewList.addLast rel
                                                    end if
                                                end if
                                            end if
                                        end if
                                        level = level - 1
                                    end if
                                end if
                            end if
                        next
                    end if
                next
                set cvwFilter = Nothing
            end if
        end if
        if objView.isNested then
            on error resume next
            &#39;if level = 0 then
                call metis.doLayout(objView)
                if objView.children.count &#62; 0 then
                    objView.open
                else
                    objView.close
                end if
            &#39;end if
        end if
        set creTreeView = objView
    End Function

   &#39;---------------------------------------------------------------------------------------------------
    Public Sub copyViewToWorkarea(byval sourceContainerView) &#39;hdj changed
        dim topContainer
        dim instance
        dim workwin, workwinParent
        dim copiedWin

&#39;sourceContainerView.open
        if isEnabled(sourceContainerView) then
            set workwin = window.objectView.children(workareaIndex)
            set workwinParent = workwin.parent
            dim mv, m2
            set m2 = sourceContainerView.parent
            set mv = m2
            while isValid(m2)
				set mv = m2
				set m2 = mv.parent
            wend
            on error resume next
            set metis.currentModel = sourceContainerView.instance.ownerModel
            if metis.currentModel.currentModelView.uri &#60;&#62; mv.uri then
				set mv = metis.currentModel.modelView(mv.title)
				set metis.currentModel.currentModelView = mv
			end if
            set metis.currentModel.currentModelView.currentInstanceView = sourceContainerView
            Call metis.runCommand(&#34;copy&#34;)

            set metis.currentModel = config.model
            set metis.currentModel.currentModelView = config.modelView
            set metis.currentModel.currentModelView.currentInstanceView = workwin

        dim test
        test = 2
        select case test
        case 1
            &#39;Call metis.runCommand(&#34;active-auto-layout&#34;)
            Call metis.runCommand(&#34;unset-auto-layout&#34;)
            Call metis.runCommand(&#34;paste-view&#34;)
            set copiedWin = workwin.children(workwin.children.count)
            set metis.currentModel.currentModelView.currentInstanceView =  copiedWin
            &#39;workwin.children(workwin.children.count).TextScale = Cdbl(ObjectTextScale)
            Call metis.runCommand(&#34;toggle-fixed-layout&#34;)
            Call metis.runCommand(&#34;toggle-next-fixed-layout&#34;)
            Call metis.runCommand(&#34;toggle-sub-fixed-layout&#34;) &#39;next
			set metis.currentModel.currentModelView.currentInstanceView = workwin
			set workwin.layoutStrategy = metis.findLayoutStrategy(&#34;http://xml.activeknowledgemodeling.com/cvw/views/cvw_layout_strategies.kmd#_002asku01k3ugo3o9942&#34;)
			&#39;workwin.doLayout
            &#39;Call metis.runCommand(&#34;active-auto-layout&#34;) &#39;on
            Call metis.runCommand(&#34;unset-auto-layout&#34;)
            &#39; scale to fit to workwin:
            &#39;stop
            call scaleView(workwin, true)
            &#39;call workwin.children(workwin.children.count).open()
            metis.currentModel.currentModelView.clearSelection

        case 2
            if not Global_InformationManager.isTemplate(sourceContainerView.instance) then
                if not sourceContainerView.instance.type.uri = config.ViewType.uri then
                    call metis.currentModel.currentModelView.deleteObjectView(workwin)
                    set metis.currentModel.currentModelView.currentInstanceView =  workwinParent
                end if
            end if
            Call metis.runCommand(&#34;unset-auto-layout&#34;)
            Call metis.runCommand(&#34;paste-view&#34;)
            set copiedWin = workwinParent.children(workwinParent.children.count)
            set workwin = copiedWin
            set metis.currentModel.currentModelView.currentInstanceView =  copiedWin
            call metis.runCommand(&#34;unset-auto-layout&#34;)
            call metis.runCommand(&#34;toggle-auto-layout&#34;)
            call metis.runCommand(&#34;unset-fixed-layout&#34;)
            call metis.runCommand(&#34;toggle-next-fixed-layout&#34;)
            if sourceContainerView.instance.type.uri = config.ViewType.uri then
                call scaleView(workwin, true)
            end if
            config.modelView.clearSelection
        end select

        end if
    End Sub

    public sub scaleview(view, full)
		on error resume next
		if isValid(view) then
			dim factor, c, maxx, maxy, scalex, scaley, minx, miny, offsetx, offsety, p, m, i, l, newx, newy
			factor = 1
			if view.children.count &#62;0 then
				factor = view.ScaleFactor
				maxx = -10000000
				maxy = -10000000
				if full then
				    minx = - maxx
				    miny = - maxy
				else
				    minx = 0
				    miny = 0
				end if
				for each c in view.children
					if c.geometry.x + c.geometry.width &#62; maxx then
						maxx = c.geometry.x + c.geometry.width
					end if
					if c.geometry.y + c.geometry.height &#62; maxy then
						maxy = c.geometry.y + c.geometry.height
					end if
					if c.geometry.x &#60; minx then
						minx = c.geometry.x
					end if
					if c.geometry.y &#60; miny then
						miny = c.geometry.y
					end if
				next
				if full then
					scalex = view.geometry.width / ( (maxx-minx) * factor)
					scaley = view.geometry.height / ( (maxy-miny) * factor)
					offsetx = 0
					offsety = 0
				else
					scalex = 0.9 * view.geometry.width / ( (maxx-minx) * factor)
					scaley = 0.9 * view.geometry.height / ( (maxy-miny) * factor)
					offsetx = 0.05* view.geometry.width / ( (maxx-minx) * factor) &#39; margin
					offsety = 0.05* view.geometry.height / ( (maxy-miny) * factor) &#39; margin
				end if
				&#39;msgbox &#34;Scaling children of &#34; &#38; view.instance.title &#38; &#34; x: &#34; &#38;scalex &#38; &#34; y: &#34; &#38;scaley
				for each c in view.children
					if full then &#39;position in middle...
					    if  scaley &#60; scalex then
						    newx= 0.5 * ( view.geometry.width/scaley - c.geometry.width ) / scaley
						    if newx &#60; 0 then newx = 0
						    newy = 0
						else
						    newx= 0
						    newy = 0.5 * (view.geometry.height/scalex - c.geometry.height ) / scalex
						    if newy &#60; 0 then newy = 0
						end if
					else
						&#39;set p = c.geometry
						&#39;p.width =  - minx * scalex + offsetx
						&#39;p.height = - miny * scaley + offsety
						&#39;c.moveRelative(p)
						newx = c.geometry.x - minx + offsetx / scalex
						newy = c.geometry.y - miny + offsety / scaley
					end if
					if  scaley &#60; scalex then
						c.scale(scaley)
						&#39;c.textscale = c.textscale * scaley
					else
						c.scale(scalex)
						&#39;c.textscale = c.textscale * scalex
					end if
					c.geometry.x = newx
					c.geometry.y = newy
					&#39;c.geometry.x = (c.geometry.x - minx) * scalex + offsetx

					&#39;c.geometry.y = (c.geometry.y - miny) * scaley + offsety
					&#39;if c.instance.isRelationship() then
					&#39;stop
					&#39;	if c.hasPath() then
					&#39;		m = &#34;Points for relationship: &#34; &#38; vbcrlf
					&#39;		l = metis.newInstanceList()
					&#39;		for i = 1 to c.path.count
					&#39;			set p = c.path.item(i)
					&#39;			m = m &#38; &#34;(&#34;&#38; p.x &#38;&#34;,&#34;&#38;p.y&#38;&#34;) &#34;
					&#39;			p.x = (p.x - minx) * scalex + offsetx
					&#39;			p.y = (p.y - miny) * scaley + offsety
					&#39;			m = m &#38; &#34;-&#62;(&#34;&#38; p.x &#38;&#34;,&#34;&#38;p.y&#38;&#34;) &#34;
					&#39;			call l.addLast(p)
					&#39;			&#39;set c.path.item(i) = p
					&#39;		next
					&#39;		set c.path = l
					&#39;		m = m &#38; vbcrlf&#38; &#34;Converted into:          &#34;&#38; vbcrlf
					&#39;		for each p in c.path
					&#39;			m = m &#38; &#34;(&#34;&#38; p.x &#38;&#34;,&#34;&#38;p.y&#38;&#34;)&#34;
					&#39;		next
					&#39;		msgbox m
					&#39;	end if
					&#39;else 
					&#39;	c.geometry.x = (c.geometry.x - minx) * scalex + offsetx
					&#39;	c.geometry.width = c.geometry.width * scalex
					&#39;	c.textscale = c.textscale / scalex
					&#39;	c.geometry.y = (c.geometry.y - miny) * scaley + offsety
					&#39;	c.geometry.height = c.geometry.height * scaley
					&#39;end if
				next
				if view.isNested() then
				    for each c in view.children
					    call scaleview(c, false)
				    next
				end if
			end if
		end if
    end sub

   &#39;---------------------------------------------------------------------------------------------------
    Private Sub addViewsToList(hasViewList, parentView)
        dim child, children
        dim inst

        set children = parentView.children
        for each child in children
            if hasInstance(child) then
                set inst = child.instance
                if not instanceInList(inst, hasViewList) then
                    hasViewList.addLast inst
                end if
            end if
            call addViewsToList(hasViewList, child)
        next

    End Sub

   &#39;---------------------------------------------------------------------------------------------------
    Private Function findContainer(parent, contType, contName)
        dim container, containers
        dim foundContainer

        set findContainer = Nothing
        set foundContainer = Nothing
        set containers = parent.parts
        for each container in containers
            if container.type.uri = contType.uri then
                if container.name = contName then
                    set foundContainer = container
                    exit for
                else
                    set foundContainer = findContainer(container, contType, contName)
                end if
            end if
        next
        if isEnabled(foundContainer) then
            set findContainer = foundContainer
        end if
    End Function

&#39;-----------------------------------------------------------
    Private Sub connectLanguageModel()
        dim langModel
        dim obj, rel
        dim langObjView
&#39;stop
        if Len(LanguageModel) &#62; 0 then
            set langModel = metis.findInstance(LanguageModel)
            if isEnabled(langModel) then
                set langObjView = langModel.views(1)
                if isEnabled(workwindow) then
                    &#39; Connect rel from WorkWindow to language model specification container
                    set obj = WorkWindow.instance
                    set rel = config.model.newRelationship(hasLanguageType, obj, langModel)
                    &#39; Create metamodel and connect to model
                    if isEnabled(addMetamodelMethod) then
                        set config.model.currentInstance = langModel
                        set config.modelView.currentInstanceView = langObjView
                        call config.model.runMethodOnInst(addMetamodelMethod, langModel)
                        set config.model.currentInstance = config.inst
                        if isEnabled (config.instView) then set config.modelView.currentInstanceView = config.instView
                    end if
                end if
            end if
        end if
    End Sub

&#39;-----------------------------------------------------------
    Private Sub connectModelContext()
        dim specModel
        dim obj, rel
        dim specObjView
        dim context

        if Len(ModelContextModel) &#62; 0 then
            set specModel = metis.findInstance(ModelContextModel)
            if isEnabled(specModel) then
                set specObjView = specModel.views(1)
                if isEnabled(WorkWindow) then
                    &#39; Connect rel from WorkWindow to model context specification container
                    set obj = WorkWindow.instance
                    set rel = config.model.newRelationship(hasModelContextType, obj, specModel)
                end if
            end if
        end if
    End Sub

&#39;-----------------------------------------------------------
    Private Sub connectFilter()
        dim specModel
        dim obj, rel
        dim specObjView
        dim context

        if Len(FilterModel) &#62; 0 then
            set specModel = metis.findInstance(FilterModel)
            if isEnabled(specModel) then
                set specObjView = specModel.views(1)
                if isEnabled(WorkWindow) then
                    &#39; Connect rel from WorkWindow to model context specification container
                    set obj = WorkWindow.instance
                    set rel = config.model.newRelationship(hasFilterType, obj, specModel)
                end if
            end if
        end if
    End Sub

&#39;-----------------------------------------------------------
    Public Sub connectInstanceContext(contextObj)

        if isEnabled(WorkWindow) then
            &#39; Connect rel from WorkWindow to actual context instance
            if isEnabled(contextObj) then
                dim wObject
                dim rel, rels
                dim cvwInstance
                dim instName
                set wObject = WorkWindow.instance
                &#39; Find equals relationship
                set rels = wObject.getNeighbourRelationships(0, GLOBAL_Type_EkaEquals)
                if rels.count &#62; 0 then
                    for each rel in rels
                        set rel.target = contextObj
                    next
                else
                    set rel = config.model.newRelationship(GLOBAL_Type_EkaEquals, wObject, contextObj)
                end if
                set cvwInstance = new CVW_Instance
                set cvwInstance.currentInstance = WorkWindow.instance
                set cvwInstance.currentInstanceView = WorkWindow
                instName = cvwInstance.getInstanceName
                set cvwInstance = Nothing
                if Len(instName) &#62; 0 then
                    dim workarea
                    dim indx
                    WorkWindow.title = instName
                    set workarea = WorkWindow.parent
                    indx = workarea.children.count
                    if indx &#62; 1 then
                        dim titleObj
                        set titleObj = workarea.children(1).instance
                        titleObj.name = instName
                        titleObj.title = instName
                    end if
                end if
            end if
        end if
    End Sub

&#39;-----------------------------------------------------------
    Public Sub connectViewStrategy(strategyModelUri)
        dim specModel
        dim obj, rel, rels
        dim specObjView
        dim strategyCont, strategyConts
        dim cvwViewStrategy
        dim ekaInstance

        if Len(strategyModelUri) &#62; 0 then
            set specModel = metis.findInstance(strategyModelUri)
            if isEnabled(specModel) then
                set specObjView = specModel.views(1)
                if isEnabled(WorkWindow) then
                    set obj = WorkWindow.instance
                    &#39; Find rel from WorkWindow to viewstrategy specification container
                    set rels = obj.getNeighbourRelationships(0, hasViewStrategyType)
                    if rels.count &#62; 0 then set rel = rels(1)
                    if isEnabled(rel) then
                        set rel.target = specModel
                    else
                        &#39; Connect rel from WorkWindow to viewstrategy specification container
                        set rel = config.model.newRelationship(hasViewStrategyType, obj, specModel)
                    end if
                    &#39; Check for properties
                    set ekaInstance = new EKA_Instance
                    WindowLayoutStrategy = ekaInstance.getPropertyValue(specModel, &#34;WorkwinLayoutStrategy&#34;)
                    if Len(WindowLayoutStrategy) &#62; 0 then
                        set workwinLayoutStrategy = metis.findLayoutStrategy(WindowLayoutStrategy)
                        set WorkWindow.layoutStrategy = workwinLayoutStrategy
                    end if
                    set ekaInstance = Nothing
                    &#39; Create metamodel and connect to model
                    if isEnabled(addPartRuleMethod) then
                        set config.model.currentInstance = specModel
                        set config.modelView.currentInstanceView = specObjView
                        call config.model.runMethodOnInst(addPartRuleMethod, specModel)
                        set config.model.currentInstance = config.inst
                        if isEnabled (config.instView) then set config.modelView.currentInstanceView = config.instView
                    end if
                end if
            end if
        end if
    End Sub

&#39;-----------------------------------------------------------
    Private Sub connectContentSearchModel(searchModel)
        dim specModel
        dim wObject, rel
        dim specObjView
        dim searchConts
        dim context

        if Len(searchModel) &#62; 0 then
            set specModel = metis.findInstance(searchModel)
            if isEnabled(specModel) then
                set specObjView = specModel.views(1)
                if isEnabled(WorkWindow) then
                    &#39; Connect rel from WorkWindow to model context specification container
                    set wObject = WorkWindow.instance
                    set searchConts = wObject.getNeighbourObjects(0, hasSearchSpecificationType, specContainerType)
                    if searchConts.count = 0 then
                        set rel = config.model.newRelationship(hasSearchSpecificationType, wObject, specModel)
                    end if
                end if
            end if
        end if
    End Sub

&#39;-----------------------------------------------------------
    Public Sub doParentLayout
        if isValid(WorkWindow.parent) then
            if isValid(WorkWindow.parent.parent) then
                call doWorkspaceLayout(WorkWindow.parent.parent)
            end if
        elseif isValid(currentWorkarea) then
            if isValid(currentWorkarea.parent) then
                call doWorkspaceLayout(currentWorkarea.parent)
            end if
        end if
    End Sub

&#39;-----------------------------------------------------------
    Private Sub doWorkspaceLayout(objView)
        dim layoutStrategy
        dim workspaceLayoutStrategy

        set workspaceLayoutStrategy = objView.layoutStrategy
        set layoutStrategy = metis.findLayoutStrategy(&#34;http://xml.activeknowledgemodeling.com/cvw/views/matrix_layouts.kmd#_002ash3011bccb0hs5tr&#34;)
        set objView.layoutStrategy = layoutStrategy
        call metis.doLayout(objView)
        set objView.layoutStrategy = workspaceLayoutStrategy
        call metis.doLayout(objView)
    End Sub

&#39;-----------------------------------------------------------
    Private Sub Class_Initialize()
        set parameters = Nothing
        set config = GLOBAL_Context

        &#39; Types
        set titlebarType    = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/view_objects.kmd#UiType_CVW:Workarea_UUID&#34;)
        set windowType      = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/view_objects.kmd#UiType_CVW:Workarea_UUID&#34;)
        set window2Type     = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/view_objects.kmd#UiType_CVW:Workarea2_UUID&#34;)
        set buttonType      = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/action_objects.kmd#ObjType_CVW:Button_UUID&#34;)
        set consistsOfType  = metis.findType(&#34;http://xml.activeknowledgemodeling.com/eka/languages/eka_relships.kmd#RelType_EKA:Member_UUID&#34;)
        set hasFilterType   = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/spec_relships.kmd#RelType_CVW:hasFilterSpecification_UUID&#34;)
        set hasLanguageType = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/spec_relships.kmd#RelType_CVW:hasLanguageSpecification2_UUID&#34;)
        set hasViewStrategyType     = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/spec_relships.kmd#RelType_CVW:hasViewStrategy2_UUID&#34;)
        set hasModelContextType     = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/spec_relships.kmd#RelType_CVW:hasModelContext_UUID&#34;)
        set hasInstanceContextType  = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/spec_relships.kmd#RelType_CVW:hasInstanceContext_UUID&#34;)
        set hasInstanceContext2Type = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/spec_relships.kmd#RelType_CVW:hasInstanceContext2_UUID&#34;)
        set specContainerType       = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/spec_objects.kmd#ObjType_CVW:Specification_Container_UUID&#34;)
        set hasSearchSpecificationType = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/spec_relships.kmd#RelType_CVW:hasSearchSpecification_UUID&#34;)
        set propertyType    = metis.findType(&#34;http://xml.activeknowledgemodeling.com/eka/languages/eka_property.kmd#ObjType_EKA:Property_UUID&#34;)
        set hasPropertyType = metis.findType(&#34;http://xml.activeknowledgemodeling.com/eka/languages/eka_relships.kmd#RelType_EKA:HasProperty_UUID&#34;)
        &#39; Methods
        set addMetamodelMethod  = metis.findMethod(&#34;http://xml.activeknowledgemodeling.com/cvw/operations/spec_methods.kmd#addVirtualMetamodel&#34;)
        set addPartRuleMethod   = metis.findMethod(&#34;http://xml.activeknowledgemodeling.com/cvw/operations/spec_methods.kmd#addPartRules&#34;)
        set equalsType		= metis.findType(&#34;http://xml.activeknowledgemodeling.com/eka/languages/eka_relships.kmd#RelType_EKA:Equals_UUID&#34;)

        &#39; Arguments
        TreeTextScale        = -1
        NestedTextScaleTop   = -1
        NestedTextScale      = -1
        ObjectAspectRatio    = -1
        WindowLayoutStrategy = &#34;&#34;
        noSymbolRules        = 0
        ContentInRepository  = false
        set window    = new CVW_Window
    End Sub

&#39;-----------------------------------------------------------
    Private Sub Class_Terminate()

    End Sub

End Class

</string>
  </valueset>
 </object>

 <object id="_002asjd00rcftrmj7m16">
  <valueset size="10" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="../languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Class CVW_StatusBar
</string>
   <string name="description"></string>
   <integer name="dbms-admin.commitFlag">0</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20071025 115508062</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="comments"></string>
   <string name="script">option explicit

class CVW_StatusBar
&#39;[1] ------------------------------------------------------------
 Public Sub topMenuStatus (instView)
  dim topMenuObject, inst

  set inst = instView.instance 
  For each topMenuObject in instView.parent.children 
    if topMenuObject.title = inst.title THEN  
      topMenuObject.open
    else
      topMenuObject.close
    end if
   next

 end sub

&#39;[2] ------------------------------------------------------------
Public  sub populateStatusBars(instView)
on error resume next
 &#39;[a]-------------------------------
 Dim  InputContainerName, InputContainerType, s, t
 Dim  titleBars, titlebar, titleBarString  
 &#39;[b]-------------------------------
 &#39;InputContainerName = &#34;CVW_NavigationHome&#34;
 &#39;InputContainerType = &#34;metis:stdtypes#oid3&#34;
 &#39;[c]-------------------------------
 set titleBars  = Global_Context.model.findInstances(Global_Context.ViewType, &#34;comments&#34; ,&#34;CVW_TitleBar&#34;)

   &#39; --- Updater Navigation Bar 
   titleBarString =  &#34;&#34;
   set s = instView
   set t = Global_Context.Project
   do while isEnabled(s) 
        if instr(1, s.title, &#34;Workplace&#34;, 1) &#62; 0 then exit do
        if instr(1, s.title, &#34;Tasks&#34;, 1) &#62; 0 then exit do
        if instr(1, s.title, &#34;Framework&#34;, 1) &#62; 0 then exit do
        if instr(1, s.title, &#34;CVW&#34;, 1) &#62; 0 then exit do
        if isEnabled(t) then
            if instr(1, s.title, t.title, 1) &#62; 0 then exit do
        end if 
        titleBarString = s.title &#38;  &#34; / &#34; &#38; titleBarString 
        set s = s.parent
   loop
   &#39;titleBarString = mid(titleBarString, 3)
   if titleBarString &#60;&#62; &#34;&#34; then titleBarString = left(titleBarString, len(titleBarString) -2)
   if isEnabled(t) then titleBarString = t.title &#38; &#34; : &#34; &#38; titleBarString
   for each titlebar in titlebars
        titleBar.setNamedStringValue &#34;name&#34;, titleBarString
   next
 end sub



end class

</string>
  </valueset>
 </object>

 <object id="_002ask0025hc03qbnha6">
  <valueset size="10" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="../languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Class CVW_WorkspaceH</string>
   <string name="description"></string>
   <integer name="dbms-admin.commitFlag">0</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20071206 142635750</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="comments"></string>
   <string name="script">option explicit


&#39;-----------------------------------------------------------
&#39;-----------------------------------------------------------
Class CVW_WorkspaceH


    &#39; Variant parameters
    Public Title                        &#39; String
    Public ClearMode                    &#39; String
    Public LayoutStrategy               &#39; String
    Public SymbolOpen                   &#39; String
    Public SymbolClosed                 &#39; String
    Public ViewStyle                    &#39; String
    Public MetamodelMethod              &#39; String
    Public DClickMethod                 &#39; String

    &#39; Context variables (public)
    Public currentModel
    Public currentModelView
    Public WorkspaceWindow

    &#39; Context variables (private)
    Private cObject
    Private aObject

    &#39; Types
    Private windowType                   &#39; IMetisType

    &#39; Methods
    Private removeMetamodelMethod        &#39; IMetisMethod
    Private removePartRules              &#39; IMetisMethod

    &#39; Layout strategies
    Private workspaceLayoutStrategy     &#39; IMetisInstance

    &#39; Others
    Private cvwArg                      &#39; CVW_ArgumentValue
    Private window                      &#39; CVW_Window

&#39;-----------------------------------------------------------
    Public Property Get component           &#39;IMetisObject
        set component = cObject
    End Property

    Public Property Set component(obj)
        if isEnabled(obj) then
            set cObject = obj
        end if
    End Property

&#39;-----------------------------------------------------------
    Public Property Get configObject           &#39;IMetisObject
        set configObject = aObject
    End Property

    Public Property Set configObject(obj)
        if isEnabled(obj) then
            set aObject = obj
        end if
    End Property

&#39;-----------------------------------------------------------
    &#39; Build internal structures
    Public Sub build
        dim m
        
        &#39; Set variant parameters from configuring object - if given
        Title               = cvwArg.getConfiguredValue(component, &#34;Name&#34;)
        Viewstyle           = cvwArg.getConfiguredValue(component, &#34;Viewstyle&#34;)
        ClearMode           = cvwArg.getConfiguredValue(component, &#34;ClearMode&#34;)
        LayoutStrategy      = cvwArg.getConfiguredValue(component, &#34;LayoutStrategy&#34;)
        SymbolOpen          = cvwArg.getConfiguredValue(component, &#34;SymbolOpen&#34;)
        SymbolClosed        = cvwArg.getConfiguredValue(component, &#34;SymbolClosed&#34;)
        MetamodelMethod     = cvwArg.getConfiguredValue(component, &#34;MetamodelMethod&#34;)
        DClickMethod        = cvwArg.getConfiguredValue(component, &#34;DClickMethod&#34;)
        &#39; Set default values
        if Len(Title) = 0 then Title = &#34;CVW_Workspace&#34;
        &#39; Find workspace
        set m = getCVWmodel
        set WorkspaceWindow  = findInstanceView(m, windowType, &#34;name&#34;, Title)
       
        &#39; Set argument dependent values
        if Len(LayoutStrategy) &#62; 0 then
            if not LayoutStrategy = &#34;akm:layout#AutoMatrix&#34; then
                set workspaceLayoutStrategy = metis.findLayoutStrategy(LayoutStrategy)
            end if
        end if
    End Sub

&#39;-----------------------------------------------------------
    &#39; Configure used components
    Public Sub configure
        &#39; Only relevant if CVW_Workspace uses other components
    End Sub

&#39;-----------------------------------------------------------
    Public Function execute             &#39; Return workspace objectview
        dim m, parentView
        dim method, strategy
        dim doLayout
&#39;stop
        set execute = Nothing
        doLayout = false
        &#39; Find workspace
        set m = getCVWmodel
        set parentView = findInstanceView(m, windowType, &#34;name&#34;, Title)
        if not isEnabled(parentView) then
			exit function
        end if
        if ClearMode = &#34;Clear&#34; then
            call clearWorkspace
        end if
        if isEnabled(workspaceLayoutStrategy) then
            if workspaceLayoutStrategy.uri = LayoutStrategy then
                set parentView.layoutStrategy = workspaceLayoutStrategy
                doLayout = true
            end if
        end if
        if (not doLayout) and Len(LayoutStrategy) &#62; 0 then
            if not LayoutStrategy = &#34;akm:layout#AutoMatrix&#34; then
                set workspaceLayoutStrategy = metis.findLayoutStrategy(&#34;http://xml.activeknowledgemodeling.com/cvw/views/matrix_layouts.kmd#_002ash3011bccb0hs5tr&#34;)
                if isValid(workspaceLayoutStrategy) then set parentView.layoutStrategy = workspaceLayoutStrategy
                call metis.doLayout(parentView)
                set workspaceLayoutStrategy = metis.findLayoutStrategy(LayoutStrategy)
                if isValid(workspaceLayoutStrategy) then set parentView.layoutStrategy = workspaceLayoutStrategy
                doLayout = true
            end if
        end if
        if Len(Viewstyle) &#62; 0 then
            call currentModelView.setViewStyle(Viewstyle)
        end if
        if Len(SymbolOpen) &#62; 0 then
            parentView.openSymbol = SymbolOpen
        end if
        if Len(SymbolClosed) &#62; 0 then
            parentView.closedSymbol = SymbolClosed
        end if
        if Len(MetamodelMethod) &#62; 0 then
            set method = metis.findMethod(MetamodelMethod)
            if isEnabled(method) then
                currentModel.runMethod(method)
            end if
        end if
        if Len(DClickMethod) &#62; 0 then
            set method = metis.findMethod(DClickMethod)
            if isEnabled(method) then
                currentModel.runMethod(method)
            end if
        end if
        if doLayout then
            call metis.doLayout(parentView)
            call layoutWorkarea
        end if
        set WorkspaceWindow = parentView
        set execute = parentView

    End Function

&#39;-----------------------------------------------------------
    Private Sub clearWorkspace
        dim m, parentView
        dim childView, children

        call showRelationships(&#34;HideInter&#34;)
        set m = getCVWmodel
        set parentView = findInstanceView(m, windowType, &#34;name&#34;, Title)
        if not isEnabled(parentView) then
            exit sub
        end if
        set children = parentView.children
        for each childView in children
            call currentModel.deleteObject(childView.instance)
        next
        &#39; Remove virtual metamodels
        call currentModel.runMethod(removeMetamodelMethod)
        &#39; Remove added part rules
        call currentModel.runMethod(removePartRules)

    End Sub

&#39;-----------------------------------------------------------
    Private Sub layoutWorkarea
        dim m, parentView
        dim workarea, workareas
        dim workwindow
        dim indx, geo

        set m = getCVWmodel
        set parentView = findInstanceView(m, windowType, &#34;name&#34;, Title)
        if not isEnabled(parentView) then
            exit sub
        end if
        set workareas = parentView.children
        for each workarea in workareas
            indx = workarea.children.count
            if indx &#62; 0 then
                set workwindow = workarea.children(indx)
                if isValid(workwindow) then
                    set geo = workwindow.geometry
                    geo.x = geo.x + 10
                    set workwindow.geometry = geo
                    call metis.doLayout(workarea)
                end if
            end if
        next

    End Sub

&#39;-----------------------------------------------------------
    Public Sub showRelationships(mode)
        dim m, parentView
        dim workarea, workareas
        dim workwindow, workwindows(), noWorkwindows
        dim model, models(), noModels
        dim relship, relships, relshipView, relshipViews
        dim origin, originView, originViews
        dim target, targetView, targetViews
        dim originWin, targetWin
        dim inter, show, hide
        dim indx, i, j

        &#39; Initialize
        set m = getCVWmodel
        set parentView = findInstanceView(m, windowType, &#34;name&#34;, Title)
        if not isEnabled(parentView) then
            exit sub
        end if
        noModels = 0
        noWorkwindows = 0
        set workareas = parentView.children
        for each workarea in workareas
            indx = workarea.children.count
            if indx &#62; 0 then
                noWorkwindows = noWorkwindows + 1
                ReDim Preserve workwindows(noWorkwindows)
                set workwindows(noWorkwindows) = workarea.children(indx)
                set model = contentModel(workwindows(noWorkwindows))
                if isValid(model) then
                    call addModelToList(model, models, noModels)
                end if
            end if
        next
        &#39; Create the relationship views
        for i = 1 to noModels
            set relships = models(i).relationships
            for each relship in relships
                set origin = relship.origin
                set originViews = currentModelView.findInstanceViews(origin)
                set target = relship.target
                set targetViews = currentModelView.findInstanceViews(target)
                for each originView in originViews
                    for j = 1 to noWorkwindows
						set originWin = Nothing
                        if isInView(originView, workwindows(j)) then
                            set originWin = workwindows(j)
                            exit for
                        end if
                    next
                    if isValid(originWin) then
						for each targetView in targetViews
                    		set targetWin = Nothing
							for j = 1 to noWorkwindows
								if isInView(targetView, workwindows(j)) then
									set targetWin = workwindows(j)
									exit for
								end if
							next
							if isValid(targetWin) then
								inter = false
								show  = false
								hide = false
								if originWin.uri &#60;&#62; targetWin.uri then inter = true
								select case mode
									case &#34;ShowAll&#34;      show = true
									case &#34;ShowInter&#34;    if inter then show = true
									case &#34;ShowIntra&#34;    if not inter then show = true
									case &#34;HideAll&#34;      hide = true
									case &#34;HideInter&#34;    if inter then hide = true
									case &#34;HideIntra&#34;    if not inter then hide = true
								end select
								if show then
									set relshipView = currentModelView.newRelationshipView(relship, originView, targetView)
								elseif hide then
									set relshipViews = relship.views
									for each relshipView in relshipViews 
										if relshipView.origin.uri = originView.uri and relshipView.target.uri = targetView.uri then
											currentModelView.deleteRelationshipView(relshipView)
										end if
									next
								end if
							end if
						next
					end if
                next
            next
        next
    End Sub

&#39;-----------------------------------------------------------
    Sub addModelToList(m, list, byref noList)
        dim model
        dim indx, found

        found = false
        for indx = 1 to noList
            set model = list(indx)
            if isValid(model) then
                if m.uri = model.uri then
                    found = true
                    exit for
                end if
            end if
        next
        if not found then
            noList = noList + 1
            ReDim Preserve list(noList)
            set list(noList) = m
        end if
    End Sub

&#39;-----------------------------------------------------------
    Private Function contentModel(workwindow)           &#39;IMetisObject
    on error resume next
        dim context

        &#39; Find ContentModel
        set contentModel = currentModel
        set context = new EKA_Context
        set context.currentModel        = currentModel
        set context.currentModelView    = currentModelView
        set context.currentInstance     = workwindow.instance
        set context.currentInstanceView = workwindow
        if isValid(context) then
            set contentModel = context.contentModel
        end if

        if not isEnabled (contentModel) then
			dim x, y
			for each x in currentmodel.views &#39; find model view called content ...
				if (instr(1, x.title, &#34;content&#34;, 1) &#62;0) or (instr(1, x.title, &#34;main&#34;, 1) &#62;0) or (instr(1, x.title, &#34;data&#34;, 1) &#62;0) then
					for each y in x.children &#39; find child which is submodel
						if y.instance.type.uri = &#34;metis:stdtypes#oid125&#34; then
							set contentModel = y.instance.parts(1).ownerModel
							set contentModel = y.instance.parts(1).parts(1).ownerModel
							exit function
						end if
					next
				end if
			next
        end if
        if not isEnabled (contentModel) then
			set contentModel = currentmodel
		end if
		
    End Function

&#39;-----------------------------------------------------------
    Public Sub Class_Initialize()
        dim m
        set currentModel     = metis.currentModel
        set currentModelView = currentModel.currentModelView
        set cObject          = currentModel.currentInstance
        set aObject          = currentModel.currentInstance
        &#39; Types
        set windowType       = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/view_objects.kmd#UiType_CVW:Workarea_UUID&#34;)
        &#39; Methods
        set removeMetamodelMethod = metis.findMethod(&#34;http://xml.activeknowledgemodeling.com/cvw/operations/spec_methods.kmd#removeVirtualMetamodels&#34;)
        set removePartRules       = metis.findMethod(&#34;http://xml.activeknowledgemodeling.com/cvw/operations/spec_methods.kmd#removePartRules&#34;)
        &#39; CVW objects
        set window           = new CVW_Window
        set cvwArg           = new CVW_ArgumentValue
        &#39; Variant parameters
        Title                = &#34;CVW_Workspace&#34;
        Viewstyle            = &#34;&#34;
        ClearMode            = &#34;&#34;
        LayoutStrategy       = &#34;&#34;
        SymbolOpen           = &#34;&#34;
        SymbolClosed         = &#34;&#34;
        MetamodelMethod      = &#34;&#34;
        DClickMethod         = &#34;&#34;

    End Sub

&#39;-----------------------------------------------------------
    Public Sub Class_Terminate()
        set window = Nothing
        set cvwArg = Nothing
    End Sub

End Class

</string>
  </valueset>
 </object>

 <object id="_002ask701tmsf9rqqa6k">
  <valueset size="3" xlink:role="type" xlink:title="Container" xlink:href="metis:stdtypes#oid3" xlink:actuate="user">
   <string name="name">Task</string>
   <string name="description"></string>
   <string name="externalID"></string>
  </valueset>
  <part-link xlink:role="object" xlink:title="Class IRTV_Config" xlink:href="#_002asnu015d0g0nfq0ql"/>
  <part-link xlink:role="object" xlink:title="Class CVW_ViewManager" xlink:href="#_002aso001908jt4cfilt"/>
  <part-link xlink:role="object" xlink:title="Class CVW_TaskManager" xlink:href="#_002aso001909h0b11ndt"/>
  <part-link xlink:role="object" xlink:title="Class CVW_EventManager, Class CVW_Event" xlink:href="#_002asrj0166n9nkjaq3q"/>
  <part-link xlink:role="object" xlink:title="Class CVW_Webservice" xlink:href="#_002asvr010ff1f7hu0k1"/>
  <part-link xlink:role="object" xlink:title="Class CVW_Internet_Explorer" xlink:href="#_002asvr010h8th99i88p"/>
 </object>

 <object id="_002ask801bsu5ne1tf0u">
  <valueset size="10" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="../languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Function findParts</string>
   <string name="description"></string>
   <integer name="dbms-admin.commitFlag">0</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20080326 084729593</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="comments"></string>
   <string name="script">&#39;---------------------------------------------------------------------------------------------------
    function findParts(contextModel, parentObj, instType, propName, propValue)
        dim part, parts
        dim part2, parts2
        dim subParts
        dim ownerModel
        dim hasConstraint
        dim noSubTypes
        dim i, removed
        dim isAllowedType

        set findParts = Nothing
        if isEnabled(contextModel) then
            on error resume next
            set ownerModel = contextModel.ownerModel
            if not isValid(ownerModel) then
                set ownerModel = contextModel
            end if
        end if
        set subParts = metis.newInstanceList
        hasConstraint = false
        if Len(propName) &#62; 0 and Len(propValue) &#62; 0 then
            hasConstraint = true
        end if
        if propName = &#34;Hide&#34; then hasConstraint = false
        noSubTypes = false
        if propName = &#34;NoSubTypes&#34; then noSubTypes = true
        if isEnabled(parentObj) then
            set parts = parentObj.parts
            i = 1
            for each part in parts
                removed = false
                &#39;if part.ownerModel.uri = ownerModel.uri then &#39; HDJ removed for submodels
                    if part.isObject then
                        set parts2 = findParts(contextModel, part, instType, propName, propValue)
                        for each part2 in parts2
                            subParts.addLast part2
                        next
                        isAllowedType = false
                        if noSubTypes then
                            if part.type.uri = instType.uri then
                                isAllowedType = true
                            end if
                        elseif part.type.inherits(instType) then
                            isAllowedType = true
                        end if
                        if isAllowedType then
                            if hasConstraint then
                                sval = part.getNamedStringValue(propName)
                                if not sval = propValue then
                                    if sval = &#34;true&#34; then sval = &#34;1&#34;
                                    elseif sval = &#34;false&#34; then sval = &#34;0&#34;
                                end if
                                if not sval = propValue then
                                    parts.removeAt(i)
                                    removed = true
                                end if
                            end if
                        else
                            parts.removeAt(i)
                            removed = true
                        end if
                    else
                        parts.removeAt(i)
                        removed = true
                    end if
                    if not removed then i = i + 1
                &#39;else
                &#39;    parts.removeAt(i)
                &#39;    removed = true
                &#39;end if
            next
            for each part in subParts
                parts.addLast part
            next
            set findParts = parts
        end if
    end function</string>
  </valueset>
 </object>

 <object id="_002asnj01040su1uk5bh">
  <valueset size="10" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="../languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Class CVW_GenericAction</string>
   <string name="description"></string>
   <integer name="dbms-admin.commitFlag">0</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20080305 120233453</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="comments"></string>
   <string name="script">option explicit

Class CVW_GenericAction

    Private model
    Private modelView
    Private inst
    private instview
    private context

   &#39;---------------------------------------------------------------------------------------------------
    Public Property Get object()
        set object = inst
    End Property

    Public Property Set object(obj)
        if isEnabled(obj) then
            set inst = obj
        end if
    End Property


	&#39; ----------------------------- for debugging
	private sub alertContext()
		dim  u
		u =&#34;&#34;
		if isValid(context.Info) then
			u = u&#38;&#34; I: &#34;&#38;context.Info.title&#38; &#34;(&#34;&#38; context.Info.uri &#38;&#34;)&#34;
		else
			u = u&#38;&#34; I: Invalid&#34;
		end if
		if isValid(context.Role) then
			u = u&#38;&#34; R: &#34;&#38;context.Role.title&#38; &#34;(&#34;&#38; context.Role.uri &#38;&#34;)&#34;
		else
			u = u&#38;&#34; R: Invalid&#34;
		end if
		if isValid(GLOBAL_User) then
			u = u&#38;&#34; U: &#34;&#38; GLOBAL_User.title&#38; &#34;(&#34;&#38; GLOBAL_User.uri &#38;&#34;)&#34;
		else
			u = u&#38;&#34; U: Invalid&#34;
		end if
		if isValid(context.Task) then
			u = u&#38;&#34; T: &#34;&#38;context.Task.title&#38; &#34;(&#34;&#38; context.Task.uri &#38;&#34;)&#34;
		else
			u = u&#38;&#34; T: Invalid&#34;
		end if
		if isValid(context.View) then
			u = u&#38;&#34; V: &#34;&#38;context.View.title&#38; &#34;(&#34;&#38; context.View.uri &#38;&#34;)&#34;
		else
			u = u&#38;&#34; V: Invalid&#34;
		end if
		msgbox u
	end sub
   &#39;---------------------------------------------------------------------------------------------------
    Public Sub execute
		&#39;msgbox(inst.getNamedStringValue(&#34;name&#34;))
		&#39;Dim instView
		&#39;set instView = metis.currentModel.currentModelView.currentInstanceView
		
		dim view, task
&#39;stop
        if not isEmpty(Global_EventManager) then call Global_EventManager.wakeup()
        call setHourGlass(model, &#34;On&#34;)
        if not isObject(GLOBAL_Context) then &#39; first time initialisation
            set context = new IRTV_Config
        else
		    set context = GLOBAL_Context &#39;new IRTV_Config
		end if
	    set context.inst = inst
	    set context.instview = instview
	    set context.model = model
	    set context.modelView = modelView
&#39;msgbox &#34;Finding context for &#34; &#38; inst.title
	    call context.establishIRTVContext(inst, true)

&#39;call alertcontext()

		if isObject(GLOBAL_TaskManager) then &#39; first time initialisation
		    set task = GLOBAL_TaskManager
		else
		    set task = new CVW_TaskManager
		end if
		set task.config = context
&#39;call alertcontext()
		call task.execute()
		if isObject(GLOBAL_ViewManager) then &#39; first time initialisation
		    set view = GLOBAL_ViewManager
		else
		    set view = new CVW_ViewManager
		end if
  set view.config = context
  call view.execute()
        call setHourGlass(model, &#34;Off&#34;)
    End Sub
    
     &#39;---------------------------------------------------------------------------------------------------
    Private Sub Class_Initialize
        set model     = metis.currentModel
        set modelView = model.currentModelView
        set inst      = model.currentInstance
        set instView  = modelView.currentInstanceView
    End Sub
   &#39;---------------------------------------------------------------------------------------------------

End Class


</string>
  </valueset>
 </object>

 <object id="_002asnj0106ere7ubme9">
  <valueset size="10" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="../languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Class CVW_GenericMenuTree</string>
   <string name="description"></string>
   <integer name="dbms-admin.commitFlag">0</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20080408 072644484</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="comments"></string>
   <string name="script">option explicit

Class CVW_GenericMenuTree
&#39; HDJ added support form other types of elements than buttons
&#39; Replaces cvw_menutree.vbs

&#39; Context variables
    public model
    public modelView
    public inst
    public instView

    &#39; Arguments
    Private MenuLayout
    Private LeftPaneLayout
    Private LeftPaneTreeLayout
    Private MenuSymbol
    Private LeftPaneSymbol

    &#39; Types
    Private winType
    Private buttonType
    Private consistsOfType
    Private equalsType
    Private menuLayoutStrategy
    Private leftPaneLayoutStrategy
    Private leftPaneTreeLayoutStrategy

    &#39; Others
    Private kindProperty
    Private scriptProperty
    Private kind
    Private argObj
    Private cvwWindow
    Private winName
    Private parentView

   &#39;---------------------------------------------------------------------------------------------------
    Public Sub build(mode, textScale, scaleFactor)    &#39; mode = &#34;TopMenu&#34; | &#34;NodeMenu&#34;
        call buildMenu(inst, mode, textScale, scaleFactor)
    end sub
    
    Public Sub buildMenu(obj, mode, textScale, scaleFactor)    &#39; mode = &#34;TopMenu&#34; | &#34;NodeMenu&#34;

        if mode = &#34;MenuTree&#34; then
            set parentView = findInstanceView(model, winType, &#34;name&#34;, &#34;CVW_LeftPane&#34;)
            if not isEnabled(ParentView) then
                set model = Global_WorkplaceModel
                set parentView = findInstanceView(model, winType, &#34;name&#34;, &#34;CVW_LeftPane&#34;)
            end if
            winName = &#34;CVW_MenuLevel1&#34;
            &#39; Check if window already exists. If so, remove
            if cvwWindow.find(winName, winType, parentView) then
                cvwWindow.remove
            end if
            &#39; Create new window
            if cvwWindow.create(winName, winType, parentView) then
                if isValid(menuLayoutStrategy) then
                    set parentView.children(1).layoutStrategy = menuLayoutStrategy
                end if
                call populateMenu(obj, 0, 0, parentView.children(1))&#39; cvwWindow.objectView)
                if LeftPaneSymbol &#60;&#62; &#34;&#34; then
					parentView.openSymbol   = LeftPaneSymbol
					parentView.closedSymbol = LeftPaneSymbol
				end if
				if MenuSymbol &#60;&#62; &#34;&#34; then
					parentView.children(1).openSymbol      = MenuSymbol
					parentView.children(1).closedSymbol    = MenuSymbol
				end if
                parentView.children(1).textScale       = textScale
                parentView.children(1).geometry.width  = parentView.children(1).geometry.width * scaleFactor
                parentView.children(1).geometry.height = parentView.children(1).geometry.height * scaleFactor
                call cvwWindow.doParentLayout
            end if
        elseif mode = &#34;MenuNode&#34; then
            set parentView = instView
            if parentView.children.count &#62; 0 then
                call cleanTree(modelView, parentView)
                call parentView.close
            else
                if isValid(leftPaneTreeLayoutStrategy) then
                    set parentView.layoutStrategy = leftPaneTreeLayoutStrategy
                end if
                call populateMenu(obj, textScale, scaleFactor, instview)
                call cvwWindow.doParentLayout
            end if
        elseif mode = &#34;SubMenuNode&#34; then &#39; use parent as new toplevel node, and open the children of this one
            &#39;dim this
            &#39;set this = instview.instance
            &#39;&#39; first create new toplevel manu
            &#39;set instview = instview.parent
            &#39;call buildMenu(instview.instance, &#34;MenuTree&#34;, textScale, scaleFactor) 
            &#39; then open the selected node
            &#39;set instview = this.views(this.views.count) &#39; the newly created one
            if isEnabled(instView) then
                if isValid(leftPaneTreeLayoutStrategy) then
                    set instView.layoutStrategy = leftPaneTreeLayoutStrategy
                end if
                call populateMenu(obj, textScale, scaleFactor, instview) &#39; new toplevel node
            end if
            if instview.children.count &#62; 0 then &#39; remove top level
                dim v, w
                set w = instview.parent
                for each v in instview.parent.parent.children &#39; delete top level
                    if v.uri &#60;&#62; w.uri then Global_Context.ModelView.deleteObjectView(v)
                next 
                for each v in w.children &#39; move siblings up one level
                    set v.parent = w.parent
                    v.textScale = w.textScale
                next 
                Global_Context.ModelView.deleteObjectView(w) &#39;delete parent two levels up from the new items (should have no children at this time)
            end if
            call cvwWindow.doParentLayout
        
        end if
    End Sub

&#39;-----------------------------------------------------------
 &#39; public  Sub populateMenu1(object)
 &#39;       call populateMenu2(object, )
        
        &#39;Dim  obj, query
        &#39;Dim newObjectMenu
        &#39;if not isEnabled(object) then set object = inst
        &#39;if instr(1, object.type.title, &#34;Button&#34;, 1 ) &#62; 0 then
        &#39;    set obj = getEqualObject(object)
        &#39;else
        &#39;    set obj = object
        &#39;    set object = getEqualObject(obj)
        &#39;end if
        &#39;set query = getQuery(obj)
        &#39;if isEnabled(query) then 
        &#39;&#39; perform query to populate the menu
		&#39;	call populateByQuery(query, 0, 0, cvwWindow.objectView)
		&#39;else
		&#39;	For each newObjectMenu in Global_InformationManager.getParts(obj)
		&#39;		if Global_InformationManager.inheritsType(obj, newObjectMenu.type) then
		&#39;			call populate(newObjectMenu, 0, 0, cvwWindow.objectView)
		&#39;		end if
		&#39;	next
		&#39;end if
  &#39;  End Sub
    
    public sub populateMenu(object, textScale, scaleFactor, view)    &#39; textScale = 0.05, scaleFactor = 1.3
        dim  item, itemView, newItemView, rel, obj, query
        on error resume next
        if instr(1, object.type.title, &#34;Button&#34;, 1 ) &#62; 0 then
            set obj = getEqualObject(object)
        else
            set obj = object
            set object = getEqualObject(obj)
        end if
        if not isEnabled(view) then set view = instview
		set query = getQuery(obj)
        if isEnabled(query) then 
			&#39; perform query to populate the menu
			call populateByQuery(query, textScale, scaleFactor, view)
		else
			&#39;For each rel in obj.getNeighbourRelationships(0, consistsOfType)
			&#39;	if isEnabled(rel) then
			&#39;		set item = rel.target
			&#39;		&#39;kind = &#34;Menu&#34;
			&#39;		if isEnabled(item) then
			&#39;			&#39;kind = item.getNamedStringValue(kindProperty)
			&#39;			&#39;if kind = &#34;Menu&#34; then
			&#39;			if isType(newObjectMenu, obj.type) then
			&#39;				call populate(item, textScale, scaleFactor, instView)
			&#39;			end if
			&#39;		end if
			&#39;	end if
			&#39;next
			dim parts
			set parts = Global_InformationManager.getParts(obj)
			dim filteredparts
            set filteredparts = Global_RoleManager.removeNoAccess(parts) &#39; filter by user access prevention
            call filter(obj,filteredParts)
            dim handled, item2, parts2, first
            first = true
            set handled = parts
            do while parts.count &#62; 0 and filteredparts.count = 0 &#39; loop down through he levels until something the user has access to is found
                set parts2 = metis.newInstanceList()
                for each item in parts
                    if not first then call handled.addLast(item)
                    for each item2 in Global_InformationManager.getParts(item)
                        if not (handled.contains(item2) or parts2.contains(items2)) then
                            call parts2.addLast(item2)
                        end if
                    next
                next
                first = false
                set parts = parts2
                set filteredparts = Global_RoleManager.removeNoAccess(parts)
                call filter(obj,filteredParts)
            loop
            set parts = filteredparts
			For each item in parts
		        call populate(item, textScale, scaleFactor, view)
			next
			view.open
		end if
		if instView.parts.count &#62; 0 then call instView.open()
    end sub
    
    private sub filter(obj, byref parts)
        dim item, i, remove
        i = 1
        do while i &#60;= parts.count
            remove = true
            set item = parts.item(i)
		    if Global_Context.TaskType.uri = obj.type.uri then 
		        if Global_InformationManager.inheritsType(obj, item.type) then 
		            if item.parent.uri = obj.uri then
		                remove = false
		            else &#39; related by some relship
		                if Global_InformationManager.getAllNeighbours(item, obj.title, GLOBAL_Type_EkaHasProperty, 1).count = 0 then &#39; not related as providing inputs/outputs
		                     remove = false
		                end if 
		            end if
		        end if
		    elseif Global_InformationManager.inheritsType(obj, item.type) or Global_InformationManager.inheritsType(item, obj.type)  then
				 remove = false
	        elseif instr(item.type.title, obj.type.title) &#62; 0 then &#39; web servide ... operation
	             remove = false
			end if
			if remove then 
			    call parts.removeAt(i)
			else
			    i = i +1
			end if
		loop
   end sub

   public sub populate(byval newObject, byval textScale, byval scaleFactor, byval parentview)
		Dim menuitem , newobjectMenuView, objectMenuView, nm, codestring
		set menuitem = newObject
		set newobjectMenuView = Nothing
        if menuitem.type.uri &#60;&#62; buttonType.uri THEN
			&#39; general object - reuse associated actionbutton if existing (equals relationship)
			set menuitem = getEqualObject2(menuitem, buttonType)
		end if
		if menuitem.type.uri = buttonType.uri THEN
			if menuitem.title &#60;&#62; inst.title THEN
				&#39;kind = newObjectMenu.getNamedStringValue(kindProperty)
				&#39;if kind = &#34;Menu&#34; then
					Set newObjectMenuView = parentView.newObjectView(menuitem)
				&#39;end if
			end if
		else
			&#39; general object without associated actionbutton - create new actionbutton
			call Global_EventManager.sleep()
			Set menuitem = Global_InformationManager.newElement(buttonType, nothing) &#39;model.newObject(buttonType)
			call Global_EventManager.wakeup()
			
			&#39;nm = newObject.getNamedStringValue(&#34;name&#34;) moved below
			&#39;call menuitem.setNamedStringValue(&#34;name&#34;, nm)

			&#39;codestring = &#34;dim instview&#34;
			&#39;codestring = codestring &#38; vbCRLf &#38; &#34;set instView = metis.currentModel.currentModelView.currentInstanceView&#34;
			&#39;codestring = codestring &#38; vbCRLf&#38; &#34;if instView.children.count &#62; 0 then&#34;
			&#39;codestring = codestring &#38; vbCRLf&#38; &#34;   call cleanTree(metis.currentModel.currentModelView, instView)&#34;
            &#39;codestring = codestring &#38; vbCRLf&#38; &#34;   call instView.close&#34;
			&#39;codestring = codestring &#38; vbCRLf&#38; &#34;else &#34;
			&#39;codestring = codestring &#38; vbCRLf&#38; &#34; if (not isValid(instView.parent)) or (instView.parent.instance.type.uri &#60;&#62; instView.instance.type.uri) then&#34; &#39; max two levels
			&#39;codestring = codestring &#38; vbCRLf&#38; &#34;   dim cvwMenu2&#34;
			&#39;codestring = codestring &#38; vbCRLf&#38; &#34;   set cvwMenu2 = new CVW_GenericMenuTree&#34;
			&#39;codestring = codestring &#38; vbCRLf&#38; &#34;   call cvwMenu2.build(&#34;&#38;Chr(34)&#38;&#34;MenuNode&#34;&#38;Chr(34)&#38;&#34;, 0.05, 1.3)&#34;
			&#39;codestring = codestring &#38; vbCRLf&#38; &#34; end if&#34;
			&#39;codestring = codestring &#38; vbCRLf&#38; &#34;if instView.children.count = 0 then&#34;  &#39; do not open view if opened submenu
			&#39;codestring = codestring &#38; vbCRLf&#38; &#34; Dim action&#34;&#38;vbCRLf&#38; &#34;set action = new CVW_GenericAction&#34; &#38;vbCRLf&#38; &#34;call action.execute&#34;
			&#39;codestring = codestring &#38; vbCRLf&#38; &#34;end if&#34;
			&#39;codestring = codestring &#38; vbCRLf&#38; &#34;end if&#34;
			&#39;call menuitem.setNamedStringValue(&#34;script&#34;, codestring )

			call model.newRelationship(equalsType, menuitem, newObject) 
			  
			Set newObjectMenuView = parentview.newObjectView(menuitem)
		
			&#39;Set menuitem = newObject &#39; for setting below
		end if
		nm = newObject.getNamedStringValue(&#34;name&#34;)
		call menuitem.setNamedStringValue(&#34;name&#34;, nm)
	    nm = newObject.getNamedStringValue(&#34;description&#34;)
	    if isValid(nm) then call menuitem.setNamedStringValue(&#34;description&#34;, nm)

		if isEnabled(newobjectMenuView) then
			newobjectMenuView.openSymbol    = &#34;http://xml.activeknowledgemodeling.com/cvw/views/menu.svg#_002asnd00ssha9fmf0ru&#34; &#39;menuitem.Views(1).openSymbol
			newobjectMenuView.closedSymbol  = &#34;http://xml.activeknowledgemodeling.com/cvw/views/menu.svg#_002asnd00ssha9sfv9i0&#34; &#39;menuitem.Views(1).closedSymbol
			if textScale &#62;0 then
				newobjectMenuView.textScale       = textScale
			else
				newobjectMenuView.textScale     = 0.08
			end if
			if scaleFactor &#62; 0 then
			newobjectMenuView.geometry.width  = parentview.geometry.width * scaleFactor
			newobjectMenuView.geometry.height = parentview.geometry.height * scaleFactor
			end if
			newobjectMenuView.close
			&#39;parentview.open
		end if
	end Sub
	
	&#39;---------------------------------------------------------------------------------------------------	
	public sub populateByQuery(query, textScale, scaleFactor, parentView)
		dim instances, newObjectMenu
		
		&#39; Build and execute
		Dim s
		set s = Global_ViewManager.newGenericSearch(query)
		dim propval
		call Global_ViewManager.parameters.putValue(&#34;IsContextInstance&#34;, propVal)
        if Len(propVal) &#62; 0 then 
            if propVal = &#34;1&#34; or propVal = &#34;Y&#34; then
                isContextInstance = true
            end if
        end if
        
		set instances = s.search(query)
		call s.filterTemplates(instances)
		For each newObjectMenu in instances
		    if not newObjectMenu.isRelationship() then 
		        call populate(newObjectMenu, textScale, scaleFactor, parentView)
		    end if
		next
		parentView.open
	end sub


	&#39;------------------------------------------------------------------------------------------------------
	&#39; return Nothing if there is not query associated with the given object, or a query object (specification container) if it is
	&#39; in the future, queris should be inherited from e.g. the type, and parameterised
	&#39;------------------------------------------------------------------------------------------------------
	public function getQuery(byval object)
	    set getQuery = Nothing
	    if Global_InformationManager.isType(object, Global_Context.TaskType) then exit function &#39; tasks should give subtasks
	    if isValid(Global_ViewManager) then set getQuery = Global_ViewManager.getQuery()
	    if not isEnabled(getQuery) then
		    if Global_InformationManager.isType(object, metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/query.kmd#ekaQuery&#34;)) then
		        set getQuery = object
		    end if
		end if
	end function
   &#39;---------------------------------------------------------------------------------------------------
    private Sub Class_Initialize
        if isValid(Global_Context) then
            set model           = Global_Context.Model
            set modelView       = Global_Context.ModelView
            set inst            = Global_Context.Inst
            set instView        = Global_Context.InstView
        else 
            set model           = metis.currentModel
            set modelView       = model.currentModelView
            set inst            = model.currentInstance
            set instView        = modelView.currentInstanceView
        end if
        set buttonType      = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/action_objects.kmd#ObjType_CVW:Button_UUID&#34;)
        set consistsOfType  = metis.findType(&#34;http://xml.activeknowledgemodeling.com/eka/languages/eka_relships.kmd#RelType_EKA:Member_UUID&#34;)
        set winType         = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/view_objects.kmd#UiType_CVW:Workarea_UUID&#34;)
        set equalsType		= metis.findType(&#34;http://xml.activeknowledgemodeling.com/eka/languages/eka_relships.kmd#RelType_EKA:Equals_UUID&#34;)
        set cvwWindow       = new CVW_Window
        set argObj          = new CVW_ArgumentValue
        kindProperty        = &#34;kind&#34;
        scriptProperty		= &#34;script&#34;
        if not isValid(Global_InformationManager) then
            dim r
            set r = new EKA_InformationManager
            set r = new EKA_Globals
        end if  
        call Global_InformationManager.parameters.putValue( &#34;MenuLayout&#34;, MenuLayout)
        &#39;MenuLayout          = argObj.getArgumentValue(inst, &#34;MenuLayout&#34;)
        if MenuLayout = &#34;&#34; then 
			MenuLayout = &#34;http://xml.activeknowledgemodeling.com/cvw/views/cvw_layout_strategies.kmd#Layout_CVW:MenuLayoutVertical&#34;
        end if 
        &#39;LeftPaneLayout      = argObj.getArgumentValue(inst, &#34;LeftPaneLayout&#34;) &#39;
        call Global_InformationManager.parameters.putValue( &#34;LeftPaneLayout&#34;, LeftPaneLayout)
        &#39;LeftPaneTreeLayout  = argObj.getArgumentValue(inst, &#34;LeftPaneTreeLayout&#34;) 
        call Global_InformationManager.parameters.putValue( &#34;LeftPaneTreeLayout&#34;, LeftPaneTreeLayout)
        if LeftPaneTreeLayout = &#34;&#34; then 
			LeftPaneTreeLayout = &#34;http://xml.activeknowledgemodeling.com/cvw/views/cvw_layout_strategies.kmd#Layout_CVW:WorkareaVertical&#34;
        end if
        &#39;MenuSymbol          = argObj.getArgumentValue(inst, &#34;MenuSymbol&#34;) 
        call Global_InformationManager.parameters.putValue( &#34;MenuSymbol&#34;, MenuSymbol)
        if MenuSymbol = &#34;&#34; then 
   MenuSymbol = &#34;http://xml.activeknowledgemodeling.com/cvw/views/menu.svg#_002asng00r9815hq7rrn&#34;
        end if
        call Global_InformationManager.parameters.putValue( &#34;LeftPaneSymbol&#34;, LeftPaneSymbol)
        &#39;LeftPaneSymbol      = argObj.getArgumentValue(inst, &#34;LeftPaneSymbol&#34;) 
        if LeftPaneSymbol = &#34;&#34; then 
   LeftPaneSymbol = &#34;http://xml.activeknowledgemodeling.com/cvw/views/menu.svg#_002asng00r9815hq7rrn&#34;
        end if
        set menuLayoutStrategy          = metis.findLayoutStrategy(MenuLayout)
        set leftPaneLayoutStrategy      = metis.findLayoutStrategy(LeftPaneLayout)
        set leftPaneTreeLayoutStrategy  = metis.findLayoutStrategy(LeftPaneTreeLayout)
        &#39; itemsymbol http://xml.hydro.com/views/symbols.svg#_002asnd00ssha9fmf0ru
          
    End Sub
   &#39;---------------------------------------------------------------------------------------------------

End Class
</string>
  </valueset>
 </object>

 <object id="_002asnj01gh2uabed0io">
  <valueset size="10" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="../languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Function getEqualObject, getEqualObject2</string>
   <string name="description"></string>
   <integer name="dbms-admin.commitFlag">0</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20071011 083636531</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="comments"></string>
   <string name="script">&#39; in case the specObject is just a placeholder for a real object, return that, else return inputted obj

function getEqualObject(Byval specObject)
 dim rel
dim equalsType
        set equalsType = metis.findType(&#34;http://xml.activeknowledgemodeling.com/eka/languages/eka_relships.kmd#RelType_EKA:Equals_UUID&#34;)
 set getEqualObject = specObject
  For each rel in specObject.getNeighbourRelationships(0, equalsType) 
  set getEqualObject = rel.target
  Exit function
  next
  For each rel in specObject.getNeighbourRelationships(1, equalsType) 
  set getEqualObject = rel.origin
  Exit function
  next

set equalsType = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/spec_relships.kmd#RelType_CVW:hasInstanceContext_UUID&#34;)
  For each rel in specObject.getNeighbourRelationships(0, equalsType) 
  set getEqualObject = rel.target
  Exit function
  next
  For each rel in specObject.getNeighbourRelationships(1, equalsType) 
  set getEqualObject = rel.origin
  Exit function
  next

end function

&#39;---------------------------------------------------
function getEqualObject2(Byval specObject, byval objtype)
 dim rel
dim equalsType
        set equalsType = metis.findType(&#34;http://xml.activeknowledgemodeling.com/eka/languages/eka_relships.kmd#RelType_EKA:Equals_UUID&#34;)

 set getEqualObject2 = specObject
  For each rel in specObject.getNeighbourRelationships(0, equalsType)
  if Global_InformationManager.isType(rel.target, objType) then
   set getEqualObject2 = rel.target
  end if
  Exit function
  next
  For each rel in specObject.getNeighbourRelationships(1, equalsType)
 if Global_InformationManager.isType(rel.origin, objType) then
  set getEqualObject2 = rel.origin
 end if
 Exit function
  next
end function&#39; VBScript File

</string>
  </valueset>
 </object>

 <object id="_002asnk01779mdn260qd">
  <valueset size="10" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="../languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Class ArrayList</string>
   <string name="description"></string>
   <integer name="dbms-admin.commitFlag">0</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20071028 132637390</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="comments"></string>
   <string name="script">&#39; Utility class copied from http://www.aspemporium.com/codelib.aspx?pid=123&#38;cid=12 

class ArrayList
 private arr()

 private sub class_initialize()
 end sub

 &#39;adds an item to the ArrayList having any datatype. replaces push
 public function Add(ByVal item)
  dim arrlen
  arrlen = Length
  redim preserve arr(arrlen+1)

  if isobject(item) then
   set arr(ubound(arr)) = item
  else
			arr(ubound(arr)) = item
		end if

		Add = ubound(arr)
	end function

	&#39;gets the length (ubound) of the internal array or -1 if the array is empty.
	public property get Length
		dim arrlen

		on error resume next
		arrlen = ubound(arr)
		if err then
			Length = -1
			exit property
		end if

		Length = arrlen
	end property

	&#39;gets the 0 based count of items in the ArrayList
	public property get Count
		Count = Length + 1
	end property

	&#39;gets the internal array wrapped by the ArrayList
	public function ToArray()
		Toarray = arr
	end function

	&#39;removes an item from the ArrayList by its index
	public sub RemoveAt(byval idx)
		Dim hIdx

		hIdx = CLng(idx)

		if length = -1 then err.raise 9 &#39;subscript out of range
		if hIdx &#62; length or hIdx &#60; 0 then err.raise 9 &#39;subscript out of range

		dim newLen, i, j
		dim newarr()

		if length = 0 and hIdx = 0 then
			redim arr(-1)
			&#39;arr = newarr
			exit sub
		end if

		newLen = length - 1
		redim newarr(newLen)

		j = 0
		for i = 0 to length
			if hIdx &#60;&#62; i then
				if isobject(arr(i)) then
					set newarr(j) = arr(i)
				else
					newarr(j) = arr(i)
				end if
				
				j = j + 1
			end if
		next

		redim arr(ubound(newarr))

		for i = 0 to length
			if isobject(newarr(i)) then
				set arr(i) = newarr(i)
			else
				arr(i) = newarr(i)
			end if
		next
	end sub

	&#39;determines if an item exists in this ArrayList. if the item to check 
	&#39;is an object, Contains always returns false. items within the arraylist
	&#39;are compared to the item argument using vbscript&#39;s StrComp function set
	&#39;to a textual comparison (not case sensitive).
	public function Contains(byval item)
		&#39;if isobject(item) then
		&#39;	Contains = false
		&#39;	exit function
		&#39;end if

		dim arrEle

		for each arrEle in arr
		    if isobject(item) then
		        if item.uri = arrEle.uri then &#39; added by AKM
		            Contains = true
			        Exit Function
		        end if
		    elseif StrComp(arrEle, item, 1) = 0 then
			    Contains = true
			    Exit Function
		    end if
		next

		contains = false
	end function

	&#39;gets an item from the ArrayList by its index within the internal array
	public property get Item(byval idx) 
		Dim hIdx

		hIdx = CLng(idx)

		if length = -1 then err.raise 9 &#39;subscript out of range
		if hIdx &#62; length or hIdx &#60; 0 then err.raise 9 &#39;subscript out of range

		if isobject(arr(hIdx)) then
			set item = arr(hIdx)
		else
			item = arr(hIdx)
		end if
	end property

	&#39;sets an item in the arraylist by its index within the internal array
	public property let Item(byval idx, byval newvalue)
		Dim hIdx

		hIdx = CLng(idx)

		if length = -1 then err.raise 9 &#39;subscript out of range
		if hIdx &#62; length or hIdx &#60; 0 then err.raise 9 &#39;subscript out of range

		if isobject(arr(hIdx)) then
			set arr(hIdx) = newvalue
		else
			arr(hIdx) = newvalue
		end if
	end property

	&#39;adds the contents of an array to the ArrayList.
	public sub AddRange(byval arrlist)
		if isempty(arrlist) then err.raise 5 &#39;invalid arg
		if isnull(arrlist) then err.raise 5 &#39;invalid arg
		if not isarray(arrlist) then err.raise 13 &#39;type mismatch

		dim i

		for i = lbound(arrlist) to ubound(arrlist)
			Add arrlist(i)
		next
	end sub

	&#39;empties the ArrayList
	public sub Clear()
		redim arr(-1)
	end sub

	&#39;trims the arraylist to a certain number of items
	public sub TrimToCount(byval len)
		dim hLen

		hLen = CLng(len)

		if hLen &#62; length then err.raise 5 &#39;invalid arg
		if hLen &#60; 1 then err.raise 5 &#39;invalid arg

		redim preserve arr(hLen - 1)
	end sub

	&#39;reverses the elements of the internal array in the arraylist
	public sub Reverse()
		dim i, ubnd
		dim newarray()

		ubnd = length
		redim newarray(ubnd)

		for i = 0 to ubnd
			if isobject(arr(i)) then
				set newarray(ubnd - i) = arr(i)
			else
				newarray(ubnd - i) = arr(i)
			end if
		next

		Clear

		AddRange newarray
	end sub

	&#39;copies a chunk of the array to a new array from a specified start ordinal.
	&#39;replaces Slice
	public function CopyTo(byval start)
		copyto = CopyToEx(start, length - start + 1)
	end function

	&#39;copies a chunk of the array to a new array from a specified start ordinal
	&#39;having a specific length. replaces Slice
	public function CopyToEx(byval start, byval count)
		dim hLen, hStart

		hLen = CLng(count)
		hStart = CLng(start)

		if hStart &#62; length or hStart &#60; 0 then err.raise 5 &#39;invalid arg
		if hLen &#62; length + 1 or hLen &#60; 1 then err.raise 5 &#39;invalid arg

		dim i, j
		dim newarray()
		redim newarray(hLen-1)
		j = 0
		for i = hStart to hStart + hLen - 1
			if isobject(arr(i)) then
				set newarray(j) = arr(i)
			else
				newarray(j) = arr(i)
			end if
			j = j + 1
		next

		CopyToEx = newarray
	end function

	&#39;sorts string arrays A to Z and number arrays low to high and combination number/string arrays
	&#39;as low to high numbers followed by A to Z strings
	public sub Sort()
		dim front, back, loc, temp, arrsize

		arrsize = ubound(arr)
		for front = 0 to arrsize - 1
			loc = front
			for back = front to arrsize
				if isnumeric(arr(loc)) and isnumeric(arr(back)) then
					if cdbl(arr(loc)) &#62; cdbl(arr(back)) then
						loc = back
					end if
				else
					if arr(loc) &#62; arr(back) then
						loc = back
					end if
				end if
			next
			temp = arr(loc)
			arr(loc) = arr(front)
			arr(front) = temp
		next
	end sub

	&#39;inserts an item to the front of the arraylist and
	&#39;pushes all existing entries back one. replaces unshift
	public sub Insert(byval item)
		if isarray(item) then err.raise 13 &#39;type mismatch

		insertrange array(item)
	end sub

	&#39;inserts the elements of a given array to the front of the arraylist and
	&#39;pushes all existing entries back. replaces unshift
	public sub InsertRange(byval arrlist)
		 &#39; returns an array with the specified 
		 &#39; elements added to the beginning of
		 &#39; the original array

		if not isarray(arrlist) then err.raise 13 &#39;type mismatch

		dim tmp, i, newarray()
		dim j
		tmp = arrlist
		redim newarray(length + ubound(tmp) + 1)
		j = ubound(tmp) + 1
		for i = 0 to length
			if isobject(arr(i)) then
				set newarray(j + i) = arr(i)
			else
				newarray(j + i) = arr(i)
			end if
		next
		for i = 0 to ubound(tmp)
			if isobject(arr(i)) then
				set newarray(i) = trim(tmp(i))
			else
				newarray(i) = trim(tmp(i))
			end if
		next
		
		Clear

		AddRange newarray
	end sub

	public function Pop()
		 &#39; returns the last value in the 
		 &#39; array and removes it from the 
		 &#39; array, shortening the array
		 &#39; by one element

		pop = arr(length)
		redim preserve arr(length - 1)
	end function

	public function Shift()
		 &#39; removes the first element of an array
		 &#39; and displays it. Shifts every other element
		 &#39; down one element and shortens the array by 
		 &#39; 1 element.

		dim i
		shift = arr(lbound(arr))
		for i = 1 to length
			arr(i - 1) = arr(i)
		next
		redim preserve arr(length - 1)
	end function

	&#39;determines if this arraylist has duplicated elements in it
	public function ContainsDuplicates()
		dim i, j
		for i = 0 to length
			for j = 0 to length
				if j &#60;&#62; i then
					if StrComp(arr(i), arr(j), 1) = 0 then
						ContainsDuplicates = true
						exit function
					end if
				end if
			next
		next

		ContainsDuplicates = false
	end function

	&#39;removes duplicated elements from the arraylist
	public sub RemoveDuplicates()
		if not ContainsDuplicates then exit sub

		dim i, j, item1, item2
		for i = length to 0 step -1

			item1 = arr(i)

			for j = length to 0 step -1

				item2 = arr(j)

				if j &#60;&#62; i then
					if StrComp(item1, item2, 1) = 0 then
						removeat i
					end if
				end if
			next
		next
	end sub

	&#39;gets the highest number value in the array
	Public Function Highest
		Dim i, last, num, newarr

		last = null

		newarr = ToNumberArray
		for i = 0 to ubound(newarr)
			num = cdbl(newarr(i))
			if isnull(last) then
				last = num
			elseif num &#62; CDbl(last) then 
				last = num
			end if
		next

		Highest = last
	End Function

	&#39;gets the lowest number value in the array
	Public Function Lowest
		Dim i, last, num, newarr

		last = null

		newarr = ToNumberArray
		for i = 0 to ubound(newarr)
			num = cdbl(newarr(i))
			if isnull(last) then
				last = num
			elseif num &#60; CDbl(last) then 
				last = num
			end if
		next

		Lowest = last
	End Function

	&#39;add up the total of all numbers in the array
	Public Function Sum
		dim newarr, i, num, t

		t = 0

		newarr = ToNumberArray
		for i = 0 to ubound(newarr)
			num = cdbl(newarr(i))
			t = t + num
		next

		Sum = t
	End Function

	 &#39; average the values
	public function Mean
		Mean = sum/count
	end function

	&#39; get the range
	public function Range
		Range = highest - lowest
	end function

	&#39;middle number of sorted number array
	Public Function Median
		Dim newarr, ct, avg

		newarr = tonumberarray

		dim arrList

		set arrList = new ArrayList
		arrList.addRange newarr
		arrList.Sort
		newarr = arrList.ToArray
		set arrList = nothing

		ct = ubound(newarr)

		if isodd(ct) then
			avg = ct/2
			median = (newarr(floor(avg)) + newarr(ceiling(avg))) / 2
		else
			median = newarr(ct/2)
		end if
	End Function

Function Ceiling(byval n)
	Dim iTmp, bErr, f

	on error resume next
	n = cdbl(n)
	if err then bErr = true
	on error goto 0

	if bErr then Err.Raise 5000, &#34;Ceiling Function&#34;, _
		&#34;Input must be convertible to a sub-type of double&#34;

	f = Floor(n)
	if f = n then
		Ceiling = n
		Exit Function
	End If

	Ceiling = cInt(f + 1)
End Function

Function Floor(byval n)
	Dim iTmp, bErr

	on error resume next
	n = cdbl(n)
	if err then bErr = true
	on error goto 0

	if bErr then Err.Raise 5000, &#34;Floor Function&#34;, _
		&#34;Input must be convertible to a sub-type of double&#34;

	&#39;Round() rounds up
	iTmp = Round(n)

	&#39;test rounded value against the non rounded value
	&#39;if greater, subtract 1
	if iTmp &#62; n then iTmp = iTmp - 1

	Floor = cInt(iTmp)
End Function

	function iswhole(byval n)
		dim i
		i = cdbl(n)
		iswhole = (cdbl(round(i)) = i)
	end function

	function isodd(byval n)
		isodd = cbool(cdbl(n) mod 2)
	end function

	&#39;returns only numeric (convertible to double) elements
	Public Function ToNumberArray()
		Dim i, num, j

		j = -1
		for i = 0 to length
			on error resume next
			num = CDBl(arr(i))
			if err.number = 0 then j = j + 1
			on error goto 0
  next

  redim newarr(j)

  j = 0
  for i = 0 to length
   on error resume next
   num = CDBl(arr(i))
   if err.number = 0 then
    newarr(j) = num
    j = j + 1
   end if
   on error goto 0
  next

  ToNumberArray = newarr
 End Function
end class
</string>
  </valueset>
 </object>

 <object id="_002asnu00uibot2it5a4">
  <valueset size="10" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="../languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Class CVW_GenericSearch</string>
   <string name="description"></string>
   <integer name="dbms-admin.commitFlag">0</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20080405 124505546</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="comments"></string>
   <string name="script">option explicit
&#39;------------------------------------------------------------------------------------------------
&#39; Searching copied from cvw_content_specification, and simplified
&#39;------------------------------------------------------------------------------------------------

Class CVW_GenericSearch

&#39; Context variables
    Public SearchMode                    &#39; String     NoSearch | SelectAll | SelectOneFromList | SelectManyFromList | SelectTypeFromList
    Public UseContextInstance
    Public ContextInstance
    Public HideTop
    Public ContentModelView

    Private model
    Private modelView
    Private inst
    Private instView
    private ContentInRepository

	private hasTopInstance
	private topObjectRules()
	private noTopObjectRules
	private ObjectRules()
	private noObjectRules
	private pathRules()
	private noPathRules
	private relTypeList()
	private noRelTypes
	private noRelRules
	private relRules()
	private filterRules()
	private noFilterRules
	private filterObjectView
	private isTopType, hasValueConstraintType, hasValueType, hasPropertyType
	private applyFilter
        
    private currentConfig
    private inh
    public IncludeTemplates &#39; controls whether all templates should be removed from the result list
    public IncludeGlobals   &#39; controls whether all global reusable instances should be removed from the result list
    public Project
    public QueryType

&#39;-----------------------------------------------------------
    Public Property Get config        &#39;IRTV_Config
		if not isValid(currentConfig) then  &#39; if internal not valid, then create it ...
			set currentConfig = new IRTV_Config
			set inheritance = currentConfig.inheritance
		end if
        set config = currentConfig
    End Property

    Public Property Set config(obj)
        if isValid(obj) then
            set currentConfig = obj
            set inheritance = currentConfig.inheritance
            set model           = currentConfig.model
			set modelView       = currentConfig.modelView
			set inst            = currentConfig.inst
			set instView        = currentConfig.instView 
        end if
    End Property
    
&#39;-----------------------------------------------------------
    Private Property Get inheritance   &#39;EKA_Inheritance
		if isValid(inh) then  &#39; if internal not valid, then create it ...
			set inheritance = inh
		else
			set currentConfig = new IRTV_Config
			set inheritance = currentConfig.inheritance
		end if
    End Property

    Private Property Set inheritance(obj)
        if isValid(obj) then
            set inh = obj
        end if
    End Property


&#39;-----------------------------------------------------------
   public function search(qobj)
		set search = query (getContentModel(), qobj, ContentInRepository, nothing)
   end function
   
&#39;-----------------------------------------------------------
   public function searchFromCollection (qobj, collection)
		set searchFromCollection = query (getContentModel(), qobj, ContentInRepository, collection)
   end function

&#39;-----------------------------------------------------------
    public function getContentModel()           &#39;IMetisObject
        if not isValid(Project) then
            set getContentModel = Nothing
            exit function
        elseif isValid(Global_Context.Project) then
            set getContentModel = Global_Context.Project.ownerModel
            exit function
        elseif isValid(GLOBAL_WorkplaceModel) then
            set getContentModel= GLOBAL_WorkplaceModel
            exit function
        end if
        dim context
        &#39; Find ContentModel
        set getContentModel = model
        set context = new EKA_Context
        set context.currentModel        = model
        set context.currentModelView    = modelView
        &#39;set context.currentInstance     = work_window.instance
        &#39;set context.currentInstanceView = work_window
        if isValid(context) then
            set getContentModel = context.contentModel
            ContentInRepository = context.isRepository
        end if
        if not isEnabled (getContentModel) then
			dim x, y
			for each x in model.views &#39; find model view called content ...
				if (instr(1, x.title, &#34;content&#34;, 1) &#62;0) or (instr(1, x.title, &#34;main&#34;, 1) &#62;0) or (instr(1, x.title, &#34;data&#34;, 1) &#62;0) then
					for each y in x.children &#39; find child which is submodel
						if y.instance.type.uri = &#34;metis:stdtypes#oid125&#34; then
							set getContentModel = y.instance.parts(1)
							exit function
						end if
					next
				end if
			next
        end if
        if not isEnabled (getContentModel) then
			set getContentModel = model
			ContentInRepository = false
		end if
    End function


&#39;-----------------------------------------------------------
    private function query(contentmodel, queryobject, repository, selected)
   &#39; stop
		set query = Nothing
        dim rel, relships, relList, pathList, pathRel, pathObj
        dim inst, insts, instances
        dim instType
        dim childView, children
        dim contView
        dim propVal
        dim i, j, rule
        dim typeList, typeInstances

        applyFilter = false
        HideTop     = false
        set isTopType              = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/spec_relships.kmd#RelType_CVW:isTop_UUID&#34;)
        set hasValueType           = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/cvw_relships.kmd#RelType_CVW:hasValue_UUID&#34;)
        set hasValueConstraintType = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/has_criteria.kmd#has_Criteria&#34;)&#39; &#34;http://xml.activeknowledgemodeling.com/cvw/languages/spec_relships.kmd#RelType_CVW:hasValueConstraint_UUID&#34;)
        set hasPropertyType        = metis.findType(&#34;http://xml.activeknowledgemodeling.com/eka/languages/eka_relships.kmd#RelType_EKA:HasProperty_UUID&#34;)

        noRelTypes = 3
        ReDim Preserve relTypeList(noRelTypes)
        set relTypeList(1)   = isTopType
        set relTypeList(2)   = hasValueType
        set relTypeList(3)   = hasValueConstraintType

        noTopObjectRules     = 0
        noPathRules          = 0
        noFilterRules        = 0
        noRelRules = 0

        set filterObjectView = Nothing
        hasTopInstance = false

        if SearchMode = &#34;NoSearch&#34; then
            exit function
        end if
        if not isEnabled(queryobject) then
            exit function
        end if

		&#39;dim queryView
        dim usedList(), noUsed
        &#39;set queryView = queryObject.views(1)
        set relships = queryobject.getNeighbourRelationships(0, isTopType)
        if relships.count &#62; 0 then
            &#39; This is a path query - find top object types and path rules
            for each rel in relships
                set inst = rel.target
                set instType = inst.type
                if isEnabled(instType) then
                    call buildInstRules(inst, topObjectRules, noTopObjectRules, hasValueConstraintType)
                    noUsed = 0
                    call buildRelRules(rel, inst, pathRules, noPathRules, usedList, noUsed, relTypeList, noRelTypes, hasValueConstraintType, queryObject)
                end if
            next
        else
			set relships = queryobject.getNeighbourRelationships(0, Config.VIType) &#39; HDJ added - Member relationship
			if relships.count &#62; 0 then
				&#39; This is a path query - find top object types and path rules
				for each rel in relships
					set inst = rel.target
					if rel.target.parent.uri = queryobject.uri then &#39; only include parts of the query, not e.g. subtasks to include as services in the view.
					    set instType = inst.type
					    if isEnabled(instType) then
						    call buildInstRules(inst, topObjectRules, noTopObjectRules, hasValueConstraintType)
                            noUsed = 0
						    call buildRelRules(rel, inst, pathRules, noPathRules, usedList, noUsed, relTypeList, noRelTypes, hasValueConstraintType, queryObject)
					    end if
					end if
				next
	        end if
			if noTopObjectRules = 0 then
				set children = queryobject.parts  &#39; queryView.children
				for each inst in children &#39;childView
					&#39;set inst = childView.instance
					if isEnabled(inst) and not inst.isRelationship then
						if Global_InformationManager.isType(inst, GLOBAL_Type_EkaProperty) then
					        if Global_InformationManager.getAllNeighbours(inst, &#34;&#34;, hasPropertyType, 1).count = 0 then
					           if Global_InformationManager.getAllNeighbours(inst, &#34;&#34;, hasValueConstraintType, 1).count = 0 then
					               call buildInstRules(inst, objectRules, noObjectRules, hasValueConstraintType)
					           end if
					        end if
					    else
					        call buildInstRules(inst, objectRules, noObjectRules, hasValueConstraintType)
					    end if
					end if
				next
				&#39; Find all relationship types
				for each inst in children &#39;childView
					&#39;if hasInstance(childView) then
						&#39;set inst = childView.instance
						if isEnabled(inst) and inst.isRelationship then
							set instType = inst.type
							if isEnabled(instType) then
                                dim exclude
                                exclude = false
                                for i = 1 to noRelTypes
                                    dim excludeRelType
                                    set excludeRelType = relTypeList(i)
                                    if isEnabled(excludeRelType) then
                                        if excludeRelType.uri = inst.type.uri then
                                            exclude = true
                                            exit for
                                        end if
                                    end if
                                next
                                if not exclude then
								    call buildRelRule(inst, inst.origin, relRules, noRelRules, usedList, noUsed, relTypeList, noRelTypes, hasValueConstraintType, queryObject)
								end if
							end if
						end if
					&#39;end if
				next
			end if
        end if

        &#39; Find filter specification
        if isValid(filterObjectView) then
            set children = filterObjectView.children
            if isValid(children) then
				applyFilter = true
                for each childView in children
                    if hasInstance(childView) then
                        set inst = childView.instance
                        if isEnabled(inst) and not inst.isRelationship then
                            call buildInstRules(inst, filterRules, noFilterRules, hasValueConstraintType)
                        end if
                    end if
                next
            end if
        end if


        &#39; Now all content specification rules are captured
        &#39; Go on to finding the instances
        &#39;dim useSelected
        set instances = nothing
		if (noTopObjectRules &#62; 0) then
            if isValid(selected) then
                &#39;useSelected = true
                if selected.count &#62; 0 then
				    set instances = selected
				    call filterObjects(instances, noTopObjectRules, TopObjectRules)
				    call filterTemplates(instances)
				    if instances.count = 0 then
				        &#39;if noTopObjectRules = 0 then
				            set query = nothing
				            if isEmpty(SearchMode) or SearchMode = &#34;&#34;  then
                                exit function
                            else
				                set selected = nothing
                            end if
				        &#39;end if
				    elseif UseContextInstance then
                        if instances.count &#62; 1 then
                            set instances = getInstancesSelectedFromList(insts, &#34;SelectOneFromList&#34;)
                        end if
                        if isValid(instances) then
                            if instances.count = 1 then
                                set contextInstance = instances.item(1)
                            end if
                        end if
                    end if
				end if
			end if
			if not isValid(instances) then set instances = metis.newInstanceList
			if instances.count = 0 then
                for j = 1 to noTopObjectRules
                    set rule = topObjectRules(j)
                    if rule.useCurrent then
                        set inst = getCurrentInstance(rule.instType)
                        call instances.addLast(inst)
                    end if
                next
            end if
		elseif noObjectRules &#62; 0 then
            if isValid(selected) then
                &#39;useSelected = true
                if selected.count &#62; 0 then
				    set instances = selected
				    &#39; filter selected objects according to the rules
				    call filterObjects(instances, noObjectRules, objectRules)
				end if
			end if
		end if

        dim topp
		set topp = contentmodel
		if not isValid(instances)then
		    set instances = metis.newInstanceList
		end if
		if noTopObjectRules = 0 or (instances.count = 0 and not isValid(selected)) then &#39; added to avoid adding all objects that satisfy the criteria when a list to search among was already provided, e.g. for a given task
		    if repository then
			    set instances = getInstancesFromRepository(instances, contentmodel)
		    else
			    if isEnabled(Project) then
			        for each inst in Global_InformationManager.getParts(Project)
			            if Global_InformationManager.isType(inst, GLOBAL_Type_EkaSpace) then
			                set topp = inst
			                exit for
			            end if
			        next
                    set instances = getInstancesFromClient(instances, hasTopInstance, filterRules, noFilterRules, topp)
			    else
                    set instances = getInstancesFromClient(instances, hasTopInstance, filterRules, noFilterRules, GLOBAL_WorkplaceModel)
			    end if
		    end if
		end if

        if UseContextInstance and instances.count = 1 and not isValid(selected) then
            set instances = getInstancesSelectedFromList(instances, &#34;SelectOneFromList&#34;)
        elseif instances.count &#62; 1 and SearchMode &#60;&#62; &#34;SelectAll&#34; then
            set instances = getInstancesSelectedFromList(instances, SearchMode)
        end if
        if UseContextInstance and instances.count = 1 then
            set ContextInstance = instances(1)
        end if
        if instances.count &#62; 0 then
            dim k, hiddenList
            set hiddenList = metis.newInstanceList
            for j = 1 to noTopObjectRules
                set rule = TopObjectRules(j)
                if rule.isHide then
                    set inst = instances(1)
                    if inst.type.inherits(rule.instType) then
                        call hiddenList.addLast(inst)
                        HideTop = true
                        exit for
                    end if
                end if
            next
            if noPathRules &#62; 0 then &#39;used to be rel
                &#39; Find the relationships
                for j = 1 to 3 &#39; max number of links to traverse
				    k = instances.count
                    for i = 1 to noPathRules
                        set rule = pathRules(i)
                        if isValid(rule) and isValid (instances) then
                            set relList = metis.newInstanceList
                            set insts = findRelationships(relList, instances, instances, hiddenList, rule, contentModel)
                            if isValid(insts) then
                                for each inst in insts
                                    if not instanceInList(inst, instances) then
                                        instances.addLast inst
                                    end if
                                next
                            end if
                            set relList = Nothing
                        end if
                    next
                    if k &#62;= instances.count then &#39; no new elements added ...
					    exit for
                    end if
                next
                if hiddenList.count &#62; 0 then
                    i = 1
                    for each inst in instances
                        if instanceInList(inst, hiddenList) then
                            call instances.removeAt(i)
                        else
                            i = i + 1
                        end if
                    next
                end if
            end if
            if not Config.Info.type.inherits(Config.ViewType) then
                call filterTemplates(instances)
            end if
            &#39; filter by user access prevention
            set instances = Global_RoleManager.removeNoAccess(instances)
            
            &#39; Filter out the contextInstance
            if isEnabled(ContextInstance) then
                i = 1
                do while i &#60;= instances.count
                    dim found
                    found = false
                    set j = instances(i)
                    if j.uri = ContextInstance.uri then
                        call instances.removeAt(i)
                        found = true
                    elseif j.isRelationship then
                        if j.origin.uri = ContextInstance.uri then
                            call instances.removeAt(i)
                            found = true
                        elseif j.target.uri = ContextInstance.uri then
                            call instances.removeAt(i)
                            found = true
                        end if
                    end if
                    if not found then i = i + 1
                loop
            end if
        end if
		set query = instances
    End Function

&#39;-----------------------------------------------------------
    private sub filterObjects(byref instances, noTopObjectRules, topObjectRules)
        dim cvwFilter, remove, i,j, inst, rule
        i = 1
    	set cvwFilter = new CVW_Filter
		do while i &#60;= instances.count
		    set inst = instances.item(i)
		    remove = false
		    for j = 1 to noTopObjectRules
		        set rule = topObjectRules(j)
		        if not inst.type.inherits(rule.insttype) then
		            remove = true
                    exit for
		        end if
                if rule.useCurrent then
                    dim i1
                    set i1 = getCurrentInstance(rule.instType)
                    if inst.uri &#60;&#62; i1.uri then
                        remove = true
                        exit for
                    end if
                end if
                if not cvwFilter.valueIsValid(inst, rule.propname, rule.operator, rule.propvalue) then
                    remove = true
                    exit for
                end if
            next
            if remove then
                call instances.removeAt(i)
            else
                i = i +1
            end if
		loop
		if instances.count &#62; 1 then
            set instances = cvwFilter.removeDuplicates(instances)
		end if
    end sub

&#39;-----------------------------------------------------------
    Private Function getInstancesFromClient(instances, hasTopInstance, filterRules, noFilterRules, contentModel)
        dim cvwSelectDialog, cvwFilter
        dim rule
        dim inst, insts
        dim typeInstances, typeList
        dim pathList, pathObj, pathRel, relList
        dim isValid1
        dim i, j

        set getInstancesFromClient = instances
        if noTopObjectRules &#62; 0 then
            if hasTopInstance then
                instances.addLast topInstance
            else
                if applyFilter then
                    set cvwFilter = new CVW_Filter
                end if
                for i = 1 to noTopObjectRules
                    set insts = Nothing
                    set rule = topObjectRules(i)
                    if isValid(rule) then
                        if rule.useCurrent then
                            set inst = getCurrentInstance(rule.instType)
                            call instances.addLast(inst)
                        else
                            set insts = findConstrainedInstances(rule, contentModel)
                        end if
                        if isValid(insts) then
                            for each inst in insts
                                isValid1 = true
                                if applyFilter then
                                    isValid1 = cvwFilter.instIsValid(inst, filterRules, noFilterRules)
                                end if
                                if isValid1 and not instanceInList(inst, instances) then
                                    call instances.addLast(inst)
                                end if
                            next
                        end if
                    end if
                next
                &#39;if UseContextInstance and instances.count = 1 then
                &#39;    set ContextInstance = instances(1)
                &#39;end if
            end if
        elseif noObjectRules &#62; 0 then
            &#39; This is an instance search
            for i = 1 to noObjectRules
                set rule = objectRules(i)
                if isValid(rule) then
                    if rule.useCurrent then
                        set inst = getCurrentInstance(rule.instType)
                        call instances.addLast(inst)
                    else
                        set insts = findConstrainedInstances(rule, contentModel)
                    end if
                    if isValid(insts) then
                        for each inst in insts
                            if not instanceInList(inst, instances) then
                                call instances.addLast(inst)
                            end if
                        next
                    end if
                end if
            next
        elseif isValid(insts) then
            if insts.count &#62; 1 then
                set instances = insts
            end if
        end if
        set getInstancesFromClient = instances
    End Function

&#39;-----------------------------------------------------------
    Private Function getInstancesFromRepository(instances, topObjectRules, noTopObjectRules, contentModel)
        dim rule
        dim inst, insts
        dim i

        set getInstancesFromRepository = instances
        if noTopObjectRules &#62; 0 then
            for i = 1 to noTopObjectRules
                set rule = topObjectRules(i)
                if isValid(rule) then
                    set insts = findRepositoryInstances(rule, contentModel)
                    if isValid(insts) then
                        set insts = findConstrainedInstances(rule, contentModel)
                        if isValid(insts) then
                            for each inst in insts
                                if not instanceInList(inst, instances) then
                                    instances.addLast inst
                                end if
                            next
                        end if
                    end if
                end if
            next
        elseif noObjectRules &#62; 0 then
            &#39; This is an instance search
            for i = 1 to noObjectRules
                set rule = objectRules(i)
                if isValid(rule) then
                    set insts = findRepositoryInstances(rule, contentModel)
                    if isValid(insts) then
                        set insts = findConstrainedInstances(rule, contentModel)
                        if isValid(insts) then
                            for each inst in insts
                                if not instanceInList(inst, instances) then
                                    instances.addLast inst
                                end if
                            next
                        end if
                    end if
                end if
            next
        elseif isValid(insts) then
            if insts.count &#62; 1 then
                set instances = insts
            end if
        end if
    End Function

    
&#39;-----------------------------------------------------------
    Private Function findRepositoryInstances(rule, contentModel)
        dim strQuery

        set findRepositoryInstances = Nothing
        &#39; Build query
		strQuery = &#34;Component.type =&#39;&#34; &#38; rule.instType.title &#38; &#34;&#39;&#34;
		&#39; Debuf
		  &#39; MsgBox strQuery
		  &#39; exit function
        &#39; Build query method
		tqlMethod1.setArgument1 &#34;Query0&#34;, strQuery
		tqlMethod1.setArgument1 &#34;AllowCreateViews&#34;, 0
        &#39; Get instances from repository
		set findRepositoryInstances = model.runMethodOnInst1(tqlMethod1, contentModel).getCollection
    End Function

   &#39;---------------------------------------------------------------------------------------------------
    Private Function getInstancesSelectedFromList(instances, searchMode)
        dim cvwSelectDialog
        dim instType


        &#39; Handle select dialog if specified
        if searchMode = &#34;SelectAll&#34; then
            set getInstancesSelectedFromList = instances
        else
            set cvwSelectDialog = new CVW_SelectDialog
            if searchMode = &#34;SelectOneFromList&#34; then
                if instances.count = 1 then &#39; HDJ removed comments on this one, 28.02.2008
                    set getInstancesSelectedFromList = instances
                    exit function
                else
                    cvwSelectDialog.singleSelect = true
                    cvwSelectDialog.title = &#34;Which one do you want to work on?&#34;
                    cvwSelectDialog.heading = &#34;Which one do you want to work on?&#34;
                end if
            elseif searchMode = &#34;SelectManyFromList&#34; then
                cvwSelectDialog.singleSelect = false
                cvwSelectDialog.title = &#34;Which one do you want to work on?&#34;
                cvwSelectDialog.heading = &#34;Which one do you want to work on?&#34;
            end if
            set getInstancesSelectedFromList = cvwSelectDialog.show(instances)
            set cvwSelectDialog = Nothing
        end if
    End Function

&#39;-----------------------------------------------------------
     Private Function findConstrainedInstances(rule, contentModel)
        dim instType, insts, inst
        dim relships, rels, rel
        dim prop, propName, propValue, value
        dim datatype, operator
        dim cvwFilter
        dim i, removed

        set findConstrainedInstances = Nothing
        if isValid(rule) and isEnabled(contentModel) then
            set metis.currentModel = model
            set metis.currentModel.currentModelView = modelView
            if rule.operator = &#34;eq&#34; then
                set insts = findParts(contentModel, contentModel, rule.instType, rule.propname, rule.propvalue)
            end if
            set cvwFilter = new CVW_Filter
            if not isValid(insts) then
                set insts = findParts(contentModel, contentModel, rule.instType, &#34;&#34;, &#34;&#34;)
                if insts.count &#62; 0 then
                    for each inst in insts
                        i = 1
                        removed = false
                        if isEnabled(inst) then
                            if rule.propname = &#34;NoSubTypes&#34; then
                                if inst.type.uri &#60;&#62; rule.instType.uri then
                                    insts.removeAt(i)
                                    removed = true
                                end if
                            elseif rule.propname = &#34;Hide&#34; then
                                insts.removeAt(i)
                                removed = true
                            elseif not cvwFilter.valueIsValid(inst, rule.propname, rule.operator, rule.propvalue) then
                                insts.removeAt(i)
                                removed = true
                            end if
                            if not removed then
                                i = i + 1
                            end if
                        end if
                    next
                end if
            end if
            if insts.count &#62; 1 then
                set insts = cvwFilter.removeDuplicates(insts)
                if not Config.Info.type.inherits(Config.ViewType) then &#39; added by HDJ to remove query content etc.
                    call filterTemplates(insts)
                end if
            end if
            if UseContextInstance then
                if insts.count &#62; 1 then
                    set insts = getInstancesSelectedFromList(insts, &#34;SelectOneFromList&#34;)
                end if
            end if
            if insts.count &#62; 0 then
                set findConstrainedInstances = insts
            end if
            set cvwFilter = Nothing
        end if
    End Function
 
 &#39;---------------------------------------------------------------------------------------------------
 public sub filterTemplates(byref instances)
    dim i, j
     if not IncludeTemplates then &#39; filter out templates
        i = 1
        do while i &#60;= instances.count
            set j = instances(i)
            if Global_InformationManager.isTemplate(j) then
                call instances.removeAt(i)
            else
                i = i +1
            end if
        loop
    end if
    if not IncludeGlobals then &#39; filter out global reusable elements
        i = 1
        do while i &#60;= instances.count
            set j = instances(i)
            if Global_InformationManager.isGlobal(j) then
                call instances.removeAt(i)
            elseif j.type.uri = Global_Context.ScriptType.uri then
                call instances.removeAt(i)
            else
                i = i +1
            end if
        loop
    end if
    &#39; filter out children of queries unless the query itself is present in the collection
    i = 1
    do while i &#60;= instances.count
        set j = instances(i)
        if isValid(j.parent) then
            if j.parent.type.uri = Global_ViewManager.QueryType.uri then
                if not instances.contains(j.parent) then
                    call instances.removeAt(i)
                else
                    i = i +1
                end if
            else
                i = i +1
            end if
        else
            i = i +1
        end if
    loop
 end sub

&#39;---------------------------------------------------------------------------------------------------
    Private Function getCurrentInstance(instType)
        if isValid(Config) then
            if instType.uri = Config.ProjectType.uri then
                set getCurrentInstance = Global_Context.Project
            elseif instType.uri = Config.InfoType.uri then
                set getCurrentInstance = Config.Info
            elseif instType.uri = Config.RoleType.uri then
                set getCurrentInstance = Config.Role
            elseif instType.uri = Config.TaskType.uri then
                set getCurrentInstance = Config.Task
            elseif instType.uri = Config.ViewType.uri then
                set getCurrentInstance = Config.View
            elseif instType.uri = Config.UserType.uri then
                set getCurrentInstance = GLOBAL_User
            end if
        end if
    End Function

&#39;---------------------------------------------------------------------------------------------------
    Private Function findParts2(partList, objects, instances, hiddenList, rule)
        dim obj, part
        dim isAllowed

        for each obj in objects
            if obj.type.inherits(rule.parentType) then
                for each part in obj.parts
                    isAllowed = rule.isAllowed1(obj, part)
                    if isAllowed = 2 then
                        if not instanceInList(part, hiddenList) then
                            call hiddenList.addLast(part)
                        end if
                    end if
                    if rule.checkNoSubTypes(part) then isAllowed = 0
                    if isAllowed &#62; 0 then
                        found = true
                        if not instanceInList(part, partList) then
                            partList.addLast part
                        end if
                    end if
                next
                if found then
                    if rule.isRecursive then
                        if not instanceInList(part, instances) then
                            instances.addLast part
                            call findRelationships(relList, objList, instances, hiddenList, rule, nothing)
                        end if
                    end if
                    if rule.toNothing then
                        if objList.count &#62; 0 then
                            isNotNothing = true
                            exit for
                        end if
                    else
                        dim o
                        for each o in objList
                            if not instanceInList(o, objects) then
                                objects.addLast o
                            end if
                        next
                    end if
                    if not instanceInList(rel, relList) then
                        relList.addLast rel
                    end if
                end if
            end if
        next
        set findParts2 = partList
    End Function

&#39;---------------------------------------------------------------------------------------------------
    Private Function findRelationships(relList, objects, instances, hiddenList, rule, contentModel)
        dim obj, objList, other
        dim rel, rels
        dim part, parts
        dim indx
        dim type1, type2
        dim i, o
        dim found, isAllowed

        if rule.relDir = 0 then
            set type1 = rule.parentType
            set type2 = rule.childType
        else
            set type1 = rule.childType
            set type2 = rule.parentType
        end if
        i = 1
        for each obj in objects
            set objList = metis.newInstanceList
            if isValid(rule.relType) then
                set rels = obj.neighbourRelationships
            end if
            if isValid(rels) then
                dim isNotNothing, relDir
                isNotNothing = false
                found = false
                for each rel in rels
                    if rel.type.inherits(rule.relType) then
                        isAllowed = 1
                        if rel.origin.uri = obj.uri then
                            relDir = 0
                            set other = rel.target
                            &#39;if isValid(contentModel) then &#39;&#39;removed HDJ
                            &#39;    if other.url &#60;&#62; contentModel.url then isAllowed = 0
                            &#39;end if
                        else
                            relDir = 1
                            set other = rel.origin
                            &#39;if isValid(contentModel) then
                            &#39;    if other.url &#60;&#62; contentModel.url then isAllowed = 0
                            &#39;end if
                        end if
                        if isAllowed &#62; 0 then
                            if type1.uri = type2.uri then
                                if rule.checkNoSubTypes(obj) then isAllowed = 0
                            end if
                            if relDir = 0 then
                                if rule.checkNoSubTypes(other) then isAllowed = 0
                            else
                                if rule.checkNoSubTypes(obj) then isAllowed = 0
                            end if
                        end if
                        if isAllowed &#62; 0 then
                            if rule.relDir = 0 then
                                if relDir = 0 then
                                    isAllowed = rule.isAllowed(obj, rel)
                                    if isAllowed = 2 then
                                        if not instanceInList(obj, hiddenList) then call hiddenList.addLast(obj)
                                    end if
                                else
                                    isAllowed = rule.isAllowed(other, rel)
                                    if isAllowed = 2 then
                                        if not instanceInList(other, hiddenList) then call hiddenList.addLast(other)
                                    end if
                                end if
                            else
                                if relDir = 1 then
                                    isAllowed = rule.isAllowed(other, rel)
                                    if isAllowed = 2 then
                                        if not instanceInList(other, hiddenList) then call hiddenList.addLast(other)
                                    end if
                                else
                                    isAllowed = rule.isAllowed(obj, rel)
                                    if isAllowed = 2 then
                                        if not instanceInList(obj, hiddenList) then call hiddenList.addLast(obj)
                                    end if
                                end if
                            end if
                            if isAllowed &#62; 0 then
                                found = true
                                if rule.relDir = 0 then
                                    if relDir = 0 then
                                        if not instanceInList(other, objList) then
                                            objList.addLast other
                                        end if
                                    else
                                        if not instanceInList(obj, objList) then
                                            objList.addLast obj
                                        end if
                                    end if
                                else
                                    if relDir = 0 then
                                        if not instanceInList(obj, objList) then
                                            objList.addLast obj
                                        end if
                                    else
                                        if not instanceInList(other, objList) then
                                            objList.addLast other
                                        end if
                                    end if
                                end if
                                if not instanceInList(rel, relList) then
                                    relList.addLast rel
                                end if
                            end if
                        end if
                    end if
                next
                if rule.relType.uri = GLOBAL_Type_EkaHasPart.uri then
                    isAllowed = 1
                    set parts = obj.parts
                    if isValid(parts) then
                        for each part in parts
                            isAllowed = rule.isAllowed1(obj, part)
                            if isAllowed = 2 then
                                if not instanceInList(part, hiddenList) then
                                    call hiddenList.addLast(part)
                                end if
                            end if
                            if isAllowed &#62; 0 then
                                found = true
                                if not instanceInList(part, objList) then
                                    call objList.addLast(part)
                                end if
                            end if
                        next
                    end if
                end if
                if found then
                    if rule.isRecursive then
                        if not instanceInList(obj, instances) then
                            instances.addLast obj
                            call findRelationships(relList, objList, instances, hiddenList, rule, contentModel)
                        end if
                    end if
                    if rule.toNothing then
                        if objList.count &#62; 0 then
                            isNotNothing = true
                            exit for
                        end if
                    else
                        for each o in objList
                            if not instanceInList(o, objects) then
                                objects.addLast o
                            end if
                        next
                    end if
                end if
                if isNotNothing then
                    dim j, r
                    j = 1
                    for each r in objects
                        if r.isRelationship then
                            if r.target.uri = objects(i).uri then
                                objects.removeAt(j)
                                if j &#60; i then i = i - 1
                            elseif r.origin.uri = objects(i).uri then
                                objects.removeAt(j)
                                if j &#60; i then i = i - 1
                            end if
                        end if
                        j = j + 1
                    next
                    objects.removeAt(i)
                else
                    i = i + 1
                end if
            end if
        next
        set findRelationships = relList
    End Function

    &#39;---------------------------------------------------------------------------------------------------
    private Sub Class_Initialize
        set model           = metis.currentModel
        set modelView       = model.currentModelView
        set inst            = model.currentInstance
        set instView        = modelView.currentInstanceView
        set ContextInstance = Nothing
        HideTop             = false
        ContentInRepository = false
        IncludeGlobals      = false
        IncludeTemplates    = false
        SearchMode          = &#34;SelectAll&#34;
        ContentModelView    = &#34;ContentModel&#34;
        set QueryType = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/query.kmd#ekaQuery&#34;)
        set Project = Global_Context.Project &#39; override to nothing later if you want to search the whole model
   End Sub
   &#39;---------------------------------------------------------------------------------------------------

End Class
</string>
  </valueset>
 </object>

 <object id="_002asnu015cvuge5edr9">
  <valueset size="10" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="../languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Class EKA_Inheritance</string>
   <string name="description"></string>
   <integer name="dbms-admin.commitFlag">0</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20080406 112245750</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="comments"></string>
   <string name="script">option explicit
&#39; This class handles inheritance of e.g. configurations and property values. It performs lookup according to:
&#39; - Explicitly modelled IS-telationships between instances
&#39; - Types of the instances (and those they inherit from according to other rules
&#39; - Explicit Is-relationships between instance objects that are placeholder for a type. 
&#39;      - These are recognised by the fact that they have the same name as the type, and their type is either one of the basic IRTV types of the type they represent (type name = instance name)

dim GLOBAL_InheritanceCache &#39;--- cache that links metis instances to a collection of the instance it inherits from
dim GLOBAL_TypeRepresentatives &#39;--- cache that links metis types to the instance that represents it and which confioguration data may be associated with
dim GLOBAL_ConfigModel &#39; --- the model that contains EKA basic definitions etc.

Class EKA_Inheritance
 public InheritanceRelType
	public EqualsType
	public ConsistsOfType
	public ElementType
	public RelationshipObjectType
	
	public model
    public modelView
    public inst
    public instView
    private typeRepresentativesParent
	

	public function supers(byval obj)
		set supers = supersUntilRoot(obj, Nothing)
	end function
	
	&#39; return all the elements that obj inherits from, but do not go further than the given root type
	public function supersUntilRoot(byval obj, byval rootType)
		dim s, i
		set supersUntilRoot = metis.newInstanceList()
		if not isEnabled(obj) then exit function
		if obj.isRelationship() then
		    set supersUntilRoot = representatives(obj.type)
		    exit function
		end if
&#39;msgbox(&#34;Getting supers for &#34;&#38;obj.title)
		if GLOBAL_InheritanceCache.Exists(obj.uri) then
		    if isValid(GLOBAL_InheritanceCache.item(obj.uri)) then 
			    set supersUntilRoot  = GLOBAL_InheritanceCache.Item(obj.uri)
			else
			    call appendSupers(obj, supersUntilRoot, &#34;&#34;)
			end if
		else
			call appendSupers(obj, supersUntilRoot, &#34;&#34;)
		end if
		&#39; duplicate to avoid problems later
			set s = supersUntilRoot
			set supersUntilRoot = metis.newInstanceList()
			for each i in s			
				if not isValid(rootType) then &#39; no filter
				    call supersUntilRoot.AddLast(i)
				elseif Global_InformationManager.isType(i,rootType) then &#39; filter by type
					call supersUntilRoot.AddLast(i)
				end if
			next
		if not isValid(supersUntilRoot) then set supersUntilRoot = metis.newInstanceList()
		&#39; add local query participants if correct type
		for each s in getLocalRepresentatives(obj.type)
		    if not supersUntilRoot.contains(s) then
		        call supersUntilRoot.addFirst(s)
		    end if
		next
	end function
	
	&#39; clears the cache
	public sub reset()
		set GLOBAL_InheritanceCache = Nothing
		set GLOBAL_InheritanceCache = CreateObject(&#34;Scripting.Dictionary&#34;)
		set GLOBAL_TypeRepresentatives = Nothing
		set GLOBAL_TypeRepresentatives = CreateObject(&#34;Scripting.Dictionary&#34;)
	end sub
	
	&#39; appends all supers to list (recusively, including type representatives and their supers
	&#39; handledTypes are used for preventing loops in recursion with type representatives
	&#39; returns the elements added to list
	private function appendSupers(byval obj, byref list, byval handledTypes)
		on error resume next
		dim  rel, target, rels
		dim recursive, t
		if not isEnabled(list) then
			set list = metis.newInstanceList()
		end if
		if GLOBAL_InheritanceCache.Exists(obj.uri) then
		    if isValid(GLOBAL_InheritanceCache.item(obj.uri)) then 
		        set appendSupers = metis.newInstanceList()
			    for each target in GLOBAL_InheritanceCache.Item(obj.uri)
				    if not list.contains(target) then
					    call list.AddLast(target)
				    end if
				    if not appendSupers.contains(target) then
					    call appendSupers.AddLast(target)
				    end if
			    next 
			else
			    call GLOBAL_InheritanceCache.remove(obj.uri)
			end if
			&#39;set appendSupers = GLOBAL_InheritanceCache.Item(obj.uri) may cause problems below
		end if
		dim r2, inherits
		set r2 = metis.newInstanceList()
		if not GLOBAL_InheritanceCache.Exists(obj.uri) then
			set appendSupers = metis.newInstanceList()
			set rels = obj.getNeighbourRelationships(0, Nothing) &#39; only way to get inheritance!!
			for each rel in rels
			    inherits = false
			    if rel.type.uri = InheritanceRelType.uri then &#39; some strange error occurs here sometimes, and the code below did not find all relships!
			        inherits = true
			    else
			        inherits = rel.type.inherits(InheritanceRelType) &#39; only way to get inheritance, getneigbour does not give it!!
			    end if
			    if inherits then
				    set target = rel.target
				    if not list.contains(target) then call list.AddLast(target)
					if not r2.contains(rel) then call r2.addLast(rel)
    &#39;msgbox(&#34;Adding new super for &#34;&#38;obj.title&#38;&#34;: &#34;&#38;target.title)               
				end if
			next
			for each rel in r2
				set target = rel.target
				if not appendSupers.contains(target) then
					call appendSupers.AddLast(target)
					set recursive = appendSupers(target, list, handledTypes)
					for each t in recursive
						if not appendSupers.contains(t) then
							call appendSupers.AddLast(t)
						end if
					next 
				end if		
			next
					&#39; prevent recursion:
			if (instr(handledTypes, obj.type.title) &#60;= 0) and (not appendSupers.contains(obj)) then
				set recursive = appendTypeSupers(obj, list, handledTypes)
				for each t in recursive
					if not appendSupers.contains(t) then
						call appendSupers.AddLast(t)
					end if
				next 
			end if
			if not isValid(appendSupers) then set appendSupers = metis.newInstanceList()
			call GLOBAL_InheritanceCache.Add(obj.uri, appendSupers)
		end if
		&#39;dim tt
		&#39;tt = &#34; &#34;
		&#39;for each o in appendSupers
		&#39;	tt = tt &#38; &#34;, &#34; + o.title
		&#39;next
		&#39;msgbox obj.title&#38; &#34; has &#34;&#38; appendSupers.count &#38; &#34; supers: &#34; &#38;tt
	end function
	
	&#39; appends all type representatives and their supers to the list (recusively)
	&#39; handledTypes are used for preventing loops in recursion
	&#39; returns the elements added to list
	private function appendTypeSupers(byval obj, byref list, byval handledTypes)
		on error resume next
		dim typerep, t, typereps, found
		dim recursive
								
		handledTypes = handledTypes &#38; obj.type.title &#39; prevent recursion
			
		&#39; find type representative if it exists, and add the elements that it inherits from
		set typereps = representatives(obj.type)
	    if not isValid(typereps) then set typereps = metis.newInstanceList()
		&#39;if not isValid(typereps) then 
		&#39;	set appendTypeSupers = metis.newInstanceList()
		&#39;	exit function
		&#39;end if
		&#39;if typereps.count = 0 then 
		&#39;	set appendTypeSupers = metis.newInstanceList()
		&#39;	exit function
		&#39;end if
&#39;		if typereps.contains(obj) then &#39; prevent extra recursion if the obj is itself a typerep..
&#39;			dim trt
&#39;			set trt = metis.newInstanceList()
&#39;			for each t in typereps
&#39;				if (t.uri &#60;&#62; obj.uri) then
&#39;					call trt.AddLast(t)
&#39;				end if
&#39;			next
&#39;			set typereps = trt
&#39;		end if
		found = false
		if typereps.count &#62; 0 then
			set appendTypeSupers = metis.newInstanceList()
			for each typerep in typereps
				found = true
				if not list.contains(typerep) then
&#39;msgbox(&#34;Adding new super (by type) for &#34;&#38;obj.title&#38;&#34;: &#34;&#38;typerep.title)
					call list.AddLast(typerep)
				end if
				if (typerep.uri &#60;&#62; obj.uri) and not appendTypeSupers.contains(typerep) then
					call appendTypeSupers.AddLast(typerep)
					if GLOBAL_InheritanceCache.Exists(typerep.uri) then
					    if isValid(GLOBAL_InheritanceCache.Item(typerep.uri)) then
						    for each t in GLOBAL_InheritanceCache.Item(typerep.uri)
							    if not list.contains(t) then
    &#39;msgbox(&#34;Adding cached super (by type) for &#34;&#38;obj.title&#38;&#34;: &#34;&#38;t.title)
								    list.AddLast(t)
							    end if
							    if not appendTypeSupers.contains(t) then
								    call appendTypeSupers.AddLast(t)
							    end if
						    next 
						 else
			                call GLOBAL_InheritanceCache.remove(typerep.uri)
			            end if
		            end if
		            if not GLOBAL_InheritanceCache.Exists(typerep.uri) then
						set recursive = appendSupers(typerep, list, handledtypes)
						for each t in recursive
							if not appendTypeSupers.contains(t) then
								call appendTypeSupers.AddLast(t)
							end if
						next
					end if
				end if
			next
		end if
		&#39;if found then &#39; supers already found and handled
		&#39;	exit function
		&#39;end if
		&#39; look for and handle supertypes recursively
		set t = obj.type
		set typereps = Nothing
		do while isEnabled(t)
			set t = t.baseType
			set typereps = representatives(t)
			if typereps.count &#62; 0  then exit do
		loop
		if typereps.count &#62; 0 then
			if not isValid(appendTypeSupers) then
				set appendTypeSupers = metis.newInstanceList()
			end if
			for each typerep in typereps
				if not list.contains(typerep) then
&#39;msgbox(&#34;Adding new super (by supertype) for &#34;&#38;obj.title&#38;&#34;: &#34;&#38;typerep.title)
					call list.AddLast(typerep)
				end if
				if not appendTypeSupers.contains(typerep) then
				    call appendTypeSupers.addLast(typerep)
				    if GLOBAL_InheritanceCache.Exists(typerep.uri) then
				        if isValid(GLOBAL_InheritanceCache.Item(typerep.uri)) then
				            for each t in GLOBAL_InheritanceCache.Item(typerep.uri)
					            if not list.contains(t) then
    &#39;msgbox(&#34;Adding new cached super (by supertype) for &#34;&#38;obj.title&#38;&#34;: &#34;&#38;typerep.title)
						            list.AddLast(t)
					            end if
					            if not appendTypeSupers.contains(t) then
						            call appendTypeSupers.AddLast(t)
					            end if
				            next 
				  	    else
			                call GLOBAL_InheritanceCache.remove(typerep.uri)
			            end if
		            end if
		            if not GLOBAL_InheritanceCache.Exists(typerep.uri) then
					    set recursive = appendSupers(typerep, list, handledtypes)
					    for each t in recursive
						    if not appendTypeSupers.contains(t) then
							    call appendTypeSupers.AddLast(t)
						    end if
					    next
				    end if
				end if	
				&#39;if (instr(handledTypes, obj.type.title) &#60;= 0) and not appendTypeSupers.contains(typerep) then
				&#39;	call appendTypeSupers.addLast(typerep)
				&#39;	set recursive = appendTypeSupers(typerep, list, handledtypes)
				&#39;	if isValid(recusive) then
				&#39;		for each t in recursive
				&#39;			if not appendTypeSupers.contains(t) then
				&#39;				call appendTypeSupers.AddLast(t)
				&#39;			end if
				&#39;		next 
				&#39;	end if
				&#39;end if
			next
		end if
		if not isValid(appendTypeSupers) then set appendTypeSupers = metis.newInstanceList()
		&#39;call GLOBAL_InheritanceCache.Add(obj.uri, appendTypeSupers)
	end function
		
		&#39; returns the first object which has the same name (preferably type) as the type. 
		&#39; These objects are used for associating properties and configurations to all objects of the type.
		&#39; if not found, it will be created...
	public function representative(byval aType)
		on error resume next
		dim reps, o, r
		set reps = Nothing
		set reps = representatives(aType)
		set representative = Nothing
		if aType.isRelationshipType() then
            if reps.count &#62; 0 then
                for each r in reps
                    if r.isObject() then 
                        set representative = r
                        call representative.setNamedStringValue(&#34;relationshipType&#34;, aType.uri)
                        exit function
                    end if 
                next
            end if
            if not isValid(reps) then set reps = metis.newInstanceList()  &#39; if not found, create
            set representative = Global_Context.Model.newObject(RelationshipObjectType)
            &#39;set representative = Global_InformationManager.newElement(RelationshipObjectType, nothing)&#39; Global_Context.Model.newObject(RelationshipObjectType)
            r = aType.title
            if not isValid(r) then r = aType.type.title
			call representative.setNamedStringValue(&#34;name&#34;, r)
			call representative.setNamedStringValue(&#34;relationshipType&#34;, aType.uri)
			call reps.addLast(representative)
			set representative.parent = TypeParent
			if GLOBAL_TypeRepresentatives.Exists(aType.uri) then call GLOBAL_TypeRepresentatives.remove(aType.uri)
			call GLOBAL_TypeRepresentatives.Add(aType.uri, reps)
        else
            if reps.count &#62; 0 then
			    set representative = reps(1)
			    exit function
			end if
			if not isValid(reps) then set reps = metis.newInstanceList()  &#39; if not found, create
		    set representative = Global_Context.Model.newObject(aType)
		    r = aType.title
            if not isValid(r) then r = aType.type.title
		    call representative.setNamedStringValue(&#34;name&#34;, r)
		    call reps.addLast(representative)
		    set representative.parent = TypeParent
		    if GLOBAL_TypeRepresentatives.Exists(aType.uri) then call GLOBAL_TypeRepresentatives.remove(aType.uri)
		    call GLOBAL_TypeRepresentatives.Add(aType.uri, reps)
		end if
	end function
	
	private property get TypeParent
		dim p
	    if not isEnabled(typeRepresentativesParent) then
            for each p in Global_Context.model.parts
                if p.title = &#34;Types&#34; then
                    set typeRepresentativesParent = p
                    exit for
                end if
            next
            if not isEnabled(typeRepresentativesParent) then
                set typeRepresentativesParent = Global_Context.model.newObject(GLOBAL_Type_EkaSpace)
                call typeRepresentativesParent.setNamedStringValue(&#34;name&#34;, &#34;Types&#34;)
            end if
        end if
        set TypeParent = typeRepresentativesParent
	end property
	
	
		&#39; returns  all objects that have the same name (preferably type) as the type. 
		&#39; These objects are used for associating properties and configurations to all objects of the type.
	public function representatives(byval aType)
		dim o, tt, type1, type2, reps2
		on error resume next
		if GLOBAL_TypeRepresentatives.Exists(aType.uri) then
			set reps2 = GLOBAL_TypeRepresentatives.Item(aType.uri)
			if isValid(reps2) then
		        &#39; use a copy, because the later local addition should no interfere with the cache
		        set representatives = metis.newInstanceList()
                for each k1 in reps2
                    call representatives.addLast(k1)
                next
		        &#39;if representatives.count = 0 then set representatives = Nothing
		            &#39;call GLOBAL_TypeRepresentatives.remove(aType.uri)
			else
			    set reps2 = nothing
		    end if
	    else
	        set reps2 = nothing
		end if
		if reps2 is nothing then
		    set representatives = Nothing
    &#39;stop
            if aType.isRelationshipType() then
                set type1 = RelationshipObjectType
            &#39;    set type2 = aType
            else
                set type1 = aType
            &#39;    set type2 = ElementType
            end if
            &#39;set metis.currentModel = GLOBAL_WorkplaceModel
		    set representatives = findAll(GLOBAL_WorkplaceModel, type1, aType.title)
		    if not isValid(representatives) then
			    &#39;set metis.currentModel = GLOBAL_ConfigModel
			    set representatives = findAll (GLOBAL_ConfigModel, type1, aType.title)
			    &#39;set metis.currentModel = model
		    elseif representatives.count = 0 then
			    &#39;set metis.currentModel = GLOBAL_ConfigModel
			    set representatives = findAll (GLOBAL_ConfigModel,type1, aType.title)
			    &#39;set metis.currentModel = model
		    else
			    &#39;set metis.currentModel = GLOBAL_ConfigModel
			    for each o in findAll(GLOBAL_ConfigModel, type1, aType.title)
				    if not representatives.contains(o) then 
					    call representatives.AddLast(o)
				    end if
			    next
			    set metis.currentModel = model
		    end if
		    if not isValid(representatives) then set representatives = metis.newInstanceList()
		    if representatives.count = 0 then
		        for each o in TypeParent.parts
		            if o.type.uri = aType.uri then 
		                call representatives.AddLast(o)
		                exit for
		            end if
		        next
		    end if
		    if isValid(representatives) then
		        &#39; sort local before global, needed when global is included as submodel in local ....
		        dim i,j, k1, k2
		        i = 1
		        j = representatives.count
		        do while i &#60; j
		            if instr(1, representatives.item(j).uri, GLOBAL_ConfigModel.uri, 1) &#62; 0 then &#39; j is global, next
		                j = j - 1
		            elseif instr(1, representatives.item(i).uri, GLOBAL_ConfigModel.uri, 1) &#60;= 0 then &#39; i is local, next
		                i = i + 1
		            else &#39; j is local, i global, move i to end, after j
		                set k1 = representatives.item(i)
		                set k2 = representatives.item(j)
                        call representatives.removeAt(j)
                        call representatives.removeAt(i)
                        call representatives.addLast(k1)
                        call representatives.addFirst(k2)
                        j = j - 1
                        i = i + 1
		            end if
		        loop
		        &#39;create copy so that the later local addition is not included&#39;
		        set reps2 = metis.newInstanceList()
		        for each k1 in representatives
		            call reps2.addLast(k1)
		        next
			    call GLOBAL_TypeRepresentatives.Add(aType.uri, reps2)
			    &#39;tt = &#34;        &#34;
			    &#39;for each o in representatives
			    &#39;	tt = tt + &#34;, &#34; + o.title
			    &#39;next
			    &#39;msgbox aType.title&#38; &#34; has &#34;&#38; representatives.count &#38; &#34; representatives: &#34; +tt
			else
				call GLOBAL_TypeRepresentatives.Add(aType.uri, metis.newInstanceList())
		    end if
		end if
		if not isValid(representatives) then set representatives = metis.newInstanceList()
	end function
	
	public function getLocalRepresentatives(aType) 
	    dim o
	    set getLocalRepresentatives = metis.newInstanceList()
	    if isEnabled(Global_Context.View) then
	        if Global_Context.View.type.uri = Global_ViewManager.QueryType.uri then
		        for each o in Global_Context.View.parts 
		            if aType.uri = o.type.uri then
		                if not getLocalRepresentatives.contains(o) then
		                    call getLocalRepresentatives.addLast(o)
		                end if
		            end if
		        next
		    end if
		end if
	end function
	
	&#39;find an  object with the type and name in the current model
	private function find(aType, name)
		Dim o
		set find = Nothing
		for each o in metis.currentModel.findInstances(aType, &#34;name&#34;, name)
			if isValid(o) then
				set find = o
				exit function
			end if
		next
		for each o in metis.currentModel.findInstances(ElementType, &#34;name&#34;, name)
			if isValid(o) then
				set find = o
				exit function
			end if
		next
	end function
	
		&#39;find an  object with the type and name in the current model
	private function findAll(model, aType, name)
		Dim o
		set findAll = Nothing
		set findAll = model.findInstances(aType, &#34;name&#34;, name)
		if not isValid(findAll) then
			set findAll = model.findInstances(ElementType, &#34;name&#34;, name)
		else
			for each o in model.findInstances(ElementType, &#34;name&#34;, name)
				if isValid(o) then
					if o.type.uri = ElementType.uri then
						if not findAll.contains(o) then 
							call findAll.AddLast(o)
						end if
					end if
				end if
			next
		end if
	end function
    
    &#39; append to list 
    public function getInheriters(obj, list)
        if not isEnabled(list) then set list = metis.newInstanceList()
        dim s, t
        for each s in Global_InformationManager.getAllNeighbours(obj, &#34;&#34;, InheritanceRelType, 1) &#39; incoming
            if not list.contains(s) then 
                call list.addLast(s)
                call getInheriters(s, list)
            end if
        next
        set getInheriters = list
    end function	
	
    private Sub Class_Initialize

        set model           = metis.currentModel
        set modelView       = model.currentModelView
        set inst            = model.currentInstance
        set instView        = modelView.currentInstanceView
        set typeRepresentativesParent = Nothing
        set InheritanceRelType   = metis.findType(&#34;http://xml.activeknowledgemodeling.com/eka/languages/eka_relships.kmd#RelType_EKA:Is_UUID&#34;)
        set EqualsType  = metis.findType(&#34;http://xml.activeknowledgemodeling.com/eka/languages/eka_relships.kmd#RelType_EKA:Equals_UUID&#34;)
        set ConsistsOfType  = metis.findType(&#34;http://xml.activeknowledgemodeling.com/eka/languages/eka_relships.kmd#RelType_EKA:Member_UUID&#34;)
        set ElementType  = metis.findType(&#34;http://xml.activeknowledgemodeling.com/eka/languages/eka_element.kmd#ObjType_EKA:Element_UUID&#34;)
        set RelationshipObjectType = metis.findType(&#34;http://xml.activeknowledgemodeling.com/eka/languages/eka_relationship_object.kmd#ekaRelationshipObject&#34;)
        if not isEnabled(GLOBAL_ConfigModel) then
&#39;stop
   set GLOBAL_ConfigModel = metis.load(&#34;http://xml.activeknowledgemodeling.com/cvw/templates/irtv.kmv&#34;)
			set metis.currentModel = model &#39; reset after load
			set metis.currentModel.currentModelView = modelView
			&#39;set GLOBAL_ConfigModel = metis.findInstance(&#34;http://xml.activeknowledgemodeling.com/cvw/templates/irtv.kmv#_002as5401d4bqcg5f0b3&#34;)
        end if 
        if not isValid(GLOBAL_InheritanceCache) then
			set GLOBAL_InheritanceCache = CreateObject(&#34;Scripting.Dictionary&#34;)
        end if
        if not isValid(GLOBAL_TypeRepresentatives) then
			set GLOBAL_TypeRepresentatives = CreateObject(&#34;Scripting.Dictionary&#34;)
		end if
    end sub

End Class
</string>
  </valueset>
 </object>

 <object id="_002asnu015d0g0nfq0ql">
  <valueset size="10" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="../languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Class IRTV_Config</string>
   <string name="description"></string>
   <integer name="dbms-admin.commitFlag">0</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20080404 121820421</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="comments"></string>
   <string name="script">option explicit

dim GLOBAL_Context
dim GLOBAL_User
dim GLOBAL_WorkplaceModel

dim GLOBAL_ObjectTypesCache

Class IRTV_Config
 &#39;--- types (root/basis types) for each dimension
 public InfoType
 public RoleType
 public UserType
 public TaskType
 public ProjectType
 public ViewType
 public ScriptType
 &#39;--- reltypes (root/basis types) for connections betwwen each dimension pair
	public RIType
	public RTType
	public RVType
	public TVType
	public TIType
	public VIType
	public ITType
	public RootRelType
	public EqualsType
	public RemoveType
	&#39;---- methods
	public EditPropertiesMethod
	&#39;----
	public Workspace &#39;CVW_Workspace
			
	&#39;--- instance elements used for finding the configurations
	public Info &#39; element or connection
	public Role &#39; roles of GLOBAL_User in context
	public Task &#39; task to perform
	public View &#39; View to perform the task in (could be new workarea ...)
	&#39; in case there is more than one, only infos used so far (for task with multiple contents ...
	public Infos &#39; element or connection
	public Roles &#39; roles of GLOBAL_User in context
	public Tasks &#39; task to perform
	public Views &#39; View to perform the task in (could be new workarea ...)	

	public model
    public modelView
    public inst
    public instView
    public inheritance
    
    	&#39;Used for keeping an old configuration that may need to be restored later:
	private oInfo 
	private oRole 
	private oTask
	private oView 
	private oInfos 
	private oRoles 
	private oTasks 
	private oViews
	private oinst
    private oinstView
    
    private proj &#39; hold the current project, which should be a task, that has links to spaces for storing IRTV elements, distinguished by names
	&#39; establishIRTVContext should be called prior to this one to get the right context...
	public property Get Project
	    if not isEnabled(proj) then
	        if isEnabled(Task) then &#39; find project from the surrounding tasks
	            set proj = getRelatedProject(Task)
	            if Global_InformationManager.isTemplate(proj) then set proj = nothing
	        end if
	        if isEnabled(Info) and not isEnabled(proj) then
	            set proj = getRelatedProject(Info)
	            if Global_InformationManager.isTemplate(proj) then set proj = nothing
	        end if
	        if isEnabled(View) and not isEnabled(proj) then
	            set proj = getRelatedProject(View)
	            if Global_InformationManager.isTemplate(proj) then set proj = nothing
	        end if
	        if isEnabled(Role) and not isEnabled(proj) then
	            set proj = getRelatedProject(Role)
	            if Global_InformationManager.isTemplate(proj) then set proj = nothing
	        end if
	        dim p
	        set p = ParentTask
	        if isEnabled (p) then
	            set proj = getRelatedProject(p)
	            if Global_InformationManager.isTemplate(proj) then set proj = nothing
	        end if
	    end if
	    set Project = proj
	end property
	
    public property Set Project(p)
	   set proj = p
	end property

	private function getRelatedProject(o)
	    dim s, t
	    set getRelatedProject = Nothing
	    if not isEnabled(o) then exit function
	    if Global_InformationManager.isType(o, TaskType) then
	        set t = o
	        do while isEnabled(t)
	            if Global_InformationManager.isType(t, ProjectType) then
	               set getRelatedProject = t
	               exit function
	            end if
	            set t = t.parent
	        loop
	    end if
        for each s in Global_InformationManager.getAllNeighbours(o, &#34;&#34;, ProjectType, 1) &#39;check incoming relationships from a project
            set getRelatedProject = s
            exit function
        next
	    if isEnabled(o.parent) then
	       if not o.parent.uri = o.uri then
	           set getRelatedProject = getRelatedProject(o.parent)
	           if isEnabled(getRelatedProject) then exit function
	       end if
	    end if
	    &#39;for each s in Global_InformationManager.getAllNeighbours(o, &#34;&#34;, GLOBAL_Type_EkaHasMember , 1) &#39;check through parents
        &#39;   set getRelatedProject = getRelatedProject(s.origin)
	    &#39;   if isEnabled(getRelatedProject) then exit function
        &#39;next
	end function

	public function getAllProjects()
	    dim t &#39;,list, s, crit
	    set getAllProjects = metis.newInstanceList()
	    &#39;set crit = metis.findCriteria(&#34;http://xml.activeknowledgemodeling.com/cvw/operations/criteria.kmd#_002asrl00qa45pvmefgs&#34;)
	    &#39;set list = model.views
	    &#39;for each s in GLOBAL_ConfigModel.views
	    &#39;    call list.addLast(s)
	    &#39;next
	    &#39;crit.setScope(list)
        &#39;set list = model.runCriteria(crit)
        for each t in model.allParts 
            if Global_InformationManager.isType(t, ProjectType) then call getAllProjects.addLast(t)
        next
	end function
		
    &#39; establishIRTVContext should be called prior to this one to get the right context...
	public property get ParentTask
	    dim s, t
	    dim workarea, v
	    set v = view
	    if isValid(instview) then
            if instview.instance.uri = inst.uri and not isInMenu(instview) then &#39; clicked in existing workarea?
               set workarea = getWorkarea(instview)
               if isEnabled(workarea) then
                  set v = workarea.instance  
               end if
            end if 
        end if
	    if isEnabled(v) then
	        if not Global_InformationManager.isTemplate(v) then &#39; look for task related to the view
	            for each s in Global_InformationManager.getAllNeighbours(v, &#34;&#34;, TVType, 1)
	                set ParentTask = s.origin
	                exit property
	            next
	            if isEnabled(workarea) then
	                for each t in workarea.children
                        for each s in Global_InformationManager.getAllNeighbours(t.instance, &#34;&#34;, TVType, 1)
                            set ParentTask = s.origin
                            exit property
                        next
	                next
	            end if
	            &#39;for each t in v.parts
	            &#39;    for each s in Global_InformationManager.getAllNeighbours(t, &#34;&#34;, TVType, 1)
	            &#39;        set ParentTask = s.origin
	            &#39;        exit property
	            &#39;    next
	            &#39;next
	            set ParentTask = getTask(v, Role) &#39; default task for the role on the view ...
	            if isEnabled(ParentTask) and not Global_InformationManager.isTemplate(ParentTask) then exit property &#39; concrete
            end if
	    end if
	    set ParentTask = getTask(Info, Role) &#39; default task for the role on the element ...
	    if isEnabled(ParentTask) and not Global_InformationManager.isTemplate(ParentTask) then exit property &#39; concrete
	    set ParentTask = proj &#39; if all else fails, at least make it part of the right project. Use proj to avoid endless loop recursion project-parenttask
	end property
	
	
	&#39; returns all tasks associated with the IRTV dimensions of the config, for e.g. toolbars in workareas
	&#39; establishIRTVContext should be called prior to this one to get the right context...
	public function getTasks()
	    dim o, t, removed
	    &#39;if isEnabled(Config.Tasks) then
	    &#39;    set getTasks = Config.Tasks
	    &#39;else
	        set getTasks = metis.newInstanceList()
	        set removed = metis.newInstanceList()
	    &#39;end if
	    if isEnabled(Task) then &#39; all subtasks of the current task
	        &#39;for each t in Global_InformationManager.getParts(Task)
	        &#39;    if Global_InformationManager.isType(t, TaskType) and not Global_TaskManager.isRepetition(task, t) and not getTasks.contains(t) then call getTasks.addLast(t)
	        &#39;next
	        &#39;for each o in inheritance.supers(Task) 
	        &#39;    for each t in Global_InformationManager.getParts(o)
	        &#39;        if Global_InformationManager.isType(t, TaskType) and not Global_TaskManager.isRepetition(task, t) and not getTasks.contains(t) then call getTasks.addLast(t)
	        &#39;    next
	        &#39;next
	        &#39; tasks that work on the task ...
	        for each t in Global_InformationManager.getAllNeighbours(Task, &#34;&#34;,  RemoveType, 0)
                if not removed.contains(t.target) then call removed.addLast(t.target)
            next
      &#39;      for each t in Global_InformationManager.getAllNeighbours(Task, &#34;&#34;,  TIType, 1)
      &#39;          if Global_InformationManager.isType(t.origin, TaskType) and not getTasks.contains(t.origin) and not removed.contains(t.origin) then call getTasks.addLast(t.origin)
      &#39;      next
	        for each o in inheritance.supers(Task) 
	            for each t in Global_InformationManager.getAllNeighbours(o, &#34;&#34;,  RemoveType, 0)
                    if not removed.contains(t.target) then call removed.addLast(t.target)
                next
	   &#39;         for each t in Global_InformationManager.getAllNeighbours(o, &#34;&#34;,  TIType, 1)
	   &#39;             if Global_InformationManager.isType(t.origin, TaskType) and not getTasks.contains(t.origin) and not removed.contains(t.origin) then call getTasks.addLast(t.origin)
	   &#39;         next
	        next
	    end if
	    &#39;if isEnabled(Info) then &#39; all tasks that work on the given info element
	    &#39;	if not Global_InformationManager.isType(Info, Global_ViewManager.QueryType) then
	    &#39;        for each t in Global_InformationManager.getAllNeighbours(Info, &#34;&#34;,  TIType, 1)
	    &#39;            if Global_InformationManager.isType(t.origin, TaskType) and not getTasks.contains(t.origin) then call getTasks.addLast(t.origin)
	    &#39;        next
	    &#39;    end if
	    &#39;    for each o in inheritance.supers(Info) 
	    &#39;    	if not Global_InformationManager.isType(o, Global_ViewManager.QueryType) then
	    &#39;            for each t in Global_InformationManager.getAllNeighbours(o, &#34;&#34;,  TIType, 1)
	    &#39;                if Global_InformationManager.isType(t.origin, TaskType) and not getTasks.contains(t.origin) then call getTasks.addLast(t.origin)
	    &#39;            next
	    &#39;        end if
	    &#39;    next
	    &#39;end if
	    &#39;dim wa
	    &#39;set wa = getWorkarea(instview)
	    &#39;if isEnabled(wa) and wa.children.cut &#62; 0 then
	    &#39;    set wa = wa.children(wa.children.count).instance
	    &#39;    
	    &#39;end if
	    dim isquery
	    if isEnabled(View) then &#39; all tasks that work on the given view element
            isquery = Global_InformationManager.isType(View, Global_ViewManager.QueryType)
            for each t in Global_InformationManager.getAllNeighbours(View, &#34;&#34;,  RemoveType, 0)
                if not removed.contains(t.target) then call removed.addLast(t.target)
            next
            for each t in Global_InformationManager.getParts(View)
                if t.parent.uri &#60;&#62; view.uri or not isQuery then
                    if Global_InformationManager.isType(t, TaskType) and not getTasks.contains(t) and not removed.contains(t) then call getTasks.addLast(t)
                end if
            next
	        for each o in inheritance.supers(View) 
	            isquery = Global_InformationManager.isType(o, Global_ViewManager.QueryType)
	        	if not Global_InformationManager.isType(o, Global_ViewManager.QueryType) then 
	        	    for each t in Global_InformationManager.getAllNeighbours(o, &#34;&#34;,  RemoveType, 0)
                        if not removed.contains(t.target) then call removed.addLast(t.target)
                    next       
	                for each t in Global_InformationManager.getParts(o)
	                    if t.parent.uri &#60;&#62; o.uri or not isQuery then
	                        if Global_InformationManager.isType(t, TaskType) and not getTasks.contains(t) and not removed.contains(t) then call getTasks.addLast(t)
	                    end if
	                next
	            end if
	        next
	    end if
	    &#39; filter concrete tasks by state
	    dim i , taskuri
	    i = 1
	    if isEnabled(task) then 
	        taskuri = Task.uri 
	    else
	        taskuri = &#34;&#34;
	    end if
	    do while i &#60;= getTasks.count
	        set t = getTasks.item(i)
	        if (not Global_InformationManager.isTemplate(t)) and (not Global_InformationManager.isGlobal(t)) then
	            o = t.getNamedStringValue(Global_TaskManager.StatusProp)
	            if (o &#60;&#62; &#34;Ongoing&#34; and o &#60;&#62; &#34;Ready&#34;) and not (Global_TaskManager.isRepetitive(t) and o &#60;&#62; &#34;Completed&#34; and o &#60;&#62; &#34;Terminated&#34;) then
	                call getTasks.removeAt(i)
	            elseif t.uri = taskuri then
	                call getTasks.removeAt(i)
	            elseif t.parent.uri = Global_ViewManager.QueryType.uri then 
	                call getTasks.removeAt(i)
	            else
	                i = i + 1
	            end if
	        else
	            i = i + 1
	        end if
	    loop
	    &#39;todo: filter according to current Role/Roles
	end function


    &#39; clears the caches for object types  that each window deals with ...
	public sub resetCaches()
		&#39;set GLOBAL_RelTypesCache = Nothing
		&#39;set GLOBAL_RelTypesCache = CreateObject(&#34;Scripting.Dictionary&#34;)
		set GLOBAL_ObjectTypesCache = Nothing
		set GLOBAL_ObjectTypesCache = CreateObject(&#34;Scripting.Dictionary&#34;)
	end sub

	&#39; returns all info types associated with the view, for e.g. the new service in toolbars in workareas
	&#39; the return is an arraylist of types.
	public function getCurrentObjectTypes(aView, languageCont, includeInherited)
	    dim includeSubTypes
        dim contextInst, contextView
        if isValid(Global_Context.Infos) then
            &#39; Special case
            if Global_Context.Infos.count = 1 then
                set contextInst = Global_Context.infos(1)
                &#39;if contextInst.type.inherits(Global_Context.ViewType) then
                    if contextInst.views.count = 1 then 
                        set contextView = contextInst.views(1)
                        if GLOBAL_ObjectTypesCache.Exists(contextView.uri) then
                            set getCurrentObjectTypes = GLOBAL_ObjectTypesCache.Item(contextView.uri)
                            exit function
                        end if
                    end if
                &#39;end if
            end if
        end if
	    if not isEnabled(contextView) and GLOBAL_ObjectTypesCache.Exists(aView.uri) then
	        set getCurrentObjectTypes = GLOBAL_ObjectTypesCache.Item(aView.uri)
	        exit function
	    end if
	    dim tlist
	    set tlist = metis.newInstanceList()
	    dim v, o, s, t, usesContextInstance
	    if isEnabled(aView) then
            for each o in aView.parts &#39;v.children
                if not o.isRelationship() then
                    if not tlist.contains(o.type) then call tlist.addlast(o.type)
                    for each s in getCurrentObjectTypes(o, languageCont, false) &#39; recursive scan for parts
                        if not tlist.contains(s) then
                            call tlist.addlast(s)
                            for each t in addSubTypes(s, languageCont)
                                call tlist.addlast(t)
                            next
                        end if
                    next
                end if
            next
	        if includeInherited then
	            for each s in inheritance.supersUntilRoot(aView, Global_ViewManager.QueryType) &#39;ViewType)&#39;
                    for each t in getCurrentObjectTypes(s, languageCont, false) &#39; recursive scan for parts
                        if not tlist.contains(t) then
                            dim u
                            call tlist.addlast(t)
                            for each u in addSubTypes(t, languageCont)
                                call tlist.addlast(u)
                            next
                        end if
                    next
	            next
	        end if
	    end if
	    if tlist.count = 0 then
            set getCurrentObjectTypes = tlist
            exit function
        end if
	    &#39; filter out any contextinstance type
        dim wa, cntxtType
        set wa = Nothing
        if aView.views.count &#62; 0 then
            set wa = getWorkarea(aView.views(1))
        end if
        if isValid(wa) then
	       usesContextInstance = Global_InformationManager.parameters.getValueForObject(aView, &#34;IsContextInstance&#34;,  o)
	       if not usesContextInstance then usesContextInstance = Global_InformationManager.parameters.getValueFromSupers(aView, &#34;IsContextInstance&#34;,  o)
            if usesContextInstance then
                dim rel, rels
                set rels = Global_InformationManager.getAllNeighbours(aView, &#34;&#34;, GLOBAL_Type_EkaEquals ,0)
                if rels.count = 0 then
                    usesContextInstance = false
                else
                    set cntxtType = rels(1).target.type
                end if
            end if
        end if
        if usesContextInstance then
            dim i
            i = 1
            for each t in tlist
                if t.uri = cntxtType.uri then
                    call tlist.removeAt(i)
                    exit for
                else
                    i = i + 1
                end if
            next
        end if
        on error resume next
        set getCurrentObjectTypes = tlist
        if isEnabled(contextView) then
            &#39;call GLOBAL_ObjectTypesCache.add(contextView.uri, getCurrentObjectTypes)
        else
            call GLOBAL_ObjectTypesCache.add(aView.uri, getCurrentObjectTypes)
        end if
	end function

    private function addSubTypes(t, languageCont)
        dim stlist
        set stlist = metis.newInstanceList
        if includesSubTypes(t, languageCont) then
            dim st, subTypes
            set subTypes = t.type.subTypes
            for each st in subTypes
                if not stlist.contains(st) then call stlist.addlast(st)
            next
        end if
        set addSubTypes = stlist
    end function

    public function includesSubTypes(t, languageCont)
        dim part, parts, prop, props
        includesSubTypes = false
        set parts = languageCont.parts
        for each part in parts
            if part.type.uri = t.uri then
                set props = Global_InformationManager.getAllNeighbours(part, &#34;AllowCreateSubtypes&#34;,  GLOBAL_Type_EkaProperty, 0)
                for each prop in props
                    includesSubTypes = true
                    exit function
                next
            end if
        next
    end function

	&#39; returns all relationship types associated with the view, for e.g. the new service in toolbars in workareas
	&#39; the return is an arraylist of types.
	public function getCurrentRelationshipTypes(aView, fromType, toType, includeInherited)
	    set getCurrentRelationshipTypes = metis.newInstanceList()
	    dim v, o, s, t, include, ctypeuri, par
	    if isEnabled(aView) then
	        ctypeuri = &#34;http://xml.activeknowledgemodeling.com/cvw/languages/has_criteria.kmd#has_Criteria&#34;
            for each o in aView.parts
                if o.isRelationship() then &#39; this never happens, relshipviews are not children!
                    if ((not isValid(fromType)) or fromType.inherits(o.origin.type)) and ((not isValid(toType)) or toType.inherits(o.target.type))  then
                        if not getCurrentRelationshipTypes.contains(o.type) then call getCurrentRelationshipTypes.addlast(o.type)
                    end if
                else
                    &#39; scan all relationships to/from children objects
                    for each s in Global_InformationManager.getAllNeighbours(o, &#34;&#34;,  RootRelType, 0)
                        include = false
                        if not isValid(fromType) then
                            if not isValid(toType) then 
                                include = true
                            elseif toType.inherits(s.target.type) then 
                                include = true
                            end if
                        elseif fromType.inherits(s.origin.type) then
                           if not isValid(toType) then 
                                include = true
                            elseif toType.inherits(s.target.type) then 
                                set par = s.target.parent &#39; inside aView?
                                do while isValid(par) 
                                    if par.uri = aView.uri then exit do
                                    set par = par.parent
                                loop
                                if isValid(par) then include = true
                            end if                      
                        end if
                        if include and not getCurrentRelationshipTypes.contains(s.type) and s.type.uri &#60;&#62; ctypeuri then 
                            call getCurrentRelationshipTypes.addlast(s.type)
                        end if
                    next
                    for each s in Global_InformationManager.getAllNeighbours(o, &#34;&#34;,  RootRelType, 1) 
                        include = false
                        if not isValid(fromType) then
                            if not isValid(toType) then 
                                include = true
                            elseif toType.inherits(s.target.type) then 
                                include = true
                            end if
                        elseif fromType.inherits(s.origin.type) then
                           if not isValid(toType) then 
                                include = true
                            elseif toType.inherits(s.target.type) then 
                                set par = s.origin.parent &#39; inside aView?
                                do while isValid(par) 
                                    if par.uri = aView.uri then exit do
                                    set par = par.parent
                                loop
                                if isValid(par) then include = true
                            end if                      
                        end if
                        if include and not getCurrentRelationshipTypes.contains(s.type) and s.type.uri &#60;&#62; ctypeuri  then 
                            call getCurrentRelationshipTypes.addlast(s.type)
                        end if                    
                    next
                    for each s in getCurrentRelationshipTypes(o, fromType, toType, false) &#39;  scan for relships inside parts
                        if not getCurrentRelationshipTypes.contains(s) then call getCurrentRelationshipTypes.addlast(s)
                    next
                end if
            next
	        if includeInherited then
	            for each s in inheritance.supersUntilRoot(aView, Global_ViewManager.QueryType)               
                    &#39;for each o in s.parts
                    &#39;    if o.isRelationship() then
                    &#39;        if ((not isValid(fromType)) or fromType.inherits(o.origin.type)) and ((not isValid(toType)) or toType.inherits(o.target.type))  then
                    &#39;            if not getCurrentRelationshipTypes.contains(o.type) then call getCurrentRelationshipTypes.addlast(o.type)
                    &#39;        end if
                    &#39;    else
                            for each t in getCurrentRelationshipTypes(s, fromType, toType, false) &#39; scan for relships inside parts
                                if not getCurrentRelationshipTypes.contains(t) then call getCurrentRelationshipTypes.addlast(t)
                            next
                    &#39;    end if
                    &#39;next
	            next
	        end if
	    end if
	end function
	
    public function getEndpointType(aView, objecttype, reltype, direction)
        dim v, o, s, t
	    if not isEnabled(aView) then exit function
        for each o in aView.parts
                    &#39; scan all relationships to/from children objects
            if objecttype.inherits(o.type) then
                for each s in Global_InformationManager.getAllNeighbours(o, &#34;&#34;,  RootRelType, direction)
                    if s.type.uri = reltype.uri then 
                        if direction = 0 then
                            set getEndpointType = s.target.type
                        else
                            set getEndpointType = s.origin.type
                        end if
                        exit function
                    end if
                next
            end if
        next 
        for each v in inheritance.supersUntilRoot(aView, Global_ViewManager.QueryType)  &#39; inheritance
            for each o in v.parts &#39; scan all relationships to/from children objects
                if objecttype.inherits(o.type) then
                    for each s in Global_InformationManager.getAllNeighbours(o, &#34;&#34;,  RootRelType, direction)
                        if s.type.uri = reltype.uri then 
                            if direction = 0 then
                                set getEndpointType = s.target.type
                            else
                                set getEndpointType = s.origin.type
                            end if
                            exit function
                        end if
                    next
                end if
            next 
        next      
    end function
	
	&#39; ---- Sets the IRTV elements of the current context. The current IRTV element should
	public sub establishIRTVContext(current, recursive)
	
        if not isValid(GLOBAL_User) then
			set GLOBAL_User = findUser()
        end if
        
		dim cur, inherits, o, i
		
	    if recursive then
	        set Info = Nothing 
            set Role = Nothing
            set Task = Nothing
            set View = Nothing
            set Infos = Nothing 
            set Roles = Nothing
            set Tasks = Nothing
            set Views = Nothing
        end if        
        
        set cur = current
        if (not Global_InformationManager.isType(cur, TaskType)) and (not Global_InformationManager.isType(cur, ViewType)) then
            set cur = getEqualObject(current)
            if cur.type.inherits(Global_ViewManager.ButtonType) then set cur = current &#39; to avoid errors
        end if

        if Global_InformationManager.isType(cur, TaskType) then
			if not isValid(Task) then
				set Task = cur
			end if
			configureFromTask(cur)
		elseif Global_InformationManager.isType(cur, ViewType) then
			if not isValid(View) then
				set View = cur
			end if
			configureFromView(cur)
		elseif Global_InformationManager.isType(cur, RoleType) then
			if not isValid(Role) then
				set Role = cur
			end if
			configureFromRole(cur)
		else &#39; assume the current object is information
			if not isValid(Info) then
				set Info = cur
			end if
			configureFromInfo(cur)
        end if
        &#39;msgbox &#34;Configuration without inheritance completed.&#34;
        if not recursive then
			exit sub
		end if

		               
        &#39;1st set everything explicitly related to the trigger element (direct parameters)
        if isEnabled(instview) then 
            if instview.instance.uri = inst.uri then call checkRelated(current)
            
	        &#39; next check if the click has occured inside a workarea that is linked to an object...
            dim workarea, v
            if instview.instance.uri = inst.uri and not isInMenu(instview) then &#39; clicked in existing workarea?
                set workarea = getWorkarea(instview)
                if isEnabled(workarea) then
                    if not isEnabled (view) then set View = workarea.instance    
                
                    set o = getEqualObject(workarea.instance)
                    if not (o.uri = workarea.instance.uri) then
                        if Global_InformationManager.isType(o, TaskType) then &#39;called task in view, may result in opening related view
                            if not isEnabled (Task) then
                                set Task = o
                            elseif Global_InformationManager.isType(Info, TaskType)  then &#39; looking for a task ...
                                set Info = o
                            end if
                        else
                            set Info = o
                        end if
                        call checkRelated(o) &#39; set elements based on the chosen workarea
                    end if
                    for each v in workarea.children &#39; often instance context is linked to child ...
                        set o = getEqualObject(v.instance)
                        if not (o.uri = v.instance.uri) then
                            if Global_InformationManager.isType(o, TaskType) then &#39;called task in view, may result in opening related view
                                if not isEnabled (Task) then
                                    set Task = o
                                elseif Global_InformationManager.isType(Info, TaskType)  then &#39; looking for a task ...
                                    set Info = o
                                end if
                            else
                                set Info = o
                            end if
                            call checkRelated(o)
                        end if
                    next
                    if metis.selection.count &#62; 0 then &#39; keep the selected objects in the Infos list
                        set Infos = metis.newInstanceList()
                        for each o in metis.selection
                            &#39;if Infos.count &#62; 0 then
                            if typename(o) = &#34;IMetisInstanceView&#34; then  &#39; for some reason, selection may contain types or typenames!!!
                                if not Infos.contains(o.instance) then call Infos.addLast (o.instance)
                            else
                                if not Infos.contains(o) then call Infos.addLast (o)
                            end if
                            &#39;end if
                        next
                    end if
                end if
            end if
        end if
        
        if not (isValid(Info) and isValid(Role) and isValid(Task) and isValid(View)) then &#39; use inherited values
			set inherits = Nothing
			if isValid(Info) then 
				if cur.uri = Info.uri then
					set inherits = inheritance.supers(Info)
				end if
			end if
			if isValid(Role) then 
				if  cur.uri = Role.uri then
					set inherits = inheritance.supersUntilRoot(Role, RoleType)
				end if
			end if
			if isValid(Task) then 
				if  cur.uri = Task.uri then
					set inherits = inheritance.supersUntilRoot(Task, TaskType)
				end if
			end if
			if isValid(View) then 
				if  cur.uri = View.uri then
					set inherits = inheritance.supersUntilRoot(View, ViewType)
				end if
			end if
			i = 1
			on error resume next        
            dim msg
            &#39;msg = &#34;Inheriting from &#34; &#38;vbcrlf
			if isValid(inherits) then 
				while (i &#60;= inherits.count) and not (isValid(Info) and isValid(Role) and isValid(Task) and isValid(View))
					set o = inherits(i)
                    &#39;msg = msg &#38; o.title&#38;&#34; (&#34;&#38;o.uri&#38;&#34;), (&#34;&#38;i&#38;&#34; of &#34;&#38;inherits.count&#38;&#34;)&#34; &#38;vbcrlf
					if not Global_InformationManager.isNothing(o) then call establishIRTVContext(o, false)
					i = i +1
				wend
                &#39;msgbox msg
			end if
			if isEnabled(Task) then &#39; set project from the tasks
	            set cur = getRelatedProject(Task)
	            if isEnabled(cur) then set Project = cur
	        end if
        end if
	end sub 

	
	private sub checkRelated(current)
	    dim o
        for each o in current.getNeighbourRelationships(0, EqualsType)
            if Global_InformationManager.isType(o.target, TaskType) then
                if not isValid(Task) then 
			        set Task = o.target
			    elseif inheritance.supers(o.target).contains(Task) then &#39; more specific value given
			        set Task = o.target
			    end if
            end if
            if Global_InformationManager.isType(o.target, RoleType) then
                if not isValid(Role) then 
			        set Role = o.target
			    elseif inheritance.supers(o.target).contains(Role) then &#39; more specific value given
			        set Role = o.target
			    end if
            end if
			if Global_InformationManager.isType(o.target, ViewType) then 
                if not isValid(View) then 
			        set View = o.target
			    elseif inheritance.supers(o.target).contains(View) then &#39; more specific value given
			        set View = o.target
			    end if
            end if
        next
        for each o in current.getNeighbourRelationships(1, EqualsType)
            if Global_InformationManager.isType(o.origin, TaskType) then
                if not isValid(Task) then 
			        set Task = o.origin
			    elseif inheritance.supers(o.origin).contains(Task) then &#39; more specific value given
			        set Task = o.origin
			    end if
            end if
            if Global_InformationManager.isType(o.origin, RoleType) then 
                if not isValid(Role) then
			        set Role = o.origin
			    elseif inheritance.supers(o.origin).contains(Role) then &#39; more specific value given
			        set Role = o.origin
			    end if
            end if
			if Global_InformationManager.isType(o.origin, ViewType) then
                if not isValid(View) then 
			        set View = o.origin
			    elseif inheritance.supers(o.origin).contains(View) then &#39; more specific value given
			        set View = o.origin
			    end if
            end if
        next
	end sub
	
	
&#39; returns relationship between task and role
	public function getRoleInTask(r, t)
		on error resume next
		set getRoleInTask = Nothing
		if not isValid(t) then
			exit function
		end if
		if not isValid(r) then
			exit function
		end if
		dim inherits, ro
		set inherits = inheritance.supersUntilRoot(r, RoleType)
		for each ro in t.getNeighbourRelationships(1, RTType)
			if r = ro.origin then
				set getRoleInTask = ro
				exit function
			end if
			if inherits.contains(ro.origin) then 
				set getRoleInTask = ro
				exit function
			end if
		next
	end function
	
	public function getRoleOn(r, e)
		on error resume next
		set getRoleOn = Nothing
		if not isValid(e) then
			exit function
		end if
		if not isValid(r) then
			exit function
		end if
		dim inherits, ro
		set inherits = inheritance.supersUntilRoot(r, RoleType)
		for each ro in e.getNeighbourRelationships(1, RIType)
			if r = ro.origin then
				set getRoleOn = ro
				exit function
			end if
			if inherits.contains(ro.origin) then 
				set getRoleOn = ro
				exit function
			end if
		next
	end function

	public function getInfo(e)
		on error resume next
		set getInfo = e
		if not isValid(e) then
			exit function
		end if
		dim ro, temp

		if Global_InformationManager.isType(e, TaskType) then
			set temp = e.getNeighbourRelationships(0, TIType)
			if isValid(temp) then
				if temp.count &#62;= 1 then &#39;handle multiple values later
					if not isEnabled (Infos) then 
					    set Infos = metis.newInstanceList()
				        for each ro in temp
				            call Infos.addLast(ro.target)
				        next
				    end if
					set getInfo = temp(1).target
				end if
			end if
		elseif Global_InformationManager.isType(e, RoleType) then
			set temp = e.getNeighbourRelationships(0, RIType)
			if isValid(temp) then
				if temp.count &#62;= 1 then &#39;handle multiple values later
					if not isEnabled (Infos) then 
					    set Infos = metis.newInstanceList()
				        for each ro in temp
				            call Infos.addLast(ro.target)
				        next 
				    end if
					set getInfo = temp(1).target
				end if
			end if
		&#39;elseif Global_InformationManager.isType(e, ViewType) then
			&#39;set temp = e.getNeighbourRelationships(0, VIType)
			&#39;if isValid(temp) then
			&#39;	if temp.count &#62;= 1 then &#39;handle multiple values later
			&#39;		if not isEnabled (Infos) then 
			&#39;		    set Infos = metis.newInstanceList()
			&#39;	        for each ro in temp
			&#39;	            if not ro.target.parent.uri = e.uri then &#39; mask out query content
			&#39;	                call Infos.addLast(ro.target)
			&#39;	                set getInfo = ro.target
			&#39;	             end if
			&#39;	        next 
			&#39;	    end if
			&#39;	end if
			&#39;end if
		else&#39; assume information object in itself ...
		    set getInfo = e
		end if
	end function
	
	public function getTask(e, r)
		on error resume next
		set getTask = Nothing
		if not isValid(e) then
			exit function
		end if
		dim inherits, ro, typ, rel
	    if isValid(r) then
			set inherits = inheritance.supersUntilRoot(r, RoleType)
	    else 
	        set inherits = metis.newInstanceList()
		end if
		for each rel in e.getNeighbourRelationships(0, ITType) &#39; default task of e
			set getTask = rel.target
			exit function
		next
		
		if Global_InformationManager.isType(e, ViewType) then
			set typ = TVType
		else
			set typ = TIType
		end if
		for each rel in e.getNeighbourRelationships(1, typ) &#39; all tasks linked to e
			if not isValid(r) then
				set getTask = rel.origin
				exit function
			end if
			for each ro in rel.origin.getNeighbourRelationships(1, RTType) &#39; roles linked to the task candidate
				if r = ro.origin then 
					set getTask = rel.origin
					exit function
				end if
				if inherits.contains(ro.origin) then 
					set getTask = rel.origin
					exit function
				end if
			next
		next
	end function
	
	public function getView(e, r, t)
		on error resume next
		set getView = Nothing
		dim temp, ro
		if isValid(e) then
			set temp = e.getNeighbourRelationships(1, VIType)
			if isValid(temp) then
				if temp.count &#62;= 1 then &#39;handle multiple values later
					for each ro in temp
						if Global_InformationManager.isType(ro.origin, ViewType) then
							set getView = ro.origin
							exit function
						end if					
					next
				end if
			end if
		end if
		if isValid(t) then
			set temp = t.getNeighbourRelationships(0, TVType)
			if isValid(temp) then
				if temp.count &#62;= 1 then &#39;handle multiple values later
					for each ro in temp
						if Global_InformationManager.isType(ro.target, ViewType) then
							set getView = ro.target
							exit function
						end if
					next
				end if
			end if
		end if
		if isValid(r) then
			set temp = r.getNeighbourRelationships(0, RVType)
			if isValid(temp) then
				if temp.count &#62;= 1 then &#39;handle multiple values later
					for each ro in temp
						if Global_InformationManager.isType(ro.target, ViewType) then
							set getView = ro.target
							exit function
						end if					
					next
				end if
			end if
		end if	
		if isValid(t) then
			set temp = t.getNeighbourRelationships(1, VIType) &#39; task as info ...
			if isValid(temp) then
				if temp.count &#62;= 1 then &#39;handle multiple values later
					for each ro in temp
						if Global_InformationManager.isType(ro.origin, ViewType) then
							set getView = ro.origin
							exit function
						end if					
					next
				end if
			end if
		end if		
		if isValid(r) then
			set temp = r.getNeighbourRelationships(1, VIType)
			if isValid(temp) then
				if temp.count &#62;= 1 then &#39;handle multiple values later
					for each ro in temp
						if Global_InformationManager.isType(ro.origin, ViewType) then
							set getView = ro.origin
							exit function
						end if
					next
				end if
			end if
		end if	
	end function
	
	&#39; these four subs find IRTV elements based on one of the elements (either current or something inherited)
	public sub configureFromTask(t)
	    if not isValid(View) then
			set View = getView(Info, Role, t)
	    end if
		if not isValid(Role) then
			set Role = getRoleInTask(GLOBAL_User, t)
		end if
		if not isValid(Info) then
			set Info = getInfo(t)
			if isValid(Info) and not isValid(Role) then &#39; user has no role on task, maybe on info?
				set Role = getRoleOn(Info,GLOBAL_User)
			end if
		end if
		if isValid(View) and not isValid(Info) then &#39; View given, not info, use default for view
			set Info = getInfo(View)
			if isValid(Info) and not isValid(Role) then &#39; user has no role on task, maybe on info?
				set Role = getRoleOn(Info,GLOBAL_User)
			end if
		end if
		if isValid(View) and not isValid(Role) then&#39; user has no role on task, maybe on view?
			set Role = getRoleOn(GLOBAL_User,View)
		end if
	end sub
	
	public sub configureFromInfo(i)
		if not isValid(Role) then
			set Role = getRoleOn(GLOBAL_User, i)
		end if
		if not isValid(Task) then
			set Task = getTask(i, GLOBAL_User)
			if isValid(Role) and not isValid(Task) then &#39; no task found for the user, maybe the role provides a default one?
				set Task = getTask(i,Role)
			end if
			if isValid(Task) and not isValid(Role) then &#39; user has no role on info, maybe on task?
				set Role = getRoleInTask(GLOBAL_User,Task)
			end if
		end if
		if not isValid(View) then
			set View = getView(i, Role, Task)
			if isValid(View) and not isValid(Task) then &#39; no task found, maybe the view provides a default one?
				set Task = getTask(View,Role)
				if isValid(Task) and not isValid(Role) then &#39; user has no role on info, maybe on task?
					set Role = getRoleInTask(GLOBAL_User,Task)
				end if
			end if
			if isValid(View) and not isValid(Role) then&#39; user has no role on info or task, maybe on view?
				set Role = getRoleOn(GLOBAL_User,View)
				if isValid(Role) and not isValid(Task) then &#39; no task found for the user, maybe the role provides a default one?
					set Task = getTask(Info,Role)
				end if
			end if	
		end if
	end sub
	
	public sub configureFromRole(r)
		if not isValid(Info) then
			set Info = getInfo(r)
		end if
		if not isValid(Task) then
			set Task = getTask(Info,r)
			if isValid(Task) and not isValid(Info) then &#39; user has no role on task, maybe on info?
				set Info = getInfo(Task)
			end if
		end if
		if not isValid(View) then
			set View = getView(Info,r, Task)
			if isValid(View) and not isValid(Task) then &#39; no task found, maybe the view provides a default one?
				set Task = getTask(View,r)
				if isValid(Task) and not isValid(Info) then &#39; user has no role on task, maybe on info?
					set Info = getInfo(Task)
				end if
			end if
			if isValid(View) and not isValid(Info) then&#39; user has no role on info or task, maybe on view?
				set Info = getInfo(View)
				if isValid(Info) and not isValid(Task) then
					set Task = getTask(Info,r)
				end if
			end if
		end if
	end sub
	
	public sub configureFromView(v)
		if not isValid(Role) then
			set Role = getRoleOn(GLOBAL_User, v)
		end if
		if not isValid(Task) then
			set Task = getTask(v, GLOBAL_User)
			if isValid(Role) and not isValid(Task) then &#39; no task found for the user, maybe the role provides a default one?
				set Task = getTask(v,Role)
			end if
			if isValid(Task) and not isValid(Role) then &#39; user has no role on info, maybe on task?
				set Role = getRoleInTask(GLOBAL_User,Task)
			end if
		end if
		if not isValid(Info) then
			set Info = getInfo(v)
			if isValid(Task) and not isValid(Info) then &#39; no info given from view, maybe from task?
				set Info = getInfo(Task)
			end if
			if isValid(Info) and not isValid(Task) then &#39; no tasl given from view, maybe from info?
				set Task = getTask(Info, GLOBAL_User)
				if isValid(Role) and not isValid(Task) then &#39; no task found for the user, maybe the role provides a default one?
					set Task = getTask(Info,Role)
				end if
			end if
			if isValid(Info) and not isValid(Role) then&#39; user has no role on view or task, maybe on info?
				set Role = getRoleOn(GLOBAL_User,Info)
				if isValid(Role) and not isValid(Task) then &#39; no task given from view, maybe from info?
					set Task = getTask(Info, Role)
				end if
			end if
		end if
	end sub
	
	&#39; Find the current user from the modedl (selecting among available persons) ----
	public function findUser()
		set findUser = selectOneOfType(UserType, &#34;Which user are you?&#34;)
		if not isValid(findUser) then
			set findUser = selectOneOfType(RoleType, &#34;Which role do you play?&#34;)
		end if
	end function

	private function selectOneOfType(aType, question)
		dim o, l
		set l = metis.newInstanceList()
		set selectOneOfType = Nothing
	    for each o in metis.currentModel.findInstances(aType, &#34;&#34;, &#34;&#34;)
			if isValid(o) and (not Global_InformationManager.isTemplate(o)) and (not Global_InformationManager.isGlobal(o)) then
				if len(o.title) &#62; 0 then
					call l.AddLast(o)
				end if
			end if
		next
		if (l.count &#62; 1) then
			set selectOneOfType = selectAmong(question, true, l)
		elseif (l.count = 1) then
			set selectOneOfType = l(1)
		end if
	end function

    public sub storeConfig()
	    set oInfo = Info
	    set oRole = Role
	    set oTask = Task
	    set oView = View
	    set oInfos = Infos
	    set oRoles = Roles
	    set oTasks = Tasks
	    set oViews = Views
	    set oinst = inst
        set oinstView = instView
    end sub
    
    public sub restoreConfig()
    	set inst = oinst
        set instView = oinstView
	    set Info = oInfo
	    set Role = oRole
	    set Task = oTask
	    set View = oView
	    set Infos = oInfos
	    set Roles = oRoles
	    set Tasks = oTasks
	    set Views = oViews
    end sub


&#39;	Moved to global:
&#39; private function selectAmong(tekst, singleselect, list)
&#39;		dim dia, l
&#39;		set selectAmong = Nothing
&#39;		set dia = new CVW_SelectDialog
&#39;		dia.singleSelect = singleselect
&#39;		dia.title = tekst
&#39;		dia.heading = tekst
&#39;		set l = dia.show(list)
&#39;		if isObject(l) and l.count &#62;0 then
&#39;			set selectAmong = l(1)
&#39;		end if
&#39;	end function

    private Sub Class_Initialize
        set Proj = Nothing
        set model           = metis.currentModel
        set modelView       = model.currentModelView
        set inst            = model.currentInstance
        set instView        = modelView.currentInstanceView
        if isValid (GLOBAL_Context) then
			set inheritance = GLOBAL_Context.inheritance
        else 
            set GLOBAL_WorkplaceModel = inst.ownerModel
        	set GLOBAL_Context = me
			set inheritance = new EKA_Inheritance
        end if
        set inheritance.model           = model
		set inheritance.modelView       = modelView
		set inheritance.inst            = inst
		set inheritance.instView        = instView 
		
	    dim r
	    if not isValid(GLOBAL_ViewManager) then &#39; first time initialisation
		    set r = new CVW_ViewManager
		end if 
	    if not isValid(GLOBAL_EventManager) then &#39; first time initialisation
		    set r = new CVW_EventManager
		end if  
	    if not isValid(GLOBAL_InformationManager) then &#39; first time initialisation
		    set r = new EKA_InformationManager
		end if 
	    if not isValid(GLOBAL_TaskManager) then &#39; first time initialisation
		    set r = new CVW_TaskManager
		    set r.config = me
		end if  	
        if not isValid(GLOBAL_RoleManager) then &#39; first time initialisation
		    set r = new CVW_RoleManager
		end if 	
		
  set workspace = new CVW_Workspace
  call workspace.build
   
        set InfoType  = metis.findType(&#34;http://xml.activeknowledgemodeling.com/eka/languages/eka_object.kmd#ObjType_EKA:Object_UUID&#34;)
        set RoleType  = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/role_actor.kmd#Role_Actor&#34;)
        set TaskType  = metis.findType(&#34;http://xml.activeknowledgemodeling.com/eka/languages/eka_task.kmd#ekaTask&#34;)
        set ProjectType     = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/project.kmd#AKM_Project&#34;)
        set ViewType  = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/view_irtv.kmd#View_IRTV&#34;)
        set UserType  = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/person.kmd#IRTV:Person&#34;)
        set ScriptType      = metis.findType(&#34;http://xml.activeknowledgemodeling.com/rule/languages/script.kmd#Script&#34;)
        set RIType   = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/uses.kmd#IRTV:Uses&#34;)
		set RTType			= metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/participates.kmd#IRTV:Participates&#34;)
		set RVType			= metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/applies_view.kmd#IRTV:Applies&#34;)
		set TVType			= RVType
		set TIType			= metis.findType(&#34;http://xml.activeknowledgemodeling.com/eka/languages/eka_relships.kmd#works_on&#34;)
		set VIType			= metis.findType(&#34;http://xml.activeknowledgemodeling.com/eka/languages/eka_relships.kmd#RelType_EKA:Member_UUID&#34;)
		set ITType			= metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/hasdefault.kmd#IRTV:Has_default&#34;)
		set RootRelType		= metis.findType(&#34;http://xml.activeknowledgemodeling.com/eka/languages/eka_relships.kmd#RelType_EKA:Relationship_UUID&#34;)
        set EqualsType      = metis.findType(&#34;http://xml.activeknowledgemodeling.com/eka/languages/eka_relships.kmd#RelType_EKA:Equals_UUID&#34;)
        set EditPropertiesMethod = metis.findMethod(&#34;http://xml.activeknowledgemodeling.com/eka/operations/virtual_methods.kmd#Method_EKA:editProperties_UUID&#34;)
        set RemoveType = metis.findType(&#34;http://xml.activeknowledgemodeling.com/eka/languages/eka_does_not_include.kmd#Does_not_include&#34;)
        call resetCaches()
        call establishIRTVContext(inst, true)
    end sub
End Class

</string>
  </valueset>
 </object>

 <object id="_002aso001908jt4cfilt">
  <valueset size="10" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="../languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Class CVW_ViewManager</string>
   <string name="description"></string>
   <integer name="dbms-admin.commitFlag">0</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20080507 092147987</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="comments"></string>
   <string name="script">option explicit
dim GLOBAL_ViewManager

Class CVW_ViewManager
 private currentConfig
 private params
 private inh
 
 Private model
    Private modelView
    Private inst
    Private instView
    private existingWorkarea
    public WorkAreaType
    public ButtonType
    public QueryType
    public HasScopeType
    public HasViewStrategyType

    public IncludeAllProperty
    public IncludeGlobalsProperty
    public IncludeTemplatesProperty
    public showQueue &#39; keeps the elements that are to be shown in a view not yet created

&#39;---------------------------------------------------------------------------------------------------
	Public Property Get config        &#39;IRTV_Config
		if not isValid(currentConfig) then  &#39; if internal not valid, then create it ...
            if not isObject(GLOBAL_Context) then &#39; first time initialisation
                set currentConfig = new IRTV_Config
            else
		        set currentConfig = GLOBAL_Context &#39;ne
		    end if
			set inheritance = currentConfig.inheritance
		end if
        set config = currentConfig
    End Property

    Public Property Set config(obj)
        if isValid(obj) then
            set currentConfig = obj
            set inheritance = currentConfig.inheritance
            set model           = currentConfig.model
			set modelView       = currentConfig.modelView
			set inst            = currentConfig.inst
			set instView        = currentConfig.instView
        end if
    End Property

&#39;---------------------------------------------------------------------------------------------------
    Private Property Get inheritance   &#39;EKA_Inheritance
		if isValid(inh) then  &#39; if internal not valid, then create it ...
			set inheritance = inh
		else
			set currentConfig  = new IRTV_Config
			set inh = currentConfig.inheritance
			set inheritance = inh
		end if
    End Property

    Private Property Set inheritance(obj)
        if isValid(obj) then
            set inh = obj
        end if
    End Property

&#39;---------------------------------------------------------------------------------------------------
    Public Property Get parameters
		if not isValid(params) then
			set params = new CVW_ParameterManager
			set params.config = config
		end if
        set parameters = params
    End Property

    Public Property Set parameters(obj)
        if isValid(obj) then
			set params = obj
            set config = params.config
            set inheritance = config.inheritance
		end if
    End Property


&#39;---------------------------------------------------------------------------------------------------
    &#39; called with two instances as parameters
    public sub showObject(view, object)
        set existingWorkarea = view
        dim v, parentView
        on error resume next
        if object.isRelationship() then
            call showRelationship(view, object)
            exit sub
        end if
        for each v in view.views
            if isValid(viewExists(object, v)) then exit sub
        next
        if Global_InformationManager.isType(view, QueryType) or Global_InformationManager.isTemplate(view) then &#39; not concrete
             call showQueue.addLast(object)
        elseif Global_InformationManager.isType(view, WorkareaType) then
            dim cvwObjView, cvwViewStrategy, workWindow
            dim objectAspectRatio, views
            if view.views.count = 0 then
                exit sub
            elseif view.views.count = 1 then
                set workWindow = view.views(1)
            else &#39; more than one, find one inside the workplace view
                set views = config.modelview.findInstanceViews(view)
                if views.count &#62; 0 then
                    set workWindow = views(1)
                else &#39; just pick one
                    set workWindow = view.views(1)
                end if
            end if
            set cvwObjView = new CVW_ObjectView
            cvwObjView.addMode = true
            set cvwViewStrategy = cvwObjView.findViewStrategy(workWindow.instance)
            objectAspectRatio = cvwViewStrategy.objectAspectRatio
            &#39;if isValid(cvwViewStrategy) then
            &#39;    if cvwViewStrategy.viewAsHierarchy then
            &#39;        if Global_Context.Infos.count = 1 then
            &#39;            set parentView = viewExists(Global_Context.Infos(1), workWindow)
            &#39;        end if
            &#39;    end if
            &#39;end if
            if not isValid(parentView) then
                set parentView = findParentView(workWindow, object)
            end if
            parentView.open
            set v = cvwObjView.create(workWindow, parentView, object, objectAspectRatio)
            &#39; HDJ - hack
            if parentView.children.count &#62; 1 then &#39; override size and text scale, they are set wrongly above
                call v.scale(parentView.children(1).ScaleFactor / v.ScaleFactor)
                v.absTextScale = parentView.children(1).absTextScale
            end if
            call metis.doLayout(parentView)
        else
            call showQueue.addLast(object)
        end if
        &#39;msgbox(&#34;Adding object to view &#34; &#38; object.title)
        &#39;msgbox(&#34;Added to view &#34; &#38; view.title)
    end sub

&#39;---------------------------------------------------------------------------------------------------
    public function findParentView(view, object)
        set findParentView = view
        dim c, v
        for each c in view.children
            if Global_InformationManager.getParts(c.instance).contains(object) then
                set findParentView = c
                exit function
            else &#39;recursive scan
                set v = findParentView(c, object)
                if v.uri &#60;&#62; c.uri then
                    set findParentView = v
                    exit function &#39; found ...
                end if
            end if
        next
    end function

&#39;---------------------------------------------------------------------------------------------------
    &#39; called with two instances as parameters
    public sub showRelationship(wObject, rel)
        on error resume next
        set existingWorkarea = wObject
        &#39;msgbox(&#34;Adding object to view &#34; &#38; rel.type.title)
        &#39;msgbox(&#34;Added to view &#34; &#38; wObject.title)
        if Global_InformationManager.isType(wObject, QueryType) or Global_InformationManager.isTemplate(wObject) then &#39; not concrete
             call showQueue.addLast(rel)
        elseif Global_InformationManager.isType(wObject, WorkareaType) then
            dim originView, targetView
            dim cvwViewStrategy, strategyCont
            dim parentView, v
            for each v in wObject.views
                if isInView(v, config.modelview) then
                    set parentView = v
                    exit for
                end if
            next
            set cvwViewStrategy = new CVW_ViewStrategy
            call cvwViewStrategy.findViewStrategy(wObject)
            if not cvwViewStrategy.isHierarchyRel(rel) then
                for each originView in config.modelview.findInstanceViews(rel.origin)
                    if isInView(originView, parentView) then
                        for each targetView in config.modelview.findInstanceViews(rel.target)
                            if isInView(targetView, parentView) then
                                dim done
                                if isValid(cvwViewStrategy) then
                                    done = cvwViewStrategy.isHierarchyRelView(rel, originView, targetView)
                                    if done then set targetView.parent = originView
                                end if
                                if targetView.parent.uri = originView.uri then
                                    done = true
                                    set targetView.parent = originView
                                elseif originView.parent.uri = targetView.uri then
                                    done = true
                                end if
                                if not done then
                                    call config.modelview.newRelationshipView(rel, originView, targetView)
                                end if
                            end if
                        next
                    end if
                next
            else
                for each originView in config.modelview.findInstanceViews(rel.origin)
                    if isInView(originView, parentView) then
                        for each targetView in config.modelview.findInstanceViews(rel.target)
                            if isInView(targetView, parentView) then
                                set targetView.parent = originView
                                originView.open
                            end if
                        next
                    end if
                next
            end if
            set cvwViewStrategy = Nothing
        else
            call showQueue.addLast(rel)
        end if
    end sub

&#39;---------------------------------------------------------------------------------------------------
    &#39;called with objectview and instance as parameters
    public sub remove(view, element)
        dim v, i
        i = 1
        do while i &#60;= view.children.count
            set v = view.children.item(i)
            if v.instance.uri = element.uri then
                if element.isRelationship() then
                    config.modelView.deleteRelationshipView(v)
                else
                    config.modelView.deleteObjectView(v)
                end if
            elseif not v.instance.isRelationship() then
                call remove (v, element) &#39; recursive
                i = i + 1
            else
                i = i + 1
            end if
        loop
    end sub


&#39;---------------------------------------------------------------------------------------------------
    &#39; This is the main body, updating the view after the task has been performed.
    &#39; For some tasks, no view will be shown (e.g. for serverside tasks such as web services)
    public sub execute()

		if not isValid(config) then
			exit sub &#39; do nothing
		end if
		set inst = config.inst
		set instview = config.instview
		
		if isEnabled(config.view) then call executeInitialisationTasks(config.view)

	    dim cvwMenu2, statusBarDone, openmenu, st
	    openmenu = true
	    statusBarDone = false
		if isEnabled(instView) then
		    if Global_InformationManager.isType(inst, ButtonType) then
		    	dim cvwStatusBar
		        if isInMenu(instView) then &#39; open/close submenu
			        if instView.children.count &#62; 0 then
			            call cleanTree(config.ModelView, instView)
			            call instview.close()
			            call instview.instance.setNamedStringValue(&#34;name&#34;, getEqualObject(inst).title)
 			            &#39;metis.currentModel.runmethod(metis.findMethod(&#34;http://xml.activeknowledgemodeling.com/cvw/operations/view_methods.kmd#Method_CVW:openClose_UUID&#34;))
 			            exit sub &#39; close -&#62; no more action
			        elseif Global_InformationManager.inheritsType(config.View, WorkAreaType) and not isMenu(getEqualObject(inst)) then
			            &#39; the view is not a menu, but a workarea, do nothing in the view
			            openmenu = false
			        elseif Global_TaskManager.isRepetitive(getEqualObject(inst)) then
			        &#39; do not open submenu, a better fix should be given here

			            openmenu = false
			            for each st in Config.task.parts &#39; the chosen repetition
			                if st.type.uri = Config.TaskType.uri then 
			                    openMenu = true &#39; the repetitive task has subtasks.
			                    call instview.instance.setNamedStringValue(&#34;name&#34;, Config.task.title)
			                    set Config.inst = Config.task
			                    exit for
			                end if
			            next
			        end if
			        if openmenu then
			            if (not isValid(instView.parent)) or (instView.parent.instance.type.uri &#60;&#62; instView.instance.type.uri) then &#39; max two levels
			               set cvwMenu2 = new CVW_GenericMenuTree
			               call cvwMenu2.build(&#34;MenuNode&#34;, 0.05, 1)
			               &#39;set config.Inst = inst.parent &#39; to get menutree for parent
			               &#39;call cvwMenu2.build(&#34;MenuTree&#34;, 1.3, 1)
			               set cvwStatusBar = new CVW_StatusBar
		                   if isEnabled(instView) then
		                       cvwStatusBar.populateStatusBars(instView)
		                   else
		                       cvwStatusBar.populateStatusBars(inst)
		                   end if
		                   statusBarDone = true
			            elseif instView.parent.instance.type.uri = instView.instance.type.uri then &#39; second level, replace by the parent, move other to top
			               set cvwMenu2 = new CVW_GenericMenuTree
			               call cvwMenu2.build(&#34;SubMenuNode&#34;, 0.05, 1)
			               set cvwStatusBar = new CVW_StatusBar
		                   if isEnabled(instView) then
		                       cvwStatusBar.populateStatusBars(instView)
		                   else
		                       cvwStatusBar.populateStatusBars(inst)
		                   end if
		                   statusBarDone = true
			            end if
			            &#39;if Config.instView.children.count &#62; 0 then  &#39; do not open view if opened submenu
			            &#39;    exit sub &#39; done
			            &#39;end if
			            set Global_Context.inst = inst &#39; reset 
		            end if
		        elseif inst.getNamedValue(&#34;kind&#34;).getInteger() &#60;=1 then &#39; menu
			        set cvwMenu2 = new CVW_GenericMenuTree
			        call cvwMenu2.build(&#34;MenuTree&#34;, 1.3, 1)
			        if Global_InformationManager.isTemplate(getEqualObject(inst)) then
                        set Global_Context.Project = Nothing &#39; enter browse mode
                    end if
	                set cvwStatusBar = new CVW_StatusBar
                    if isEnabled(instView) then
                       cvwStatusBar.populateStatusBars(instView)
                    else
                       cvwStatusBar.populateStatusBars(inst)
                    end if
                    exit sub
		        end if
		    end if
		end if
		if not statusBarDone then
	        set cvwStatusBar = new CVW_StatusBar
            if isEnabled(instView) then
                cvwStatusBar.populateStatusBars(instView)
            else
                cvwStatusBar.populateStatusBars(inst)
            end if
		end if
		dim e
		if not isValid(config.View) then
            &#39;msgbox &#34;No view configured for &#34;&#38;Config.Info.title
            if showQueue.count &#62; 0 then
                for each e in showQueue &#39; objects first
                    if not e.isRelationship() then call showObject(existingWorkarea, e)
                next
                for each e in showQueue &#39; relships next
                    if e.isRelationship() then call showRelationship(existingWorkarea, e)
                next
                set showQueue = metis.newInstanceList()
            end if
			exit sub &#39; else no view given, ignore
		end if
		if noView(config.View) then &#39; name signifies that nothing should be shown
            &#39;msgbox &#34;The system is configured to show nothing for &#34;&#38;Config.Info.title
            if showQueue.count &#62; 0 then
                for each e in showQueue &#39; objects first
                    if not e.isRelationship() then call showObject(existingWorkarea, e)
                next
                for each e in showQueue &#39; relships next
                    if e.isRelationship() then call showRelationship(existingWorkarea, e)
                next
                set showQueue = metis.newInstanceList()
            end if
			exit sub
		end if

		if inst.type.inherits(Config.ViewType) then &#39; doubleclicked on view, open/close
			metis.currentModel.runmethod(metis.findMethod(&#34;http://xml.activeknowledgemodeling.com/cvw/operations/view_methods.kmd#Method_CVW:openClose_UUID&#34;))
		elseif Global_InformationManager.inheritsType(config.View, WorkAreaType) then &#39; open or reuse workarea
		    Dim workarea, viewstyle
		    set workarea = new CVW_GenericWorkarea
            set workarea.parameters = parameters

		    call workarea.build  &#39; Build internal structures
		    call workarea.configure
		    workarea.title = inst.getNamedStringValue(&#34;name&#34;)
			    &#39;if isEnabled(  Config.View) then
			    &#39;	workarea.LanguageModel =  Config.View.uri
			    &#39;end if
		    call workarea.execute                &#39; Execute: Builds workarea (as an empty window w titlebar)
			    &#39;if isType(config.Info, config.ViewType) then
		    dim ok, value, strategyCont
		    set strategyCont = getStrategyCont()
		    if isEnabled(strategyCont) then
		        on error resume next
                &#39;call parameters.getValueForObject(strategyCont, &#34;ViewStyle&#34;, viewstyle)
                call workarea.value(strategyCont, &#34;ViewStyle&#34;, viewstyle)
                if Len(viewstyle) &#62; 0 then call config.modelview.setViewStyle(Viewstyle)
                if parameters.getValueForObject(strategyCont, &#34;ViewStrategy&#34;, value) then set strategyCont = value
                call workarea.connectViewStrategy(strategyCont.uri)
                if Len(viewstyle) = 0 then
                    call parameters.getValueForObject(strategyCont, &#34;ViewStyle&#34;, viewstyle)
                    if Len(viewstyle) &#62; 0 then call config.modelview.setViewStyle(Viewstyle)
                end if
            end if
		    set value = getQuery()
		    ok = isEnabled(value)
		    if ok then &#39; the view specifies a search
			    call populateByQuery(value, strategyCont, workarea)
		    &#39;elseif Global_InformationManager.isType(config.Info, config.ViewType) then &#39; no search specified and handled above, copy content
			&#39;    ok = copyView(config.Info, workarea)
		    elseif  Global_InformationManager.isType(config.View, config.ViewType) then &#39; no search specified and handled above, copy content
			    ok = copyView(config.View, workarea)
		    else
			    call populateByQuery(Config.View, strategyCont, workarea)
		    end if
		    call workarea.doParentLayout
		    config.modelview.clearSelection
		    workarea.currentWorkarea.open

		    &#39; maintain context:
		    if isEnabled(workarea.WorkWindow) then
		        on error resume next
		        if workarea.WorkWindow.instance.uri &#60;&#62; Config.View.uri then
                    if isEnabled(Config.Task) then call config.model.newRelationship(config.TVType, Config.Task, workarea.WorkWindow.instance)
                    if isEnabled(Config.Info) then call config.model.newRelationship(config.EqualsType, workarea.WorkWindow.instance, Config.Info)
                    if isEnabled(Config.View) then call config.model.newRelationship(config.inheritance.InheritanceRelType, workarea.WorkWindow.instance, Config.View)
                end if
            end if
            if showQueue.count &#62; 0 then
                for each e in showQueue &#39; objects first
                    if not e.isRelationship() then call showObject(workarea.WorkWindow.instance, e)
                next
                for each e in showQueue &#39; relships next
                    if e.isRelationship() then call showRelationship(workarea.WorkWindow.instance, e)
                next
                set showQueue = metis.newInstanceList()
            end if
		end if
    end sub

&#39;---------------------------------------------------------------------------------------------------
    public function noView(v)
        noView = true
        if not isValid(v) then exit function
        noView = Global_InformationManager.isNothing(v)
        if noview then exit function
        dim s
        for each s in inheritance.supers(v)
            if Global_InformationManager.isNothing(s) then 
                noview = true
                exit function
            end if
        next
        noview = false
    end function

&#39;---------------------------------------------------------------------------------------------------
    public function getQuery()
        dim ok, value
        set value = Nothing

		ok = Global_InformationManager.inheritsType(Config.View, Config.ViewType)
		if ok then
		    if not parameters.getValueForObject(config.View, &#34;ContentSpecification_Model&#34;, value) then
		        if Global_InformationManager.isType(Config.View, QueryType) then  &#39; inheritsType ??
		            set value = Config.View &#39; self-contained search specification
		        end if
		    end if
		else
		    ok = parameters.getValueForObject(config.View, &#34;ContentSpecification_Model&#34;, value)
		end if
		if not ok then
			call parameters.putValue(&#34;ContentSpecification_Model&#34;, value)
			if isEnabled(value) then
				ok = true
			end if
		end if
		if isObject(value) then
		    set getQuery = value
		else
		    set getQuery = nothing
		end if
    end function
&#39;---------------------------------------------------------------------------------------------------
    public function getStrategyCont()
        dim ok, value
        set value = Nothing

		ok = Global_InformationManager.inheritsType(Config.View, Config.ViewType)
		if ok then
		    if not parameters.getValueForObject(config.View, &#34;ContentSpecification_Model&#34;, value) then
		        if Global_InformationManager.isType(Config.View, QueryType) then  &#39; inheritsType ??
		            set value = Config.View &#39; self-contained search specification
		        else
                    dim rel, rels
                    set rels = Global_InformationManager.getAllNeighbours(Config.View, &#34;&#34;, HasViewStrategyType, 0)
                    for each rel in rels
                        set value = rel.target
                        exit for
                    next
		        end if
		    end if
		else
		    ok = parameters.getValueForObject(config.View, &#34;ContentSpecification_Model&#34;, value)
		end if
		if not ok then
			call parameters.putValue(&#34;ContentSpecification_Model&#34;, value)
			if isEnabled(value) then
				ok = true
			end if
		end if
		if isObject(value) then
		    set getStrategyCont = value
		else
		    set getStrategyCont = nothing
		end if
    end function

&#39;---------------------------------------------------------------------------------------------------
     &#39; todo
    public sub show()
        &#39;msgbox &#34;Showing nothing for &#34;&#38;Config.Info.title
    end sub


&#39;---------------------------------------------------------------------------------------------------
	public sub populateByQuery(query, strategyCont, workarea)
		dim instances, obj, objects, origin, target, col, parentview
        dim searchMode, objectAspectRatio, isContextInstance, noPathTraversals
		dim propVal
		Dim s

        propVal = workarea.value(query, &#34;SearchMode&#34;, propVal)
        if Len(propVal) &#62; 0 then searchMode = propVal
        propVal = workarea.value(strategyCont, &#34;ObjectAspectRatio&#34;, propVal)
        if Len(propVal) &#62; 0 then
            if isNumeric(propVal) then
                objectAspectRatio = CDbl(propVal)
            end if
        end if
        propVal = workarea.value(strategyCont, &#34;NoPathTraversals&#34;, propVal)
        if Len(propVal) &#62; 0 then
            if isNumeric(propVal) then
                noPathTraversals = CInt(propVal)
            end if
        end if
        dim found &#39; changed this from workarea.value(strategyCont, &#34;IsContextInstance&#34;, propVal) to avoid parameters controlling the display of
                &#39; a query altering the display of the query that is used for editing queries
        propVal = &#34;&#34;
        isContextInstance = false
        found = parameters.getValueForObject(strategyCont, &#34;IsContextInstance&#34;, propVal)
        if not found then
            found = parameters.getValueFromSupers(strategyCont, &#34;IsContextInstance&#34;, propVal)
        end if
        if not found then
            found = parameters.getValueForObject(config.Task, &#34;IsContextInstance&#34;, propVal)
        end if
        if not found then
            found = parameters.getValueFromSupers(config.Task, &#34;IsContextInstance&#34;, propVal)
        end if
        if found then
            if Len(propVal) &#62; 0 then
                if propVal = &#34;1&#34; or propVal = &#34;Y&#34; then
                    isContextInstance = true
                end if
            end if
        end if
		if Global_InformationManager.isType(query, Config.ViewType) then
			set parentView = workarea.WorkWindow
			set s = newGenericSearch(query)

			if isEnabled(Config.Infos) then
				set col = metis.newInstanceList()
				for each obj in Config.infos
					call col.addLast(obj)
				next
			else
				set col = metis.newInstanceList()
				if config.info.uri &#60;&#62; config.task.uri and config.info.uri &#60;&#62; config.view.uri then
				    if not isEnabled(config.task.parent) then
				        call col.addLast(Config.Info)
				    elseif (not Global_TaskManager.isRepetition(config.task.parent, config.task)) or config.task.parent.uri &#60;&#62; config.info.uri then
				        call col.addLast(Config.Info)
				    end if
				end if
			end if

	&#39;stop
		    if not isEmpty(searchMode) then s.searchMode = searchMode
		    if not isEmpty(noPathTraversals) then s.NoPathTraversals = noPathTraversals
		    if isContextInstance then s.UseContextInstance = true
		    if not isValid(Global_Context.Project) then set s.Project = Nothing
			set instances = s.searchFromCollection(query, col)
			dim notFoundContext
			notFoundContext = false
			if isContextInstance then
                if not isValid(s.ContextInstance) then
			        if not isValid(instances)  then
			            notFoundContext = true
                    elseif instances.count = 0  then
                        notFoundContext = true
                    end if
			    end if
			end if
			if notFoundContext then
                set instances = s.searchFromCollection(query, nothing)
            end if
			if isValid(s.ContextInstance) then &#39; add the chosen elements to the task
                if isValid(config.task) and (not Global_InformationManager.isGlobal(Config.Task)) and (not Global_InformationManager.isTemplate(Config.Task)) and (not s.ContextInstance.isRelationship()) then
                    call  config.model.newRelationship(config.TIType, config.task, s.ContextInstance)
                end if
			end if
            set Config.Info = s.ContextInstance
			if isEnabled(s.ContextInstance) and not s.HideTop then
                dim titleObj, workWin
                set workWin = workarea.WorkWindow
                workWin.instance.title = Config.Info.title
                set titleObj = workWin.parent.children(1).instance
                titleObj.name = Config.Info.title
                titleObj.title = titleObj.name
            end if
		else &#39; solution by Dag:
			&#39;call resetCVWcomponent(query)
			&#39;call configureCVWcomponent(query, workarea, false)
			&#39; Build and execute
			dim cvwContentSpec
			set cvwContentSpec = new CVW_ContentSpecification
			set cvwContentSpec.currentModel     = Model
			set cvwContentSpec.currentModelView = ModelView
			set cvwContentSpec.component    = query &#39;workarea.WorkWindow
			set cvwContentSpec.configObject = query
			set cvwContentSpec.contentModel = workarea.ContentModel
			cvwContentSpec.RepositoryConnection = workarea.ContentInRepository
			cvwContentSpec.SearchMode = searchMode
			cvwContentSpec.PathMode = &#34;Path&#34;
			cvwContentSpec.noLevels = 5
			if workarea.applyFilter then
				cvwContentSpec.applyFilter = true
			end if
			call cvwContentSpec.build                   &#39; Build internal structures
			call cvwContentSpec.IRTVconfigure(parameters)
			set instances = cvwContentSpec.execute             &#39; Execute methods dependent on configuration
		end if
        
        if isValid(instances) then
            dim s1
            s1 = instances.count
            workarea.ObjectAspectRatio = objectAspectRatio
            if isValid(config.task) then &#39; add elements connected to the task regardless of what the query says
                if (not Global_InformationManager.isGlobal(Config.Task)) and (not Global_InformationManager.isTemplate(Config.Task)) then
                    for each obj in Global_InformationManager.getAllNeighbours(config.task, &#34;&#34;, config.TItype, 0)
                        if isContextInstance then
                            if isEnabled(s.contextInstance) then
                                if s.contextInstance.uri &#60;&#62; obj.target.uri and not instances.contains(obj.target) then call instances.addLast(obj.target)
                            else
                                if not instances.contains(obj.target) then call instances.addLast(obj.target)
                            end if
                        else
                            if not instances.contains(obj.target) then call instances.addLast(obj.target)
                        end if
                    next
                end if
            end if
            &#39; filter by user access prevention
            set instances = Global_RoleManager.removeNoAccessFrom(instances, s1+1)
            dim noLevels
            propVal = workarea.value(strategyCont, &#34;WindowLayoutMode&#34;, propVal)
            if Len(propVal) &#62; 0 then workarea.WindowLayoutMode = propVal
            propVal = workarea.value(strategyCont, &#34;SelectChildMode&#34;, propVal)
            if Len(propVal) &#62; 0 then workarea.SelectChildMode = propVal
            propVal = workarea.value(strategyCont, &#34;IncludeChildren&#34;, propVal)
            if Len(propVal) = &#34;1&#34; then noLevels = -1 else noLevels = -2
            call workarea.populate(instances, noLevels)
        end if
	end sub

&#39;---------------------------------------------------------------------------------------------------
public function newGenericSearch(query) &#39; creates and initialises, called by menu as well
    set newGenericSearch = new CVW_GenericSearch
	set newGenericSearch.config = Global_Context
	dim val, proj
	set proj = Global_Context.Project

	newGenericSearch.IncludeTemplates = false
	if parameters.getValueForObject(Global_Context.Task,IncludeTemplatesProperty , val) then
        newGenericSearch.IncludeTemplates = true
    elseif parameters.getValueForObject(query,IncludeTemplatesProperty , val) then
        newGenericSearch.IncludeTemplates = true
    elseif isValid(proj) then
        if parameters.getValueForObject(proj, IncludeTemplatesProperty , val) then
            newGenericSearch.IncludeTemplates = true
        elseif parameters.getValueFromSupers(proj, IncludeTemplatesProperty , val) then
            newGenericSearch.IncludeTemplates = true
        end if
    end if
    if not newGenericSearch.IncludeTemplates then
        if parameters.getValueFromSupers(query, IncludeTemplatesProperty , val) then
            newGenericSearch.IncludeTemplates = true
        end if
    end if

    newGenericSearch.IncludeGlobals = false
    if parameters.getValueForObject(Global_Context.Task, IncludeGlobalsProperty , val) then
        newGenericSearch.IncludeGlobals = true
    elseif parameters.getValueForObject(query,IncludeGlobalsProperty , val) then
        newGenericSearch.IncludeGlobals = true
    elseif isValid(proj) then
        if parameters.getValueForObject(proj, IncludeGlobalsProperty , val) then
            newGenericSearch.IncludeGlobals = true
        elseif parameters.getValueFromSupers(proj, IncludeGlobalsProperty , val) then
            newGenericSearch.IncludeGlobals = true
        end if
    end if
    if not newGenericSearch.IncludeGlobals then
        if parameters.getValueFromSupers(query, IncludeGlobalsProperty , val) then
            newGenericSearch.IncludeGlobals = true
        end if
    end if
    dim includeall
    includeall = false
    if parameters.getValueForObject(query,IncludeAllProperty , val) then
        includeall = true
    elseif isValid(proj) then
        if parameters.getValueForObject(proj, IncludeAllProperty , val) then
            includeall = true
        elseif parameters.getValueFromSupers(proj, IncludeAllProperty , val) then
            includeall = true
        end if
    end if
    if not IncludeAll then
        if parameters.getValueFromSupers(query, IncludeAllProperty , val) then
            includeall = true
        end if
    end if
    if not includeall then
        set newGenericSearch.project = proj
    else
        set newGenericSearch.project = nothing
    end if

end function

&#39;---------------------------------------------------------------------------------------------------
    private sub executeInitialisationTasks(view)
        dim r
        for each r in Global_InformationManager.getAllNeighbours(view, &#34;&#34;, metis.findType(&#34;http://xml.activeknowledgemodeling.com/eka/languages/eka_relships.kmd#RelType_EKA:DependsOn_UUID&#34;), 0)
            if r.target.type.uri = Global_TaskManager.ScriptType.uri then
                call Global_TaskManager.doScriptTask(r.target)
            end if
        next
    end sub

&#39;---------------------------------------------------------------------------------------------------
    public function getScope(query)
        dim rel, rels
        set getScope = Nothing
        set rels = Global_InformationManager.getAllNeighbours(query, &#34;&#34;, HasScopeType, 0)
        for each rel in rels
            set getScope = rel.target
            exit for
        next
    end function

&#39;---------------------------------------------------------------------------------------------------
public function selectScope(query, col) &#39; creates and initialises, called by menu as well
    dim s, scope
    dim instances, obj
	dim val, proj

    set scope = getScope(query)
    if isEnabled(scope) then
        on error resume next
        if col.count = 0 then set col = Nothing
        set instances = selectScope(scope, col)
        if instances.count &#62; 0 then
			set col = metis.newInstanceList()
			for each obj in instances
				call col.addLast(obj)
			next
        end if
    end if

    set s = new CVW_GenericSearch
	set s.config = Global_Context
	set proj = Global_Context.Project

	s.IncludeTemplates = false
	if parameters.getValueForObject(Global_Context.Task,IncludeTemplatesProperty , val) then
        s.IncludeTemplates = true
    elseif parameters.getValueForObject(query,IncludeTemplatesProperty , val) then
        s.IncludeTemplates = true
    elseif isValid(proj) then
        if parameters.getValueForObject(proj, IncludeTemplatesProperty , val) then
            s.IncludeTemplates = true
        elseif parameters.getValueFromSupers(proj, IncludeTemplatesProperty , val) then
            s.IncludeTemplates = true
        end if
    end if
    if not s.IncludeTemplates then
        if parameters.getValueFromSupers(query, IncludeTemplatesProperty , val) then
            s.IncludeTemplates = true
        end if
    end if

    s.IncludeGlobals = false
    if parameters.getValueForObject(Global_Context.Task, IncludeGlobalsProperty , val) then
        s.IncludeGlobals = true
    elseif parameters.getValueForObject(query,IncludeGlobalsProperty , val) then
        s.IncludeGlobals = true
    elseif isValid(proj) then
        if parameters.getValueForObject(proj, IncludeGlobalsProperty , val) then
            s.IncludeGlobals = true
        elseif parameters.getValueFromSupers(proj, IncludeGlobalsProperty , val) then
            s.IncludeGlobals = true
        end if
    end if
    if not s.IncludeGlobals then
        if parameters.getValueFromSupers(query, IncludeGlobalsProperty , val) then
            s.IncludeGlobals = true
        end if
    end if
    dim includeall
    includeall = false
    if parameters.getValueForObject(query,IncludeAllProperty , val) then
        includeall = true
    elseif isValid(proj) then
        if parameters.getValueForObject(proj, IncludeAllProperty , val) then
            includeall = true
        elseif parameters.getValueFromSupers(proj, IncludeAllProperty , val) then
            includeall = true
        end if
    end if
    if not IncludeAll then
        if parameters.getValueFromSupers(query, IncludeAllProperty , val) then
            includeall = true
        end if
    end if
    if not includeall then
        set s.project = proj
    else
        set s.project = nothing
    end if
    dim propVal, searchMode
    dim found

    found = parameters.getValueForObject(query, &#34;SearchMode&#34;, propVal)
    if found then searchMode = propVal
	if not isEmpty(searchMode) then s.searchMode = searchMode

    set selectScope = s.searchFromCollection(query, col)

end function

&#39;---------------------------------------------------------------------------------------------------
   &#39; copy the view linked to by the button clicked into a new workarea
	public function copyView(v, wa)
		dim objeview
		copyView = true

		if v.views.count &#60;=0 then
			exit function
		end if
		set objeview = v.views(1)

		&#39;msgbox (&#34;Object: &#34; &#38; objeview.children.count &#38;&#34; parts.  Menu: &#34;&#38; instView.children.count &#38;&#34; parts.&#34;)
		&#39;if (objeview.children.count - instView.children.count) &#62; instView.children.count then &#39; more than half the elements where not shown in the menu, open view
			&#39;call initialize(obje)
			call wa.copyViewToWorkarea(objeview)
		&#39;end if
		&#39;call wa.children(2).children(wa.children(2).children.count).open()
	end function

&#39; returns true if the view is a manu, and thus should not be shown in the main area
 public function isMenu(view)
    isMenu = true
    if not isEnabled(view) then exit function
    dim s
    for each s in inheritance.supers(view)
        if s.title = &#34;Menu&#34; then
            isMenu = true
            exit function
        elseif s.title = &#34;Not in Menu&#34; then
            isMenu = false
            exit function
        end if
    next
 end function

&#39;---------------------------------------------------------------------------------------------------
 private Sub Class_Initialize
    IncludeAllProperty = &#34;IncludeAll&#34;
    IncludeGlobalsProperty = &#34;IncludeGlobals&#34;
    IncludeTemplatesProperty = &#34;IncludeTemplates&#34;
    set model           = metis.currentModel
    set modelView       = model.currentModelView
    set inst            = model.currentInstance
    set instView        = modelView.currentInstanceView
    set QueryType       = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/query.kmd#ekaQuery&#34;)
    set WorkAreaType = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/view_objects.kmd#UiType_CVW:Workarea_UUID&#34;)
    set ButtonType     = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/action_objects.kmd#ObjType_CVW:Button_UUID&#34;)
    set HasScopeType    = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/has_scope.kmd#IRTV:HasScope&#34;)
    set HasViewStrategyType = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/spec_relships.kmd#RelType_CVW:hasViewStrategy2_UUID&#34;)
    set currentConfig   = GLOBAL_Context
    if not isObject(GLOBAL_ViewManager) then
         set GLOBAL_ViewManager = me
    end if
    set showQueue = metis.newInstanceList()
 end sub

End class</string>
  </valueset>
 </object>

 <object id="_002aso001909h0b11ndt">
  <valueset size="10" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="../languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Class CVW_TaskManager</string>
   <string name="description"></string>
   <integer name="dbms-admin.commitFlag">0</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20080328 074903687</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="comments"></string>
   <string name="script">option explicit
dim GLOBAL_TaskManager

Class CVW_TaskManager

 private currentConfig
 private params
 
 Private model
    Private modelView
    Private inst
    Private instView
    private inh
    private ContextTask
    public ExecuteMethod
    public ExecuteWithParamsMethod
    public ScriptType
    public SequenceType
    public HasScopeType
    public ConfigureParamsMethod
    private TaskQueue &#39; holds tasks triggered by other tasks, ready to be executed

    public statusProp
    public startProp
    public endProp
    public repeatProp

 Public Property Get config        &#39;IRTV_Config
  if not isValid(currentConfig) then  &#39; if internal not valid, then create it ...
      if not isObject(GLOBAL_Context) then &#39; first time initialisation
                set currentConfig = new IRTV_Config
            else
          set currentConfig = GLOBAL_Context &#39;ne
      end if
   set inheritance = currentConfig.inheritance
  end if
        set config = currentConfig
    End Property

    Public Property Set config(obj)
        if isValid(obj) then
            set currentConfig = obj
            set inheritance = currentConfig.inheritance
            set model           = currentConfig.model
   set modelView       = currentConfig.modelView
   set inst            = currentConfig.inst
   set instView        = currentConfig.instView 
        end if
    End Property
    
    Private Property Get inheritance   &#39;EKA_Inheritance
  if isValid(inh) then  &#39; if internal not valid, then create it ...
   set inheritance = inh
  else
   set currentConfig = new IRTV_Config
   set inheritance = currentConfig.inheritance
  end if
    End Property

    Private Property Set inheritance(obj)
        if isValid(obj) then
            set inh = obj
        end if
    End Property
    
    Public Property Get parameters     
  if not isValid(params) then 
   set params = new CVW_ParameterManager
   set params.config = config
  end if
        set parameters = params
    End Property

    Public Property Set parameters(obj)
        if isValid(obj) then
   set params = obj
            set config = params.config
            set inheritance = config.inheritance
  end if
    End Property
    
    
    &#39; this is the main body, for performing the task. 
    &#39; Note that if the task in question and none the tasks it inherits from has a clear code to perform, nothing is done
    &#39; Returns true if viewmanager should also be invoked, false if not
    public function execute()
  if isEnabled(Config.instview) then &#39; close menu, do not perform task
		    if Config.instview.children.count &#62; 0 then
		        exit function
		    end if
  end if
  set ContextTask = Config.Task
     execute = perform(Config.Task)
  if execute then
      
  elseif Global_InformationManager.isType(inst, Config.TaskType) then &#39; button pressed in menu, linked to a task, simply open the submenu
   if isEnabled(instview) then
       if instview.children.count &#62; 0 then
        &#39; opening submenu
        execute = false
        exit function 
       end if
   end if
  end if
        call performQueue()
    end function
    
    &#39; performs any queued up tasks triggered by previous tasks
    public sub performQueue()
        if not isEnabled(TaskQueue) then exit sub
    	dim i, task
		i = 1
		call Config.storeConfig() &#39; keeps old
		do while i &#60;= TaskQueue.count
		    set task = TaskQueue.Item(i)
		    set config.inst = task
		    set config.instview = nothing
      call config.establishIRTVContext(task, true)
      perform(task) &#39; might append new tasks to the queue, if not already in the queue ...
      i = i + 1
  loop
  call Config.restoreConfig() &#39; restores current
  set TaskQueue = metis.newInstanceList() &#39; empty
    end sub
    
    &#39;performs a task, either directly, or through the first super task definition found
    &#39; returns true if something was performed, false if not. 
    public function perform(task)
        &#39;    alertConfig()
        &#39;msgbox (&#34;Performing task: &#34;&#38;task.title)
  if not isObject(task) then &#39; string uri rather than pointer - for e.g. autogenerated rules
   set task = metis.findInstance(task)
		end if
		dim t
		perform = false
		if not isValid(task) then exit function &#39; else no view given, ignore
		if not Global_InformationManager.isType(task, Config.TaskType) then
		    msgbox(&#34;Tried to perform a task &#34;&#38; task.title&#38; &#34; which is not a task, but a &#34; &#38; task.type.title&#38; &#34;!&#34;)
		    exit function
		end if
		&#39; instantiate from template, unless we are in browsing mode
	    dim create, newtask
	    create = true 
		if Global_InformationManager.isTemplate(task) then
		    &#39;if isEnabled(config.instView) then
		    &#39;    if not isInMenu(Config.instView) and Global_InformationManager.isType(config.instView.instance, Global_ViewManager.ButtonType) then
	        &#39;        if config.instView.instance.getNamedValue(&#34;kind&#34;).getInteger() &#60;=1 then &#39; menu
	        if not isEnabled(config.project) then create = false
	        if Global_InformationManager.isTemplate(config.project) then create = false
	        &#39;        end if
	        &#39;    end if
	        &#39;end if
	        if create then
	            call Global_EventManager.sleep()
		        set newtask = Global_InformationManager.copyElement(task)
		        call Global_EventManager.wakeup()
		        dim par
		        set par = config.ParentTask
		        &#39; find the right parent for the task ...
          if isEnabled(par) then
              if par.uri &#60;&#62; task.uri then
                  &#39;call config.model.newRelationship(GLOBAL_Type_EkaHasPart, par, newtask)
                  set newtask.parent = par
              end if 
          end if
          set task = newTask
          &#39; if task created, connect it to the current user, by default
                if isEnabled(Global_User) then
                    if not Global_InformationManager.isTemplate(Global_User) then 
                        call config.model.newRelationship(config.RTType, Global_User, task) 
                    end if
                end if   
                &#39; reset config info and task
                if isEnabled(config.Infos) then
                    if config.Infos.count &#62; 0 then
                       dim e2
                       e2 = 1
                       do while e2 &#60;= config.Infos.count
                            if config.infos(e2).uri = config.Task.uri then
                                call config.infos.removeAt(e2)
                            else
                                e2 = e2 + 1
                            end if
                       loop
                    end if
                end if
                if isEnabled(config.Info) then     
                    if config.task.uri = config.info.uri then
                        set config.info = newtask
                    end if
                end if
		        set config.Task = newtask
		        &#39; TODO: establish connections between current config.Info/Infos and the newly created task
		    end if
		elseif ContextTask.uri = task.uri and isRepetitive(task) and not Global_InformationManager.isGlobal(task) then &#39; create copy as subtask
		    &#39; if the user has interactively selected the task, and it is repetitive, then
		    &#39; select an existing ongoing/new repetition, or create a new one
		    dim status, reps, scope, s, current
		    set current = Nothing
		    set scope = getScope()
		    set reps = metis.newInstanceList()
		    call startTask(task)
		    if isEnabled (scope) then
		       set reps = Global_ViewManager.selectScope(scope, reps)
               if reps.count = 0 then set scope = Nothing &#39; exit special case, no available objects!
            end if
		    set current = Nothing
		    if isEnabled(scope) then &#39; scope was used, one or more object was selected in reps
		        if reps.count = 1 then &#39; check for existing task
                    set t = reps.item(1)
                    for each newe in Global_InformationManager.getAllNeighbours(t, &#34;&#34;, Config.TIType, 1) &#39;look for existing tasks that work on the element
                        if isRepetition(task, newe.origin) then
                            set current = newe.origin
                            exit for
                        end if
                    next
                    if not isEnabled(current) then &#39; create new, below
                        set reps = metis.newInstanceList() &#39; trigger creation of new below
                        set current = metis.newInstanceList()
                        call current.addLast(t) &#39; the info object t will be connected to the task
                    else
                        if task.uri = ContextTask.uri then 
                           set ContextTask = current
                           call config.establishIRTVContext(current, true)
                        end if
                        set task = current
                        set current = nothing
                    end if
                else &#39; multiple, create new task
                    set current = reps
                    set reps = metis.newInstanceList() 
                end if
		     else &#39; no scope, task driven repetition
		        for each t in Global_InformationManager.getParts(task)
		            if Global_InformationManager.isType(t, config.TaskType) and isRepetition(task, t) then
		                status = t.getNamedStringValue(statusProp)
		                if status = &#34;New&#34; or status = &#34;Waiting&#34; or status = &#34;-&#34; or status = &#34;Suspended&#34; or status = &#34;Ongoing&#34; then
		                    call reps.addLast(t)
		                    if task.title = t.title then &#39; check if better name can be found
		                        dim o, title, sep
		                        sep  = &#34;: &#34;
		                        title = t.title
		                        for each o in t.getNeighbourRelationships(0, Config.TIType)
                                    title = title &#38; sep &#38; o.target.title 
                                    sep  = &#34;, &#34;
                                next
                                if sep = &#34;, &#34; then &#39; info found
                                    call t.setNamedStringValue(&#34;name&#34;, title)
                                end if
		                    end if
		                end if
		            end if
		         next
		     
		         if reps.count &#62; 0 then
	                dim newe, name, q
	                name = task.title
	                if not isEnabled(scope) then
	                    call task.setNamedStringValue(&#34;name&#34;, &#34; &#60;A new repetition of the task&#62;&#34;) &#39; for the dialog
	                    call reps.addFirst(task)
	                    q = &#34;Select which &#39;&#34;&#38;name&#38;&#34;&#39; task you wish to perform&#34;
	                &#39;else  
	                &#39;    q = &#34;Select which object you wish to perform the task &#39;&#34;&#38;name&#38;&#34;&#39; on&#34;
	                end if
	                set t = SelectAmong( q, true, reps)
                 call task.setNamedStringValue(&#34;name&#34;, name) &#39; reset
                 if isEnabled(t) then
                     if t.uri = task.uri then &#39; selected new ...
                         set reps = metis.newInstanceList() &#39; trigger creation of new below
                     else &#39; a concrete repetition selected ...
                         if task.uri = ContextTask.uri then 
                             &#39;set config.task = t
                             set ContextTask = t
                             call config.establishIRTVContext(t, true)
                         end if
                            set task = t
                     end if
                 else &#39;cancelled
                     set config.view = nothing
                     exit function
                 end if
	            end if
	        end if
	        if reps.count = 0  then  
                set t = createRepetition(task)
                if task.uri = config.task.uri then set config.task = t
                if task.uri = ContextTask.uri then set ContextTask = t
                if isEnabled(current) then &#39; connect the new task to the selected object
                    set config.infos = current
                    for each s in current
                        set Config.Info = s
                        call config.model.newRelationship(Config.TIType, t, s)
                    next
                end if
                set task = t
		    end if
		end if
		if Global_InformationManager.isNothing(task) then &#39; name signifies that nothing should be done
			perform = true &#39;exit function 
		elseif Global_InformationManager.isType(task, scripttype) then
		    perform = doScriptTask(task)
			&#39;exit function
		end if
		if not perform then
			for each t in Inheritance.supers(task)
				if Global_InformationManager.isNothing(t) then 
					perform = true
					exit for
				elseif Global_InformationManager.isType(t, scripttype) then
                    &#39;msgbox(&#34;Script found for&#34; &#38; task.title&#38; &#34; inherited from &#34;&#38; t.title)
				    perform = doScriptTask(t)
				    if perform then exit for &#39; override, not append
				end if
			next 
		end if
		if create then
		    if perform then
	            call appendStatus(task, &#34;Performed.&#34;)
	            call startTask(task)
		    else
		        call activateTask(task) &#39; update status so that it appears in todo lists
      end if
  end if
  &#39;end if
    end function
    
 &#39; sets the status of the task to ready if it was waiting, 
 &#39; ongoing if it was suspended, updates log in comments field   
 public sub activateTask(task)
    dim stat
    if Global_InformationManager.isTemplate(task) then exit sub
    if Global_InformationManager.isGlobal(task) then exit sub
    if not Global_InformationManager.isType(task, config.TaskType) then exit sub
    if (task.uri = ContextTask.uri) or (task.uri = Config.Info.uri) then &#39; triggered interactively...
         startTask(task) 
    else 
        stat = task.getNamedStringValue(statusProp)
        if stat = &#34;Waiting&#34; or stat = &#34;-&#34; then
            call task.setNamedStringValue(statusProp, &#34;Ready&#34;)
            call appendStatus(task, &#34;Activated&#34;)
        elseif stat = &#34;Suspended&#34; then
            call task.setNamedStringValue(statusProp, &#34;Ongoing&#34;)
            call appendStatus(task, &#34;Reactivated&#34;)
        &#39;else 
        &#39;    call startTask(task)
        end if
    end if
 end sub
 
 
 &#39; sets the status of the task to ongoing
 &#39; updates log in comments field   
 public sub startTask(task)
    dim stat
    if Global_InformationManager.isTemplate(task) then exit sub
    if Global_InformationManager.isGlobal(task) then exit sub 
    if not Global_InformationManager.isType(task, config.TaskType) then exit sub
    stat = task.getNamedStringValue(statusProp)
    if stat = &#34;Waiting&#34; or stat = &#34;-&#34; or stat = &#34;Ready&#34; then &#39; only first time
        call appendStatus(task, &#34;Started&#34;)
        dim dt, y, m, d, propvalue
        dt = Now()
        y = Year(dt)
        m = Month(dt)
        d = Day(dt)
        set propValue = metis.newValue
        call propValue.setDateTimeByNumbers(y, m, d, 0,0,0,0)
        call task.setNamedValue(startProp, propValue) 
    end if
    call task.setNamedStringValue(statusProp, &#34;Ongoing&#34;)
    if isRepetitive(task) then exit sub
    if task.type.uri &#60;&#62;  GLOBAL_Type_Rule.uri then &#39; rule, subitems handled by rule conditions ...
      &#39; trigger any subtask that does not have input triggers preventing it ...&#39;
        dim subtasks, subtask, inputs, alldone, s2
        set subtasks = Global_InformationManager.getParts(task)
        alldone = true
        for each subtask in subtasks
            if Global_InformationManager.isType(subtask, config.TaskType) then
                stat = subtask.getNamedStringValue(statusProp)
                if stat = &#34;Completed&#34; or stat = &#34;Terminated&#34; then
                    if isRepetitive(subtask) then &#39; repeat
                        set s2 = createRepetition(subtask)
                        call TaskQueue.addLast(s2)
                    end if
                else
                    if Global_InformationManager.isType(subtask, config.TaskType) then
                        set inputs = Global_InformationManager.getAllNeighbours(subtask, &#34;&#34;, SequenceType, 1) &#39; incoming
                        if not isEnabled(inputs) then
                            if not TaskQueue.contains(subtask) then call TaskQueue.addLast(subtask)
                        elseif inputs.count = 0 then
                            if not TaskQueue.contains(subtask) then call TaskQueue.addLast(subtask)
                        else
                            alldone = false
                        end if
                    end if
                end if
            end if
        next
    end if
    if Global_InformationManager.inheritsType(task, GLOBAL_Type_Rule) then &#39; automatic tasks, autocomplete
        if not isValid(Config.View) then 
            completeTask(task) &#39; rules autocomplete
        elseif Global_ViewManager.noView(Config.View) then 
            completeTask(task)
        end if
    end if
 end sub
 

 &#39; sets the status of the task to completed if it was ongoing/suspended, terminated if it was not yet started, 
 &#39; updates log in comments field
 &#39; triggers next tasks
 public sub completeTask(task)
    if Global_InformationManager.isTemplate(task) then exit sub
    if Global_InformationManager.isGlobal(task) then exit sub
    if not Global_InformationManager.isType(task, config.TaskType) then exit sub
    dim stat
    stat = task.getNamedStringValue(statusProp)
    dim dt, y, m, d, propvalue
    dt = Now()
    y = Year(dt)
    m = Month(dt)
    d = Day(dt)
    set propValue = metis.newValue
    call propValue.setDateTimeByNumbers(y, m, d, 0,0,0,0)
    call task.setNamedValue(endProp, propValue) 
    if stat = &#34;Waiting&#34; or stat = &#34;Ready&#34; then
        call task.setNamedStringValue(statusProp, &#34;Terminated&#34;)
        call appendStatus(task, &#34;Terminated&#34;)
    else 
        call task.setNamedStringValue(statusProp, &#34;Completed&#34;)
        call appendStatus(task, &#34;Completed&#34;)
 
        dim rel, rels
        &#39; trigger the next task(s) according to modelled sequences...
        set rels = Global_InformationManager.getAllNeighbours(task, &#34;&#34;, SequenceType, 0) &#39; outgoing 
        for each rel in rels
            if Global_InformationManager.getParts(rel.target).contains(task) then
                completeTask(rel.target) &#39; output from child, complete parent
            elseif not TaskQueue.contains(rel.target) then 
                stat = rel.target.getNamedStringValue(statusProp)
                if stat = &#34;Completed&#34; or stat = &#34;Terminated&#34; then
                    if isRepetitive(rel.target) then &#39; repeat
                        dim s2
                        set s2 = createRepetition(rel.target)
                        call TaskQueue.addLast(s2)
                    end if
                else           
                    call TaskQueue.addLast(rel.target)
                end if
            end if
        next
    end if        
 end sub
 
 &#39; adds the text to the status log, with current time and user name prepended ...
 public sub appendStatus(task, text)
 on error resume next
    if Global_InformationManager.isGlobal(task) then exit sub &#39; prevent endless logs in generic, reused services
    dim stat
    stat = task.getNamedStringValue(&#34;comments&#34;)
    if isEnabled(Global_User) then
        stat = FormatDateTime(Now(), vbGeneralDate) &#38; &#34; - &#34; &#38; Global_User.getNamedStringValue(&#34;name&#34;) &#38; &#34;; &#34; &#38; text &#38; vbcrlf &#38; stat &#39; newest update first ...
    else 
        stat = FormatDateTime(Now(), vbGeneralDate) &#38; &#34; - &#34; &#38; &#34;UNKNOWN USER &#34; &#38; &#34;; &#34; &#38; text &#38; vbcrlf &#38; stat &#39; newest update first ...
    end if
    call task.setNamedStringValue(&#34;comments&#34;, stat)
 end sub
    
 &#39; performs the script, returns true if ok, false if problems (to do)   
 public function doScriptTask(t)
    doScriptTask = false
    if len(trim(t.getNamedStringValue(&#34;ruleCode&#34;))) &#62; 0 then &#39; script is given
        doScriptTask = true
        call model.runMethodOnInst(ConfigureParamsMethod, t)
        &#39;msgbox &#34;Executing script&#34;
        &#39;msgbox t.getNamedStringValue(&#34;ruleInitCode&#34;) 
        &#39;msgbox t.getNamedStringValue(&#34;ruleCode&#34;) 
        &#39;msgbox t.getNamedStringValue(&#34;rulePostCode&#34;)
        call model.runMethodOnInst(ExecuteWithParamsMethod, t)
    end if    
 end function   
 
 
	&#39; ----------------------------- for debugging
	private sub alertconfig()
		dim  u
		u =&#34;&#34;
		if isValid(config.Info) then
			u = u&#38;&#34; I: &#34;&#38;config.Info.title&#38; &#34;(&#34;&#38; config.Info.uri &#38;&#34;)&#34;
		else
			u = u&#38;&#34; I: Invalid&#34;
		end if
		if isValid(config.Role) then
			u = u&#38;&#34; R: &#34;&#38;config.Role.title&#38; &#34;(&#34;&#38; config.Role.uri &#38;&#34;)&#34;
		else
			u = u&#38;&#34; R: Invalid&#34;
		end if
		if isValid(GLOBAL_User) then
			u = u&#38;&#34; U: &#34;&#38; GLOBAL_User.title&#38; &#34;(&#34;&#38; GLOBAL_User.uri &#38;&#34;)&#34;
		else
			u = u&#38;&#34; U: Invalid&#34;
		end if
		if isValid(config.Task) then
			u = u&#38;&#34; T: &#34;&#38;config.Task.title&#38; &#34;(&#34;&#38; config.Task.uri &#38;&#34;)&#34;
		else
			u = u&#38;&#34; T: Invalid&#34;
		end if
		if isValid(config.View) then
			u = u&#38;&#34; V: &#34;&#38;config.View.title&#38; &#34;(&#34;&#38; config.View.uri &#38;&#34;)&#34;
		else
			u = u&#38;&#34; V: Invalid&#34;
		end if
		msgbox u
	end sub
	
	&#39; returns true if the task can be repeated. Each repetition will be a new task, inheriting from the task, and part of the task.
    public function isRepetitive(task) 
        isRepetitive = false
        if not Global_InformationManager.istype(task, config.TaskType) then exit function
        if not isEnabled(task) then exit function
        dim s
        s = task.getNamedStringValue(repeatProp)
        if instr(1, s, &#34;true&#34;, 1) then 
            isRepetitive = true
        elseif instr(1, s, &#34;1&#34;, 1) then 
            isRepetitive = true
        elseif instr(1, s, &#34;yes&#34;, 1) then 
            isRepetitive = true
        end if
    end function
    
    &#39;returns true if the second task is a repetition of the first one
    public function isRepetition(task, otherTask) 
        isRepetition = false
        if not isEnabled(task) then exit function
        if not isEnabled(otherTask) then exit function
        if Global_InformationManager.getParts(task).contains(otherTask) then &#39;possibly
            dim rel
            for each rel in Global_InformationManager.getAllNeighbours(otherTask, &#34;&#34;, inheritance.InheritanceRelType, 0)
                if rel.target.uri = task.uri then
                    isRepetition = true
                    exit function
                end if
            next
        end if
    end function
    
    public function createRepetition(task)
        call Global_EventManager.sleep()
		set createRepetition = Global_InformationManager.copyElement(task)
		call Global_EventManager.wakeup()
        set createRepetition.parent = task
        call createRepetition.setNamedStringValue(RepeatProp, &#34;false&#34;)
        &#39; if task created, connect it to the current user, by default
        if isEnabled(Global_User) then
            if not Global_InformationManager.isTemplate(Global_User) then 
                call config.model.newRelationship(config.RTType, Global_User, task) 
            end if
        end if
    end function
    
    &#39;---------------------------------------------------------------------------------------------------
    public function getScope()
        dim rel, rels
        set getScope = Nothing
        if isValid(Config.Task) then
            set rels = Global_InformationManager.getAllNeighbours(Config.Task, &#34;&#34;, HasScopeType, 0)
            for each rel in rels
                set getScope = rel.target
                exit function
            next
        end if
        if isValid(Config.Info) then
            set rels = Global_InformationManager.getAllNeighbours(Config.Info, &#34;&#34;, HasScopeType, 0)
            for each rel in rels
                set getScope = rel.target
                exit function
            next
        end if
    end function

    
 private Sub Class_Initialize
    statusProp = &#34;status&#34;
    startProp = &#34;start&#34;
    endProp = &#34;end&#34;
    repeatProp = &#34;repetitive&#34;
    set model           = metis.currentModel
    set modelView       = model.currentModelView
    set inst            = model.currentInstance
    set instView        = modelView.currentInstanceView
    set currentConfig = GLOBAL_Context
    set ExecuteMethod = metis.findMethod(&#34;http://xml.activeknowledgemodeling.com/rule/operations/rule_methods.kmd#evaluateScript&#34;)
    set ExecuteWithParamsMethod = metis.findMethod(&#34;http://xml.activeknowledgemodeling.com/rule/operations/rule_methods.kmd#evaluateExpression&#34;)
    set ConfigureParamsMethod = metis.findMethod(&#34;http://xml.activeknowledgemodeling.com/rule/operations/rule_methods.kmd#buildConfigurationScript&#34;)
    set ScriptType = metis.findType(&#34;http://xml.activeknowledgemodeling.com/eka/languages/eka_rule.kmd#ekaRule&#34;) &#39;&#34;http://xml.activeknowledgemodeling.com/rule/languages/rule_expression.kmd#expression&#34;)
    set SequenceType = metis.findType(&#34;http://xml.activeknowledgemodeling.com/eka/languages/eka_relships.kmd#trigger&#34;)
    set HasScopeType    = metis.findType(&#34;http://metadata.troux.info/meaf/relationshiptypes/has_scope-is_scoped_by.kmd#RelType_ITG:has_scope-is_scoped_by_UUID&#34;)
    &#39; Initialize global variables - copied from Rule:
    dim r
    if not RuleGlobalsInitialized then
  set r = new Rule_Globals
 end if
  
    if not isValid(GLOBAL_TaskManager) then 
        set GLOBAL_TaskManager = me
        if not isValid(Global_InformationManager) then set r = new EKA_InformationManager
    end if
    set TaskQueue = metis.newInstanceList()
    set ContextTask = Nothing
 end sub
 
End class</string>
  </valueset>
 </object>

 <object id="_002aso00190aa1fag2qn">
  <valueset size="10" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="../languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Class CVW_ParameterManager</string>
   <string name="description"></string>
   <integer name="dbms-admin.commitFlag">0</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20080408 084210390</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="comments"></string>
   <string name="script">option explicit
Class CVW_ParameterManager
 private currentConfig
 private inh
     
 Private model
    Private modelView
    Private inst
    Private instView
    
        &#39; Types
    public ElementType
 public PropertyType
    public ConsistsOfType
 public HasPropertyType   &#39; inherits ConsistsOfType
 public HasValueType   &#39; inherits HasPropertyType
 public HasParameterType  &#39; inherits HasPropertyType
 public HasAllowedValueType  &#39; inherits ConsistsOfType
	
	&#39; properties for Property objects
	private PropType
	private PropValue
	private PropDerivedValue
	
	&#39; properties for Parameter relationship
	private PropertyInput
	private PropertyOutput
	private PropertyMandatory
	private PropertyMultiple    
    
    Public Property Get config        &#39;IRTV_Config
		if not isValid(currentConfig) then
            if not isObject(GLOBAL_Context) then &#39; first time initialisation
                set currentConfig = new IRTV_Config
            else
		        set currentConfig = GLOBAL_Context &#39;ne
		    end if
		    set inheritance = currentConfig.inheritance
		end if
        set config = currentConfig
    End Property

    Public Property Set config(obj)
        if isValid(obj) then
            set currentConfig = obj
            set inheritance = currentConfig.inheritance
            set model           = currentConfig.model
			set modelView       = currentConfig.modelView
			set inst            = currentConfig.inst
			set instView        = currentConfig.instView 
        end if
    End Property
    
    Private Property Get inheritance   &#39;EKA_Inheritance
		if isValid(inh) then  &#39; if internal not valid, then create it ...
			set inheritance = inh
		else
			set currentConfig = new IRTV_Config
			set inh = currentConfig.inheritance
			set inheritance = inh
		end if
    End Property

    Private Property Set inheritance(obj)
        if isValid(obj) then
            set inh = obj
        end if
    End Property
     
     private function valid(x) 
		valid = true
		if isObject(x) then
			valid = isValid(x)
		else 
		    if isEmpty(x) then
				valid = false
			elseif isNull(x) then
				valid = false
			elseif len(trim(x)) &#60;= 0 then
				valid = false
			end if
		end if
     end function
     
     &#39; sets the given value as a property on the current information object and task if specified
     public function setValue(name, value) 
        &#39;msgbox (&#34;Set &#34;&#38;name&#38;&#34;=&#34;&#38;value)
        setValue = false
        dim props, prop, obj
        &#39; 1st check if info object has this property
        if isEnabled(config.infos) then
            for each obj in config.Infos
                setValue = setvalue or findAndSetProperty(obj, name, value)
                &#39;if setvalue then msgbox (&#34;Value set for info &#34;&#38;obj.title)
            next
        elseif isEnabled(config.info) then 
            setvalue = findAndSetProperty(config.info, name, value)
            &#39;msgbox (&#34;Value set attempted for info &#34;&#38;config.info.title)
        end if
        &#39; if not found above, check if parts of the current info object has such a property
        if not setValue and isEnabled(config.info) then 
            for each obj in Global_InformationManager.getParts(config.info)
                setvalue = setValue or findAndSetProperty(obj, name, value)
                &#39;if setvalue then msgbox (&#34;Value set for info part&#34;&#38;obj.title)
            next
            &#39; if not found above, add the value as a property for the current info object
            if not setvalue then setValue = isEnabled(addProperty(config.info, name, value))
        end if
        &#39;next, handle the task
        if isEnabled(config.task) and not (config.task.uri = config.info.uri) then        
            &#39; 2nd check if the task has such a property;
            setValue = findAndSetProperty(config.task, name, value)
            if setValue then exit function &#39; found, done
            &#39;3rd check if the task inherits such a property, if so, add it to the current task;
            for each obj in inheritance.supers(config.task)
                set props = Global_InformationManager.getAllNeighbours(obj, name, PropertyType, 0)
                for each prop in props
                    setValue = true
                    exit for
                next
                if setvalue then exit for
            next
            if setvalue then
                &#39;msgbox (&#34;Value added for task &#34;&#38;config.task.title&#38;&#34; due to inherited property definition.&#34;)
                setValue = isEnabled(addProperty(config.task, name, value))  &#39; also do children below if found    
            end if
            &#39; add parents here
            
            &#39;4th check if any parts of the task has such a parameter
            for each obj in Global_InformationManager.getParts(config.task)
                setvalue = setValue or findAndSetProperty(obj, name, value)
                &#39;if setvalue then msgbox (&#34;Value set for task part&#34;&#38;obj.title)
            next
        else
            &#39;msgbox(&#34;No task for setting value in.&#34;)
        end if 
        &#39;next, handle the user
        if isEnabled(GLOBAL_User) then  
            setValue = findAndSetProperty(GLOBAL_User, name, value)
            if setValue then exit function &#39; found, done
        end if      
     end function
     
     &#39; returns true if the obj has the given property
     public function findAndSetProperty(obj, name, value)
        dim props, prop
        findAndSetProperty = false
        set props = obj.type.allProperties &#39; check if the object has a conventional metis property with the given name
        for each prop in props
            if prop.name = name then
                call obj.setNamedStringValue(name, value)
                findAndSetProperty = true
                exit function
             end if
        next
        set props = Global_InformationManager.getAllNeighbours(obj, name, PropertyType, 0) &#39; check for additional AKM property objects
        for each prop in props
            findAndSetProperty = true
            call prop.setNamedStringValue(&#34;value&#34;, value)
        next
     end function 
     
     &#39; returns the added property object
     public function addProperty(obj, name, value)
        dim prop, r
        set model = obj.ownerModel
        set prop = model.newObject(PropertyType)
        call prop.setNamedStringValue(&#34;name&#34;, name)
        call prop.setNamedStringValue(&#34;value&#34;, value)
        set r = model.newRelationship(HasPropertyType, obj, prop)
        set addProperty = prop
     end function
     
     &#39; sets the value, returns true if found ok
     public function getTypedValue(propertydef, byref value)
        on error resume next
        getTypedValue = false
        dim proptype
        proptype = propertydef.getNamedStringValue(&#34;datatype&#34;)
        if not isValid(proptype) then proptype = &#34;string&#34;
        call putValue(propertydef.getNamedStringValue(&#34;name&#34;), value)
        if isObject(Value) then
            if not isEnabled(Value) then exit function
            getTypedValue = true
            if instr(1, proptype, &#34;symbol&#34;,1) &#62; 0 then
                if value.views.count &#62; 0 then
                    if value.isObject() then
                        set value = value.views(1).openSymbol &#39; string
                    elseif value.isRelationship() then 
                        set value = value.views(1).relationshipSymbol &#39; string
                    else
                        getTypedValue = false
                    end if
                else &#39; default type view symbol not available ...
                    set value = value.type.defaultTypeView.uri
                end if
            elseif instr(1, proptype, &#34;type&#34;,1) &#62; 0 then
                set value =  value.type
            elseif instr(1, proptype, &#34;element&#34;,1) &#62; 0 or instr(1, proptype, &#34;object&#34;,1) &#62; 0 then
                set value = value
            elseif instr(1, proptype, &#34;id&#34;,1) &#62; 0 or instr(1, proptype, &#34;uri&#34;,1) &#62; 0 then
                set getTypedValue = value.uri
            else
                getTypedValue = false
                set value = value.getNamedStringValue(name)
            end if
        end if
        if not getTypedValue then
            if isValid(value) then &#39; string, not &#34;&#34;
                getTypedValue = true
                if instr(1, proptype, &#34;symbol&#34;,1) &#62; 0 then
                    &#39; ok, assume string is uri 
                elseif instr(1, proptype, &#34;type&#34;,1) &#62; 0 then
                    set value = metis.findtype(value)
                elseif instr(1, proptype, &#34;element&#34;,1) &#62; 0 or instr(1, proptype, &#34;object&#34;,1) &#62; 0 then
                    set value = metis.findInstance(value)
                elseif instr(1, proptype, &#34;id&#34;,1) &#62; 0 or instr(1, proptype, &#34;uri&#34;,1) &#62; 0 then
                    set value = metis.findInstance(value).uri
                elseif instr(1, proptype, &#34;int&#34;,1) &#62; 0 or instr(1, proptype, &#34;number&#34;,1) &#62; 0 or instr(1, proptype, &#34;real&#34;,1) &#62; 0 then
                    value = CInt(value)
                elseif instr(1, proptype, &#34;bool&#34;,1) &#62; 0 then
                    set value = CBool(value) &#39; todo- make it work
                elseif instr(1, proptype, &#34;date&#34;,1) &#62; 0 then
                    if isDate(value) then value = CDate(value)
                elseif instr(1, proptype, &#34;enum&#34;,1) &#62; 0 then 
                    &#39; metis enums, handled as strings ....
                end if
            end if
        end if
     end function
     
     &#39;  returns the value of the parameter, either an object or a string, given the current context
     public function getValue(name)
        call putValue(name, getValue)									
     end function
     
      &#39;  sets the value of the parameter to the input variable
     public sub putValue(name, byref value)
        &#39;msgbox (&#34;Get &#34;&#38;name)
		if getValueForObject(Config.Info, name, value) then exit sub
		if getValueForObject(Config.Task, name, value) then exit sub
		if getValueForObject(Config.Role, name, value) then exit sub
		if getValueForObject(Config.View, name, value) then exit sub
		if getValueForObject(GLOBAL_User, name, value) then exit sub
        &#39;msgbox (&#34;Get &#34;&#38;name&#38; &#34; from supers.&#34;)
		if getValueFromSupers(Config.Info, name, value) then exit sub
		if getValueFromSupers(Config.Task, name, value) then exit sub
		if getValueFromSupers(Config.Role, name, value) then exit sub
		if getValueFromSupers(Config.View, name, value) then exit sub
		if getValueFromSupers(GLOBAL_User, name, value) then exit sub
        &#39;msgbox (&#34;Get &#34;&#38;name&#38; &#34; from parts.&#34;)
		&#39;if getValueFromParts(Config.Info, name, value) then exit sub
		&#39;if getValueFromParts(Config.Task, name, value) then exit sub
		&#39;if getValueFromParts(Config.Role, name, value) then exit sub
		&#39;if getValueFromParts(Config.View, name, value) then exit sub
		&#39;if getValueFromParts(GLOBAL_User, name, value) then exit sub
        &#39;msgbox (&#34;Get &#34;&#38;name&#38;&#34; is empty.&#34;)
		value = &#34;&#34; &#39; no value found in context									
     end sub
     
     
     public sub makeSubstitutions(byref value) 
     
		if not isObject(value) then
			dim i,j, s, p, o, v 
			i = instr(value, &#34;$&#34;) &#39; start of substitution area
			if i &#60;= 0 then i = instr(value, &#34;{&#34;) &#39; alternative
			s = value
			while i &#62; 0 &#39; more substitutions 
				j = instr(i+1, s, &#34;$&#34;, 1) &#39; end of substitution area
				if j &#60;= 0 then j = instr(value, &#34;}&#34;) &#39; alternative
				if j &#60;= 0 then 
					j = len(s) +1
				end if
				p = mid(s, i+1, j-i-1) &#39; parameter to subsitute in
				v = p &#39;value to substitute in
				o = &#34;&#34;
				if instr(p,&#34;.&#34;) &#62; 0 then &#39; separates object from parameter in parameter
					o = mid(p, 1, instr(p,&#34;.&#34;) -1)
					p = mid(p, instr(p,&#34;.&#34;) +1) &#39; parametername
				end if
				if instr(o, &#34;Info&#34;) &#62; 0 and isValid(Config.Info) then &#39; obj to get subsisution value from is the context info object
					if not getValueForObject(Config.Info, p, v) then
						 v =&#34;&#34;
					end if
				elseif instr(o, &#34;Role&#34;) &#62; 0 and isValid(Config.Role)then
					if not getValueForObject(Config.Role, p, v) then
						 v =&#34;&#34;
					end if
				elseif instr(o, &#34;User&#34;) &#62; 0 and isValid(GLOBAL_User)then
					if not getValueForObject(GLOBAL_User, p, v) then
						 v =&#34;&#34;
					end if
				elseif instr(o, &#34;Task&#34;) &#62; 0 and isValid(Config.Task)then
					if not getValueForObject(Config.Task, p, v) then
						 v =&#34;&#34;
					end if
				elseif instr(o, &#34;View&#34;) &#62; 0 and isValid(Config.View)  then
					if not getValueForObject(Config.View, p, v) then
						 v =&#34;&#34;
					end if
				else 
					call putValue(p, v)
				end if
				if isObject(v) then
					v = v.uri
				end if
				value = mid(s, 1, i-1) &#38; v &#38; mid(s, j+1) &#39; make substitution
				s = value
				i = instr(j+1, s, &#34;$&#34;)
				if i &#60;= 0 then i = instr(value, &#34;{&#34;) &#39; alternative
			wend
		end if
     end sub
     
      &#39;  gets the inherited value of the parameter, either an object or a string, given the current context
     public function getValueFromSupers(obj, name, byref value)
     	getValueFromSupers = false &#39; no value found in context
		if isValid(obj) then
&#39;msgbox (&#34;Get &#34;&#38;name&#38; &#34; from supers of &#34; &#38;obj.title)
			dim o
			for each o in inheritance.supers(obj)
				if getValueForObject(o, name, value) then
					getValueFromSupers = true 
&#39;msgbox obj.title&#38;&#34;(inherited from &#34;&#38;o.title&#38;&#34;).&#34;&#38;name&#38;&#34; = &#34;&#38;value
					exit function
				end if
			next
		end if
     end function
     
      &#39;  gets the value of the parameter, for one of the parts (recursive) of the object
     public function getValueFromParts(obj, name, byref value)
     	getValueFromParts = getValueFromParts2(obj, name, value, metis.newInstanceList()) 
     end function
     
           &#39;  gets the value of the parameter, for one of the parts (recursive) of the object
     private function getValueFromParts2(obj, name, byref value, byref list)
     	getValueFromParts2 = false &#39; no value found in context
		if isValid(obj) then
			dim o, parts
			call list.addLast(obj)
			set parts = Global_InformationManager.getParts(obj)
			if not isEnabled(parts) then exit function
			if parts.count = 0 then exit function
			for each o in parts
			    if getValueForObject(o, name, value) then
				    getValueFromParts2 = true 
				    exit function
			     end if
			next
		    for each o in parts &#39; try recursively
		        if not list.contains(o) then &#39; prevent loops
				    if getValueFromParts2(o, name, value, list) then
				        getValueFromParts2 = true 
				        exit function
				    end if
				end if
			next
		end if
     end function
    
     
     
     &#39;  finds the value of the parameter, either an object or a string, for the given object or one that it inherits from. Returns true if found
     public function getValueForObject(object, name, byref value)
		on error resume next
		if not isEnabled(object) then
			getValueForObject = false
&#39;msgbox object.title&#38;&#34;.&#34;&#38;name&#38;&#34; = &#34; &#38;value.title
			exit function
		end if
		getValueForObject = true
		set value = Nothing 
		value = getStringValueForObject(object,name)
		if valid(value) then
&#39;msgbox object.title&#38;&#34;.&#34;&#38;name&#38;&#34; = &#34; &#38;value
			exit function
		end if
		Set value = getObjectValueForObject(object,name)
		if isEnabled(value) then 
&#39;msgbox object.title&#38;&#34;.&#34;&#38;name&#38;&#34; = &#34; &#38;value.title&#38;&#34; (obj)&#34;
			exit function
		else
&#39;msgbox object.title&#38;&#34;.&#34;&#38;name&#38;&#34; is not enabled.&#34;
        end if
		getValueForObject = false &#39; in case no value found
     end function
     
    &#39; find a value of the given parameter for the given object, not using inheritance, but traversing direct relationships from the 
    &#39; property object to other property objects 
    private function getStringValueForObject(object, name)
		on error resume next
		dim props, prop, ut
        getStringValueForObject = &#34;&#34;
      		
        if name = &#34;&#34; then &#39; this is a recursive call, any value explicitly linked to another property will be used
			getStringValueForObject = getStringPropertyValue(object)
            if valid(getStringValueForObject) then
                ut = getStringValueForObject
				call makeSubstitutions(ut)
				getStringValueForObject = ut 
				exit function
			end if
		else 
		    getStringValueForObject = object.getNamedStringValue(name)
			if valid (getStringValueForObject) then
                ut = getStringValueForObject
				call makeSubstitutions(ut)
				getStringValueForObject = ut
				exit function
			end if
        end if 
        
        set props = object.getNeighbourObjects(0, HasPropertyType, Nothing)
        for each prop in props
            if (prop.name = name) or (name = &#34;&#34;) then
                getStringValueForObject = getStringPropertyValue(prop)
                if valid(getStringValueForObject) then
                    ut = getStringValueForObject
				    call makeSubstitutions(ut)
				    getStringValueForObject = ut 
					exit function
				end if
				if Global_InformationManager.inheritsType(prop, PropertyType) then
					getStringValueForObject = getStringValueForObject(prop, &#34;&#34;) &#39; recursive 
					if valid(getStringValueForObject) then
                        ut = getStringValueForObject
				        call makeSubstitutions(ut)
				        getStringValueForObject = ut 
						exit function
					end if
				end if
            end if
        next
    End function
    
        &#39; find a value of the given property, using inheritance among properties
    private function getStringPropertyValue(prop)
    	on error resume next
		getStringPropertyValue = prop.getNamedStringValue(PropValue)
		if not valid(getStringPropertyValue) then &#39; check if the property inherits from somewhere explicitly
			dim p, props
			set props = prop.getNeighbourRelationships(0, metis.findType(&#34;http://xml.activeknowledgemodeling.com/eka/languages/eka_relships.kmd#RelType_EKA:HasValue_UUID&#34;))
			for each p in props
				getStringPropertyValue = p.target.getNamedStringValue(PropValue)
				if valid(getStringPropertyValue) then
				    getStringPropertyValue = checkPropertyType(prop, getStringPropertyValue)
					exit function
				end if
			next			
			set props = inheritance.supersUntilRoot(prop, PropertyType)
			for each p in props
			    if p.parent.uri &#60;&#62; Config.View.uri then &#39; do not use local query content values
				    getStringPropertyValue = p.getNamedStringValue(PropValue)
				    if valid(getStringPropertyValue) then
				        getStringPropertyValue = checkPropertyType(prop, getStringPropertyValue)
					    exit function
				    end if
				end if
			next
		end if 
    End function
    
    &#39; to fix problems with CURE ids and other elements where text is included in numbers.
    private function checkPropertyType(prop, value)
        checkPropertyType = value
        if prop.getNamedStringValue(&#34;datatype&#34;) = &#34;int&#34; then
            if not isNumeric(value) then
                dim i
                i = 1
                while isNumeric(right(value,i))
                    i = i + 1
                wend
                if i &#62; 1 then checkPropertyType = right(value,i-1)
            end if
        end if
    end function
    
    &#39; find a value of the given parameter for the given object, not using inheritance, but traversing direct relationships from the 
    &#39; property object to other property objects 
    private function getObjectValueForObject(object, name)
		on error resume next
		dim props, prop
        set getObjectValueForObject = Nothing

        set props = object.getNeighbourObjects(0, HasPropertyType, Nothing)
        for each prop in props
            if (prop.name = name) or (name = &#34;&#34;) then
                set getObjectValueForObject = getObjectPropertyValue(prop)
                if isEnabled(getObjectValueForObject) then
					exit function
				end if
				if Global_InformationManager.inheritsType(prop, PropertyType) then
					set getObjectValueForObject = getObjectValueForObject(prop, &#34;&#34;) &#39; recursive
					if isEnabled(getObjectValueForObject)  then
						exit function
					end if
				end if
            end if
        next
        set props = object.getNeighbourObjects(0, Nothing, Nothing) &#39; scan all neigbours, implies that we can use the type name as property name and search for a neighbour
        for each prop in props
            if prop.type.title = name then
                set getObjectValueForObject = prop
                exit function
            end if
        next
    End function
       
    
     &#39; find a value of the given property, using inheritance among properties
    private function getObjectPropertyValue(prop)
		on error resume next
    	dim v, values
    	set getObjectPropertyValue = Nothing
    	set values = prop.getNeighbourRelationships(0, HasValueType)
    	for each v in values 
    		set getObjectPropertyValue = v.target
    		if isEnabled(getObjectPropertyValue) then
    			exit function
    		end if
    	next
		dim props, p
		set props = inheritance.supersUntilRoot(prop, PropertyType)
		for each p in props
            if p.title = prop.title then
                set values = p.getNeighbourRelationships(0, HasValueType)
    		    for each v in values
    			    set getObjectPropertyValue = v.target
    			    if isEnabled(getObjectPropertyValue) then
    				    exit function
    			    end if
    		    next
    		end if
		next
    End function
    
           
 private Sub Class_Initialize
    if isObject(GLOBAL_Context) then
        set config = GLOBAL_Context
    else 
        set model = metis.currentModel
        set modelView = model.currentModelView
        set inst = model.currentInstance
	    set instView = modelView.currentInstanceView
	end if

    &#39; Types
    set ElementType  = metis.findType(&#34;http://xml.activeknowledgemodeling.com/eka/languages/eka_element.kmd#ObjType_EKA:Element_UUID&#34;)
 set PropertyType = metis.findType(&#34;http://xml.activeknowledgemodeling.com/eka/languages/eka_property.kmd#ObjType_EKA:Property_UUID&#34;)
    set ConsistsOfType  = metis.findType(&#34;http://xml.activeknowledgemodeling.com/eka/languages/eka_relships.kmd#RelType_EKA:Member_UUID&#34;)
 set HasPropertyType = metis.findType(&#34;http://xml.activeknowledgemodeling.com/eka/languages/eka_relships.kmd#RelType_EKA:HasProperty_UUID&#34;)
 set HasValueType = metis.findType(&#34;http://xml.activeknowledgemodeling.com/eka/languages/eka_relships.kmd#RelType_EKA:HasValue_UUID&#34;)
 set HasAllowedValueType = metis.findType(&#34;http://xml.activeknowledgemodeling.com/eka/languages/eka_relships.kmd#RelType_EKA:HasAllowedValue_UUID&#34;)
 set HasParameterType= metis.findType(&#34;http://xml.activeknowledgemodeling.com/eka/languages/has_parameter.kmd#Has_parameter&#34;)
 
 PropType = &#34;datatype&#34;
 PropValue = &#34;value&#34;
 PropDerivedValue = &#34;tempvalue&#34;
	
	PropertyInput = &#34;input&#34;
	PropertyOutput = &#34;output&#34;
	PropertyMandatory = &#34;mandatory&#34;
	PropertyMultiple = &#34;multiple_values&#34;

        
 end sub 
end class
</string>
  </valueset>
 </object>

 <relationship id="_002aso001934adrobm0n">
  <valueset size="7" xlink:role="type" xlink:title="Depends on" xlink:href="../../eka/languages/eka_relships.kmd#RelType_EKA:DependsOn_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <integer name="dbms-admin.commitFlag">1</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20070620 133731362</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <integer name="connectionStrength">100</integer>
   <string name="name"></string>
  </valueset>
  <origin seq="0" xlink:role="object" xlink:title="Class CVW_ViewManager" xlink:href="#_002aso001908jt4cfilt"/>
  <target seq="0" xlink:role="object" xlink:title="Class CVW_GenericWorkarea&#10;" xlink:href="#_002asjb01dkcl46pjf25"/>
 </relationship>

 <relationship id="_002aso00194br17kss6n">
  <valueset size="7" xlink:role="type" xlink:title="Depends on" xlink:href="../../eka/languages/eka_relships.kmd#RelType_EKA:DependsOn_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <integer name="dbms-admin.commitFlag">1</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20070620 133731372</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <integer name="connectionStrength">100</integer>
   <string name="name"></string>
  </valueset>
  <origin seq="0" xlink:role="object" xlink:title="Class CVW_GenericAction" xlink:href="#_002asnj01040su1uk5bh"/>
  <target seq="0" xlink:role="object" xlink:title="Class CVW_TaskManager" xlink:href="#_002aso001909h0b11ndt"/>
 </relationship>

 <relationship id="_002aso00194g2hf5t9kd">
  <valueset size="7" xlink:role="type" xlink:title="Depends on" xlink:href="../../eka/languages/eka_relships.kmd#RelType_EKA:DependsOn_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <integer name="dbms-admin.commitFlag">1</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20070620 133731372</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <integer name="connectionStrength">100</integer>
   <string name="name"></string>
  </valueset>
  <origin seq="0" xlink:role="object" xlink:title="Class CVW_GenericAction" xlink:href="#_002asnj01040su1uk5bh"/>
  <target seq="0" xlink:role="object" xlink:title="Class CVW_ViewManager" xlink:href="#_002aso001908jt4cfilt"/>
 </relationship>

 <relationship id="_002aso00194lolq69nll">
  <valueset size="7" xlink:role="type" xlink:title="Depends on" xlink:href="../../eka/languages/eka_relships.kmd#RelType_EKA:DependsOn_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <integer name="dbms-admin.commitFlag">1</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20070620 133731362</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <integer name="connectionStrength">100</integer>
   <string name="name"></string>
  </valueset>
  <origin seq="0" xlink:role="object" xlink:title="Class CVW_ViewManager" xlink:href="#_002aso001908jt4cfilt"/>
  <target seq="0" xlink:role="object" xlink:title="Class CVW_GenericSearch" xlink:href="#_002asnu00uibot2it5a4"/>
 </relationship>

 <relationship id="_002aso00194sh73fve12">
  <valueset size="7" xlink:role="type" xlink:title="Depends on" xlink:href="../../eka/languages/eka_relships.kmd#RelType_EKA:DependsOn_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <integer name="dbms-admin.commitFlag">1</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20070620 133731352</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <integer name="connectionStrength">100</integer>
   <string name="name"></string>
  </valueset>
  <origin seq="0" xlink:role="object" xlink:title="Class CVW_TaskManager" xlink:href="#_002aso001909h0b11ndt"/>
  <target seq="0" xlink:role="object" xlink:title="Class IRTV_Config" xlink:href="#_002asnu015d0g0nfq0ql"/>
 </relationship>

 <relationship id="_002aso001954i5vtf3m4">
  <valueset size="7" xlink:role="type" xlink:title="Depends on" xlink:href="../../eka/languages/eka_relships.kmd#RelType_EKA:DependsOn_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <integer name="dbms-admin.commitFlag">1</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20070620 133731372</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <integer name="connectionStrength">100</integer>
   <string name="name"></string>
  </valueset>
  <origin seq="0" xlink:role="object" xlink:title="Class CVW_TaskManager" xlink:href="#_002aso001909h0b11ndt"/>
  <target seq="0" xlink:role="object" xlink:title="Class CVW_ParameterManager" xlink:href="#_002aso00190aa1fag2qn"/>
 </relationship>

 <relationship id="_002aso00195bt5irrs11">
  <valueset size="7" xlink:role="type" xlink:title="Depends on" xlink:href="../../eka/languages/eka_relships.kmd#RelType_EKA:DependsOn_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <integer name="dbms-admin.commitFlag">1</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20070620 133731362</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <integer name="connectionStrength">100</integer>
   <string name="name"></string>
  </valueset>
  <origin seq="0" xlink:role="object" xlink:title="Class CVW_ViewManager" xlink:href="#_002aso001908jt4cfilt"/>
  <target seq="0" xlink:role="object" xlink:title="Class CVW_ParameterManager" xlink:href="#_002aso00190aa1fag2qn"/>
 </relationship>

 <relationship id="_002aso00195rtpiqt9i0">
  <valueset size="7" xlink:role="type" xlink:title="Depends on" xlink:href="../../eka/languages/eka_relships.kmd#RelType_EKA:DependsOn_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <integer name="dbms-admin.commitFlag">1</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20070620 133731352</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <integer name="connectionStrength">100</integer>
   <string name="name"></string>
  </valueset>
  <origin seq="0" xlink:role="object" xlink:title="Class CVW_ViewManager" xlink:href="#_002aso001908jt4cfilt"/>
  <target seq="0" xlink:role="object" xlink:title="Class IRTV_Config" xlink:href="#_002asnu015d0g0nfq0ql"/>
 </relationship>

 <relationship id="_002aso00197082k207vf">
  <valueset size="7" xlink:role="type" xlink:title="Depends on" xlink:href="../../eka/languages/eka_relships.kmd#RelType_EKA:DependsOn_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <integer name="dbms-admin.commitFlag">1</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20070620 133731352</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <integer name="connectionStrength">100</integer>
   <string name="name"></string>
  </valueset>
  <origin seq="0" xlink:role="object" xlink:title="Class CVW_GenericAction" xlink:href="#_002asnj01040su1uk5bh"/>
  <target seq="0" xlink:role="object" xlink:title="Class IRTV_Config" xlink:href="#_002asnu015d0g0nfq0ql"/>
 </relationship>

 <relationship id="_002aso001984t0kbl9rs">
  <valueset size="7" xlink:role="type" xlink:title="Depends on" xlink:href="../../eka/languages/eka_relships.kmd#RelType_EKA:DependsOn_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <integer name="dbms-admin.commitFlag">1</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20070620 133731342</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <integer name="connectionStrength">100</integer>
   <string name="name"></string>
  </valueset>
  <origin seq="0" xlink:role="object" xlink:title="Class IRTV_Config" xlink:href="#_002asnu015d0g0nfq0ql"/>
  <target seq="0" xlink:role="object" xlink:title="Class EKA_Inheritance" xlink:href="#_002asnu015cvuge5edr9"/>
 </relationship>

 <relationship id="_002aso00198gbeh2aud7">
  <valueset size="7" xlink:role="type" xlink:title="Depends on" xlink:href="../../eka/languages/eka_relships.kmd#RelType_EKA:DependsOn_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <integer name="dbms-admin.commitFlag">1</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20070620 133731342</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <integer name="connectionStrength">100</integer>
   <string name="name"></string>
  </valueset>
  <origin seq="0" xlink:role="object" xlink:title="Class CVW_ParameterManager" xlink:href="#_002aso00190aa1fag2qn"/>
  <target seq="0" xlink:role="object" xlink:title="Class EKA_Inheritance" xlink:href="#_002asnu015cvuge5edr9"/>
 </relationship>

 <relationship id="_002aso0019a35r9eqbp4">
  <valueset size="7" xlink:role="type" xlink:title="Depends on" xlink:href="../../eka/languages/eka_relships.kmd#RelType_EKA:DependsOn_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <integer name="dbms-admin.commitFlag">1</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20070620 133730250</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <integer name="connectionStrength">100</integer>
   <string name="name"></string>
  </valueset>
  <origin seq="0" xlink:role="object" xlink:title="Class CVW_GenericMenuTree" xlink:href="#_002asnj0106ere7ubme9"/>
  <target seq="0" xlink:role="object" xlink:title="Class CVW_GenericAction" xlink:href="#_002asnj01040su1uk5bh"/>
 </relationship>

 <relationship id="_002aso0019a9b0tnai9n">
  <valueset size="7" xlink:role="type" xlink:title="Depends on" xlink:href="../../eka/languages/eka_relships.kmd#RelType_EKA:DependsOn_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <integer name="dbms-admin.commitFlag">1</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20070620 133730250</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <integer name="connectionStrength">100</integer>
   <string name="name"></string>
  </valueset>
  <origin seq="0" xlink:role="object" xlink:title="Class CVW_GenericMenuTree" xlink:href="#_002asnj0106ere7ubme9"/>
  <target seq="0" xlink:role="object" xlink:title="Class CVW_GenericSearch" xlink:href="#_002asnu00uibot2it5a4"/>
 </relationship>

 <relationship id="_002aso0019fo65ekah9u">
  <valueset size="7" xlink:role="type" xlink:title="Depends on" xlink:href="../../eka/languages/eka_relships.kmd#RelType_EKA:DependsOn_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <integer name="dbms-admin.commitFlag">1</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20070620 133731362</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <integer name="connectionStrength">100</integer>
   <string name="name"></string>
  </valueset>
  <origin seq="0" xlink:role="object" xlink:title="Class CVW_ViewManager" xlink:href="#_002aso001908jt4cfilt"/>
  <target seq="0" xlink:role="object" xlink:title="Class CVW_GenericMenuTree" xlink:href="#_002asnj0106ere7ubme9"/>
 </relationship>

 <object id="_002aso701iev4geuaqsh">
  <valueset size="10" xlink:role="type" xlink:title="VB Script (CVW)" xlink:href="../languages/script_types.kmd#ObjType_AKM:VBScript_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name"></string>
   <string name="description"></string>
   <integer name="dbms-admin.commitFlag">0</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20080417 091939704</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="comments"></string>
   <string name="script">set e = new EKA_Compare

dim GLOBAL_Compare_instance

Class EKA_Compare

    Public compareMode

    Public Function getPropViewStatus
        dim currentModel
        dim prop, propView, propName
        dim status
        dim rel, rels
        dim first

        status = -1
        getPropViewStatus = status

        if not isValid(GLOBAL_Compare_instance) then
            exit function
        end if

        set currentModel = metis.currentModel
        set propView = currentModel.currentInstance

        &#39; Find the property to compare to
        if isEnabled(propView) then
            propName = propView.title
            minval1 = getPropValue(propView, &#34;Minimum&#34;)
            maxval1 = getPropValue(propView, &#34;Maximum&#34;)
            set rels = Global_InformationManager.getAllNeighbours(GLOBAL_Compare_instance, &#34;&#34;, GLOBAL_Type_EkaHasProperty, 0)
            first = true
            for each rel in rels
                dim prop1, prop2
                set prop = rel.target
                if prop.title = propName then
                    minval2 = getPropValue(prop, &#34;Minimum&#34;)
                    maxval2 = getPropValue(prop, &#34;Maximum&#34;)
                    exit for
                end if
                if isParamValue(prop) then
                    dim propTitles
                    set prop1 = prop
                    set prop2 = prop
	                propTitles = Split(prop.title, &#34;.&#34;, -1, 1)
                    if propTitles(0) = propName then
                        if propTitles(1) = &#34;Minimum&#34; then 
                            set prop1 = prop
                            minval2 = getPropValue(prop1, &#34;Minimum&#34;)
                        elseif propTitles(1) = &#34;Maximum&#34; then 
                            set prop2 = prop
                            maxval2 = getPropValue(prop2, &#34;Maximum&#34;)
                        end if
                    end if
                    if not isEmpty(minval2) and not isEmpty(maxval2) then exit for
                end if
           next
        end if
        if not isEmpty(minval1) and not isEmpty(maxval1) and not isEmpty(minval2) and not isEmpty(maxval2) then
            getPropViewStatus = compareVals(minval1, maxval1, minval2, maxval2)
        end if

    End Function


    private function getPropValue(p, minOrMax)
        dim propval, valueProp
        if minOrMax = &#34;Minimum&#34; then valueProp = &#34;minval&#34; else valueProp = &#34;maxval&#34;
        if p.type.inherits(GLOBAL_Type_EkaPropertyView) then
            propval = p.getNamedStringValue(valueProp)
            if Len(propval) = 0 then propval = p.getNamedStringValue(&#34;value&#34;)
            if isNumeric(propval) then
                getPropValue = CDbl(propval)
            else
                getPropValue = Empty
            end if
        elseif p.type.inherits(GLOBAL_Type_EkaProperty) then
            if isParamValue(p) then
                dim propTitles
	            propTitles = Split(p.title, &#34;.&#34;, -1, 1)
                if propTitles(1) = &#34;Minimum&#34; then getPropValue = p.getNamedStringValue(&#34;value&#34;)
                if propTitles(1) = &#34;Maximum&#34; then getPropValue = p.getNamedStringValue(&#34;value&#34;)
            else
                dim rel, rels
                set rels = Global_InformationManager.getAllNeighbours(p, &#34;&#34;, GLOBAL_Type_EkaHasParameter, 0)
                if rels.count = 0 then
                    propval = p.getNamedStringValue(&#34;value&#34;)
                    if isNumeric(propval) then
                        getPropValue = CDbl(propval)
                    else
                        getPropValue = Empty
                    end if
                    exit function
                else
                    dim nomval, tolval
                    propval = &#34;&#34;
                    for each rel in rels
                        set param = rel.target
                        if param.title = &#34;Minimum&#34; then
                            propval = param.getNamedStringValue(&#34;value&#34;)
                            if Len(propval) &#62; 0 then
                                if isNumeric(propval) then
                                    getPropValue = CDbl(propval)
                                else
                                    getPropValue = Empty
                                end if
                                exit function
                            end if
                        elseif param.title = &#34;Nominal&#34; then
                            nomval = param.getNamedStringValue(&#34;value&#34;)
                         elseif param.title = &#34;Tolerance&#34; then
                            tolval = param.getNamedStringValue(&#34;tolerance&#34;)
                        end if
                    next
                    if isNumeric(nomval) then
                        propval = CDbl(nomval)
                        if isNumeric(tolval) then
                            tolval = CDbl(tolval)
                            if minOrMax = &#34;Minimum&#34; then
                                propval = propval * (1 - tolval / 100)
                            else
                                propval = propval * (1 + tolval / 100)
                            end if
                        end if
                        getPropValue = propval
                    elseif Len(nomval) &#62; 0 then
                        getPropValue = Empty
                    end if
                end if
            end if
        end if
    end function

    private function compareVals(minval1, maxval1, minval2, maxval2)    &#39; -1 = Undefined
                                                                        &#39;  0 = Not within range,
                                                                        &#39;  1 = Partly within range,
                                                                        &#39;  2 = Within range
        dim valmin1, valmin2, valmax1, valmax2
        dim valmin, valmax

        valmin1 = Sgn(minval1 - minval2)            &#39; -1: Lower, 0: Equal, 1: Higher
        valmin2 = Sgn(minval1 - maxval2)
        valmax1 = Sgn(maxval1 - maxval2)
        valmax2 = Sgn(maxval1 - minval2)
        
        if valmin2 &#60; 0 then 
            valmin = -2 
        elseif valmin1 &#60; 0 then 
            valmin = -1 
        elseif valmin2 &#62; 0 then 
            valmin = 2 
        elseif valmin1 &#62;0 then 
            valmin = 1 
        else 
            valmin = 0 
        end if
        if valmax2 &#60; 0 then 
            valmax = -2 
        elseif valmax1 &#60; 0 then 
            valmax = -1 
        elseif valmax2 &#62; 0 then 
            valmax = 2 
        elseif valmax1 &#62;0 then 
            valmax = 1 
        else 
            valmax = 0 
        end if

        if compareMode = 1 then
            if valmin = -2 and valmax = -2 then compareVals =  0      &#39; Too low and Too low
            if valmin = -2 and valmax = -1 then compareVals =  1      &#39; Too Low and Lower
            if valmin = -2 and valmax =  0 then compareVals =  1      &#39; Too Low and Exact
            if valmin = -2 and valmax =  1 then compareVals =  1      &#39; Too Low and Higher
            if valmin = -2 and valmax =  2 then compareVals =  0      &#39; Too Low and Too high

            if valmin = -1 and valmax = -2 then compareVals =  0      &#39; Lower and Too low
            if valmin = -1 and valmax = -1 then compareVals =  1      &#39; Lower and Lower
            if valmin = -1 and valmax =  0 then compareVals =  1      &#39; Lower and Exact
            if valmin = -1 and valmax =  1 then compareVals =  1      &#39; Lower and Higher
            if valmin = -1 and valmax =  2 then compareVals =  0      &#39; Lower and Too high

            if valmin =  0 and valmax = -2 then compareVals =  0      &#39; Exact and Too low
            if valmin =  0 and valmax = -1 then compareVals =  1      &#39; Exact and Lower
            if valmin =  0 and valmax =  0 then compareVals =  2      &#39; Exact and Exact
            if valmin =  0 and valmax =  1 then compareVals =  2      &#39; Exact and Higher
            if valmin =  0 and valmax =  2 then compareVals =  0      &#39; Exact and Too high

            if valmin =  1 and valmax = -2 then compareVals =  0      &#39; Higher and Too low
            if valmin =  1 and valmax = -1 then compareVals =  1      &#39; Higher and Lower
            if valmin =  1 and valmax =  0 then compareVals =  1      &#39; Higher and Exact
            if valmin =  1 and valmax =  1 then compareVals =  1      &#39; Higher and Higher
            if valmin =  1 and valmax =  2 then compareVals =  0      &#39; Higher and Too high

            if valmin =  2 and valmax = -2 then compareVals =  0      &#39; Too high and Too low
            if valmin =  2 and valmax = -1 then compareVals =  0      &#39; Too high and Lower
            if valmin =  2 and valmax =  0 then compareVals =  0      &#39; Too high and Exact
            if valmin =  2 and valmax =  1 then compareVals =  0      &#39; Too high and Higher
            if valmin =  2 and valmax =  2 then compareVals =  0      &#39; Too high and Too high

        end if

    end function

    &#39;-----------------------------------------------------------
    public function compareVal(valobj1, valobj2, accuracy)  &#39;  0: 1 = 2
                                                            &#39; -1: 1 &#60; 2
                                                            &#39; +1: 1 &#62; 2
                                                            &#39; -9: Different
        dim strval1, strval2
        dim dblval1, dblval2

        compareVal = -9

        if isObject(valobj1) then
            strval1 = valobj1.getNamedStringValue(&#34;value&#34;)
        else
            strval1 = valobj1
        end if
        if isObject(valobj2) then
            strval2 = valobj2.getNamedStringValue(&#34;value&#34;)
        else
            strval2 = valobj2
        end if

        if isNumeric(strval1) then
            dblval1 = CDbl(strval1)
            if isNumeric(strval2) then
                dblval2 = CDbl(strval2)
                if dblval1 &#62;= dblval2 * (1 - accuracy) and dblval1 &#60;= dblval2 * (1 + accuracy) then
                    compareVal = 0
                elseif dblval1 &#62;= dblval2 * (1 - accuracy) then
                    compareVal = 1
                elseif dblval1 &#60;= dblval2 * (1 - accuracy) then
                    compareVal = -1
                end if
            end if
        elseif strval1 = strval2 then
            compareVal = 0
        end if
    end function


    private function isParamValue(prop)
        if InStr(1, prop.title, &#34;.&#34;) &#62; 0 then isParamValue = true else isParamValue = false
    end function

    private function getParamValue(obj, paramName)
        dim rel, rels, param
        getParamValue = Empty
        set rels = Global_InformationManager.getAllNeighbours(obj, &#34;&#34;, GLOBAL_Type_EkaHasProperty, 0)
        for each rel in rels
            set param = rel.target
            if param.title = paramName then
                getParamValue = param.getNamedStringValue(&#34;value&#34;)
                exit function
            end if
        next
    end function

    private Sub Class_Initialize
        compareMode = 1
    end sub
End Class</string>
  </valueset>
 </object>

 <object id="_002aspt01b1nhd0jcjqc">
  <valueset size="10" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="../languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Function findPartsDK</string>
   <string name="description"></string>
   <integer name="dbms-admin.commitFlag">0</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20070820 123305983</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="comments"></string>
   <string name="script">    function findPartsDK(contextModel, parentObj, instType, propName, propValue)
        dim part, parts
        dim part2, parts2
        dim subParts
        dim ownerModel
        dim hasConstraint
        dim i, removed

        set findParts = Nothing
        if isEnabled(contextModel) then
            on error resume next
            set ownerModel = contextModel.ownerModel
            if not isValid(ownerModel) then
                set ownerModel = contextModel
            end if
        end if
        set subParts = metis.newInstanceList
        hasConstraint = false
        if Len(propName) &#62; 0 and Len(propValue) &#62; 0 then
            hasConstraint = true
        end if
        if isEnabled(parentObj) then
            set parts = parentObj.parts
            i = 1
            for each part in parts
                removed = false
                if part.url = ownerModel.url then
                    if part.isObject then
                        set parts2 = findParts(contextModel, part, instType, propName, propValue)
                        for each part2 in parts2
                            subParts.addLast part2
                        next
                        if part.type.inherits(instType) then
                            if hasConstraint then
                                sval = part.getNamedStringValue(propName)
                                if not sval = propValue then
                                    if sval = &#34;true&#34; then sval = &#34;1&#34;
                                    elseif sval = &#34;false&#34; then sval = &#34;0&#34;
                                end if
                                if not sval = propValue then
                                    parts.removeAt(i)
                                    removed = true
                                end if
                            end if
                        else
                            parts.removeAt(i)
                            removed = true
                        end if
                    else
                        parts.removeAt(i)
                        removed = true
                    end if
                    if not removed then i = i + 1
                else
                    parts.removeAt(i)
                    removed = true
                end if
            next
            for each part in subParts
                parts.addLast part
            next
            set findParts = parts
        end if
    end function
</string>
  </valueset>
 </object>

 <object id="_002aspt01b1nhd2ubqts">
  <valueset size="10" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="../languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Function instanceInList, instanceByNameInList, isInList, addToList</string>
   <string name="description"></string>
   <integer name="dbms-admin.commitFlag">0</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20071205 113712849</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="comments"></string>
   <string name="script">option explicit

    function instanceInList(instance, list)
  dim item

        if not isValid(list) then
            instanceInList = true
  else
            instanceInList = false
            for each item in list
                if instance.uri = item.uri then instanceInList = true
      next
  end if
    end function

&#39;---------------------------------------------------------------------------------------------------
    function instanceByNameInList(instance, list)
        dim item

        if not isValid(list) then
            instanceByNameInList = true
  else
            instanceByNameInList = false
            for each item in list
                if instance.name = item.name then instanceByNameInList = true
            next
        end if
    end function


&#39;-----------------------------------------------------------
    Sub addToList(ptr, list, noList)
        dim elem
        dim indx, found

        found = false
        for indx = 1 to noList
            set elem = list(indx)
            if isValid(elem) then
                if ptr.uri = elem.uri then
                    found = true
                    exit for
                end if
            end if
        next
        if not found then
            noList = noList + 1
            ReDim Preserve list(noList)
            set list(noList) = ptr
        end if
    End Sub

&#39;---------------------------------------------------------------------------------------------------
    Function isInList(ptr, list, noList)
        dim i
        for i = 1 to noList
            if list(i).uri = ptr.uri then
                isInList = true
                exit function
            end if
        next
    End Function</string>
  </valueset>
 </object>

 <object id="_002aspt01b1nhd4sbjoh">
  <valueset size="10" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="../languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Function isValid</string>
   <string name="description"></string>
   <integer name="dbms-admin.commitFlag">0</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20071203 085758475</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="comments"></string>
   <string name="script">option explicit
&#39;---------------------------------------------------------------------------------------------------
    function isValid(inst)
         isValid = true
 if isObject(inst) then
             if isEmpty(inst) then
              isValid = false
             elseif isNull(inst) then
              isValid = false
                      elseif inst is Nothing then
              isValid = false
             end if
 else
  if inst = &#34;&#34; then isValid = false
 end if
    end function</string>
  </valueset>
 </object>

 <object id="_002aspt01b1nhd4sgba0">
  <valueset size="10" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="../languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Function getInstModel</string>
   <string name="description"></string>
   <integer name="dbms-admin.commitFlag">0</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20071130 112759640</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="comments"></string>
   <string name="script">   &#39;---------------------------------------------------------------------------------------------------
    Function getInstModel(contextMode, modelName)
        dim model, connector
        dim child, children
        dim part, parts
        dim m, modelView, modelViews

        set getInstModel = Nothing
        set model = getCVWmodel
        select case contextMode
        case &#34;CurrentModel&#34;
            set getInstModel = model
        case &#34;SubModel&#34;
            set connector = Nothing
            set modelViews = model.views
            for each modelView in modelViews
                set children = modelView.children
                for each child in children
                    if child.isConnector then
                        set connector = child
                        set children = connector.children
                        if children.count &#62; 0 then
                            set child = children(1)
                            set parts = child.instance.parts
                            for each part in parts
                                if isEnabled(part) then
                                    set m = part.ownerModel
                                    if Len(modelName) &#62; 0 then
                                        if m.title = modelName then
                                            set getInstModel = part.ownerModel
                                            exit for
                                        end if
                                    else
                                        set getInstModel = m
                                        exit for
                                    end if
                                end if
                            next
                        end if
                        if isEnabled(getInstModel) then
                            exit for
                        end if
                    end if
                next
                if isEnabled(getInstModel) then
                    exit for
                end if
            next
        end select
    End Function

   &#39;---------------------------------------------------------------------------------------------------
    Function findInstModel(modelContext, modelViewName)
        dim model, connector
        dim child, children
        dim part, parts
        dim m, modelView, modelViews

        set findInstModel = Nothing
        set model = getCVWmodel
        select case modelContext
        case &#34;CurrentModel&#34;
            set findInstModel = model
        case &#34;SubModel&#34;
            set connector = Nothing
            set modelViews = getCVWmodel.views
            for each modelView in modelViews
                if modelView.title = modelViewName then
                    set children = modelView.children
                    for each child in children
                        if child.isConnector then
                            set connector = child
                            set children = connector.children
                            if children.count &#62; 0 then
                                set child = children(1)
                                set parts = child.instance.parts
                                for each part in parts
                                    if isEnabled(part) then
                                        set m = part.ownerModel
                                        set findInstModel = m
                                        exit for
                                    end if
                                next
                            end if
                            if isEnabled(findInstModel) then
                                exit for
                            end if
                        end if
                    next
                    exit for
                end if
            next
        end select
    End Function</string>
  </valueset>
 </object>

 <object id="_002aspt01b1nhd5ik2ph">
  <valueset size="10" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="../languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Function cleanTree</string>
   <string name="description"></string>
   <integer name="dbms-admin.commitFlag">0</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20071130 112703328</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="comments"></string>
   <string name="script">option explicit
    sub cleanTree(modelView, nodeView)
        dim  itemView

        for each itemView in nodeView.children
            call modelView.deleteObjectView(itemView)
        next

    end sub
</string>
  </valueset>
 </object>

 <object id="_002aspt01b1nhd5munni">
  <valueset size="10" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="../languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Function findWorkWindow, findWorkWindowView, getWorkWindowView</string>
   <string name="description"></string>
   <integer name="dbms-admin.commitFlag">0</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20071206 124950906</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="comments"></string>
   <string name="script">&#39;---------------------------------------------------------------------------------------------------
function findWorkWindow(instView)
    dim windowType, window2Type
    dim parentView, parentType
    dim instType

    set findWorkWindow = Nothing
    set windowType     = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/view_objects.kmd#UiType_CVW:Workarea_UUID&#34;)
    set window2Type    = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/view_objects.kmd#UiType_CVW:Workarea2_UUID&#34;)

    if isEnabled(instView) then
        set instType = instView.instance.type
        if instType.uri = windowType.uri or instType.uri = window2Type.uri then
            set findWorkWindow = instView.instance
            exit function
        end if
        set parentView = instView.parent
        if hasInstance(parentView) then
            set parentType = parentView.instance.type
            if parentType.uri = windowType.uri or parentType.uri = window2Type.uri then
                set findWorkWindow = parentView.instance
            else
                set findWorkWindow = findWorkWindow(parentView)
            end if
        end if
    end if
end function

&#39;---------------------------------------------------------------------------------------------------
function findWorkWindowView(instView)
    dim windowType, window2Type
    dim parentView, parentType
    dim instType

    set findWorkWindowView = Nothing
    set windowType     = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/view_objects.kmd#UiType_CVW:Workarea_UUID&#34;)
    set window2Type    = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/view_objects.kmd#UiType_CVW:Workarea2_UUID&#34;)

    if isEnabled(instView) then
        set instType = instView.instance.type
        if instType.uri = windowType.uri or instType.uri = window2Type.uri then
            set findWorkWindowView = instView
            exit function
        end if
        set parentView = instView.parent
        if hasInstance(parentView) then
            set parentType = parentView.instance.type
            if parentType.uri = windowType.uri or parentType.uri = window2Type.uri then
                set findWorkWindowView = parentView
            else
                set findWorkWindowView = findWorkWindowView(parentView)
            end if
        end if
    end if
end function


&#39;---------------------------------------------------------------------------------------------------
    Function getWorkWindowView(inst, instView)
        dim parentView
        dim view, views
        dim workarea, workareas
        dim wObject, workwindow
        dim indx

        set getWorkWindowView = Nothing
        set parentView = instView.parent.parent
        if parentView.title = &#34;CVW_MenuLevel1&#34; then
            &#39; Started from menu - find workplace
            set parentView = parentView.parent.parent
            set views = parentView.children
            for each view in views
                if view.title = &#34;CVW_Workspace&#34; then
                    set workareas = view.children
                    for each workarea in workareas
                        indx = workarea.children.count
                        set getWorkWindowView = workarea.children(indx)
                        exit function
                    next
                    exit for
                end if
            next
        elseif parentView.parent.title = &#34;CVW_Workspace&#34; then
            &#39; Started from button on titlebar
            set workarea = parentView
            indx = workarea.children.count
            set getWorkWindowView = workarea.children(indx)
            exit function
        end if
    End Function
&#39;---------------------------------------------------------------------------------------------------
</string>
  </valueset>
 </object>

 <object id="_002aspt01b1nhd6kk1di">
  <valueset size="10" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="../languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Function isEnabled</string>
   <string name="description"></string>
   <integer name="dbms-admin.commitFlag">0</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20071130 112126265</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="comments"></string>
   <string name="script">option explicit
&#39;---------------------------------------------------------------------------------------------------
    function isEnabled(inst)
        on error resume next
        isEnabled = true
        if isEmpty(inst) then
            isEnabled = false
        elseif isNull(inst) then
            isEnabled = false
        elseif inst is Nothing then
            isEnabled = false
        elseif not inst.isValid then
            isEnabled = false
        end if
    end function
</string>
  </valueset>
 </object>

 <object id="_002aspt01b1nhd7fu9l0">
  <valueset size="10" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="../languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Function findInstModel, findInstModel2</string>
   <string name="description"></string>
   <integer name="dbms-admin.commitFlag">0</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20071130 112811406</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="comments"></string>
   <string name="script">    
   &#39;---------------------------------------------------------------------------------------------------
    Function findInstModel(modelContext, modelViewName)
        dim model, connector
        dim child, children
        dim part, parts
        dim m, modelView, modelViews

        set findInstModel = Nothing
        set model = getCVWmodel
        select case modelContext
        case &#34;CurrentModel&#34;
            set findInstModel = model
        case &#34;SubModel&#34;
            set connector = Nothing
            set modelViews = getCVWmodel.views
            for each modelView in modelViews
                if modelView.title = modelViewName then
                    set children = modelView.children
                    for each child in children
                        if child.isConnector then
                            set connector = child
                            set children = connector.children
                            if children.count &#62; 0 then
                                set child = children(1)
                                set parts = child.instance.parts
                                for each part in parts
                                    if isEnabled(part) then
                                        set m = part.ownerModel
                                        set findInstModel = m
                                        exit for
                                    end if
                                next
                            end if
                            if isEnabled(findInstModel) then
                                exit for
                            end if
                        end if
                    next
                    exit for
                end if
            next
        end select
    End Function

   &#39;---------------------------------------------------------------------------------------------------
    Function findInstModel2(modelContext, modelViewName)
        dim model
        dim child, children
        dim part, parts
        dim m, modelView, modelViews
        dim connector, connectors
        dim count

        set findInstModel2 = Nothing
        set model = getCVWmodel
        set connectors = metis.newInstanceList
        select case modelContext
        case &#34;CurrentModel&#34;
            set findInstModel = model
        case &#34;SubModel&#34;
            set connector = Nothing
            set modelViews = getCVWmodel.views
            for each modelView in modelViews
                if modelView.title = modelViewName then
                    set children = modelView.children
                    for each child in children
                        if child.isConnector then
                            set connector = child.instance
                            call connectors.addLast(connector)
                        end if
                    next
                    count = connectors.count
                    if count = 1 then
                        set findInstModel2 = connectors(1)
                    elseif count &#62; 1 then
                        set cvwSelectDialog = new CVW_SelectDialog
                        cvwSelectDialog.singleSelect = true
                        cvwSelectDialog.title = &#34;Select submodel&#34;
                        cvwSelectDialog.heading = &#34;Search by model&#34;
                        set connectors = cvwSelectDialog.show(connectors)
                        if connectors.count = 1 then
                            set findInstModel2 = connectors(1)
                        end if
                    end if
                end if
            next
        end select
    End Function

   &#39;---------------------------------------------------------------------------------------------------
</string>
  </valueset>
 </object>

 <object id="_002aspt01b1nhd84rt86">
  <valueset size="10" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="../languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Function findCVWcomponent</string>
   <string name="description"></string>
   <integer name="dbms-admin.commitFlag">0</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20071130 112936718</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="comments"></string>
   <string name="script">&#39;---------------------------------------------------------------------------------------------------
    Function findCVWcomponent(inst, componentName)
        dim uses1Type, uses2Type, compType
        dim comp, components
        dim found

        set findCVWcomponent = Nothing

        set compType  = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/cvw_objects.kmd#ObjType_CVW:CVW_Component_UUID&#34;)
        set usesType  = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/cvw_relships.kmd#RelType_CVW:usesComponent_UUID&#34;)
        set uses2Type = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/cvw_relships.kmd#RelType_CVW:uses2Component_UUID&#34;)

        found = false
        if isEnabled(inst) then
            if inst.type.uri = compType.uri then
                set components = inst.getNeighbourObjects(0, usesType, compType)
                for each comp in components
                    if isEnabled(comp) then
                        if comp.title = componentName then
                            set findCVWcomponent = comp
                            found = true
                            exit for
                        end if
                    end if
                next
            end if
            if not found then
                set components = inst.getNeighbourObjects(0, uses2Type, compType)
                for each comp in components
                    if isEnabled(comp) then
                        if comp.title = componentName then
                            set findCVWcomponent = comp
                            found = true
                            exit for
                        end if
                    end if
                next
            end if
        end if
    End Function</string>
  </valueset>
 </object>

 <object id="_002aspt01b1nhd9v94gu">
  <valueset size="10" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="../languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Function getWorkareaLabelText</string>
   <string name="description"></string>
   <integer name="dbms-admin.commitFlag">0</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20071130 112235359</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="comments"></string>
   <string name="script">&#39;---------------------------------------------------------------------------------------------------
    Function getWorkareaLabelText
        dim currentInstance
        dim title

        getWorkareaLabelText = &#34;&#34;

        set currentInstance = metis.currentModel.currentInstance

        if isEnabled(currentInstance) then
            title = currentInstance.title
            if InStr(title, &#34;WorkArea_[&#34;) = 0 then
                getWorkareaLabelText = title
            end if
        end if
    End Function</string>
  </valueset>
 </object>

 <object id="_002aspt01b1nhdapthfc">
  <valueset size="10" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="../languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Function findInstanceView</string>
   <string name="description"></string>
   <integer name="dbms-admin.commitFlag">0</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20071130 112440906</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="comments"></string>
   <string name="script">&#39;---------------------------------------------------------------------------------------------------
    function findInstanceView(model, objectType, propertyName, propertyValue)
        dim insts, inst, views

        set findInstanceView = Nothing
        set insts = model.findInstances(objectType, propertyName, propertyValue)
        for each inst in insts
            if isEnabled(inst) then
                set views = inst.views
                if views.count &#62; 0 then
                    set findInstanceView =  views(1)
                    exit for
                end if
            end if
        next
    end function
</string>
  </valueset>
 </object>

 <object id="_002aspt01b1nhdd9t85l">
  <valueset size="10" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="../languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Function hasInstance</string>
   <string name="description"></string>
   <integer name="dbms-admin.commitFlag">0</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20071130 112112640</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="comments"></string>
   <string name="script">option explicit
    function hasInstance(instView)
        hasInstance = false
        if isValid(instView) then
            if instView.hasInstance then
                hasInstance = true
            end if
        end if
    end function</string>
  </valueset>
 </object>

 <object id="_002aspt01b1nhdec3ru9">
  <valueset size="10" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="../languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Function relocate</string>
   <string name="description"></string>
   <integer name="dbms-admin.commitFlag">0</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20071130 112248062</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="comments"></string>
   <string name="script">&#39;---------------------------------------------------------------------------------------------------
    Function relocate(inst, modelObject, instView)
        set relocate = inst
        if inst.parent.uri &#60;&#62; modelObject.uri then
            set relocate = modelObject.newPart(inst.type)
            call copyPropertyValues(inst, relocate)
            call instView.setInstance(relocate)
            model.deleteObject(inst)
        end if
    End Function</string>
  </valueset>
 </object>

 <object id="_002aspt01b1nhdfnp0bn">
  <valueset size="10" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="../languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Sub resetCVWcomponent</string>
   <string name="description"></string>
   <integer name="dbms-admin.commitFlag">0</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20071130 112844250</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="comments"></string>
   <string name="script">   &#39;---------------------------------------------------------------------------------------------------
    Sub resetCVWcomponent(component)
        dim prop, properties

        set properties = component.getNeighbourObjects(0, GLOBAL_Type_EkaHasProperty, GLOBAL_Type_EkaProperty)
        for each prop in properties
            on error resume next
            propValue = prop.getNamedStringValue(&#34;value&#34;)
            call prop.setNamedStringValue(&#34;tempvalue&#34;, propValue)
        next
    End Sub</string>
  </valueset>
 </object>

 <object id="_002aspt01b1nhdh5k34g">
  <valueset size="10" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="../languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Function generateTree</string>
   <string name="description"></string>
   <integer name="dbms-admin.commitFlag">0</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20071130 112658562</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="comments"></string>
   <string name="script">option explicit

 &#39;---------------------------------------------------------------------------------------------------
    sub generateTree(sourceNodeView, targetNodeView, hasNodeType, nodeType, textScale, scaleFactor)    &#39; textScale = 0.05, scaleFactor = 1.3
        dim  node, itemView, newItemView

        if not (hasInstance(sourceNodeView) and isEnabled(nodeType) and isEnabled(hasNodeType)) then
            exit sub
        end if

        set node = sourceNodeView.instance
        For each itemView in node.getNeighbourRelationships(0, hasNodeType)
            set newItemView             = targetNodeView.newObjectView(itemView.target)
            newItemView.openSymbol      = itemView.target.Views(1).openSymbol
            newItemView.closedSymbol    = itemView.target.Views(1).closedSymbol
            newItemView.textScale       = textScale
            newItemView.geometry.width  = newItemView.parent.geometry.width * scaleFactor
            newItemView.geometry.height = newItemView.parent.geometry.height * scaleFactor
            newItemView.close
            newItemView.parent.open
        next
    end sub
&#39;----------------------------------------------------------------------------------------------------------------------
</string>
  </valueset>
 </object>

 <object id="_002aspt01b1nhdh7m7l4">
  <valueset size="10" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="../languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Function instancesInModel</string>
   <string name="description"></string>
   <integer name="dbms-admin.commitFlag">0</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20071130 112209515</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="comments"></string>
   <string name="script">option explicit      
 function instancesInModel(instances, model)
        dim inst
        dim i, removed

        set instancesInModel = Nothing
        if isValid(instances) then
            &#39; If not in model, remove from list
            i = 1
            for each inst in instances
                removed = false
                if inst.ownerModel.uri &#60;&#62; model.uri then
                    instances.removeAt(i)
                    removed = true
                end if
                if not removed then
                    i = i + 1
                end if
            next
            set instancesInModel = instances
        end if
    end function</string>
  </valueset>
 </object>

 <object id="_002aspt01b1nhdih5b2f">
  <valueset size="10" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="../languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Function getModelFromConnector</string>
   <string name="description"></string>
   <integer name="dbms-admin.commitFlag">0</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20070820 123225655</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="comments"></string>
   <string name="script">    Function getModelFromConnector(connector)
        dim container, containers
        dim part, parts
        dim mdl

        set getModelFromConnector = Nothing
        set containers = connector.parts
        if containers.count &#62; 0 then
            for each container in containers
                if isEnabled(container) then
                    set parts = container.parts
                    for each part in parts
                        set getModelFromConnector = part.ownerModel
                        exit for
                    next
                    exit for
                end if
            next
        end if
    End Function
</string>
  </valueset>
 </object>

 <object id="_002aspt01b1nhdk5mefe">
  <valueset size="10" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="../languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Function getCVWmodel</string>
   <string name="description"></string>
   <integer name="dbms-admin.commitFlag">0</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20071130 112825484</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="comments"></string>
   <string name="script">    &#39;---------------------------------------------------------------------------------------------------
    Function getCVWmodel
        dim model, modelView
        dim child, children
        dim part

        set model = metis.currentModel
        set modelView = model.currentModelView

        set getCVWmodel = model

        if isEnabled(modelView) then
            &#39; Find CVW model
            set children = modelView.children
            if children.count &#62; 0 then
                for each child in children
                    if hasInstance(child) then
                        set part = child.instance
                        if isEnabled(part) then
                            set getCVWmodel = part.ownerModel
                            exit for
                        end if
                    end if
                next
            end if
        end if
    End Function
</string>
  </valueset>
 </object>

 <object id="_002aspt01b1nhdkvcktm">
  <valueset size="10" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="../languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Sub configureCVWcomponent</string>
   <string name="description"></string>
   <integer name="dbms-admin.commitFlag">0</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20071130 112915171</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="comments"></string>
   <string name="script">&#39;---------------------------------------------------------------------------------------------------
    Sub configureCVWcomponent(configuringObject, component, useConfiguredValue)
        dim compProp, configProp
        dim compProps, configProps
        dim spec, specs
        dim rel, relships
        dim compType, specContainerType
        dim propValue, checkEquals

        set compType        = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/cvw_objects.kmd#ObjType_CVW:CVW_Component_UUID&#34;)
        set specContainerType = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/spec_objects.kmd#ObjType_CVW:Specification_Container_UUID&#34;)

        if configuringObject.type.uri &#60;&#62; compType.uri then
            checkEquals = true
        else
            checkEquals = false
        end if
        set compProps   = component.getNeighbourObjects(0, GLOBAL_Type_EkaHasProperty, GLOBAL_Type_EkaProperty)
        set ekaInstance = new EKA_Instance
        set ekaInstance.Instance = configuringObject
        set configProps = ekaInstance.Properties
        &#39;set configProps = configuringObject.getNeighbourObjects(0, GLOBAL_Type_EkaHasProperty, GLOBAL_Type_EkaProperty)
        for each compProp in compProps
            set configProp = getConfiguringProperty(configProps, compProp, checkEquals)
            if isEnabled(configProp) then
                &#39; Check for has value references
                set relships = configProp.getNeighbourRelationships(0, GLOBAL_Type_EkaHasValue)
                if relships.count &#62; 0 then
                    for each rel in relships
                        if isEnabled(rel) then
                            call compProp.setNamedStringValue(&#34;tempvalue&#34;, rel.target.uri)
                            exit for
                        end if
                    next
                else
                    if useConfiguredValue then
                        propValue = configProp.getNamedStringValue(&#34;tempvalue&#34;)
                    else
                        propValue = configProp.getNamedStringValue(&#34;value&#34;)
                    end if
                    if Len(propValue) &#62; 0 then
                        call compProp.setNamedStringValue(&#34;tempvalue&#34;, propValue)
                    end if
                end if
            end if
        next
    End Sub

   &#39;---------------------------------------------------------------------------------------------------
    Function getConfiguringProperty(configProps, compProp, checkEquals)
        dim equalProps
        dim prop, configProp

        set getConfiguringProperty = Nothing

        set equalProps = compProp.getNeighbourObjects(0, GLOBAL_Type_EkaEquals, GLOBAL_Type_EkaProperty)
        for each prop in equalProps
            for each configProp in configProps
                if prop.uri = configProp.uri then
                    set getConfiguringProperty = configProp
                    exit for
                end if
            next
        next
        if not isEnabled(getConfiguringProperty) and checkEquals then
            for each configProp in configProps
                if compProp.title = configProp.title then
                    set getConfiguringProperty = configProp
                    exit for
                end if
            next
        end if
    End Function
</string>
  </valueset>
 </object>

 <object id="_002aspt01b1nhdnqqjs0">
  <valueset size="10" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="../languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Sub copyPropertyValues</string>
   <string name="description"></string>
   <integer name="dbms-admin.commitFlag">0</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20071130 112310359</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="comments"></string>
   <string name="script">&#39;---------------------------------------------------------------------------------------------------
    sub copyPropertyValues(fromInstance, toInstance)
        dim prop, properties
        dim value

        if isEnabled(fromInstance) and isEnabled(toInstance) then
            set properties = fromInstance.type.allProperties
            for each prop in properties
                on error resume next
                set value = fromInstance.getValue(prop)
                call toInstance.setValue(prop, value)
            next
        end if
    end sub
</string>
  </valueset>
 </object>

 <object id="_002aspt01b1nhdnvmq27">
  <valueset size="10" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="../languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Function buildInstRules, buildRelRules, buildSymbolRules</string>
   <string name="description"></string>
   <integer name="dbms-admin.commitFlag">0</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20080326 084828531</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="comments"></string>
   <string name="script">&#39;---------------------------------------------------------------------------------------------------
    function buildRelRules(rel1, obj1, list, noList, usedList, noUsed, excludeRelTypeList, noRelTypes, hasConstraintType, parentObj)
        dim obj2, rel, rels
        dim part, parts
        dim relDir
        dim type1, type2, relType, excludeRelType
        dim cvwRule, isTopType
        dim i, exclude

        buildRelRules = false

        if isEnabled(obj1) then
            if not isInList(obj1, usedList, noUsed) then
                call addToList(obj1, usedList, noUsed)
            end if
            set rels = obj1.neighbourRelationships
            for each rel in rels
                if isEnabled(rel) then
                    exclude = false
                    if isEnabled(rel1) then
                        if rel.uri = rel1.uri then
                            exclude = true
                        end if
                    end if
                    if not exclude then
                        for i = 1 to noRelTypes
                            set excludeRelType = excludeRelTypeList(i)
                            if isEnabled(excludeRelType) then
                                if excludeRelType.uri = rel.type.uri then
                                    exclude = true
                                    exit for
                                end if
                            end if
                        next
                    end if
                    if not exclude then
                        if not ruleInList(rel, list, noList) then
                            call buildRelRule(rel, obj1, list, noList, usedList, noUsed, excludeRelTypeList, noRelTypes, hasConstraintType, parentObj)
                            buildRelRules = true
                        end if
                    end if
                end if
            next
            set parts = obj1.parts
            for each part in parts
                if isEnabled(part) then
                    call buildPartRule(obj1, part, list, noList, usedList, noUsed, excludeRelTypeList, noRelTypes, hasConstraintType, parentObj)
                end if
            next
        end if
    end function

&#39;-----------------------------------------------------------
    sub buildSymbolRules(inst, list, noList)
        dim hasViewParamType
        dim param, params
        dim symbol, symbols
        dim symbolUri
        dim viewState
        dim cvwRule
        dim found

        set hasViewParamType = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/has_view_parameter.kmd#has_ViewParameter&#34;)

        if isEnabled(inst) then
            found = false
            set cvwRule = new CVW_SymbolRule
            set cvwRule.instType = inst.type
            cvwRule.title = inst.type.title
            &#39; Look for connected symbol
            set symbols = inst.getNeighbourObjects(0, GLOBAL_Type_EkaHasSymbol, GLOBAL_Type_EkaSymbol)
            for each symbol in symbols
                symbolUri = symbol.getNamedStringValue(&#34;symbol&#34;)
                viewState = symbol.getNamedValue(&#34;view_state&#34;).getInteger
                select case viewState
                  case 1
                    cvwRule.symbol = symbolUri
                  case 2
                    cvwRule.symbolNestedOpen = symbolUri
                  case 3
                    cvwRule.symbolNestedClosed = symbolUri
                end select
                found = true
            next
            set params = inst.getNeighbourObjects(0, hasViewParamType, GLOBAL_Type_EkaProperty)
            for each param in params
                if param.title = &#34;TypeView&#34; then
                    dim valueProp
                    valueProp = &#34;value&#34;
                    cvwRule.typeView = param.getNamedStringValue(valueProp)
                    found = true
                    exit for
                end if
            next
            if found then
                call addRuleToList(cvwRule, list, noList)
            else
                set cvwRule = Nothing
            end if
        end if
    end sub

&#39;-----------------------------------------------------------
    sub buildInstRules(inst, list, noList, hasConstraintType)
        dim instType
        dim rel, relships, prop, props
        dim operator, propName, propValue
        dim operatorProp, valueProp
        dim cvwRule

        if isEnabled(inst) then
            &#39; Special cases
            if inst.title = &#34;AnyObject&#34; then
                set instType = GLOBAL_Type_AnyObject
            elseif inst.title = &#34;AnyRelationship&#34; then
                set instType = GLOBAL_Type_AnyRelationship
            else
                set instType = inst.type
            end if
            operatorProp = &#34;Operator&#34;
            valueProp    = &#34;value&#34;
            set relships = inst.getNeighbourRelationships(0, hasConstraintType)
            if relships.count = 0 then
                set cvwRule = new CVW_InstRule
                set cvwRule.instType = instType
                cvwRule.title     = instType.title
                cvwRule.propname  = &#34;&#34;
                cvwRule.operator  = &#34;&#34;
                cvwRule.propValue = &#34;&#34;
                if inst.title = &#34;Current&#34; then cvwRule.useCurrent = true
                if inst.title = &#34;Nothing&#34; then cvwRule.isNothing = true
                set props = inst.getNeighbourObjects(0, GLOBAL_Type_EkaHasProperty, GLOBAL_Type_EkaProperty)
                for each prop in props
                    if prop.title = &#34;IsContextInstance&#34; then
                        cvwRule.isContextInstance = true
                        exit for
                    end if
                next
                call addRuleToList(cvwRule, list, noList)
                exit sub
            end if
            for each rel in relships
                if isEnabled(rel) then
                    operator = rel.getNamedStringValue(operatorProp)
                    set prop = rel.target
                    if isEnabled(prop) then
                        set cvwRule = new CVW_InstRule
                        set cvwRule.instType = instType
                        propName = prop.name
                        propValue = prop.getNamedStringValue(valueProp)
                        if propName = &#34;Hide&#34; then
                            cvwRule.isHide = true
                            cvwRule.title = instType.title &#38; &#34;is Hide&#34;
                        else
                            cvwRule.title = instType.title &#38; &#34;_has_&#34; &#38; propName &#38; &#34;_&#34; &#38; operator &#38; &#34;_&#34; &#38; propValue
                        end if
                        cvwRule.propname  = propName
                        cvwRule.operator  = operator
                        cvwRule.propvalue = propValue
                        if inst.title = &#34;Current&#34; then cvwRule.useCurrent = true
                        if inst.title = &#34;Nothing&#34; then cvwRule.isNothing = true
                        call addRuleToList(cvwRule, list, noList)
                    end if
                end if
            next
        end if
    end sub

&#39;-----------------------------------------------------------
    sub buildRelRule(rel, obj1, list, noList, usedList, noUsed, excludeRelTypeList, noRelTypes, hasConstraintType, parentObj)
        dim relType, relDir
        dim type1, type2, excludeRelType
        dim obj2, rel1, rels
        dim operator, propName, propValue
        dim prop, operatorProp, valueProp
        dim i, exclude
        dim cvwRule, objRule
        dim noObjRules

        set relType = rel.type
        if rel.origin.uri = obj1.uri then
            relDir = 0
            set type1 = obj1.type
            set obj2 = rel.target
            set type2 = obj2.type
        elseif rel.target.uri = obj1.uri then
            relDir = 1
            set type1 = obj1.type
            set obj2 = rel.origin
            set type2 = obj2.type
        end if
        if isEnabled(parentObj) then
            if obj2.parent.uri &#60;&#62; parentObj.uri then
                exit sub
            end if
        end if

        set cvwRule = new CVW_RelRule
        set cvwRule.parentType = type1
        set cvwRule.relType    = relType
        set cvwRule.childType  = type2
        cvwRule.relDir = relDir
        cvwRule.title = type1.title &#38; &#34;_&#34; &#38; relType.title &#38; &#34;_&#34; &#38; type2.title
        if obj2.title = &#34;Nothing&#34; then cvwRule.toNothing = true
        if obj2.uri = obj1.uri then cvwRule.isRecursive = true
        &#39; Handle constraints on obj2
        noObjRules = 0
        operatorProp = &#34;Operator&#34;
        valueProp    = &#34;value&#34;
        set rels = obj2.getNeighbourRelationships(0, hasConstraintType)
        for each rel1 in rels
            if isEnabled(rel1) then
                operator = rel1.getNamedStringValue(operatorProp)
                set prop = rel1.target
                if isEnabled(prop) then
                    on error resume next
                    propName = prop.name
                    propValue = prop.getNamedStringValue(valueProp)
                    set objRule = new CVW_InstRule
                    set objRule.instType = obj2.type
                    objRule.title = obj2.type.title &#38; &#34;_has_&#34; &#38; propName &#38; &#34;_&#34; &#38; operator &#38; &#34;_&#34; &#38; propValue
                    objRule.propname  = propName
                    objRule.operator  = operator
                    objRule.propvalue = propValue
                    noObjRules = noObjRules + 1
                    select case noObjRules
                    case 1 set cvwRule.objRule1 = objRule
                    case 2 set cvwRule.objRule2 = objRule
                    case 3 set cvwRule.objRule3 = objRule
                    end select
                    if noObjRules &#60;= 3 then
                        cvwRule.noObjRules = noObjRules
                   end if
                end if
            end if
        next
        call addRuleToList(cvwRule, list, noList)
        if obj2.uri &#60;&#62; obj1.uri then
            if isInList(obj2, usedList, noUsed) then
                exit sub
            end if
        end if
        if obj2.uri &#60;&#62; obj1.uri then
            &#39; Follow the relationships further
            call buildRelRules(rel, obj2, list, noList, usedList, noUsed, excludeRelTypeList, noRelTypes, hasConstraintType, parentObj)
        end if
    end sub

&#39;-----------------------------------------------------------
    sub buildPartRule(obj1, obj2, list, noList, usedList, noUsed, excludeRelTypeList, noRelTypes, hasConstraintType, parentObj)
        dim relType, relDir
        dim type1, type2, excludeRelType
        dim rel, rel1, rels
        dim operator, propName, propValue
        dim prop, operatorProp, valueProp
        dim i, exclude
        dim cvwRule, objRule
        dim noObjRules

        set type1 = obj1.type
        set type2 = obj2.type
        set cvwRule = new CVW_RelRule
        set cvwRule.parentType = type1
        set cvwRule.relType = GLOBAL_Type_EkaHasPart
        set cvwRule.childType = type2
        cvwRule.relDir = 0
        cvwRule.title = type1.title &#38; &#34;_&#34; &#38; cvwRule.relType.title &#38; &#34;_&#34; &#38; type2.title
        if obj2.title = &#34;Nothing&#34; then cvwRule.toNothing = true
        &#39; Handle constraints on obj2
        operatorProp = &#34;Operator&#34;
        valueProp    = &#34;value&#34;
        set rels = obj2.getNeighbourRelationships(0, hasConstraintType)
        for each rel1 in rels
            if isEnabled(rel1) then
                operator = rel1.getNamedStringValue(operatorProp)
                set prop = rel1.target
                if isEnabled(prop) then
                    propName = prop.name
                    propValue = prop.getNamedStringValue(valueProp)
                    set objRule = new CVW_InstRule
                    set objRule.instType = obj2.type
                    objRule.title = obj2.type.title &#38; &#34;_has_&#34; &#38; propName &#38; &#34;_&#34; &#38; operator &#38; &#34;_&#34; &#38; propValue
                    objRule.propname  = propName
                    objRule.operator  = operator
                    objRule.propvalue = propValue
                    noObjRules = noObjRules + 1
                    select case noObjRules
                    case 1 set cvwRule.objRule1 = objRule
                    case 2 set cvwRule.objRule2 = objRule
                    case 3 set cvwRule.objRule3 = objRule
                    end select
                    if noObjRules &#60;= 3 then
                        cvwRule.noObjRules = noObjRules
                   end if
                end if
            end if
        next
        call addRuleToList(cvwRule, list, noList)
        &#39; Follow the relationships further
        call buildRelRules(rel, obj2, list, noList, usedList, noUsed, excludeRelTypeList, noRelTypes, hasConstraintType, parentObj)
    end sub

&#39;-----------------------------------------------------------
    Function ruleInList(rel, list, noList)
        dim rule
        dim indx, found
        dim type1, type2, relType
        dim title

        ruleInList = false
        set relType = rel.type
        set type1   = rel.origin.type
        set type2   = rel.target.type
        title = type1.title &#38; &#34;_&#34; &#38; relType.title &#38; &#34;_&#34; &#38; type2.title
        for indx = 1 to noList
            set rule = list(indx)
            if isValid(rule) then
                if rule.relType.uri = relType.uri then
                    if rule.relDir = 0 then
                        if rule.parentType.uri = type1.uri then
                            if rule.childType.uri = type2.uri then
                                ruleInList = true
                                exit for
                            end if
                        end if
                    elseif rule.relDir = 1 then
                        if rule.parentType.uri = type2.uri then
                            if rule.childType.uri = type1.uri then
                                ruleInList = true
                                exit for
                            end if
                        end if
                    end if
                end if
            end if
        next
    End Function

&#39;-----------------------------------------------------------
    Sub addRuleToList(cvwRule, list, noList)
        dim rule
        dim indx, found

        found = false
        for indx = 1 to noList
            set rule = list(indx)
            if isValid(rule) then
                if cvwRule.title = rule.title then
                    found = true
                    exit for
                end if
            end if
        next
        if not found then
            noList = noList + 1
            ReDim Preserve list(noList)
            set list(noList) = cvwRule
        end if
    End Sub

</string>
  </valueset>
 </object>

 <object id="_002aspt01b1nhds9h8st">
  <valueset size="10" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="../languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Function viewExists, relViewExists</string>
   <string name="description"></string>
   <integer name="dbms-admin.commitFlag">0</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20071130 112424125</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="comments"></string>
   <string name="script">&#39;---------------------------------------------------------------------------------------------------
    function viewExists(inst, parentView)
        dim v, view, views

        set viewExists = Nothing
        set views = inst.views
        for each view in views
            if isInView(view, parentView) then
                set viewExists = view
                exit for
            end if
        next
    end function

&#39;---------------------------------------------------------------------------------------------------
    function relViewExists(rel, fromObjView, toObjView)
        dim relView, views

        set relViewExists = Nothing
        set views = rel.views
        for each relView in views
            if relView.origin.uri = fromObjView.uri then
                if relView.target.uri = toObjView.uri then
                    set relViewExists = relView
                end if
            end if
        next
    end function
</string>
  </valueset>
 </object>

 <object id="_002aspt01b1nhdvuiibc">
  <valueset size="10" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="../languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Function isInView</string>
   <string name="description"></string>
   <integer name="dbms-admin.commitFlag">0</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20071130 112404515</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="comments"></string>
   <string name="script">&#39;---------------------------------------------------------------------------------------------------
    function isInView(instView, containerView)
        dim parentView
        dim found

        isInView = false
        if isEnabled(instView) and isEnabled(containerView) then
            set parentView = instView.parent
            if isEnabled(parentView) then
                if parentView.uri = containerView.uri then
                    isInView = true
                else
                    found = isInView(parentView, containerView)
                    if found then isInView = true
                end if
            end if
        end if

    end function


</string>
  </valueset>
 </object>

 <object id="_002aspt01b45jl1ab6p8">
  <valueset size="10" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="../languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Class CVW_Object</string>
   <string name="description"></string>
   <integer name="dbms-admin.commitFlag">0</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20071130 112951921</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="comments"></string>
   <string name="script">option explicit


&#39;-----------------------------------------------------------
&#39;-----------------------------------------------------------
Class CVW_Object


    &#39; Variant parameters
    Public Title                          &#39; String

    &#39; Context variables (public)
    Public currentModel
    Public currentModelView
    Public currentInstance
    Public currentInstanceView
    Public workWindow
    Public ObjectAspectRatio              &#39; Float
    Public nestedTextFactor
    Public treeTextFactor
    &#39; Types
    Private specContainerType
    Private hasViewStrategyType
    Private hasLanguageType
    Private isTopType
    Private hasInstanceContextType
    Private hasInstanceContext2Type
    Private hasValueType
    Private hasValueConstraintType
    Private propertyType
    Private hasPropertyType
    &#39; Others
    Public  noPathRules
    Public  pathRules()
    Private noRelTypes
    Private relTypeList()

&#39;-----------------------------------------------------------
    Public Function newObject
        dim wObject
        dim cvwArg
        dim typeObjUri, typeObj, objType
        dim newObjectView
        dim model, modelObject
        dim instContext, instContexts
        dim specObject, specObjects
        dim strategyCont, strategyConts
        dim languageCont, languageConts, languageContView
        dim instanceCont, instanceConts
        dim children, childView, inst
        dim cvwViewStrategy, rule
        dim ekaInstance
        dim propVal
        dim rel, rels
        dim obj, parentInst, parentInstView
        dim relType, relship, relshipView
        dim cvwObjView
        dim objGeo, size
        dim contextObj
        dim selected
        dim languageRules
        dim noLanguageRules
        dim i

        &#39; Validate input arguments
        set newObject = Nothing
        set ekaInstance = new EKA_Instance
        if hasInstance(workWindow) then
            set wObject = workWindow.instance
            if not isEnabled(wObject) then
                &#39; Call error function
                exit Function
            end if
        end if
        &#39; Find type argument
        set cvwArg = new CVW_ArgumentValue
        typeObjUri = cvwArg.getArgumentValue(currentInstance, &#34;Type&#34;)
        if Len(typeObjUri) &#62; 0 then
            set typeObj = metis.findInstance(typeObjUri)
            if isEnabled(typeObj) then
                set objType = typeObj.type
                if not isEnabled(objType) then
                    &#39; Call error function
                    exit Function
                end if
            end if
        end if
        &#39; Get parent object(s)
        set model = contentModel()
        set modelObject = metis.findInstance(model.uri)
        set selected = metis.selectedObjectViews
        if selected.count = 0 then
            set parentInst = modelObject
            set parentInstView = workWindow
        elseif selected.count = 1 then
            if isInView(selected(1), workWindow) then
                if hasInstance(selected(1)) then
                    set parentInst = selected(1).instance
                    set parentInstView = selected(1)
                end if
            else
                set parentInst = modelObject
                set parentInstView = workWindow
            end if
        end if
        if not isEnabled(parentInst) then
            call MsgBox(&#34;Unable to create new object!&#34;, vbExclamation)
            exit function
        end if
        if parentInst.uri = wObject.uri then
            set parentInst = modelObject
            set parentInstView = workWindow
        end if

        &#39; Find language rules
        if isEnabled(wObject) then
            set languageConts = wObject.getNeighbourObjects(0, hasLanguageType, specContainerType)
            if languageConts.count &#62; 0 then
                set languageCont = languageConts(1)
                set languageContView = languageCont.views(1)
                set children = languageContView.children
                for each childView in children
                    if hasInstance(childView) then
                        set inst= childView.instance
                        if inst.type.uri = parentInst.type.uri then
                            call buildRelRules(inst, pathRules, noPathRules, relTypeList, noRelTypes)
                        end if
                    end if
                next
            end if
        end if
        &#39; Find view strategies
        if isEnabled(wObject) then
            set strategyConts = wObject.getNeighbourObjects(0, hasViewStrategyType, specContainerType)
            if strategyConts.count &#62; 0 then
                set strategyCont = strategyConts(1)
                set cvwViewStrategy = new CVW_ViewStrategy
                call cvwViewStrategy.build(strategyCont)
            end if
        end if
        &#39; Get instance context parameters
        set instanceConts = wObject.getNeighbourObjects(0, hasInstanceContextType, specContainerType)
        if instanceConts.count &#62; 0 then
            set instanceCont = instanceConts(1)
            propVal = ekaInstance.getPropertyValue(instanceCont, &#34;ObjectAspectRatio&#34;)
            if Len(propVal) &#62; 0 then
                ObjectAspectRatio = CDbl(propVal)
            end if
        end if

        set cvwObjView = new CVW_ObjectView
        if parentInst.uri = modelObject.uri then
            &#39; Create object
            set newObject = parentInst.newPart(objType)
            set newObjectView = cvwObjView.create(workWindow, workWindow, newObject, ObjectAspectRatio)
            if newObjectView.isNested then
                newObjectView.close
            end if
        elseif isValid(cvwViewStrategy) then
            &#39; Check part-of rules
            for i = 1 to cvwViewStrategy.noHierarchyRules
                set rule = cvwViewStrategy.hierarchyRules(i)
                if rule.parentType.uri = parentInst.type.uri then
                    if rule.childType.uri = objType.uri then
                        &#39; Create object
                        set newObject = model.newObject(objType)
                        if cvwViewStrategy.viewAsHierarchy then
                            parentInstView.open
                            set newObjectView = cvwObjView.create(workWindow, parentInstView, newObject, ObjectAspectRatio)
                        else
                            set newObjectView = cvwObjView.create(workWindow, workWindow, newObject, ObjectAspectRatio)
                        end if
                        &#39; Resize if specified
                        if ObjectAspectRatio &#62; 0 then
                            set objGeo = newObjectView.absScaleGeometry
                            set size = objGeo.size
                            size.height = ObjectAspectRatio * size.width
                            set objGeo.size = size
                            set newObjectView.absScaleGeometry = objGeo
                        end if
                        if newObjectView.isNested then
                            newObjectView.close
                        end if
                        &#39; Create the relationship
                        set relship = model.newRelationship(rule.relType, parentInst, newObject)
                        if not cvwViewStrategy.viewAsHierarchy then
                            set relshipView = currentModelView.newRelationshipView(relship, parentInstView, newObjectView)
                        end if
                    end if
                end if
            next
        end if
        if not isEnabled(newObject) then
            for i = 1 to noPathRules
                set rule = pathRules(i)
                if rule.parentType.uri = parentInst.type.uri then
                    if rule.childType.uri = objType.uri then
                        &#39; Create the object
                        set newObject = model.newObject(objType)
                        set newObjectView = cvwObjView.create(workWindow, workWindow, newObject, ObjectAspectRatio)
                        if newObjectView.isNested then newObjectView.close
                        &#39; Create the relationship
                        set relship = model.newRelationship(rule.relType, parentInst, newObject)
                        set relshipView = currentModelView.newRelationshipView(relship, parentInstView, newObjectView)
                        exit for
                    end if
                end if
            next
        end if
        set cvwObjView = Nothing

        if not isEnabled(newObject) then
            call MsgBox(&#34;Creating the object violates a language rule!&#34;, vbExclamation)
            exit function
        end if

        &#39; Find instance context
        if parentInst.uri = modelObject.uri then
            set instContexts = wObject.getNeighbourRelationships(0, hasInstanceContext2Type)
            if instContexts.count &#62; 0 then
                set rel = instContexts(1)
                if isEnabled(rel) then
                    set instContext = rel.target
                end if
            end if
            if isEnabled(instContext) then
                set specObjects = wObject.getNeighbourObjects(0, hasInstanceContextType, specContainerType)
                if specObjects.count &#62; 0 then
                    set specObject = specObjects(1)
                    set rels = specObject.getNeighbourRelationships(0, isTopType)
                    if rels.count &#62; 0 then
                        for each rel in rels
                            set obj = rel.target
                            if obj.type.uri = instContext.type.uri then
                                set contextObj = obj
                                exit for
                            end if
                        next
                    end if
                    if isEnabled(contextObj) then
                        set rels = contextObj.neighbourRelationships
                        for each rel in rels
                            if rel.origin.type.uri = instContext.type.uri then
                                if rel.target.type.uri = objType.uri then
                                    &#39; Create relationship
                                    set relType = rel.type
                                    set relship = model.newRelationship(relType, instContext, newObject)
                                    exit for
                                end if
                            elseif rel.target.type.uri = instContext.type.uri then
                                if rel.origin.type.uri = objType.uri then
                                    &#39; Create relationship
                                    set relType = rel.type
                                    set relship = model.newRelationship(relType, newObject, instContext)
                                    exit for
                                end if
                            end if
                        next
                    end if
                end if
            end if
        end if
        set ekaInstance = Nothing
    End Function

&#39;-----------------------------------------------------------
    Private Function getTextScaleFactor(instView, parentView)
        dim parentTs, instTs

        parentTs = parentView.textscale
        if instView.isNested then
            getTextScaleFactor = parentTs * nestedTextFactor
        else
            getTextScaleFactor = parentTs * treeTextFactor
        end if

    End Function

&#39;-----------------------------------------------------------
    Private Function contentModel           &#39;IMetisObject
        dim context

        &#39; Find ContentModel
        set contentModel = currentModel
        set context = new EKA_Context
        set context.currentModel        = currentModel
        set context.currentModelView    = currentModelView
        set context.currentInstance     = workWindow.instance
        set context.currentInstanceView = workWindow
        if isValid(context) then
            if isEnabled(context.contentModel) then
                set contentModel = context.contentModel
            end if
        end if
        set context = Nothing
    End Function

&#39;-----------------------------------------------------------
    Private Sub Class_Initialize()
        set currentModel        = metis.currentModel
        set currentModelView    = currentModel.currentModelView
        set currentInstance     = currentModel.currentInstance
        set currentInstanceView = currentModelView.currentInstanceView
        set workWindow          = currentInstanceView
        &#39; Factors
        nestedTextFactor   = 1
        treeTextFactor     = 1
        ObjectAspectRatio  = -1
        &#39; Types
        set hasViewStrategyType = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/spec_relships.kmd#RelType_CVW:hasViewStrategy2_UUID&#34;)
        set specContainerType   = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/spec_objects.kmd#ObjType_CVW:Specification_Container_UUID&#34;)
        set hasLanguageType     = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/spec_relships.kmd#RelType_CVW:hasLanguageSpecification2_UUID&#34;)
        set isTopType           = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/spec_relships.kmd#RelType_CVW:isTop_UUID&#34;)
        set hasInstanceContextType  = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/spec_relships.kmd#RelType_CVW:hasInstanceContext_UUID&#34;)
        set hasInstanceContext2Type = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/spec_relships.kmd#RelType_CVW:hasInstanceContext2_UUID&#34;)
        set hasValueType            = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/cvw_relships.kmd#RelType_CVW:hasValue_UUID&#34;)
        set hasValueConstraintType  = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/spec_relships.kmd#RelType_CVW:hasValueConstraint_UUID&#34;)
        set propertyType    = metis.findType(&#34;http://xml.activeknowledgemodeling.com/eka/languages/eka_property.kmd#ObjType_EKA:Property_UUID&#34;)
        set hasPropertyType = metis.findType(&#34;http://xml.activeknowledgemodeling.com/eka/languages/eka_relships.kmd#RelType_EKA:HasProperty_UUID&#34;)
        &#39; Others
        noPathRules = 0
        noRelTypes  = 3
        ReDim Preserve relTypeList(noRelTypes)
        set relTypeList(1) = isTopType
        set relTypeList(2) = hasValueType
        set relTypeList(3) = hasValueConstraintType

    End Sub

&#39;-----------------------------------------------------------
    Public Sub Class_Terminate()
    End Sub

End Class

</string>
  </valueset>
 </object>

 <object id="_002aspt01b45jl1ekhjc">
  <valueset size="10" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="../languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Class CVW_ViewstyleSpecification
</string>
   <string name="description"></string>
   <integer name="dbms-admin.commitFlag">0</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20070820 123345599</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="comments"></string>
   <string name="script">option explicit


&#39;-----------------------------------------------------------
&#39;-----------------------------------------------------------
Class CVW_ViewstyleSpecification

    Public  title                       &#39; String
    Public viewStyle                    &#39; URI

    Private model
    Private modelView
    Private noObjectVisualizations      &#39; Integer
    Private noRelshipVisualizations     &#39; Integer
    Private objectVisualizations()      &#39; Array of CVW_ObjectVisualization
    Private relshipVisualizations()     &#39; Array of CVW_RelshipVisualization
    &#39; Types
    Private argumentType

&#39;-----------------------------------------------------------
    Public Sub build(spec_object)
        dim argObj
    
        if isEnabled(spec_object) then
            &#39; Check for viewstyle
            set argObj = new CVW_ArgumentValue
            viewStyle = argObj.getArgumentValue(spec_object, &#34;WorkareaViewstyle&#34;)
            &#39; Check for Object viewstyle specification object

            &#39; Check for Relship viewstyle specification object

        end if

    End Sub

&#39;-----------------------------------------------------------
    Public Sub setViewstyle
        on error resume next
        if Len(viewStyle) &#62; 0 then
            modelView.setViewStyle(viewStyle)
        end if
    End Sub

&#39;-----------------------------------------------------------
    Public Function findObjectVisualization(visTitle)
        dim indx, objVis

        set findObjectVisualization = Nothing
        for indx = 1 to noObjectVisualizations
            set objVis = objectVisualizations(indx)
            if not objVis is Nothing then
                if objVis.title = visTitle then
                    set findObjectVisualization = objVis
                    exit for
                end if
            end if
        next

    End Function

&#39;-----------------------------------------------------------
    Public Function findRelshipVisualization(visTitle)
        dim indx, relVis

        set findRelshipVisualization = Nothing
        for indx = 1 to noRelshipVisualizations
            set relVis = relshipVisualizations(indx)
            if not relVis is Nothing then
                if relVis.title = visTitle then
                    set findRelshipVisualization = relVis
                    exit for
                end if
            end if
        next

    End Function

&#39;-----------------------------------------------------------
    Public Sub addObjectVisualization(objVisualization)
        dim cvwObjVisualization
        dim indx, found

        found = false
        for indx = 1 to noObjectVisualizations
            set cvwObjVisualization = objectVisualizations(indx)
            if not cvwObjVisualization is Nothing then
                if cvwObjVisualization.title = objVisualization.title then
                    found = true
                    exit for
                end if
            end if
        next
        if not found then
            noObjectVisualizations = noObjectVisualizations + 1
            ReDim Preserve objectVisualizations(noObjectVisualizations)
            set objectVisualizations(noObjectVisualizations) = objVisualization
        end if
    End Sub

&#39;-----------------------------------------------------------
    Public Sub addRelshipVisualization(relVisualization)
        dim cvwRelVisualization
        dim indx, found

        found = false
        for indx = 1 to noRelshipVisualizations
            set cvwRelVisualization = relshipVisualizations(indx)
            if not cvwRelVisualization is Nothing then
                if cvwRelVisualization.title = relVisualization.title then
                    found = true
                    exit for
                end if
            end if
        next
        if not found then
            noRelshipVisualizations = noRelshipVisualizations + 1
            ReDim Preserve relshipVisualizations(noRelshipVisualizations)
            set relshipVisualizations(noRelshipVisualizations) = relVisualization
        end if
    End Sub

&#39;-----------------------------------------------------------
    Public Sub Class_Initialize()
        set model = metis.currentModel
        set modelView = model.currentModelView
        noObjectVisualizations = 0
        ReDim objectVisualizations(noObjectVisualizations)
        noRelshipVisualizations = 0
        ReDim relshipVisualizations(noRelshipVisualizations)
    End Sub

&#39;-----------------------------------------------------------
    Public Sub Class_Terminate()
    End Sub
End Class

&#39;-----------------------------------------------------------
&#39;-----------------------------------------------------------
Class CVW_ObjectVisualization

    Public title              &#39; String
    Public layoutStrategy     &#39; IMetisInstance
    Public symbolOpen         &#39; Uri
    Public symbolClosed       &#39; Uri
    Public icon               &#39; Uri
    Public scaleFactor        &#39; Float
    Public textFactor         &#39; Float
    Public fillColor          &#39; String
    Public lineColor          &#39; String

End Class

&#39;-----------------------------------------------------------
&#39;-----------------------------------------------------------
Class CVW_RelshipVisualization

    Public title             &#39; String
    Public lineColor         &#39; String
    Public lineWidth         &#39; Integer
    Public lineStyle         &#39; String
    Public arrowKind         &#39; String
    Public useAutoline       &#39; Boolean
    Public useSpline         &#39; Boolean
    Public showStartText     &#39; Boolean
    Public showMiddleText    &#39; Boolean
    Public showEndText       &#39; Boolean

End Class
</string>
  </valueset>
 </object>

 <object id="_002aspt01b45jl2f13mf">
  <valueset size="10" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="../languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Class CVW_Workspace</string>
   <string name="description"></string>
   <integer name="dbms-admin.commitFlag">0</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20080507 091941244</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="comments"></string>
   <string name="script">option explicit


&#39;-----------------------------------------------------------
&#39;-----------------------------------------------------------
Class CVW_Workspace


    &#39; Variant parameters
    Public Title                        &#39; String
    Public ClearMode                    &#39; String
    Public LayoutStrategy               &#39; String
    Public SymbolOpen                   &#39; String
    Public SymbolClosed                 &#39; String
    Public ViewStyle                    &#39; String
    Public MetamodelMethod              &#39; String
    Public DClickMethod                 &#39; String

    &#39; Context variables (public)
    Public currentModel
    Public currentModelView
    Public WorkspaceWindow

    &#39; Context variables (private)
    Private cObject
    Private aObject

    &#39; Types
    Private windowType                   &#39; IMetisType

    &#39; Methods
    Private removeMetamodelMethod        &#39; IMetisMethod
    Private removePartRules              &#39; IMetisMethod

    &#39; Layout strategies
    Private workspaceLayoutStrategy     &#39; IMetisInstance

    &#39; Others
    Private cvwArg                      &#39; CVW_ArgumentValue
    Private window                      &#39; CVW_Window

&#39;-----------------------------------------------------------
    Public Property Get component           &#39;IMetisObject
        set component = cObject
    End Property

    Public Property Set component(obj)
        if isEnabled(obj) then
            set cObject = obj
        end if
    End Property

&#39;-----------------------------------------------------------
    Public Property Get configObject           &#39;IMetisObject
        set configObject = aObject
    End Property

    Public Property Set configObject(obj)
        if isEnabled(obj) then
            set aObject = obj
        end if
    End Property

&#39;-----------------------------------------------------------
    &#39; Build internal structures
    Public Sub build
        dim m, wa
        
        &#39; Set variant parameters from configuring object - if given
        &#39;set wa = new CVW_GenericWorkarea
        &#39;call wa.value(component, &#34;Name&#34;, Title)
        &#39;call wa.value(component, &#34;Viewstyle&#34;, Viewstyle)
        &#39;call wa.value(component, &#34;ClearMode&#34;, ClearMode)
        &#39;call wa.value(component, &#34;LayoutStrategy&#34;, LayoutStrategy)
        &#39;call wa.value(component, &#34;SymbolOpen&#34;, SymbolOpen)
        &#39;call wa.value(component, &#34;SymbolClosed&#34;, SymbolClosed)
        &#39;call wa.value(component, &#34;MetamodelMethod&#34;, MetamodelMethod)
        &#39;call wa.value(component, &#34;DClickMethod&#34;, DClickMethod)
        &#39; Set default values
        if Len(Title) = 0 then Title = &#34;CVW_Workspace&#34;
        &#39; Find workspace
        set m = getCVWmodel
        set WorkspaceWindow  = findInstanceView(m, windowType, &#34;name&#34;, Title)

        &#39; Set argument dependent values
        if Len(LayoutStrategy) &#62; 0 then
            if not LayoutStrategy = &#34;akm:layout#AutoMatrix&#34; then
                set workspaceLayoutStrategy = metis.findLayoutStrategy(LayoutStrategy)
            end if
        end if
        set wa = Nothing
    End Sub

&#39;-----------------------------------------------------------
    &#39; Configure used components
    Public Sub configure
        &#39; Only relevant if CVW_Workspace uses other components
    End Sub

&#39;-----------------------------------------------------------
    Public Function execute             &#39; Return workspace objectview
        dim m, parentView
        dim method, strategy
        dim doLayout
&#39;stop
        set execute = Nothing
        doLayout = false
        &#39; Find workspace
        set m = getCVWmodel
        if isValid(WorkspaceWindow) then
            set parentView = WorkspaceWindow
        else
            set parentView = findInstanceView(m, windowType, &#34;name&#34;, Title)
        end if
        if not isEnabled(parentView) then
			exit function
        end if

        if ClearMode = &#34;Clear&#34; then
            call clearWorkspace
        end if
        if isEnabled(workspaceLayoutStrategy) then
            if workspaceLayoutStrategy.uri = LayoutStrategy then
                set parentView.layoutStrategy = workspaceLayoutStrategy
                doLayout = true
            end if
        end if
        if (not doLayout) and Len(LayoutStrategy) &#62; 0 then
            if not LayoutStrategy = &#34;akm:layout#AutoMatrix&#34; then
                set workspaceLayoutStrategy = metis.findLayoutStrategy(&#34;http://xml.activeknowledgemodeling.com/cvw/views/matrix_layouts.kmd#_002ash3011bccb0hs5tr&#34;)
                if isValid(workspaceLayoutStrategy) then set parentView.layoutStrategy = workspaceLayoutStrategy
                call metis.doLayout(parentView)
                set workspaceLayoutStrategy = metis.findLayoutStrategy(LayoutStrategy)
                if isValid(workspaceLayoutStrategy) then set parentView.layoutStrategy = workspaceLayoutStrategy
                doLayout = true
            end if
        end if
        if Len(Viewstyle) &#62; 0 then
            call currentModelView.setViewStyle(Viewstyle)
        end if
        if Len(SymbolOpen) &#62; 0 then
            parentView.openSymbol = SymbolOpen
        end if
        if Len(SymbolClosed) &#62; 0 then
            parentView.closedSymbol = SymbolClosed
        end if
        if Len(MetamodelMethod) &#62; 0 then
            set method = metis.findMethod(MetamodelMethod)
            if isEnabled(method) then
                currentModel.runMethod(method)
            end if
        end if
        if Len(DClickMethod) &#62; 0 then
            set method = metis.findMethod(DClickMethod)
            if isEnabled(method) then
                currentModel.runMethod(method)
            end if
        end if
        if doLayout then
            call metis.doLayout(parentView)
            call layoutWorkarea
        end if
        set WorkspaceWindow = parentView
        set execute = parentView

    End Function

&#39;-----------------------------------------------------------
    Private Sub clearWorkspace
        dim m, parentView
        dim childView, children

        call showRelationships(&#34;HideInter&#34;)
        set m = getCVWmodel
        if isValid(WorkspaceWindow) then
            set parentView = WorkspaceWindow
        else
            set parentView = findInstanceView(m, windowType, &#34;name&#34;, Title)
        end if
        if not isEnabled(parentView) then
            exit sub
        end if
        set children = parentView.children
        for each childView in children
            call currentModel.deleteObject(childView.instance)
        next
        &#39; Remove virtual metamodels
        call currentModel.runMethod(removeMetamodelMethod)
        &#39; Remove added part rules
        call currentModel.runMethod(removePartRules)

    End Sub

&#39;-----------------------------------------------------------
    Private Sub layoutWorkarea
        dim m, parentView
        dim workarea, workareas
        dim workwindow
        dim indx, geo

        set m = getCVWmodel
        if isValid(WorkspaceWindow) then
            set parentView = WorkspaceWindow
        else
            set parentView = findInstanceView(m, windowType, &#34;name&#34;, Title)
        end if
        if not isEnabled(parentView) then
            exit sub
        end if
        set workareas = parentView.children
        for each workarea in workareas
            indx = workarea.children.count
            if indx &#62; 0 then
                set workwindow = workarea.children(indx)
                if isValid(workwindow) then
                    set geo = workwindow.geometry
                    geo.x = geo.x + 10
                    set workwindow.geometry = geo
                    call metis.doLayout(workarea)
                end if
            end if
        next

    End Sub

&#39;-----------------------------------------------------------
    Public Sub showRelationships(mode)
        dim m, parentView
        dim workarea, workareas
        dim workwindow, workwindows(), noWorkwindows
        dim model, models(), noModels
        dim sel, selection
        dim relship, relships, relshipView, relshipViews
        dim origin, originView, originViews
        dim target, targetView, targetViews
        dim originWin, targetWin
        dim inter, show, hide
        dim indx, i, j

        &#39; Initialize
        set m = getCVWmodel
        if isValid(WorkspaceWindow) then
            set parentView = WorkspaceWindow
        else
            set parentView = findInstanceView(m, windowType, &#34;name&#34;, Title)
        end if
        if not isEnabled(parentView) then
            exit sub
        end if
        set selection = currentModelView.selection
        if selection.count &#62; 0 then
            noModels = 0
            noWorkwindows = 0
            for each sel in selection
                noWorkwindows = noWorkwindows + 1
                ReDim Preserve workwindows(noWorkwindows)
                set workwindows(noWorkwindows) = sel
                set model = contentModel(workwindows(noWorkwindows))
                if isValid(model) then
                    call addModelToList(model, models, noModels)
                end if
            next
        else
            noModels = 0
            noWorkwindows = 0
            set workareas = parentView.children
            for each workarea in workareas
                indx = workarea.children.count
                if indx &#62; 0 then
                    noWorkwindows = noWorkwindows + 1
                    ReDim Preserve workwindows(noWorkwindows)
                    set workwindows(noWorkwindows) = workarea.children(indx)
                    set model = contentModel(workwindows(noWorkwindows))
                    if isValid(model) then
                        call addModelToList(model, models, noModels)
                    end if
                end if
            next
        end if
        &#39; Create the relationship views
        for i = 1 to noModels
            set relships = models(i).relationships
            for each relship in relships
                set origin = relship.origin
                set originViews = currentModelView.findInstanceViews(origin)
                set target = relship.target
                set targetViews = currentModelView.findInstanceViews(target)
                for each originView in originViews
                    for j = 1 to noWorkwindows
						set originWin = Nothing
                        if isInView(originView, workwindows(j)) then
                            set originWin = workwindows(j)
                            exit for
                        end if
                    next
                    if isValid(originWin) then
						for each targetView in targetViews
                    		set targetWin = Nothing
							for j = 1 to noWorkwindows
								if isInView(targetView, workwindows(j)) then
									set targetWin = workwindows(j)
									exit for
								end if
							next
							if isValid(targetWin) then
								inter = false
								show  = false
								hide = false
								if originWin.uri &#60;&#62; targetWin.uri then inter = true
								select case mode
									case &#34;ShowAll&#34;      show = true
									case &#34;ShowInter&#34;   
                                        if noWorkwindows = 1 then show = true
                                        if inter then show = true
									case &#34;ShowIntra&#34;    if not inter then show = true
									case &#34;HideAll&#34;      hide = true
									case &#34;HideInter&#34;
                                        if noWorkwindows = 1 then hide = true
                                        if inter then hide = true
									case &#34;HideIntra&#34;    if not inter then hide = true
								end select
								if show then
									set relshipView = currentModelView.newRelationshipView(relship, originView, targetView)
								elseif hide then
									set relshipViews = relship.views
									for each relshipView in relshipViews 
										if relshipView.origin.uri = originView.uri and relshipView.target.uri = targetView.uri then
											currentModelView.deleteRelationshipView(relshipView)
										end if
									next
								end if
							end if
						next
					end if
                next
            next
        next
    End Sub

&#39;-----------------------------------------------------------
    Sub addModelToList(m, list, byref noList)
        dim model
        dim indx, found

        found = false
        for indx = 1 to noList
            set model = list(indx)
            if isValid(model) then
                if m.uri = model.uri then
                    found = true
                    exit for
                end if
            end if
        next
        if not found then
            noList = noList + 1
            ReDim Preserve list(noList)
            set list(noList) = m
        end if
    End Sub

&#39;-----------------------------------------------------------
    Private Function contentModel(workwindow)           &#39;IMetisObject
    on error resume next
        dim context

        if isValid(Global_Context.Project) then
            set contentModel = Global_Context.Project.ownerModel
            exit function
        elseif isValid(GLOBAL_WorkplaceModel) then
            set contentModel= GLOBAL_WorkplaceModel
            exit function
        end if
        &#39; Find ContentModel
        set contentModel = currentModel
        set context = new EKA_Context
        set context.currentModel        = currentModel
        set context.currentModelView    = currentModelView
        set context.currentInstance     = workwindow.instance
        set context.currentInstanceView = workwindow
        if isValid(context) then
            set contentModel = context.contentModel
        end if

        if not isEnabled (contentModel) then
			dim x, y
			for each x in currentmodel.views &#39; find model view called content ...
				if (instr(1, x.title, &#34;content&#34;, 1) &#62;0) or (instr(1, x.title, &#34;main&#34;, 1) &#62;0) or (instr(1, x.title, &#34;data&#34;, 1) &#62;0) then
					for each y in x.children &#39; find child which is submodel
						if y.instance.type.uri = &#34;metis:stdtypes#oid125&#34; then
							set contentModel = y.instance.parts(1).ownerModel
							set contentModel = y.instance.parts(1).parts(1).ownerModel
							exit function
						end if
					next
				end if
			next
        end if
        if not isEnabled (contentModel) then
			set contentModel = currentmodel
		end if
		
    End Function

&#39;-----------------------------------------------------------
    Public Sub Class_Initialize()
        dim m
        set currentModel     = metis.currentModel
        set currentModelView = currentModel.currentModelView
        set cObject          = currentModel.currentInstance
        set aObject          = currentModel.currentInstance
        &#39; Types
        set windowType       = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/view_objects.kmd#UiType_CVW:Workarea_UUID&#34;)
        &#39; Methods
        set removeMetamodelMethod = metis.findMethod(&#34;http://xml.activeknowledgemodeling.com/cvw/operations/spec_methods.kmd#removeVirtualMetamodels&#34;)
        set removePartRules       = metis.findMethod(&#34;http://xml.activeknowledgemodeling.com/cvw/operations/spec_methods.kmd#removePartRules&#34;)
        &#39; CVW objects
        set window           = new CVW_Window
        set cvwArg           = new CVW_ArgumentValue
        &#39; Variant parameters
        Title                = &#34;CVW_Workspace&#34;
        Viewstyle            = &#34;&#34;
        ClearMode            = &#34;&#34;
        LayoutStrategy       = &#34;&#34;
        SymbolOpen           = &#34;&#34;
        SymbolClosed         = &#34;&#34;
        MetamodelMethod      = &#34;&#34;
        DClickMethod         = &#34;&#34;

    End Sub

&#39;-----------------------------------------------------------
    Public Sub Class_Terminate()
        set window = Nothing
        set cvwArg = Nothing
    End Sub

End Class

</string>
  </valueset>
 </object>

 <object id="_002aspt01b45jl3224de">
  <valueset size="10" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="../languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Class CVW_Window</string>
   <string name="description"></string>
   <integer name="dbms-admin.commitFlag">0</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20070820 123345599</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="comments"></string>
   <string name="script">option explicit


&#39;-----------------------------------------------------------
&#39;-----------------------------------------------------------
Class CVW_Window

    Public title                  &#39; String
    Public size                   &#39; IMetisRect
    Public layoutStrategy         &#39; IMetisInstance
    Public objectView             &#39; IMetisObjectView
    Private model                 &#39; IMetisModel
    Private modelView             &#39; IMetisModelView
    Private noSubWindows          &#39; Integer
    Private subWindows()          &#39; Array of CVW_Window&#39;s
    Private pos                   &#39; Enum of strings

&#39;-----------------------------------------------------------
    Public Function create(name, winType, parentView)    &#39; as Boolean
        dim parent, obj, window
        dim textScale

        create = false
        if isEnabled(parentView) then
            textScale = parentView.absTextScale
            if parentView.hasInstance then
                set parent = parentView.instance
                set obj = parent.newPart(winType)
                parentView.absTextScale = textScale
	            set window = parentView.newObjectView(obj)
                if isEnabled(window) then
                    set objectView = window
                    title = name
                    create = true
                end if
	            call obj.setNamedStringValue(&#34;name&#34;, name)
            end if
        end if
    End Function

&#39;-----------------------------------------------------------
    Public Function find(name, winType, parentView)      &#39; as Boolean
        dim objViews, objView, obj

        find = false
        if isValid(parentView) then
            set objViews = parentView.children
            for each objView in objViews
                if isEnabled(objView) then
                    if objView.hasInstance then
                        set obj = objView.instance
                        if obj.name = name then
                            set objectView = objView
                            find = true
                            exit for
                        end if
                    end if
                end if
            next
        end if
    End Function

&#39;-----------------------------------------------------------
    Public Function find2(winType, parentView, instView)      &#39; as Boolean
        dim objViews, objView, obj

        find2 = false
        if isValid(parentView) then
            set objViews = parentView.children
            for each objView in objViews
                if isEnabled(objView) then
                    if objView.uri = instView.uri then
                        set objectView = objView
                        find2 = true
                        exit for
                    end if
                end if
            next
        end if
    End Function

&#39;-----------------------------------------------------------
    Public Sub addSubWindow(pos, name, winType)
        dim cvwWin
        dim indx, found
        
        found = false
        for indx = 1 to noSubWindows
            set cvwWin = subWindows(indx)
            if not cvwWin is Nothing then
                if cvwWin.title = name and cvwWin.Position = pos then
                    found = true
                    exit for
                end if
            end if
        next
        if not found then
            set cvwWin = new CVW_Window
            call cvwWin.create(name, winType, objectView)
            cvwWin.title = name
            cvwWin.Position = pos
            &#39; Maintain the array
            noSubWindows = noSubWindows + 1
            ReDim Preserve subWindows(noSubWindows)
            set subWindows(noSubWindows) = cvwWin
        end if

    End Sub

&#39;-----------------------------------------------------------
    Public Sub removeSubWindow(pos, name, winType)
        dim cvwWin
        dim indx, ix, found

        found = false
        for indx = 1 to noSubWindows
            set cvwWin = subWindows(indx)
            if not cvwWin is Nothing then
                if cvwWin.title = name and cvwWin.Position = pos then
                    found = true
                    cvwWin.remove
                    if indx = noSubWindows then
                        noSubWindows = noSubWindows - 1
                        ReDim Preserve subWindows(noSubWindows)
                    end if
                    exit for
                end if
            end if
        next
        if found  and indx &#60; noSubWindows then
            for ix = indx to noSubWindows - 1
                set subWindows(ix) = subWindows(ix + 1)
            next
            noSubWindows = noSubWindows - 1
            ReDim Preserve subWindows(noSubWindows)
        end if

    End Sub

&#39;-----------------------------------------------------------
    Public Sub clean()
        dim children, childView

        if isEnabled(objectView) then
            set children = objectView.children
            for each childView in children
                modelView.deleteObjectView(childView)
            next
        end if
    End Sub

&#39;-----------------------------------------------------------
    Public Sub remove()
        if isEnabled(model) and isEnabled(objectView) then
            if objectView.hasInstance then
                call model.deleteObject(objectView.instance)
                set objectView = Nothing
            end if
        end if
    End Sub

&#39;-----------------------------------------------------------
    Public Sub populate()
    End Sub

&#39;-----------------------------------------------------------
    Public Sub doLayout()
        if isEnabled(objectView) then
            call metis.doLayout(objectView)
        end if
    End Sub

&#39;-----------------------------------------------------------
    Public Sub doParentLayout()
        if isEnabled(objectView) then
            call metis.doLayout(objectView.parent)
        end if
    End Sub

&#39;-----------------------------------------------------------
    Public Property Let Position(strPos)
        select case strPos
            case &#34;Top&#34;    pos = 1
            case &#34;Bottom&#34; pos = 2
            case &#34;Left&#34;   pos = 3
            case &#34;Right&#34;  pos = 4
        End select
    End Property

    Public Property Get Position
        Select Case pos
            case 1  Position = &#34;Top&#34;
            case 2  Position = &#34;Bottom&#34;
            case 3  Position = &#34;Left&#34;
            case 4  Position = &#34;Right&#34;
        End Select
    End Property

&#39;-----------------------------------------------------------
    Public Sub Class_Initialize()
        set model = metis.currentModel
        set modelView = model.currentModelView
        set objectView = Nothing
        set size = Nothing
        set layoutStrategy = Nothing
        noSubWindows = 0
        ReDim subWindows(noSubWindows)
    End Sub

&#39;-----------------------------------------------------------
    Public Sub Class_Terminate()
    End Sub


&#39;------------------------------------------------------------------------------------------
&#39; -------------------------ST ----------------------------------------------------------
&#39;------------------------------------------------------------------------------------------

    Public Function getInstView(objectType, propertyName, PropertyValue)
     dim inst

     set inst = model.findInstances(objectType ,propertyName,PropertyValue)
     if inst.count &#62; 0 then
        set getInstView =  inst.item(1).views(1)
    else
        set getInstView = Nothing
   end if
   End Function

&#39;-----------------------------------------------------------
    Public Sub populateMenu(objectMenu, objectTargetType)
    &#39;[a]-------------------------------
        Dim objectMenuType, objectMenuItems
        Dim  newObjectMenu, newObjectMenuView, objectMenuView

           For each objectMenuItems in objectMenu.instance.neighbourRelationships
              Set newObjectMenu = objectMenuItems.target
              if objectMenuItems.target.type.uri = objectTargetType.uri THEN
                  if objectMenuItems.target.title &#60;&#62; objectMenu.title THEN
                       Set newObjectMenuView                 = objectView.newObjectView(newObjectMenu)
                       newobjectMenuView.openSymbol    = newObjectMenu.Views(1).openSymbol
                       newobjectMenuView.closedSymbol  = newObjectMenu.Views(1).closedSymbol
                       newobjectMenuView.textScale         = 0.08
                       newobjectMenuView.close
                  end if
              end if
            next

    End Sub


End Class
&#39;-----------------------------------------------------------
&#39;-----------------------------------------------------------

</string>
  </valueset>
 </object>

 <object id="_002aspt01b45jl4rhipd">
  <valueset size="10" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="../languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Class CVW_InstRule,  CVW_RelRule, CVW_SymbolRule</string>
   <string name="description"></string>
   <integer name="dbms-admin.commitFlag">0</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20080326 084523671</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="comments"></string>
   <string name="script">option explicit

&#39;-----------------------------------------------------------
&#39;-----------------------------------------------------------
Class CVW_InstRule
    Public title
    Public instType
    Public propname
    Public propvalue
    Public operator
    Public useCurrent
    Public isHide
    Public isNothing
    Public isContextInstance

&#39;-----------------------------------------------------------
    Private Sub Class_Initialize()
        title = &#34;InstRule&#34;
        set instType  = Nothing
        propname  = &#34;&#34;
        propvalue = &#34;&#34;
        operator  = &#34;&#34;
        useCurrent   = false
        isNothing    = false
        isHide       = false
        isContextInstance = false
    End Sub

End Class

&#39;-----------------------------------------------------------

&#39;-----------------------------------------------------------
Class CVW_RelRule
    Public title
    Public parentType
    Public relType
    Public childType
    Public relDir
    Public objRule1
    Public objRule2
    Public objRule3
    Public objRules()
    Public noObjRules
    Public toNothing
    Public isRecursive

&#39;-----------------------------------------------------------
    &#39; Returns True if NoSubTypes is valid, and the object is NOT the same type
    Public Function checkNoSubTypes(obj)
        checkNoSubTypes = false
        if isValid(objRule1) then
            if objRule1.propName = &#34;NoSubTypes&#34; then
                if obj.type.uri &#60;&#62; objRule1.instType.uri then
                    checkNoSubTypes = true
                    exit function
                end if
            end if
        end if
        if isValid(objRule2) then
            if objRule2.propName = &#34;NoSubTypes&#34; then
                if obj.type.uri &#60;&#62; objRule2.instType.uri then
                    checkNoSubTypes = true
                    exit function
                end if
            end if
        end if
        if isValid(objRule3) then
            if objRule3.propName = &#34;NoSubTypes&#34; then
                if obj.type.uri &#60;&#62; objRule3.instType.uri then
                    checkNoSubTypes = true
                    exit function
                end if
            end if
        end if
    End Function

&#39;-----------------------------------------------------------
    Public Function isAllowed(obj, rel)

        isAllowed = 0
        if not isValid(relType) then exit function

        if isEnabled(obj) and isValid(rel) then
            if rel.type.inherits(relType) then
                dim other

                if rel.origin.uri = obj.uri then
                    set other = rel.target
                else
                    set other = rel.origin
                end if
                if obj.type.inherits(parentType) then
                    if other.type.inherits(childType) then
                        isAllowed = 1
                    end if
                elseif other.type.inherits(parentType) then
                    if obj.type.inherits(childType) then
                        isAllowed = 1
                    end if
                end if
                if isAllowed &#62; 0 then
                    dim i
                    dim cvwFilter

                    set cvwFilter = new CVW_Filter
                    for i = 1 to noObjRules
                        dim instRule
                        select case i
                        case 1  set instRule = objRule1
                        case 2  set instRule = objRule2
                        case 3  set instRule = objRule3
                        case 4  exit for
                        end select
                        if instRule.propName = &#34;Hide&#34; then isAllowed = 2
                        if instRule.useCurrent then
                            dim inst
                            set inst = getCurrentInstance(instRule.instType)
                            if relDir = 0 and other.uri &#60;&#62; inst.uri then
                                isAllowed = 0
                                exit for
                            elseif relDir = 1 and obj.uri &#60;&#62; inst.uri then
                                isAllowed = 0
                                exit for
                            end if
                        end if
                        if isAllowed &#62; 0 and instRule.propName = &#34;NoSubTypes&#34; then
                            if relDir = 0 and other.type.uri &#60;&#62; childType.uri then
                                isAllowed = 0
                                exit for
                            elseif relDir = 1 and obj.type.uri &#60;&#62; childType.uri then
                                isAllowed = 0
                                exit for
                            end if
                        end if
                        if isAllowed &#62; 0 then
                            if relDir = 0 and not cvwFilter.valueIsValid(other, instRule.propname, instRule.operator, instRule.propvalue) then
                                isAllowed = 0
                                exit for
                            elseif relDir = 1 and not cvwFilter.valueIsValid(obj, instRule.propname, instRule.operator, instRule.propvalue) then
                                isAllowed = 0
                                exit for
                            end if
                        end if
                    next
                    set cvwFilter = Nothing
                end if
            end if
        end if
    End Function

&#39;-----------------------------------------------------------
    Public Function isAllowed1(obj, other)

        isAllowed1 = 0
        if not isValid(relType) then exit function

        if relType.uri &#60;&#62; GLOBAL_Type_EkaHasPart.uri then exit function

        if isEnabled(obj) and isValid(other) then
            if obj.type.inherits(parentType) then
                if other.type.inherits(childType) then
                    isAllowed1 = 1
                end if
            end if
            if isAllowed1 &#62; 0 then
                dim i
                dim cvwFilter

                set cvwFilter = new CVW_Filter
                for i = 1 to noObjRules
                    dim instRule
                    select case i
                    case 1  set instRule = objRule1
                    case 2  set instRule = objRule2
                    case 3  set instRule = objRule3
                    case 4  exit for
                    end select
                    if instRule.propName = &#34;Hide&#34; then isAllowed1 = 2
                    
                    if isAllowed1 &#62; 0 and instRule.propName = &#34;NoSubTypes&#34; then
                        if relDir = 0 and other.type.uri &#60;&#62; childType.uri then
                            isAllowed1 = 0
                            exit for
                        elseif relDir = 1 and obj.type.uri &#60;&#62; childType.uri then
                            isAllowed1 = 0
                            exit for
                        end if
                    end if
                        
                    if instRule.useCurrent then
                        dim inst
                        set inst = getCurrentInstance(instRule.instType)
                        if other.uri &#60;&#62; inst.uri then
                            isAllowed1 = 0
                        end if
                    end if
                    if not cvwFilter.valueIsValid(other, instRule.propname, instRule.operator, instRule.propvalue) then
                        isAllowed1 = 0
                    end if
                next
                set cvwFilter = Nothing
            end if
        end if
    End Function

&#39;-----------------------------------------------------------
    Public Function isAllowed2(rel)

        isAllowed2 = 0
        if not isValid(relType) then exit function

        if isValid(rel) then
            if rel.type.uri = relType.uri then
                dim obj
                dim other

                set obj = rel.origin
                if obj.type.inherits(parentType) then
                    set other = rel.target
                else
                    set obj   = rel.target
                    set other = rel.origin
                end if
                if obj.type.inherits(parentType) then
                    if other.type.inherits(childType) then
                        isAllowed2 = 1
                    end if
                end if
                if isAllowed2 then
                    dim i
                    dim cvwFilter

                    set cvwFilter = new CVW_Filter
                    for i = 1 to noObjRules
                        dim instRule
                        set instRule = objRules(i)
                        if not cvwFilter.valueIsValid(other, instRule.propname, instRule.operator, instRule.propvalue) then
                            isAllowed2 = 0
                        end if
                    next
                    set cvwFilter = Nothing
                end if
            end if
        end if
    End Function

&#39;-----------------------------------------------------------
    Private Sub Class_Initialize()
        title = &#34;RelRule&#34;
        set parentType = Nothing
        set relType    = Nothing
        set childType  = Nothing
        toNothing   = false
        isRecursive = false
        noObjRules  = 0
        relDir      = 0
    End Sub

End Class

&#39;-----------------------------------------------------------
&#39;-----------------------------------------------------------
Class CVW_SymbolRule
    Public title
    Public instType
    Public symbol
    Public symbolNestedOpen
    Public symbolNestedClosed
    Public typeView
    
&#39;-----------------------------------------------------------
    Private Sub Class_Initialize()
        title = &#34;SymbolRule&#34;
        set instType       = Nothing
        symbol             = &#34;&#34;
        symbolNestedOpen   = &#34;&#34;
        symbolNestedClosed = &#34;&#34;
        typeView           = &#34;&#34;
    End Sub

End Class


</string>
  </valueset>
 </object>

 <object id="_002aspt01b45jl5k1020">
  <valueset size="10" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="../languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Class CVW_ArgumentValue</string>
   <string name="description"></string>
   <integer name="dbms-admin.commitFlag">0</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20070829 120329981</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="comments"></string>
   <string name="script">option explicit

Class CVW_ArgumentValue

    Private argType
    Private argsType
    Private propertyType
    Private equalsType
    Private hasArgType
    Private hasArg2Type
    Private hasArgsType
    Private hasPropertyType
    Private valueProperty
    Private tempValueProperty
    Private datatypeProperty
    Private buttonType
    Private isType
    Private hasValueType

   &#39;---------------------------------------------------------------------------------------------------
    Public Function findArgument(inst, argName)
        dim argument, arguments, group, groups
        dim parent, parents
        dim found
        on error resume next

        set findArgument = Nothing
        found = false
        set arguments = inst.getNeighbourObjects(0, hasPropertyType, propertyType)
        for each argument in arguments
            if argument.name = argName then
                set findArgument = argument
                found = true
                exit for
            end if
        next
        if not found then
            &#39; Check if property has properties
            set groups = inst.getNeighbourObjects(0, hasPropertyType, propertyType)
            for each group in groups
                set arguments = group.getNeighbourObjects(0, hasPropertyType, propertyType)
                for each argument in arguments
                    if argument.name = argName then
                        set findArgument = argument
                        found = true
                        exit for
                    end if
                next
            next
        end if
        if not found then
            &#39; Check if action inherits from other actions
            set parents = inst.getNeighbourObjects(0, isType, buttonType)
            for each parent in parents
                if isEnabled(parent) then
                    set findArgument = findArgument(parent, argName)
                    if isEnabled(findArgument) then
                        found = true
                        exit for
                    end if
                end if
            next
        end if
        if not found then
            set arguments = inst.getNeighbourObjects(0, hasArgType, argType)
            for each argument in arguments
                if argument.name = argName then
                    set findArgument = argument
                    found = true
                    exit for
                end if
            next
        end if
        if not found then
            &#39; Check if argument groups
            set groups = inst.getNeighbourObjects(0, hasArgsType, argsType)
            for each group in groups
                set arguments = group.getNeighbourObjects(0, hasArg2Type, argType)
                for each argument in arguments
                    if argument.name = argName then
                        set findArgument = argument
                        found = true
                        exit for
                    end if
                next
            next
        end if
        if not found then
            set arguments = inst.parts
            for each argument in arguments
                if isEnabled(argument) then
                    if argument.type.uri = argType.uri then
                        if argument.name = argName then
                            set findArgument = argument
                            found = true
                            exit for
                        end if
                    end if
                end if
            next
        end if
    End Function

   &#39;---------------------------------------------------------------------------------------------------
    Public Function getArgumentValue(inst, argName)
        dim argument, arguments
        dim rel, relships

        getArgumentValue = &#34;&#34;
        set argument = findArgument(inst, argName)
        if isEnabled(argument) then

            &#39; Check for has value references
            set relships = argument.getNeighbourRelationships(0, hasValueType)
            if relships.count &#62; 0 then
                for each rel in relships
                    if isEnabled(rel) then
                        getArgumentValue = rel.target.uri
                        exit for
                    end if
                next
            else
                getArgumentValue = argument.getNamedStringValue(valueProperty)
            end if
        end if
    End Function

   &#39;---------------------------------------------------------------------------------------------------
    Public Function getConfiguredValue(inst, argName)
        dim argument, arguments

        getConfiguredValue = &#34;&#34;
        set argument = findArgument(inst, argName)
        if isEnabled(argument) then
            getConfiguredValue = argument.getNamedStringValue(tempValueProperty)
            if Len(getConfiguredValue) = 0 then
                getConfiguredValue = argument.getNamedStringValue(valueProperty)
            end if
        end if
    End Function

    &#39;---------------------------------------------------------------------------------------------------
    Public Function getArgValue(component, configObject, argName)
        dim argument, arguments, configArgs
        dim prop, props
        dim obj, objects
        dim spec, specs
        dim found, checkEquals

        getArgValue = &#34;&#34;
        found = false
        if configObject.type.uri &#60;&#62; component.type.uri then
            checkEquals = true
        else
            checkEquals = false
        end if

        set arguments   = component.getNeighbourObjects(0, hasPropertyType, propertyType)
        set configArgs  = configObject.getNeighbourObjects(0, hasPropertyType, propertyType)
        for each argument in arguments
            set prop = getConfiguringProperty(configArgs, argument, checkEquals)
            if isEnabled(prop) then
                &#39; Check for specification container
                set specs = prop.getNeighbourRelationships(0, hasValueType)
                if specs.count &#62; 0 then
                    for each spec in specs
                        if isEnabled(spec) then
                            getArgValue = spec.uri
                            found = true
                            exit for
                        end if
                    next
                else
                    &#39; No specification container - just get the value
                    getArgValue = prop.getNamedStringValue(valueProperty)
                    found = true
                end if
                if found then exit for
            end if
        next
        if not found then
            getArgValue = getArgumentValue(component, argName)
        end if
    End Function

    &#39;---------------------------------------------------------------------------------------------------

    Private Sub Class_Initialize
        set propertyType    = metis.findType(&#34;http://xml.activeknowledgemodeling.com/eka/languages/eka_property.kmd#ObjType_EKA:Property_UUID&#34;)
        set hasPropertyType = metis.findType(&#34;http://xml.activeknowledgemodeling.com/eka/languages/eka_relships.kmd#RelType_EKA:HasProperty_UUID&#34;)
        set argType         = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/action_objects.kmd#ObjType_CVW:ActionArgument_UUID&#34;)
        set argsType        = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/action_objects.kmd#ObjType_CVW:ActionArguments_UUID&#34;)
        set hasArgType      = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/action_relships.kmd#RelType_CVW:hasArgument_UUID&#34;)
        set hasArg2Type     = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/action_relships.kmd#RelType_CVW:hasArgument2_UUID&#34;)
        set hasArgsType     = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/action_relships.kmd#RelType_CVW:hasArguments_UUID&#34;)
        set buttonType      = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/action_objects.kmd#ObjType_CVW:Button_UUID&#34;)
        set isType          = metis.findType(&#34;http://xml.activeknowledgemodeling.com/eka/languages/eka_relships.kmd#RelType_EKA:Is_UUID&#34;)
        set hasValueType    = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/cvw_relships.kmd#RelType_CVW:hasValue_UUID&#34;)
        set equalsType      = metis.findType(&#34;http://xml.activeknowledgemodeling.com/eka/languages/eka_relships.kmd#RelType_EKA:Equals_UUID&#34;)
        valueProperty       = &#34;value&#34;
        tempValueProperty   = &#34;tempvalue&#34;
        datatypeProperty    = &#34;datatype&#34;
    End Sub
   &#39;---------------------------------------------------------------------------------------------------

End Class


</string>
  </valueset>
 </object>

 <object id="_002aspt01b45jl5t35nd">
  <valueset size="10" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="../languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Class CVW_LanguageSpecification</string>
   <string name="description"></string>
   <integer name="dbms-admin.commitFlag">0</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20070820 123345599</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="comments"></string>
   <string name="script">option explicit

&#39;-----------------------------------------------------------
&#39;-----------------------------------------------------------
Class CVW_LanguageSpecification

    Public  title

    Public currentModel
    Public currentModelView
    Public currentInstance
    Public currentInstanceView
    Private noObjTypes          &#39; Integer
    Private objTypes            &#39; List of IMetisType
    Private noRelTypes          &#39; Integer
    Private relTypes            &#39; List of IMetisType
    Private consistOfType       &#39; IMetisType
    Private propertyType
    Private anyObjectType

&#39;-----------------------------------------------------------
    Public Property Get noObjectTypes
        noObjectTypes = noObjTypes
    end Property

&#39;-----------------------------------------------------------
    Public Property Get objectTypes
        set objectTypes = objTypes
    end Property

&#39;-----------------------------------------------------------
    Public Property Get noRelshipTypes
        noRelshipTypes = noRelTypes
    end Property

&#39;-----------------------------------------------------------
    Public Property Get relshipTypes
        set relshipTypes = relTypes
    end Property

&#39;-----------------------------------------------------------
    Public Sub build(specificationObject)

        &#39; Build code
        call setTypes(specificationObject, 1) &#39; 1 = object types
        call setTypes(specificationObject, 2) &#39; 2 = relship types

    End Sub

&#39;-----------------------------------------------------------
    Public Function relIsAllowed(rel)
        dim i

        relIsAllowed = false
        if isEnabled(rel) then
            for i = 1 to noRelTypes
                if rel.type.uri = relTypes(i).uri then
                    relIsAllowed = true
                    exit for
                end if
            next
        end if
    End Function

&#39;-----------------------------------------------------------
    Public Function getTypeList(specificationObject, objType, relDir)
        dim obj, objects
        dim foundObj
        dim rel, relships, rDir

        set getTypeList = Nothing
        &#39; Find type
        set objects = specificationObject.parts
        if objects.count &#62; 0 then
            for each obj in objects
                if objType.inherits(obj.type) then
                &#39;if obj.type.uri = objType.uri then
                    set foundObj = obj
                    exit for
                end if
            next
            set relships = foundObj.neighbourRelationships
            if relships.count &#62; 0 then
                set getTypeList = metis.newInstanceList
                for each rel in relships
                    if rel.target.uri = foundObj.uri then
                        if rel.origin.uri &#60;&#62; specificationObject.uri then
                            set obj = rel.origin
                            rDir = 1
                        else
                            set obj = Nothing
                        end if
                    else
                        set obj = rel.target
                        rDir = 0
                    end if
                    if isEnabled(obj) then
                        if obj.type.uri = propertyType.uri then
                            set obj = Nothing
                        end if
                    end if
                    if isEnabled(obj) and (relDir = -1 or relDir = rDir) then
                        if not typeAlreadyInList(getTypeList, obj) then
                            call getTypeList.addLast(obj)
                        end if
                    end if
                next
            end if
        end if
    End Function

&#39;-----------------------------------------------------------
    Private Function typeAlreadyInList(typeList, inst)
        dim t

        typeAlreadyInList = false
        for each t in typeList
            if t.type.uri = inst.type.uri then
                typeAlreadyInList = true
                exit for
            end if
        next
    End Function

&#39;-----------------------------------------------------------
    Private Sub setTypes(specificationObject, mode)
        dim obj, objects
        dim relship, relships
        dim rel, rels

        set objects = specificationObject.parts
        if objects.count &#62; 0 then
            for each obj in objects
                if isEnabled(obj) then
                    if mode = 1 then &#39; Object type
                        addObjectType(obj.type)
                    else               &#39; Relationship type
                        set relships = obj.neighbourRelationships
                        for each rel in relships
                            if rel.origin.uri = obj.uri then
                                addRelshipType(rel.type)
                            end if
                        next
                    end if
                end if
            next
        end if
    End Sub

&#39;-----------------------------------------------------------
    Public Sub addObjectType(objectType)
        dim objType
        dim found
        
        found = false
        for each objType in objTypes
            if isEnabled(objType) then
                if objType.uri = objectType.uri then
                    found = true
                    exit for
                end if
            end if
        next
        if not found then
            &#39; Maintain the list
            noObjTypes = noObjTypes + 1
            objTypes.addLast(objectType)
        end if
    End Sub

&#39;-----------------------------------------------------------
    Public Sub addRelshipType(relshipType)
        dim relType
        dim found

        found = false
        for each relType in relTypes
            if isEnabled(relType) then
                if relType.uri = relshipType.uri then
                    found = true
                    exit for
                end if
            end if
        next
        if not found then
            &#39; Maintain the list
            noRelTypes = noRelTypes + 1
            relTypes.addLast relshipType
        end if
    End Sub

&#39;-----------------------------------------------------------
    Public Sub Class_Initialize()
        set currentModel        = metis.currentModel
        set currentModelView    = currentModel.currentModelView
        set currentInstance     = currentModel.currentInstance
        set currentInstanceView = currentModelView.currentInstanceView
        noObjTypes = 0
        set objTypes = metis.newInstanceList
        noRelTypes = 0
        set relTypes = metis.newInstanceList
        &#39; Types
        set propertyType        = metis.findType(&#34;http://xml.activeknowledgemodeling.com/eka/languages/eka_property.kmd#ObjType_EKA:Property_UUID&#34;)
        set anyObjectType       = metis.findType(&#34;metis:stdtypes#oid1&#34;)
    End Sub

&#39;-----------------------------------------------------------
    Public Sub Class_Terminate()
    End Sub

End Class
</string>
  </valueset>
 </object>

 <object id="_002aspt01b45jl767joi">
  <valueset size="10" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="../languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Class CVW_ObjectView</string>
   <string name="description"></string>
   <integer name="dbms-admin.commitFlag">0</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20080406 125406375</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="comments"></string>
   <string name="script">option explicit


&#39;-----------------------------------------------------------
&#39;-----------------------------------------------------------
Class CVW_ObjectView


    &#39; Variant parameters
    Public Title                            &#39; String
    Public TypeViewUri                      &#39; Uri

    &#39; Context variables (public)
    Public currentModel
    Public currentModelView
    Public currentInstance
    Public currentInstanceView
    Public nestedTextFactor1
    Public nestedTextFactor2
    Public treeTextFactor
    Public heightRatio
    Public widthRatio
    Public viewStrategy
    Public addMode

    Private hasViewStrategyType

    Private noTypes
    Private typeList()
    Private noTypeViews
    Private typeViewList()

&#39;-----------------------------------------------------------
    Public Function create(workWindow, parentInstView, obj, heightRatio)
        dim objView
        dim prevTypeView
        dim objGeo, size
        dim textscale
        dim rule
        dim i

        set create = Nothing
        if Len (treeTextFactor) = 0 or treeTextFactor = -1 then
            treeTextFactor = 1.0   &#39; 3.6
            if parentInstView.uri &#60;&#62; workWindow.uri then
                treeTextFactor = 1.0  &#39; 0.5
            end if
        end if
        if Len (nestedTextFactor1) = 0 or nestedTextFactor1 = -1 then
            nestedTextFactor1 = 12 &#39;20
        end if
        if Len (nestedTextFactor2) = 0 or nestedTextFactor2 = -1 then
            nestedTextFactor2 = 0.9
        end if
        if isValid(viewStrategy) then
            for i = 1 to viewStrategy.noSymbolRules
                set rule = viewStrategy.symbolRules(i)
                if rule.instType.inherits(obj.type) then
                    TypeViewUri = rule.typeView
                    exit for
                end if
            next
        end if
        set prevTypeView = setObjectTypeView(obj.type, obj.ownerModel)
        &#39;if isValid(prevTypeView) then
        &#39;    call addToList(obj.type, typeList, noTypes)
        &#39;    call addToList(prevTypeView, typeViewList, noTypeViews)
        &#39;end if
        dim m, mv
        set m = metis.currentModel
        set mv = m.currentModelView
        set objView = parentInstView.newObjectView(obj)
        set metis.currentModel = m
        set metis.currentModel.currentModelView = mv
        call setObjectSymbol(objView)
        if isValid(objView) then
            if isValid(viewStrategy) then
                for i = 1 to viewStrategy.noSymbolRules
                    set rule = viewStrategy.symbolRules(i)
                    if rule.instType.inherits(obj.type) then
                        if objView.isNested then
                            if Len(rule.symbolNestedOpen) &#62; 0 then
                                objView.openSymbol   = rule.symbolNestedOpen
                                objView.closedSymbol = rule.symbolNestedClosed
                            end if
                        elseif Len(rule.symbol) &#62; 0 then
                            objView.openSymbol   = rule.symbol
                            objView.closedSymbol = rule.symbol
                        end if
                        exit for
                    end if
                next
            end if
            if heightRatio &#62; 0 then
                dim hr, ratio

                set objGeo = objView.absScaleGeometry
                set size = objGeo.size
                hr = size.height / size.width
                ratio = hr / heightRatio
                treeTextFactor = treeTextFactor * ratio
                size.height = heightRatio * size.width
                if widthRatio &#62; 0 then
                    size.width  = size.height * widthRatio
                end if
                set objGeo.size = size
                set objView.absScaleGeometry = objGeo
            end if
            &#39; Handle textscale
            textscale = getTextScaleFactor(workWindow, parentInstView, objView)
            objView.textScale = textScale
            set create = objView
        end if
    End Function

&#39;-----------------------------------------------------------
    Private Sub setObjectSymbol(objView)

        if hasInstance(objView) then
            dim model, method
            dim obj, objType
            dim tvUri

            set obj = objView.instance
            set objType = obj.type
            set model = obj.ownerModel

            if Len(TypeViewUri) &#62; 0 then
                dim pos
                pos = InStr(1, TypeViewUri, &#34;#&#34;)
                if pos = 1 then
                    dim typeViewUrl
                    typeViewUrl = objType.url
                    tvUri = typeViewUrl &#38; TypeViewUri
                elseif pos &#62; 1 then
                    tvUri = TypeViewUri
                else
                    &#39; No type view
                    exit sub
                end if
            else
                exit sub
            end if
            &#39; Call the Metis method
            set method = GLOBAL_Mtd_EkaSetSymbol
            call method.setArgument1(&#34;TypeUri&#34;, objType.uri)
            call method.setArgument1(&#34;TypeViewUri&#34;, tvUri)
            call method.setArgument1(&#34;ObjectViewUri&#34;, objView.uri)
            call model.runMethod(method)
        End if
    End Sub

&#39;-----------------------------------------------------------
    Private Function setObjectTypeView(objType, model)
        dim typeUri
        dim typeView, typeViewUrl, tvUri
        dim method
        dim pos

        typeUri = objType.uri
        set typeView = objType.defaultTypeView
        typeViewUrl = typeView.url
        if Len(TypeViewUri) &#62; 0 then
            pos = InStr(1, TypeViewUri, &#34;#&#34;)
            if pos = 1 then
                tvUri = typeViewUrl &#38; TypeViewUri
            elseif pos &#62; 1 then
                tvUri = TypeViewUri
            else
                &#39; No type view
                exit function
            end if
        else
            set setObjectTypeView = Nothing
            exit function
        end if
        if typeViewUri &#60;&#62; typeView.uri then
            set method = GLOBAL_Mtd_EkaSetTypeView
            call method.setArgument1(&#34;TypeUri&#34;, typeUri)
            call method.setArgument1(&#34;TypeViewUri&#34;, tvUri)
            call model.runMethod(method)
            set setObjectTypeView = typeView
        else
            set setObjectTypeView = Nothing
        end if
    End Function

&#39;-----------------------------------------------------------
    Public Function findViewStrategy(wObject)

        if isEnabled(wObject) then
            dim strategyCont, strategyConts

            &#39; Get view strategy
            set findViewStrategy = Nothing
            set strategyConts = wObject.getNeighbourObjects(0, hasViewStrategyType, GLOBAL_Type_AnyObject)
            if strategyConts.count &#62; 0 then
                set strategyCont = strategyConts(1)
                if not isValid(viewStrategy) then
                    set viewStrategy = new CVW_ViewStrategy
                end if
                call viewStrategy.build(strategyCont)
                set findViewStrategy = viewStrategy
            end if
        end if
    End Function

&#39;-----------------------------------------------------------
    Public Sub resetTypeViews(model)
        dim i, method
        dim objType, typeView

        for i = 1 to noTypeViews
            set objType  = typeList(i)
            set typeView = typeViewList(i)
            if isValid(typeView) then
                set method = GLOBAL_Mtd_EkaSetTypeView
                call method.setArgument1(&#34;TypeUri&#34;, objType.uri)
                call method.setArgument1(&#34;TypeViewUri&#34;, typeView.uri)
                call model.runMethod(method)
            end if
        next
    End Sub

&#39;-----------------------------------------------------------
    Private Function getTextScaleFactor(workWindow, parentView, instView)
        dim parentTs, instTs
        dim pView
        dim textscale
        dim i, level

        if instView.isNested then
            parentTs = workWindow.textscale
            level = 0
            set pView = parentView
            do while isValid(pView)
                if pView.uri = workWindow.uri then
                    exit do
                end if
                set pView = pView.parent
                level = level + 1
            loop
            textScale = parentTs * nestedTextFactor1
            for i = 1 to level
                textScale = textScale * nestedTextFactor2
            next
        else
            parentTs = parentView.textscale
            textScale = parentTs * treeTextFactor
            if parentView.uri &#60;&#62; workWindow.uri then
                if parentView.children.count &#62; 1 then
                    dim factor, child
                    for each child in parentView.children
                        if child.uri &#60;&#62; instView.uri then
                            factor = child.scaleFactor / instView.scaleFactor
                            textscale = child.textscale * factor
                            exit for
                        end if
                    next
                else
                    &#39;factor = parentView.scaleFactor / instView.scaleFactor
                    &#39;textscale = instView.textscale &#39;* factor * 2
                    &#39;if addMode then
                    &#39;    textscale = instView.textscale * factor * 2
                    &#39;    if parentView.uri &#60;&#62; workWindow.uri and parentView.isNested then
                    &#39;        textscale = textscale / 2
                    &#39;    else
                    &#39;        textscale = textscale / (3.6 * 2)
                    &#39;    end if
                    &#39;end if
                end if
            end if
        end if
        getTextScaleFactor = textscale

    End Function
&#39;-----------------------------------------------------------
    Private Sub addToList(smartPtr, list, noList)
        dim elem
        dim indx, found

        found = false
        for indx = 1 to noList
            set elem = list(indx)
            if isValid(elem) then
                if smartPtr.uri = elem.uri then
                    found = true
                    exit for
                end if
            end if
        next
        if not found then
            noList = noList + 1
            ReDim Preserve list(noList)
            set list(noList) = smartPtr
        end if
    End Sub

&#39;-----------------------------------------------------------
    Private Sub Class_Initialize()
        set currentModel        = metis.currentModel
        set currentModelView    = currentModel.currentModelView
        set currentInstance     = currentModel.currentInstance
        set currentInstanceView = currentModelView.currentInstanceView
        set viewStrategy        = Nothing
        set hasViewStrategyType = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/spec_relships.kmd#RelType_CVW:hasViewStrategy2_UUID&#34;)
        nestedTextFactor2 = -1
        treeTextFactor    = -1
        heightRatio       = -1
        TypeViewUri = &#34;&#34;
        addMode = false
    End Sub

&#39;-----------------------------------------------------------
    Public Sub Class_Terminate()
    End Sub

End Class

</string>
  </valueset>
 </object>

 <object id="_002aspt01b45jl8d8ube">
  <valueset size="10" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="../languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Class CVW_StatusBar
DK</string>
   <string name="description"></string>
   <integer name="dbms-admin.commitFlag">0</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20070820 123416754</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="comments"></string>
   <string name="script">option explicit

class CVW_StatusBarDK
&#39;[1] ------------------------------------------------------------
 Public Sub topMenuStatus (instView)
  dim topMenuObject, inst

  set inst = instView.instance 
  For each topMenuObject in instView.parent.children 
    if topMenuObject.title = inst.title THEN  
      topMenuObject.open
    else
      topMenuObject.close
    end if
   next

 end sub

&#39;[2] ------------------------------------------------------------
Public  sub populateStatusBars(instView)
 &#39;[a]-------------------------------
 Dim  InputContainerName, InputContainerType
 Dim  titleBarType, titleBar, titleBarString  
 &#39;[b]-------------------------------
 InputContainerName = &#34;CVW_NavigationHome&#34;
 InputContainerType = &#34;metis:stdtypes#oid3&#34;
 &#39;[c]-------------------------------
  set titleBarType  = metis.findType(&#34;http://metadata.troux.info/meaf/objecttypes/general_object.kmd#CompType_MEAF:GeneralObject_UUID&#34;)
 set titleBar  = model.findInstances(titleBarType, &#34;comments&#34; ,&#34;CVW_TitleBar&#34;)
   &#39; --- Updater Navigation Bar 
   titleBarString = &#34;&#62; &#34; &#38; instView.title
   titleBar.item(1).setNamedStringValue &#34;name&#34;, titleBarString  
 end sub



end class
</string>
  </valueset>
 </object>

 <object id="_002aspt01b45jl98re3k">
  <valueset size="10" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="../languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Class CVW_Instance</string>
   <string name="description"></string>
   <integer name="dbms-admin.commitFlag">0</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20070820 123345599</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="comments"></string>
   <string name="script">option explicit

&#39;-----------------------------------------------------------
&#39;-----------------------------------------------------------
Class CVW_Instance

    Public currentModel
    Public currentModelView
    Public currentInstance
    Public currentInstanceView

    Private anyObjectType
    Private windowType
    Private isInstanceType

&#39;-----------------------------------------------------------
    Public Sub showProperties
        dim selected
        dim m, indx
        dim workarea, workwindow, wObject
        dim obj, objects
        dim objViews, objView
        dim created

        &#39; Assume started on Property button on titlebar
        set workarea = currentInstanceView.parent.parent
        indx = workarea.children.count
        set workwindow = workarea.children(indx)
        set selected = metis.selectedObjectViews
        if selected.count = 1 then
            if isInView(selected(1), workwindow) then
                set metis.currentModel.currentInstance = selected(1).instance
                set metis.currentModel.currentModelView.currentInstanceView = selected(1)
                call metis.runCommand(&#34;properties&#34;)
                exit sub
            end if
        elseif selected.count &#62; 1 then
            call metis.runCommand(&#34;object-property-list&#34;)
            exit sub
        end if
        if true then
            set wObject = workwindow.instance
            if isEnabled(wObject) then
                set objects = wObject.getNeighbourObjects(0, isInstanceType, anyObjectType)
                if isValid(objects) then
                    if objects.count &#62; 0 then
                        for each obj in objects
                            if isEnabled(obj) then
                                &#39; Ensure object view exists
                                created = false
                                set objViews = obj.views
                                if objViews.count = 0 then
                                    set objView = workwindow.newObjectView(obj)
                                    created = true
                                end if
                                if objViews.count &#62; 0 then
                                    set objView = objViews(1)
                                end if
                                &#39; Set current values
                                set metis.currentModel = obj.ownerModel
                                set metis.currentModel.currentInstance = obj
                                set metis.currentModel.currentModelView.currentInstanceView = objView
                                call metis.runCommand(&#34;properties&#34;)
                                if created then
                                    call currentModelView.deleteObjectView(objView)
                                end if
                                exit for
                            end if
                        next
                    end if
                end if
            end if
        end if
    End Sub

&#39;-----------------------------------------------------------
    Public Function getInstance
        dim obj, objects
        dim workarea, workwindow, wObject

        set getInstance = Nothing
        &#39; Assume started on workwindow
        set workwindow = currentInstanceView
        set wObject = workwindow.instance
        if isEnabled(wObject) then
            set objects = wObject.getNeighbourObjects(0, isInstanceType, anyObjectType)
            if isValid(objects) then
                if objects.count &#62; 0 then
                    for each obj in objects
                        if isEnabled(obj) then
                            set getInstance = obj
                            exit for
                        end if
                    next
                end if
            end if
        end if
    End Function

&#39;-----------------------------------------------------------
    Public Function getInstanceName
        dim obj, objects
        dim workarea, workwindow, wObject

        getInstanceName = &#34;&#34;
        &#39; Assume started on workwindow
        set workwindow = currentInstanceView
        set wObject = workwindow.instance
        if isEnabled(wObject) then
            set objects = wObject.getNeighbourObjects(0, isInstanceType, anyObjectType)
            if isValid(objects) then
                if objects.count &#62; 0 then
                    for each obj in objects
                        if isEnabled(obj) then
                            getInstanceName = obj.title
                            exit for
                        end if
                    next
                end if
            end if
        end if

    End Function

&#39;-----------------------------------------------------------
    Private Sub Class_Initialize()
        set currentModel        = metis.currentModel
        set currentModelView    = currentModel.currentModelView
        set currentInstance     = currentModel.currentInstance
        set currentInstanceView = currentModelView.currentInstanceView

        set anyObjectType  = metis.findType(&#34;metis:stdtypes#oid1&#34;)
        set windowType     = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/view_objects.kmd#UiType_CVW:Workarea_UUID&#34;)
        set isInstanceType = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/spec_relships.kmd#RelType_CVW:hasInstanceContext2_UUID&#34;)

    End Sub

&#39;-----------------------------------------------------------

End Class

&#39;-----------------------------------------------------------
</string>
  </valueset>
 </object>

 <object id="_002aspt01b45jl9r9a26">
  <valueset size="10" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="../languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Class CVW_MenuTree
</string>
   <string name="description"></string>
   <integer name="dbms-admin.commitFlag">0</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20070820 123345599</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="comments"></string>
   <string name="script">option explicit

Class CVW_MenuTree

    &#39; Context variables
    Private model
    Private modelView
    Private inst
    Private instView

    &#39; Arguments
    Private MenuLayout
    Private LeftPaneLayout
    Private LeftPaneTreeLayout
    Private MenuSymbol
    Private LeftPaneSymbol

    &#39; Types
    Private winType
    Private buttonType
    Private consistsOfType
    Private menuLayoutStrategy
    Private leftPaneLayoutStrategy
    Private leftPaneTreeLayoutStrategy

    &#39; Others
    Private kindProperty
    Private kind
    Private argObj
    Private cvwWindow
    Private winName
    Private parentView

   &#39;---------------------------------------------------------------------------------------------------
    Public Sub build(mode, textScale, scaleFactor)    &#39; mode = &#34;TopMenu&#34; | &#34;NodeMenu&#34;
        dim parentView

        if mode = &#34;MenuTree&#34; then
            set parentView = findInstanceView(model, winType, &#34;name&#34;, &#34;CVW_LeftPane&#34;)
            winName = &#34;CVW_MenuLevel1&#34;
            &#39; Check if window already exists. If so, remove
            if cvwWindow.find(winName, winType, parentView) then
                cvwWindow.remove
            end if
            &#39; Create new window
            if cvwWindow.create(winName, winType, parentView) then
                call populateMenu1()
                if isValid(menuLayoutStrategy) then
                    set parentView.children(1).layoutStrategy = menuLayoutStrategy
                end if
                parentView.openSymbol   = LeftPaneSymbol
                parentView.closedSymbol = LeftPaneSymbol
                parentView.children(1).openSymbol      = MenuSymbol
                parentView.children(1).closedSymbol    = MenuSymbol
                parentView.children(1).textScale       = textScale
                parentView.children(1).geometry.width  = parentView.children(1).geometry.width * scaleFactor
                parentView.children(1).geometry.height = parentView.children(1).geometry.height * scaleFactor
                call cvwWindow.doParentLayout
            end if
        elseif mode = &#34;MenuNode&#34; then
            set parentView = instView
            if parentView.children.count &#62; 0 then
                call cleanTree(modelView, parentView)
                call parentView.close
            else
                call populateMenu2(textScale, scaleFactor)
                if isValid(leftPaneTreeLayoutStrategy) then
                    set parentView.layoutStrategy = leftPaneTreeLayoutStrategy
                end if
                call cvwWindow.doParentLayout
            end if
        end if
    End Sub

&#39;-----------------------------------------------------------
    Public Sub populateMenu1()
        Dim objectMenuType, objectMenuItem
        Dim  newObjectMenu, newObjectMenuView, objectMenuView

            For each objectMenuItem in inst.neighbourRelationships
                Set newObjectMenu = objectMenuItem.target
                if newObjectMenu.type.uri = buttonType.uri THEN
                    if newObjectMenu.title &#60;&#62; inst.title THEN
                        kind = newObjectMenu.getNamedStringValue(kindProperty)
                        if kind = &#34;Menu&#34; then
                            Set newObjectMenuView           = cvwWindow.objectView.newObjectView(newObjectMenu)
                            newobjectMenuView.openSymbol    = newObjectMenu.Views(1).openSymbol
                            newobjectMenuView.closedSymbol  = newObjectMenu.Views(1).closedSymbol
                            newobjectMenuView.textScale     = 0.08
                            newobjectMenuView.close
                        end if
                  end if
              end if
            next

    End Sub

&#39;---------------------------------------------------------------------------------------------------
    sub populateMenu2(textScale, scaleFactor)    &#39; textScale = 0.05, scaleFactor = 1.3
        dim  item, itemView, newItemView, rel
        on error resume next

        For each rel in inst.getNeighbourRelationships(0, consistsOfType)
            if isEnabled(rel) then
                set item = rel.target
                kind = &#34;Menu&#34;
                if isEnabled(item) then
                    kind = item.getNamedStringValue(kindProperty)
                    if kind = &#34;Menu&#34; then
                        set newItemView             = instView.newObjectView(item)
                        newItemView.openSymbol      = item.Views(1).openSymbol
                        newItemView.closedSymbol    = item.Views(1).closedSymbol
                        newItemView.textScale       = textScale
                        newItemView.geometry.width  = newItemView.parent.geometry.width * scaleFactor
                        newItemView.geometry.height = newItemView.parent.geometry.height * scaleFactor
                        newItemView.close
                        newItemView.parent.open
                    end if
                end if
            end if
        next
    end sub

   &#39;---------------------------------------------------------------------------------------------------
    Private Sub Class_Initialize
        set model           = metis.currentModel
        set modelView       = model.currentModelView
        set inst            = model.currentInstance
        set instView        = modelView.currentInstanceView
        set buttonType      = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/action_objects.kmd#ObjType_CVW:Button_UUID&#34;)
        set consistsOfType  = metis.findType(&#34;http://xml.activeknowledgemodeling.com/eka/languages/eka_relships.kmd#RelType_EKA:Member_UUID&#34;)
        set winType         = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/view_objects.kmd#UiType_CVW:Workarea_UUID&#34;)
        set cvwWindow       = new CVW_Window
        set argObj          = new CVW_ArgumentValue
        kindProperty        = &#34;kind&#34;
        MenuLayout          = argObj.getArgumentValue(inst, &#34;MenuLayout&#34;)
        LeftPaneLayout      = argObj.getArgumentValue(inst, &#34;LeftPaneLayout&#34;)
        LeftPaneTreeLayout  = argObj.getArgumentValue(inst, &#34;LeftPaneTreeLayout&#34;)
        MenuSymbol          = argObj.getArgumentValue(inst, &#34;MenuSymbol&#34;)
        LeftPaneSymbol      = argObj.getArgumentValue(inst, &#34;LeftPaneSymbol&#34;)
        set menuLayoutStrategy          = metis.findLayoutStrategy(MenuLayout)
        set leftPaneLayoutStrategy      = metis.findLayoutStrategy(LeftPaneLayout)
        set leftPaneTreeLayoutStrategy  = metis.findLayoutStrategy(LeftPaneTreeLayout)
    End Sub
   &#39;---------------------------------------------------------------------------------------------------


End Class</string>
  </valueset>
 </object>

 <object id="_002aspt01b45jla327hk">
  <valueset size="10" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="../languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Class CVW_Filter</string>
   <string name="description"></string>
   <integer name="dbms-admin.commitFlag">0</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20071207 122357156</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="comments"></string>
   <string name="script">option explicit

&#39;-----------------------------------------------------------
&#39;-----------------------------------------------------------
Class CVW_Filter

    &#39; Variant parameters
    Public Title                          &#39; String


&#39;-----------------------------------------------------------
    Public Function removeDuplicates(insts)
        do while removeDuplicate(insts)
        loop
        set removeDuplicates = insts
    End Function

&#39;-----------------------------------------------------------
    Private Function removeDuplicate(insts)
        dim i, j
        dim i1, i2

        i = 1
        for each i1 in insts
            j = 1
            for each i2 in insts
                if i1.uri = i2.uri then
                    if i &#60;&#62; j then
                        call insts.removeAt(i)
                        removeDuplicate = true
                        exit function
                    end if
                end if
                j = j + 1
            next
            i = i + 1
        next
    End Function

&#39;-----------------------------------------------------------
    Public Function instIsValid(inst, rules, noRules)
        dim rule
        dim propname, operator, value
        dim i
        instIsValid = true
        for i = 1 to noRules
            set rule = rules(i)
            propName = rule.propName
            operator = rule.operator
            value = rule.propValue
            if not valueIsValid(inst, propName, operator, value) then
                instIsValid = false
                exit function
            end if
        next
    End Function

&#39;-----------------------------------------------------------
    Public Function valueIsValid(inst, propName, operator, value)
        dim propValue, numValue, stringValue, strValue
        dim isNumber, number

        on error resume next
        valueIsValid = false
        if Len(propName) = 0 then
            valueIsValid = true
            exit function
        end if
        stringValue = inst.getNamedStringValue(propName)
        if Len(stringValue) &#62; 0 then
            if value = stringValue then
                valueIsValid = true
                exit function
            end if
        end if
        set propValue = inst.getNamedValue(propName)
        if not isValid(propValue) then
            valueIsValid = true
            exit function
        end if
        if propValue.isInteger then
            isNumber = true
            numValue = propValue.getInteger
            if value = &#34;true&#34; then
                value = &#34;1&#34;
            elseif value = &#34;false&#34; then
                value = &#34;0&#34;
            end if
            number = CInt(value)
        elseif propValue.isFloat then
            isNumber = true
            numValue = propValue.getFloat
            number = CDbl(value)
        else
            isNumber = false
            stringValue = propValue.getString
        end if
        if isNumber and not isEmpty(number) then
            select case operator
            case &#34;lt&#34;
                if numValue &#60; number then
                    valueIsValid = true
                end if
            case &#34;le&#34;
                if numValue &#60;= number then
                    valueIsValid = true
                end if
            case &#34;eq&#34;
                if numValue = number then
                    valueIsValid = true
                end if
            case &#34;ne&#34;
                if numValue &#60;&#62; number then
                    valueIsValid = true
                end if
            case &#34;ge&#34;
                if numValue &#62;= number then
                    valueIsValid = true
                end if
            case &#34;gt&#34;
                if numValue &#62; number then
                    valueIsValid = true
                end if
            end select
        else
            select case operator
            case &#34;eq&#34;
                if stringValue = value then
                    valueIsValid = true
                end if
            case &#34;ne&#34;
                if stringValue &#60;&#62; value then
                    valueIsValid = true
                end if
            end select
        end if

    End Function

&#39;-----------------------------------------------------------
    Private Sub Class_Initialize()
    End Sub

&#39;-----------------------------------------------------------
    Public Sub Class_Terminate()
    End Sub

End Class

</string>
  </valueset>
 </object>

 <object id="_002aspt01b45jlc06ekh">
  <valueset size="10" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="../languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Class CVW_ViewStrategy
</string>
   <string name="description"></string>
   <integer name="dbms-admin.commitFlag">0</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20080310 090003375</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="comments"></string>
   <string name="script">option explicit


&#39;-----------------------------------------------------------
&#39;-----------------------------------------------------------
Class CVW_ViewStrategy

    Public  title

    &#39; Parameters
    Public SpecificationModel            &#39; String
    Public noHierarchyRules              &#39; Integer
    Public hierarchyRules()              &#39; Collection of CVW_RelRule
    Public noPathRules                   &#39; Integer
    Public pathRules()                   &#39; Collection of CVW_RelRule
    Public noSymbolRules                 &#39; Integer
    Public symbolRules()                 &#39; Collection of CVW_SymbolRule
    Public showAllRelationships          &#39; Integer
    Public viewAsHierarchy               &#39; Integer
    Public objectAspectRatio             &#39; Double

    &#39; Context variables
	private config
	private params

    Private model
    Private modelView
    Private cObject                      &#39; Component object   - IMetisInstance
    Private aObject                      &#39; Configuring object - IMetisInstance

    &#39; Types
    Private anyObjectType                &#39; IMetisType
    Private isTopType                    &#39; IMetisType
    Private hasValueType                 &#39; IMetisType
    Private hasValueConstraintType       &#39; IMetisType
    Private hasViewStrategyType          &#39; IMetisType
    Private symbolType

    &#39; Others
    Private noRelTypes                   &#39; Integer
    Private relTypeList()                &#39; Collection of relationship types
    Private cvwArg                       &#39; CVW_ArgumentValue

&#39;-----------------------------------------------------------
    Public Property Get component           &#39;IMetisObject
        set component = cObject
    End Property

    Public Property Set component(obj)
        if isEnabled(obj) then
            set cObject = obj
        end if
    End Property

&#39;-----------------------------------------------------------
    Public Property Get configObject           &#39;IMetisObject
        set configObject = aObject
    End Property

    Public Property Set configObject(obj)
        if isEnabled(obj) then
            set aObject = obj
        end if
    End Property

&#39;-----------------------------------------------------------
    Public Property Get parameters        &#39;IRTV_Config
		if not isValid(params) then
			set config = GLOBAL_Context
			set params = new CVW_ParameterManager
			set params.config = config
		end if
        set parameters = params
    End Property

    Public Property Set parameters(obj)
        if isValid(obj) then
			set params = obj
            set config = params.config
		end if
    End Property

&#39; ------------------------------------------------------------
    Public Function value(object, name, byref val)
        val = &#34;&#34;
        dim found
        found = parameters.getValueForObject(object, name, val)
        if not found then
            found = parameters.getValueFromSupers(object, name, val)
        end if
        &#39;if not found then
        &#39;    call parameters.putValue(name, val)
        &#39;    found = isValid(val)
        &#39;end if
        if isObject(val) then
            if val is Nothing then 
                value = &#34;&#34;
            else
                set value = val
            end if
        else
            value = val
        end if
    end Function

&#39;-----------------------------------------------------------
    Public Sub findViewStrategy(wObject)
        if isEnabled(wObject) then
            dim strategyCont, strategyConts

            &#39; Get view strategy
            set strategyConts = wObject.getNeighbourObjects(0, hasViewStrategyType, GLOBAL_Type_AnyObject)
            if strategyConts.count &#62; 0 then
                set strategyCont = strategyConts(1)
                call build(strategyCont)
            end if
        end if
    End Sub

&#39;-----------------------------------------------------------
    Public Function findStrategyContainer(wObject)
        set findStrategyContainer = Nothing
        if isEnabled(wObject) then
            dim strategyCont, strategyConts

            &#39; Get view strategy
            set strategyConts = wObject.getNeighbourObjects(0, hasViewStrategyType, GLOBAL_Type_AnyObject)
            if strategyConts.count &#62; 0 then
                set findStrategyContainer = strategyConts(1)
            end if
        end if
    End Function

&#39;-----------------------------------------------------------
    Public Function isHierarchyRel(rel)
        dim i

        isHierarchyRel = false
        for i = 1 to noHierarchyRules
            dim rule
            set rule = hierarchyRules(i)
            if rule.isAllowed2(rel) then
                isHierarchyRel = true
            end if
        next
    End Function

&#39;-----------------------------------------------------------
    Public Function isHierarchyObj(obj)
        dim i

        isHierarchyObj = false
        if noHierarchyRules &#62; 0 then
            for i = 1 to noHierarchyRules
                dim rule
                set rule = hierarchyRules(i)
                if obj.type.inherits(rule.childType) then
                    dim rel, rels, reldir
                    if rule.relDir = 0 then reldir = 1 else reldir = 0
                    set rels = obj.getNeighbourObjects(reldir, rule.relType, rule.parentType)
                    for each rel in rels
                        isHierarchyObj = true
                        exit for
                    next
                end if
                if rule.relType.uri = GLOBAL_Type_EkaHasPart.uri then
                    if obj.type.inherits(rule.childType) then isHierarchyObj = true
                end if
            next
        else
            isHierarchyObj = true
        end if
    End Function

&#39;-----------------------------------------------------------
    Public Function isHierarchyRelView(rel, originView, targetView)
        dim rule
        dim i

        isHierarchyRelView = false
        if isHierarchyRel(rel) then
            isHierarchyRelView = true
            exit function
        end if
        for i = 1 to noHierarchyRules
            set rule = hierarchyRules(i)
            if rule.relType.uri = rel.type.uri then
                if rule.relDir = 0 then
                    if rel.origin.type.uri = rule.parentType.uri then
                        if rel.target.type.uri = rule.childType.uri then
                            isHierarchyRelView = true
                        end if
                    end if
                elseif rule.relDir = 1 then
                    if rel.target.type.uri = rule.parentType.uri then
                        if rel.origin.type.uri = rule.childType.uri then
                            isHierarchyRelView = true
                        end if
                    end if
                end if
            end if
        next
    End Function
    
&#39;-----------------------------------------------------------
    &#39; Build internal structures
    Public Sub build(strategyCont)
        dim usedList(), noUsed
        
        &#39; Build code
        if isEnabled(strategyCont) then
            dim inst, rel, relships
            &#39; Find view strategy container
            propVal = value(strategyCont, &#34;ViewAsHierarchy&#34;, propVal)
            if propVal = &#34;1&#34; then 
                viewAsHierarchy = 1
            elseif propVal = &#34;0&#34; then 
                viewAsHierarchy = 0
            end if

            set relships = strategyCont.getNeighbourRelationships(0, isTopType)
            if relships.count &#62; 0 then
                for each rel in relships
				    set inst = rel.target
                    noUsed = 0
                    if viewAsHierarchy &#62; 0 then
                        call buildRelRules(rel, inst, hierarchyRules, noHierarchyRules, usedList, noUsed, relTypeList, noRelTypes, hasValueConstraintType, strategyCont)
                    elseif viewAsHierarchy = 0 then
                        call buildRelRules(rel, inst, pathRules, noPathRules, usedList, noUsed, relTypeList, noRelTypes, hasValueConstraintType, strategyCont)
                    end if
                next
            else
                set relships = strategyCont.getNeighbourRelationships(0, GLOBAL_Type_EkaHasMember)
                if relships.count &#62; 0 then
                    for each rel in relships
				        set inst = rel.target
                        noUsed = 0
                        if viewAsHierarchy &#62; 0  then
                            call buildRelRules(rel, inst, hierarchyRules, noHierarchyRules, usedList, noUsed, relTypeList, noRelTypes, hasValueConstraintType, strategyCont)
                        elseif viewAsHierarchy = 0 then
                            call buildRelRules(rel, inst, pathRules, noPathRules, usedList, noUsed, relTypeList, noRelTypes, hasValueConstraintType, strategyCont)
                        end if
                    next
                end if
            end if
            dim part, parts
            set parts = strategyCont.parts
            for each part in parts
                if not part.type.uri = symbolType.uri then
                    call buildSymbRules(part, symbolRules, noSymbolRules)
                end if
            next
            dim propVal
            propVal = value(strategyCont, &#34;ShowAllRelationships&#34;, propVal)
            if propVal = &#34;1&#34; then showAllRelationships = true else showAllRelationships = false
            propVal = value(strategyCont, &#34;ObjectAspectRatio&#34;, propVal)
            if isNumeric(propVal) then objectAspectRatio = CDbl(propVal)
        end if
    End Sub

&#39;-----------------------------------------------------------
    &#39; Configure used components
    Public Sub configure
        &#39; Only relevant if CVW_ViewStrategy uses other components
    End Sub

&#39;-----------------------------------------------------------
    &#39; Do what the component is built for - return result
    Public Function execute
        dim Something

        set execute = Nothing
        &#39; The code
        set execute = Something
    End Function

&#39;-----------------------------------------------------------
    Private Sub buildSymbRules(inst, list, noList)
        dim param, params
        dim symbol, symbols
        dim symbolRels, paramRels, rel
        dim symbolUri
        dim viewState
        dim cvwRule
        dim found

        if isEnabled(inst) then
            found = false
            set cvwRule = new CVW_SymbolRule
            set cvwRule.instType = inst.type
            cvwRule.title = inst.type.title
            &#39; Look for connected symbol
            set symbolRels  = Global_InformationManager.getAllNeighbours(inst, &#34;&#34;, GLOBAL_Type_EkaHasSymbol, 0)
            for each rel in symbolRels
                set symbol = rel.target
                symbolUri = symbol.getNamedStringValue(&#34;symbol&#34;)
                viewState = symbol.getNamedValue(&#34;view_state&#34;).getInteger
                select case viewState
                  case 1
                    cvwRule.symbol = symbolUri
                  case 2
                    cvwRule.symbolNestedOpen = symbolUri
                  case 3
                    cvwRule.symbolNestedClosed = symbolUri
                end select
                found = true
            next

            dim prop, props, typeViewUri
            set props = Global_InformationManager.getAllNeighbours(inst, &#34;TypeView&#34;, GLOBAL_Type_EkaProperty, 0)
            for each prop in props
                typeViewUri = prop.getNamedStringValue(&#34;value&#34;)
                cvwRule.typeView = typeViewUri
                found = true
                exit for
            next
            if found then
                call addRuleToList(cvwRule, list, noList)
            else
                set cvwRule = Nothing
            end if
        end if
    End Sub

&#39;-----------------------------------------------------------
    Private Sub Class_Initialize()
		set config    = GLOBAL_Context
        set model     = metis.currentModel
        set modelView = model.currentModelView
        set cObject   = model.currentInstance
        set aObject   = model.currentInstance
        set cvwArg    = new CVW_ArgumentValue
        noHierarchyRules = 0
        ReDim hierarchyRules(noHierarchyRules)
        noSymbolRules    = 0
        ReDim symbolRules(noSymbolRules)
        objectAspectRatio = -1
        viewAsHierarchy = -1

        set anyObjectType          = metis.findType(&#34;metis:stdtypes#oid1&#34;)
        set isTopType              = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/spec_relships.kmd#RelType_CVW:isTop_UUID&#34;)
        set hasValueType           = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/cvw_relships.kmd#RelType_CVW:hasValue_UUID&#34;)
        set hasValueConstraintType = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/spec_relships.kmd#RelType_CVW:hasValueConstraint_UUID&#34;)
        set hasViewStrategyType    = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/spec_relships.kmd#RelType_CVW:hasViewStrategy2_UUID&#34;)
        set symbolType             = metis.findType(&#34;http://xml.activeknowledgemodeling.com/eka/languages/eka_symbol.kmd#ObjType_EKA:Symbol_UUID&#34;)

        noRelTypes = 3
        ReDim Preserve relTypeList(noRelTypes)
        set relTypeList(1) = isTopType
        set relTypeList(2) = hasValueType
        set relTypeList(3) = hasValueConstraintType
    End Sub

&#39;-----------------------------------------------------------
    Private Sub Class_Terminate()
        set cvwArg = Nothing
    End Sub

End Class


</string>
  </valueset>
 </object>

 <object id="_002aspt01b45jldc4n2u">
  <valueset size="10" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="../languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Class CVW_ContentSpecification</string>
   <string name="description"></string>
   <integer name="dbms-admin.commitFlag">0</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20071119 092815797</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="comments"></string>
   <string name="script">option explicit


&#39;-----------------------------------------------------------
&#39;-----------------------------------------------------------
Class CVW_ContentSpecification

    &#39; Variant parameters
    Public Title
    Public ContextMode                   &#39; String     CurrentModel | SubModel
    Public SearchMode                    &#39; String     NoSearch | SelectAll | SelectOneFromList | SelectManyFromList | SelectTypeFromList
    Public PathMode                      &#39; String     Path | NoPath
    Public RepositoryConnection
    Public noLevels
    Public applyFilter                   &#39; Boolean

    &#39; Context variables
    Public  currentModel
    Public  currentModelView
    Public  currentInstance
    Public  currentInstanceView
    Public  contextInstance
    Public  topInstance
    Public  contentModel
    Private cObject                      &#39; Component object   - IMetisInstance
    Private aObject                      &#39; Configuring object - IMetisInstance

    &#39; Types
    Private propertyType                 &#39; IMetisType
    Private isTopType                    &#39; IMetisType
    Private hasValueType                 &#39; IMetisType
    Private hasValueConstraintType       &#39; IMetisType

    &#39; Methods
    Private tqlMethod1                   &#39; IMetisMethod
    Private tqlMethod2                   &#39; IMetisMethod

    &#39; Others
    Private noRelTypes                   &#39; Integer
    Private relTypeList()                &#39; Collection of relationship types
    Private cvwArg                       &#39; CVW_ArgumentValue
    Private specObject                   &#39; IMetisInstance
    Private specObjectView               &#39; IMetisInstanceView
    Private filterObject                 &#39; IMetisInstance
    Private filterObjectView             &#39; IMetisInstanceView
    Private instances                    &#39; Collection of IMetisInstance
    Private datatypeProp                 &#39; String
    Private operatorProp                 &#39; String
    Private valueProp                    &#39; String

    Private noTopObjectRules
    Private topObjectRules()
    Private noObjectRules
    Private objectRules()
    Public  noPathRules
    Public  pathRules()
    Private noRelRules
    Private relRules()
    Public  noFilterRules
    Public  filterRules()

&#39;-----------------------------------------------------------
    Public Property Get component           &#39;IMetisObject
        set component = cObject
    End Property

    Public Property Set component(obj)
        if isEnabled(obj) then
            set cObject = obj
        end if
    End Property

&#39;-----------------------------------------------------------
    Public Property Get configObject           &#39;IMetisObject
        set configObject = aObject
    End Property

    Public Property Set configObject(obj)
        if isEnabled(obj) then
            set aObject = obj
        end if
    End Property

&#39;-----------------------------------------------------------
    Public Property Let SpecificationModel(specModel)
        if Len(specModel) &#62; 0 then
            set specObject = metis.findInstance(specModel)
            if isEnabled(specObject) then
                set specObjectView = specObject.views(1)
            end if
        end if
    End Property

    Public Property Get SpecificationModel
        SpecificationModel = &#34;&#34;
        if isEnabled(specObject) then
            SpecificationModel = specObject.uri
        end if
    End Property

&#39;-----------------------------------------------------------
    Public Property Let FilterModel(specModel)
        if Len(specModel) &#62; 0 then
            set filterObject = metis.findInstance(specModel)
            if isEnabled(filterObject) then
                set filterObjectView = filterObject.views(1)
            end if
        end if
    End Property

    Public Property Get FilterModel
        FilterModel = &#34;&#34;
        if isEnabled(specObject) then
            FilterModel = filterObject.uri
        end if
    End Property

&#39;-----------------------------------------------------------
    &#39; Build internal structures
    Public Sub build
        dim specModel, filterModel

        &#39; Find configuring parameter values
        SearchMode   = cvwArg.getConfiguredValue(component, &#34;SearchMode&#34;)                  &#39; SelectAll | SelectOneFromList | SelectManyFromList
        ContextMode  = cvwArg.getConfiguredValue(component, &#34;ContextMode&#34;)                 &#39; CurrentModel | SubModel
        specModel    = cvwArg.getConfiguredValue(component, &#34;ContentSpecification_Model&#34;)
        filterModel  = cvwArg.getConfiguredValue(component, &#34;FilterSpecification_Model&#34;)
        if Len(specModel)&#62; 0 then
            set specObject = metis.findInstance(specModel)
            if isEnabled(specObject) then
                set specObjectView = specObject.views(1)
            end if
        end if
        if Len(filterModel)&#62; 0 then
            set filterObject = metis.findInstance(filterModel)
            if isEnabled(filterObject) then
                set filterObjectView = filterObject.views(1)
            end if
        end if
   End Sub

&#39;-----------------------------------------------------------
    &#39; HDJ added this alternative to build 
    Public Sub IRTVconfigure(parameters)
        on error resume next
        
        SearchMode   = parameters.getValue(&#34;SearchMode&#34;)                  &#39; SelectAll | SelectOneFromList | SelectManyFromList
        ContextMode  = parameters.getValue(&#34;ContextMode&#34;)                 &#39; CurrentModel | SubModel
        set specObject = parameters.getValue(&#34;ContentSpecification_Model&#34;)
        if isEnabled(specObject) then
			specModel    = specObject.uri
		end if
		set filterObject = parameters.getValue(&#34;FilterSpecification_Model&#34;)
		if isEnabled(filterObject) then
			filterModel    = filterObject.uri
			set filterObjectView = filterObject.views(1)
		end if
    End Sub
    
&#39;-----------------------------------------------------------
    &#39; Configure used components
    Public Sub configure
        &#39; Only relevant if this component uses other components
    End Sub

&#39;-----------------------------------------------------------
    &#39; Execute: Find the instances and return the result
    Public Function execute
        dim rel, relships, relList, pathList, pathRel, pathObj
        dim inst, insts
        dim instType
        dim childView, children
        dim contView
        dim ekaInstance
        dim propVal
        dim askForType
        dim i, j, rule
        dim typeList, typeInstances
        dim cvwSelectDialog
        dim hasTopInstance
stop
        set execute = Nothing
        hasTopInstance = false
        &#39; Check if this is a path specification
        &#39; If so, only find the top objects
        if not isEnabled(specObject) then
            exit function
        end if
        if SearchMode = &#34;NoSearch&#34; then
            exit function
        end if
        set ekaInstance = new EKA_Instance
        propVal = ekaInstance.getPropertyValue(specObject, &#34;SearchMode&#34;)
        if Len(propVal) &#62; 0 then
            SearchMode = propVal
        end if
        set relships = specObject.getNeighbourRelationships(0, isTopType)
        if relships.count &#62; 0 then
            &#39; This is a path query - find top object types and path rules
            for each rel in relships
                set inst = rel.target
                set instType = inst.type
                if isEnabled(instType) then
                    hasTopInstance = false
                    if isEnabled(topInstance) then
                        if topInstance.type.uri = instType.uri then
                            hasTopInstance = true
                        end if
                    end if
                    call buildInstRules(inst, topObjectRules, noTopObjectRules, hasValueConstraintType)
                    call buildRelRules(Nothing, inst, pathRules, noPathRules, relTypeList, noRelTypes, hasValueConstraintType)
                end if
            next
        else
            &#39; Find all object types
            if SearchMode = &#34;SelectTypeFromList&#34; then
                askForType = true
                set insts = metis.newInstanceList
            else
                askForType = false
            end if
            set children = specObjectView.children
            for each childView in children
                if hasInstance(childView) then
                    set inst = childView.instance
                    if isEnabled(inst) and not isSpecificationObject(inst) and not inst.isRelationship then
                        set instType = inst.type
                        if isEnabled(instType) then
                            if askForType then
                                if not instanceInList(inst, insts) then
                                    insts.addLast inst
                                end if
                            else
                                call buildInstRules(inst, objectRules, noObjectRules, hasValueConstraintType)
                            end if
                        end if
                    end if
                end if
            next
            &#39; Find all relationship types
            for each childView in children
                if hasInstance(childView) then
                    set inst = childView.instance
                    if isEnabled(inst) and inst.isRelationship then
                        set instType = inst.type
                        if isEnabled(instType) then
                            call buildRelRule(inst, inst.origin, relRules, noRelRules, relTypeList, noRelTypes)
                        end if
                    end if
                end if
            next
        end if
        &#39; Find filter specification
        if isValid(filterObjectView) then
            set children = filterObjectView.children
            if isValid(children) then
                for each childView in children
                    if hasInstance(childView) then
                        set inst = childView.instance
                        if isEnabled(inst) and not isSpecificationObject(inst) and not inst.isRelationship then
                            call buildInstRules(inst, filterRules, noFilterRules, hasValueConstraintType)
                        end if
                    end if
                next
            end if
        end if
        &#39; Now all content specification rules are captured
        &#39; Go on to finding the instances
        if RepositoryConnection then
            set instances = getInstancesFromRepository(instances)
        else
            set instances = getInstancesFromClient(instances, hasTopInstance, filterRules, noFilterRules)
        end if
        &#39; Ask the user according to search mode
        if not askForType and instances.count &#62; 1 then
            set instances = getInstancesSelectedFromList(instances, SearchMode)
        end if
        &#39; Then continue the search according to path specification
        if PathMode = &#34;Path&#34; and instances.count &#62; 0 then
            set typeInstances = Nothing
            if isEnabled(contextInstance) then
                &#39; Build type list of actual types to search
                set typeList = getTypeList(specObject, contextInstance, -1)
                if isValid (typeList) then
                    if typeList.count = 1 then
                        set typeInstances = typeList
                    elseif typeList.count &#62; 1 then
                        set cvwSelectDialog = new CVW_SelectDialog
                        cvwSelectDialog.singleSelect = true
                        cvwSelectDialog.title = &#34;Select dialog&#34;
                        cvwSelectDialog.heading = &#34;Search by type&#34;
                        set typeInstances = cvwSelectDialog.show(typeList)
                    end if
                end if
            end if
            &#39; Check connected relationships
            if RepositoryConnection then
                set instances = getPathListFromRepository(instances, typeInstances)
            else
                set instances = getPathListFromClient(instances, typeInstances)
            end if
        end if
        if noRelRules &#62; 0 then
            &#39; Find the relationships
            for j = 1 to 2
                for i = 1 to noRelRules
                    set rule = relRules(i)
                    if isValid(rule) then
                        set relList = metis.newInstanceList
                        set insts = findRelationships(relList, instances, rule)
                        if isValid(insts) then
                            for each inst in insts
                                if not instanceInList(inst, instances) then
                                    instances.addLast inst
                                end if
                            next
                        end if
                        set relList = Nothing
                    end if
                next
            next
        end if
        set ekaInstance = Nothing
        set execute = instances
    End Function

&#39;-----------------------------------------------------------
    Private Function getInstancesFromClient(instances, hasTopInstance, filterRules, noFilterRules)
        dim cvwSelectDialog, cvwFilter
        dim rule
        dim inst, insts
        dim typeInstances, typeList
        dim pathList, pathObj, pathRel, relList
        dim isValid1
        dim i, j

        set getInstancesFromClient = instances
        if isEnabled(contextInstance) then
            instances.addLast contextInstance
        elseif noTopObjectRules &#62; 0 then
            if hasTopInstance then
                instances.addLast topInstance
            else
                if applyFilter then
                    set cvwFilter = new CVW_Filter
                end if
                for i = 1 to noTopObjectRules
                    set rule = topObjectRules(i)
                    if isValid(rule) then
                        set insts = findConstrainedInstances(rule)
                        if isValid(insts) then
                            for each inst in insts
                                isValid1 = true
                                if applyFilter then
                                    isValid1 = cvwFilter.instIsValid(inst, filterRules, noFilterRules)
                                end if
                                if isValid1 and not instanceInList(inst, instances) then
                                    instances.addLast inst
                                end if
                            next
                        end if
                    end if
                next
            end if
        elseif noObjectRules &#62; 0 then
            &#39; This is an instance search
            for i = 1 to noObjectRules
                set rule = objectRules(i)
                if isValid(rule) then
                    set insts = findConstrainedInstances(rule)
                    if isValid(insts) then
                        for each inst in insts
                            if not instanceInList(inst, instances) then
                                instances.addLast inst
                            end if
                        next
                    end if
                end if
            next
        elseif isValid(insts) then
            if insts.count &#62; 1 then
                set instances = getInstancesSelectedFromList(insts, SearchMode)
            end if
        end if
        set getInstancesFromClient = instances
    End Function

&#39;-----------------------------------------------------------
    Private Function getInstancesFromRepository(instances)
        dim rule
        dim inst, insts
        dim i

        set getInstancesFromRepository = instances
        if isEnabled(contextInstance) then
            instances.addLast contextInstance
        elseif noTopObjectRules &#62; 0 then
            for i = 1 to noTopObjectRules
                set rule = topObjectRules(i)
                if isValid(rule) then
                    set insts = findRepositoryInstances(rule)
                    if isValid(insts) then
                        set insts = findConstrainedInstances(rule)
                        if isValid(insts) then
                            for each inst in insts
                                if not instanceInList(inst, instances) then
                                    instances.addLast inst
                                end if
                            next
                        end if
                    end if
                end if
            next
        elseif noObjectRules &#62; 0 then
            &#39; This is an instance search
            for i = 1 to noObjectRules
                set rule = objectRules(i)
                if isValid(rule) then
                    set insts = findRepositoryInstances(rule)
                    if isValid(insts) then
                        set insts = findConstrainedInstances(rule)
                        if isValid(insts) then
                            for each inst in insts
                                if not instanceInList(inst, instances) then
                                    instances.addLast inst
                                end if
                            next
                        end if
                    end if
                end if
            next
        elseif isValid(insts) then
            if insts.count &#62; 1 then
                set instances = getInstancesSelectedFromList(insts, SearchMode)
            end if
        end if
    End Function

&#39;-----------------------------------------------------------
    Private Function findRepositoryInstances(rule)
        dim strQuery

        set findRepositoryInstances = Nothing
        &#39; Build query
		strQuery = &#34;Component.type =&#39;&#34; &#38; rule.instType.title &#38; &#34;&#39;&#34;
		&#39; Debuf
		  &#39; MsgBox strQuery
		  &#39; exit function
        &#39; Build query method
		tqlMethod1.setArgument1 &#34;Query0&#34;, strQuery
		tqlMethod1.setArgument1 &#34;AllowCreateViews&#34;, 0
        &#39; Get instances from repository
		set findRepositoryInstances = currentModel.runMethodOnInst1(tqlMethod1, contentModel).getCollection
    End Function

&#39;-----------------------------------------------------------
    Private Function getPathListFromClient(instances, typeInstances)
        dim inst
        dim pathObj, pathRel, pathList
        dim level

        set getPathListFromClient = Nothing
        level = 0
        if noLevels &#62; level or noLevels = -1 then
            level = level + 1
            call addInstancePathToList(instances, typeInstances, level)
            if isEnabled(contextInstance) then
                instances.removeAt(1)
            end if
            level = level - 1
        end if
        set getPathListFromClient = instances
    End Function

&#39;-----------------------------------------------------------
    Private Sub addInstancePathToList(instances, typeInstances, level)
        dim pathList, pathObj
        dim inst
        dim cvwFilter
        dim isValid1

        set pathList = metis.newInstanceList
        if noLevels &#62; level or noLevels = -1 then
            set cvwFilter = new CVW_Filter
            for each inst in instances
                if applyFilter then
                    isValid1 = cvwFilter.instIsValid(inst, filterRules, noFilterRules)
                else
                    isValid1 = false
                end if
                if not applyFilter or isValid1 then
                    call addPathToList(inst, pathList, typeInstances)
                    for each pathObj in pathList
                        if not instanceInList(pathObj, instances) then
                            instances.addLast pathObj
                        end if
                    next
                end if
            next
            if noLevels &#62; level or noLevels = -1 then
                level = level + 1
                call addInstancePathToList(instances, typeInstances, level)
                level = level - 1
            end if
            set cvwFilter = Nothing
        end if
    End Sub

&#39;-----------------------------------------------------------
    Private Function getPathListFromRepository(instances, typeInstances)
        dim strQuery
        dim objType
        dim rule
        dim j

        set getPathListFromRepository = instances
        &#39; Begin code
        &#39; Build the TQL query
        for j = 1 to noPathRules
            set rule = pathRules(j)
            if isValid(rule) then
                if rule.relDir = 0 then
                    set objType = rule.childType
                else
                    set objType = rule.parentType
                end if
                if typeInList2(objType, typeInstances) then
                    strQuery = &#34;Relationship.type =&#39;&#34; &#38; rule.relType.title &#38; &#34;&#39; AND Relationship.hasComponent(Component.type =&#39;&#34; &#38; rule.childType.title &#38; &#34;&#39;) AND Relationship.hasComponent(Component.type =&#39;&#34; &#38; rule.parentType.title &#38; &#34;&#39;) OR &#34;
                end if
            end if
        next
        if Len(strQuery) &#62; 0 then
            strQuery = Left(strQuery, Len(strQuery) - 4)
            &#39; Debug
                &#39; MsgBox strQuery
                &#39; exit function
            &#39; Build query method
            tqlMethod2.setArgument1 &#34;Query0&#34;, strQuery
            tqlMethod2.setArgument1 &#34;EnsureRelationshipEndObjects&#34;, 0
            &#39; Get instances from repository
            set getPathListFromRepository = currentModel.runMethodOnInst1(tqlMethod2, contentModel).getCollection
        end if
        &#39; End code
    End Function

&#39;-----------------------------------------------------------
    Private Function getTypeList(specObject, inst, relDir)
        dim obj, obj2, objects
        dim foundObj
        dim rel, rel2, relships, rDir
        dim exclude

        set getTypeList = Nothing
        set relships = specObject.getNeighbourRelationships(0, isTopType)
        if isValid(relships) then
            if relships.count = 1 then
                set rel = relships(1)
                set obj = rel.target
                if obj.type.uri = inst.type.uri then
                    &#39;inst is contextInstance
                    &#39; Find connected types
                    set relships = obj.neighbourRelationships
                    if isValid(relships) then
                        set getTypeList = metis.newInstanceList
                        for each rel2 in relships
                            exclude = false
                            if rel2.type.uri = hasValueType.uri then
                                exclude = true
                            elseif rel2.type.uri = hasValueConstraintType.uri then
                                exclude = true
                            end if
                            if not exclude and rel2.uri &#60;&#62; rel.uri then
                                if rel2.origin.uri = obj.uri then
                                    rDir = 0
                                    set obj2 = rel2.target
                                else
                                    rDir = 1
                                    set obj2 = rel2.origin
                                end if
                                if relDir = -1 or relDir = rDir then
                                    call getTypeList.addLast(obj2)
                                end if
                            end if
                        next
                    end if
                end if
            end if
        end if
    End Function

   &#39;---------------------------------------------------------------------------------------------------
    Private Function getInstancesSelectedFromList(instances, searchMode)
        dim cvwSelectDialog
        dim instType
        dim askForType

        &#39; Handle select dialog if specified
        askForType = false
        if searchMode = &#34;SelectAll&#34; then
            set getInstancesSelectedFromList = instances
        else
            set cvwSelectDialog = new CVW_SelectDialog
            if searchMode = &#34;SelectOneFromList&#34; then
                cvwSelectDialog.singleSelect = true
            elseif searchMode = &#34;SelectManyFromList&#34; then
                cvwSelectDialog.singleSelect = false
            elseif searchMode = &#34;SelectTypeFromList&#34; then
                cvwSelectDialog.singleSelect = true
                askForType = true
            end if
            set getInstancesSelectedFromList = cvwSelectDialog.show(instances)
            if askForType then
                set instances = getInstancesSelectedFromList
                if instances.count = 1 then
                    set instType = instances(1).type
                    &#39; Find all instances of this type
                    set instances = findParts(contentModel, contentModel, instType, &#34;&#34;, &#34;&#34;)
                    if instances.count &#62; 0 then
                        cvwSelectDialog.singleSelect = false
                        set getInstancesSelectedFromList = cvwSelectDialog.show(instances)
                    else
                        set getInstancesSelectedFromList = instances
                    end if
                end if
            end if
            set cvwSelectDialog = Nothing
        end if
    End Function

&#39;-----------------------------------------------------------
    Private Function findConstrainedInstances(rule)
        dim instType, insts, inst
        dim relships, rels, rel
        dim prop, propName, propValue, value
        dim datatype, operator
        dim cvwFilter
        dim i, removed

        set findConstrainedInstances = Nothing
        if isValid(rule) and isEnabled(contentModel) then
            set metis.currentModel = currentModel
            set currentModel.currentModelView = currentModelView
            if rule.operator = &#34;eq&#34; then
                set insts = findParts(contentModel, contentModel, rule.instType, rule.propname, rule.propvalue)
            end if
            if not isValid(insts) then
                set insts = findParts(contentModel, contentModel, rule.instType, &#34;&#34;, &#34;&#34;)
                if insts.count &#62; 0 then
                    set cvwFilter = new CVW_Filter
                    i = 1
                    for each inst in insts
                        removed = false
                        if isEnabled(inst) then
                            if not cvwFilter.valueIsValid(inst, rule.propname, rule.operator, rule.propvalue) then
                                insts.removeAt(i)
                                removed = true
                            end if
                            if not removed then
                                i = i + 1
                            end if
                        end if
                    next
                    set cvwFilter = Nothing
                end if
            end if
            if insts.count &#62; 0 then
                set findConstrainedInstances = insts
            end if
        end if
    End Function

   &#39;---------------------------------------------------------------------------------------------------
    Private Sub addPathToList(inst, instances, typeInstances)
        dim rule
        dim relDir
        dim obj, rel, rels
        dim cvwFilter
        dim isValid1, isValid2
        dim j

        if isEnabled(inst) and isValid(instances) then
            set cvwFilter = new CVW_Filter
            set rels = inst.neighbourRelationships
            for each rel in rels
                if applyFilter then
                    isValid1 = cvwFilter.instIsValid(rel, filterRules, noFilterRules)
                else
                    isValid1 = true
                end if
                if not applyFilter or isValid1 then
                    if rel.origin.uri = inst.uri then
                        relDir = 0
                    else
                        relDir = 1
                    end if
                    for j = 1 to noPathRules
                        set rule = pathRules(j)
                        if isValid(rule) then
                            if rule.relDir = relDir then
                                if relDir = 0 then
                                    set obj = rel.target
                                else
                                    set obj = rel.origin
                                end if
                                if obj.type.uri = rule.childType.uri then
                                    if typeInList(obj, typeInstances) then
                                        if applyFilter then
                                            isValid2 = cvwFilter.instIsValid(obj, filterRules, noFilterRules)
                                        else 
                                            isValid2 = false
                                        end if
                                        if not applyFilter or isValid2 then
                                            if not instanceInList(obj, instances) then
                                                instances.addLast obj
                                            end if
                                        end if
                                    end if
                                    if not instanceInList(rel, instances) then
                                        instances.addLast rel
                                    end if
                                    exit for
                                end if
                            end if
                        end if
                    next
                end if
            next
        end if
    End Sub

   &#39;---------------------------------------------------------------------------------------------------
    Private Function typeInList(inst, typeInstances)
        dim typeInst

        typeInList = false
        if not isValid(typeInstances) then
            typeInList = true
            exit function
        end if
        for each typeInst in typeInstances
            if inst.type.inherits(typeInst.type) then
                typeInList = true
                exit function
            end if
        next
    End Function

   &#39;---------------------------------------------------------------------------------------------------
    Private Function typeInList2(objType, typeInstances)
        dim typeInst

        typeInList2 = false
        if not isValid(typeInstances) then
            typeInList2 = true
            exit function
        end if
        for each typeInst in typeInstances
            if objType.inherits(typeInst.type) then
                typeInList2 = true
                exit function
            end if
        next
    End Function

   &#39;---------------------------------------------------------------------------------------------------
    Private Function findRelationships(relList, objects, rule)
        dim obj
        dim rel, rels
        dim indx
        dim type1, type2

        for each obj in objects
            set rels = obj.neighbourRelationships
            if isValid(rels) then
                for each rel in rels
                    if rel.origin.uri = obj.uri then
                        if rule.relDir = 0 then
                            set type1 = rule.parentType
                            set type2 = rule.childType
                        else
                            set type1 = rule.childType
                            set type2 = rule.parentType
                        end if
                        if rel.type.uri = rule.relType.uri then
                            if rel.origin.type.uri = type1.uri then
                                if rel.target.type.uri = type2.uri then
                                    if not instanceInList(rel, relList) then
                                        if instanceInList(rel.target, objects) then
                                            relList.addLast rel
                                        end if
                                    end if
                                end if
                            end if
                        end if
                    end if
                next
            end if
        next
        set findRelationships = relList
    End Function

&#39;-----------------------------------------------------------
    Private Function isSpecificationObject(inst)
        dim rels

        isSpecificationObject = false
        if isEnabled(inst) then
            set rels = inst.getNeighbourRelationships(1, hasValueConstraintType)
            if rels.count &#62; 0 then
                isSpecificationObject = true
            end if
        end if
    End Function

&#39;-----------------------------------------------------------
    Private Sub addRelType(rtype)
        dim relType
        dim indx, found

        found = false
        for indx = 1 to noRelTypes
            set relType = relTypes(indx)
            if isValid(relType) then
                if relType.uri = rtype.uri then
                    found = true
                    exit for
                end if
            end if
        next
        if not found then
            noRelTypes = noRelTypes + 1
            ReDim Preserve relTypes(noRelTypes)
            set relTypes(noRelTypes) = rtype
        end if
    End Sub

&#39;-----------------------------------------------------------
    Private Sub addTypeToList(itype, list, no)
        dim instType
        dim indx, found

        found = false
        for indx = 1 to no
            set instType = list(indx)
            if isValid(instType) then
                if instType.uri = itype.uri then
                    found = true
                    exit for
                end if
            end if
        next
        if not found then
            no = no + 1
            ReDim Preserve list(no)
            set list(no) = itype
        end if
    End Sub


&#39;-----------------------------------------------------------
    Private Sub Class_Initialize()
        dim instView, children

        set currentModel     = metis.currentModel
        set currentModelView = currentModel.currentModelView
        set currentInstance     = currentModel.currentInstance
        set currentInstanceView = currentModelView.currentInstanceView
        set contentModel    = currentModel
        set contextInstance = Nothing
        set topInstance     = Nothing
        set cObject   = currentInstance
        set aObject   = currentInstance
        set cvwArg    = new CVW_ArgumentValue
        &#39; Correct current model
        set instView  = currentModelView.currentInstanceView
        set children = currentModelView.children
        &#39; Types
        set isTopType              = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/spec_relships.kmd#RelType_CVW:isTop_UUID&#34;)
        set hasValueType           = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/cvw_relships.kmd#RelType_CVW:hasValue_UUID&#34;)
        set hasValueConstraintType = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/spec_relships.kmd#RelType_CVW:hasValueConstraint_UUID&#34;)
        set propertyType           = metis.findType(&#34;http://xml.activeknowledgemodeling.com/eka/languages/eka_property.kmd#ObjType_EKA:Property_UUID&#34;)
        &#39; Methods
        Set tqlMethod1  = metis.findMethod(&#34;http://xml.activeknowledgemodeling.com/akm/operations/tql_methods.kmd#QueryUsingParameters_from_script&#34;)
        Set tqlMethod2  = metis.findMethod(&#34;http://xml.activeknowledgemodeling.com/akm/operations/tql_methods.kmd#RelationshipOnlyQuery&#34;)

        &#39; Others
        noRelTypes = 3
        ReDim Preserve relTypeList(noRelTypes)
        set relTypeList(1)   = isTopType
        set relTypeList(2)   = hasValueType
        set relTypeList(3)   = hasValueConstraintType

        set instances        = metis.newInstanceList
        noTopObjectRules     = 0
        noPathRules          = 0
        noFilterRules        = 0
        RepositoryConnection = false
        noLevels             = 1
        applyFilter          = false
        PathMode             = &#34;Path&#34;
        datatypeProp         = &#34;datatype&#34;
        operatorProp         = &#34;operator&#34;
        valueProp            = &#34;value&#34;
    End Sub

&#39;-----------------------------------------------------------
    Private Sub Class_Terminate()
        set cvwArg = Nothing
    End Sub

End Class

</string>
  </valueset>
 </object>

 <object id="_002aspt01b45jlfjobj7">
  <valueset size="10" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="../languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Class CVW_ViewSpecification
</string>
   <string name="description"></string>
   <integer name="dbms-admin.commitFlag">0</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20070820 123345599</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="comments"></string>
   <string name="script">option explicit


&#39;-----------------------------------------------------------
&#39;-----------------------------------------------------------
Class CVW_ViewSpecification

    Public  title                   &#39; String
    Public  languageSpecification   &#39; CVW_LanguageSpecification
    Public  viewStrategy            &#39; CVW_ViewStrategy
    Public  viewstyleSpecification  &#39; CVW_ViewstyleSpecification
    Public  layoutStrategy          &#39; IMetisInstance
    Public  backgroundSymbol        &#39; Uri

    Private model
    Private modelView
    Private hasLanguageSpecType
    Private hasViewStrategyType
    Private hasViewstyleSpecType
    Private hasLayoutStrategyType
    Private viewStyle

&#39;-----------------------------------------------------------
    Public Sub build(specObject)
        dim obj, rel, relships

        set languageSpecification  = new CVW_LanguageSpecification
        &#39; Find language specification (in model)
        set relships = specObject.getNeighbourRelationships(0, hasLanguageSpecType)
        for each rel in relships
            if isEnabled(rel) then
                set obj = rel.target
                if isEnabled(obj) then
                    languageSpecification.build(obj)
                end if
            end if
        next

        set viewStrategy = new CVW_ViewStrategy
        &#39; Find view strategy (in model)
        set relships = specObject.getNeighbourRelationships(0, hasViewStrategyType)
        for each rel in relships
            if isEnabled(rel) then
                set obj = rel.target
                if isEnabled(obj) then
                    viewStrategy.build(obj)
                end if
            end if
        next

        set viewstyleSpecification = new CVW_ViewstyleSpecification
        &#39; Find view strategy (in model)
        set relships = specObject.getNeighbourRelationships(0, hasViewstyleSpecType)
        for each rel in relships
            if isEnabled(rel) then
                set obj = rel.target
                if isEnabled(obj) then
                    viewstyleSpecification.build(obj)
                end if
            end if
        next
        if not isValid(relships) then
            set argObj = new CVW_Argument
            viewstyle = argObj.getArgumentValue(specObject, &#34;Viewstyle&#34;)
            viewstyleSpecification.setViewstyle(viewstyle)
        end if

        set relships = specObject.getNeighbourRelationships(0, hasLayoutStrategyType)
        for each rel in relships
            if isEnabled(rel) then
                set obj = rel.target
                if isEnabled(obj) then
                    set layoutStrategy = obj
                    exit for
                end if
            end if
        next
    End Sub

&#39;-----------------------------------------------------------
    Public Sub Class_Initialize()
        dim argObj
        on error resume next

        set model = metis.currentModel
        set modelView = model.currentModelView
        set hasLanguageSpecType  = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/spec_relships.kmd#RelType_CVW:hasLanguageSpecification_UUID&#34;)
        set hasViewStrategyType  = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/spec_relships.kmd#RelType_CVW:hasViewStrategySpecification_UUID&#34;)
        set hasViewstyleSpecType = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/spec_relships.kmd#RelType_CVW:hasViewstyleSpecification_UUID&#34;)
        set hasLayoutStrategyType    = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/spec_relships.kmd#RelType_CVW:hasLayoutStrategy_UUID&#34;)
        set argObj = new CVW_ArgumentValue
        viewstyle  = argObj.getArgumentValue(aObject, &#34;Viewstyle&#34;)
        if Len(viewStyle) &#62; 0 then
            modelView.setViewStyle(viewStyle)
        end if
    End Sub

&#39;-----------------------------------------------------------
    Public Sub Class_Terminate()
    End Sub
End Class

</string>
  </valueset>
 </object>

 <object id="_002aspt01b45jlge72rt">
  <valueset size="10" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="../languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Class CVW_Action</string>
   <string name="description"></string>
   <integer name="dbms-admin.commitFlag">0</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20070820 123345599</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="comments"></string>
   <string name="script">option explicit

Class CVW_Action

    Private model
    Private modelView
    Private aObject
    Private kind
    Private kindProperty

    &#39; Types
    Private actionType
    Private hasContentSpecType
    Private specContainerType
    Private specRelType
    Private hasViewSpecificationType
    Private hasViewSpecification2Type
    Private hasLanguageSpecificationType
    Private hasViewStrategyType
    Private hasViewstyleType
    Private consistsOfType

    &#39; Arguments
    Private argContextMode
    Private argInputContainerName
    Private argInputContainerType
    Private argModelName
    Private argSearchMode
    Private argToolbarTitle
    Private argWorkareaTitle
    Private argWorkareaMode
    Private argWorkspaceMode
    Private argViewstyle

    &#39; CVW classes
    Private cvwArgValue

   &#39;---------------------------------------------------------------------------------------------------
    Public Property Get actionObject()
        set actionObject = aObject
    End Property

    Public Property Set actionObject(obj)
        if isEnabled(obj) then
            set aObject = obj
            call getArguments(cvwArgValue, aObject)
        end if
    End Property

   &#39;---------------------------------------------------------------------------------------------------
    Private Sub getArguments(cvwArgValue, obj)
        argContextMode   = cvwArgValue.getArgumentValue(obj, &#34;ContextMode&#34;)   &#39; CurrentModel | Repository | SubModel
        argSearchMode    = cvwArgValue.getArgumentValue(obj, &#34;SearchMode&#34;)    &#39; SelectAll | SelectOneFromList | SelectManyFromList
        argToolbarTitle  = cvwArgValue.getArgumentValue(obj, &#34;ToolbarTitle&#34;)  &#39; &#34;&#34; | &#34;Name of toolbar&#34;
        argWorkareaTitle = cvwArgValue.getArgumentValue(obj, &#34;WorkareaTitle&#34;) &#39; &#34;&#34; | &#34;Name of workarea&#34;
        if Len(argWorkareaTitle) = 0 then argWorkareaTitle = obj.title
        argWorkareaMode  = cvwArgValue.getArgumentValue(obj, &#34;WorkareaMode&#34;)  &#39; None | New | Reuse | ReuseAndClear
        if Len(argWorkareaMode) = 0 then argWorkareaMode = &#34;None&#34;
        argWorkspaceMode = cvwArgValue.getArgumentValue(obj, &#34;WorkspaceMode&#34;) &#39; Clear | NoAction
        argModelName          = cvwArgValue.getArgumentValue(obj, &#34;ModelName&#34;)
        argInputContainerType = cvwArgValue.getArgumentValue(obj, &#34;InputContainerType&#34;)
        argInputContainerName = cvwArgValue.getArgumentValue(obj, &#34;InputContainerName&#34;)
        argViewstyle          = cvwArgValue.getArgumentValue(obj, &#34;Viewstyle&#34;)
    End Sub

   &#39;---------------------------------------------------------------------------------------------------
    Public Sub initialize(aObj)
        set aObject = aObj
        &#39; Get arguments
        set cvwArgValue = new CVW_ArgumentValue
            call getArguments(cvwArgValue, aObject)
    End Sub

   &#39;---------------------------------------------------------------------------------------------------
    Public Sub execute
        dim contentModel, instances
        dim containers, cont
        dim objects, obj, rel
        dim topContainerType
        dim cvwWorkarea, cvwViewSpec, cvwSubAction
        dim clearMode, newMode, searchMode, copyMode, moveMode

        if isEnabled(aObject) then
            &#39; Initialize
            set cvwWorkarea = Nothing

            &#39; Perform action on actionObject
            &#39; [1] Handle workspace
            if argWorkspaceMode = &#34;Clear&#34; then
                set cvwWorkarea = new CVW_Workarea
                cvwWorkarea.clearWorkspace
            end if
            &#39; [2] Handle workarea
            clearMode = false
            newMode = true
            copyMode = false
            moveMode = false
            if argWorkareaMode &#60;&#62; &#34;None&#34; then
                if argWorkareaMode = &#34;New&#34; then
                    newMode = true
                elseif argWorkareaMode = &#34;Reuse&#34; then
                    newMode = false
                elseif argWorkareaMode = &#34;ReuseAndClear&#34; then
                    clearMode = true
                    newMode = false
                elseif argWorkareaMode = &#34;CopyView&#34; then
                    copyMode = true
                elseif argWorkareaMode = &#34;MoveView&#34; then
                    moveMode = true
                end if
                if not isValid(cvwWorkarea) then
                    set cvwWorkarea = new CVW_Workarea
                end if
                set cvwWorkarea.actionObject = aObject
                call cvwWorkarea.build(argWorkareaTitle, argToolbarTitle, newMode)
                if clearMode then
                    cvwWorkarea.clean
                end if
            end if
            &#39; Then set viewstyle - if given
            if Len(argViewstyle) &#62; 0 then
                call modelView.setViewStyle(argViewstyle)
            end if
            if copyMode then
                set contentModel  = getInstanceModel
                set topContainerType = metis.findType(argInputContainerType)
                if isEnabled(contentModel) and isEnabled(topContainerType) then
                    call cvwWorkarea.copyViewToWorkarea(contentModel, topContainerType, argInputContainerName)
                end if
                call cvwWorkarea.doParentLayout
                modelView.clearSelection
                exit sub
            end if
            if moveMode then
                set contentModel  = getInstanceModel
                set topContainerType = metis.findType(argInputContainerType)
                if isEnabled(contentModel) and isEnabled(topContainerType) then
                    call cvwWorkarea.moveViewToWorkarea(contentModel, topContainerType, argInputContainerName)
                end if
                call cvwWorkarea.doParentLayout
                modelView.clearSelection
                exit sub
            end if
            &#39; [3] Handle contents
            set instances = getInstancesFromContentSpecification
            if isValid(instances) then
                set instances = getInstancesSelectedFromList(instances, argSearchMode)
            end if
            &#39; [4] Handle view specifications
            &#39; Set view specification
            if isValid(instances) then
                set containers = actionObject.getNeighbourObjects(0, hasViewSpecificationType, specContainerType)
                if containers.count &#62; 0 then
                    set cont = containers(1)
                    if isEnabled(cont) then
                        set obj = cvwWorkarea.objectView.instance
                        set rel = model.newRelationship(hasViewSpecification2Type, obj, cont)
                    end if
                end if
            end if
            &#39; [5] Generate views
            if isValid(cvwWorkarea) and isValid(instances) then
                call cvwWorkarea.populateView(instances)
                call cvwWorkarea.doLayout()
            end if

            &#39; Finally - Perform action on  sub-actionobjects
            set objects = actionObject.getNeighbourObjects(0, consistsOfType, actionType)
            if isValid(objects) then
                for each obj in objects
                    if isEnabled(obj) then
                        kind = obj.getNamedStringValue(kindProperty)
                        if kind = &#34;Action&#34; then
                            set cvwSubAction = new CVW_Action
                            call cvwSubAction.initialize(obj)
                            call cvwSubAction.execute()
                        end if
                    end if
                next
            end if
        end if
    End Sub

   &#39;---------------------------------------------------------------------------------------------------
    Private Sub connectWorkareaToViewspec(objView, cont)
        if hasInstance(objView) and isEnabled(cont) then
            set obj = objView.instance
            set rel = model.newRelationship(relType, obj, cont)
        end if
    End Sub

   &#39;---------------------------------------------------------------------------------------------------
    Private Function getInstancesSelectedFromList(instances, searchMode)
        dim cvwSelectDialog

        &#39; Handle select dialog if specified
        if searchMode = &#34;SelectAll&#34; then
            set getInstancesSelectedFromList = instances
        else
            set cvwSelectDialog = new CVW_SelectDialog
            if searchMode = &#34;SelectOneFromList&#34; then
                cvwSelectDialog.singleSelect = true
            elseif searchMode = &#34;SelectManyFromList&#34; then
                cvwSelectDialog.singleSelect = false
            end if
            set getInstancesSelectedFromList = cvwSelectDialog.show(instances)
            set cvwSelectDialog = Nothing
        end if
    End Function

   &#39;---------------------------------------------------------------------------------------------------
    Private Function getInstancesFromContentSpecification
        dim containers, cont
        dim cvwContentSpec

        set getInstancesFromContentSpecification = Nothing
        set containers = aObject.getNeighbourObjects(0, hasContentSpecType, specContainerType)
        for each cont in containers
            if isEnabled(cont) then
                set cvwContentSpec = new CVW_ContentSpecification
                set cvwContentSpec.model = getInstanceModel
                set getInstancesFromContentSpecification = cvwContentSpec.findInstances(cont.views(1))
                set cvwContentSpec = Nothing
            end if
        next
    End Function

   &#39;---------------------------------------------------------------------------------------------------
    Private Function getInstanceModel
        dim connector
        dim child, children
        dim part, parts
        dim m, mv, modelViews

        set getInstanceModel = Nothing
        select case argContextMode
        case &#34;CurrentModel&#34;
            set getInstanceModel = model
        case &#34;SubModel&#34;
            set connector = Nothing
            set m = getCVWmodel
            set modelViews = m.views
            for each mv in modelViews
                set children = mv.children
                for each child in children
                    if child.isConnector then
                        set connector = child
                        set children = connector.children
                        if children.count &#62; 0 then
                            set child = children(1)
                            set parts = child.instance.parts
                            for each part in parts
                                if isEnabled(part) then
                                    set m = part.ownerModel
                                    if Len(argModelName) &#62; 0 then
                                        if m.title = argModelName then
                                            set getInstanceModel = part.ownerModel
                                            exit for
                                        end if
                                    else
                                        set getInstanceModel = m
                                        exit for
                                    end if
                                end if
                            next
                        end if
                    end if
                    if isEnabled(getInstanceModel) then
                        exit for
                    end if
                next
                if isEnabled(getInstanceModel) then
                    exit for
                end if
            next
        end select
    End Function

   &#39;---------------------------------------------------------------------------------------------------
    Private Sub Class_Initialize
        set model     = metis.currentModel
        set modelView = model.currentModelView
        set aObject   = model.currentInstance
        kindProperty  = &#34;kind&#34;
        &#39; Types
        set actionType                   = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/action_objects.kmd#ObjType_CVW:Button_UUID&#34;)
        set hasContentSpecType           = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/spec_relships.kmd#RelType_CVW:hasContentSpecification_UUID&#34;)
        set specContainerType            = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/spec_objects.kmd#ObjType_CVW:Specification_Container_UUID&#34;)
        set specRelType                  = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/spec_relships.kmd#RelType_CVW:specificationRel_UUID&#34;)
        set hasViewSpecificationType     = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/spec_relships.kmd#RelType_CVW:hasViewSpecification1_UUID&#34;)
        set hasViewSpecification2Type    = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/spec_relships.kmd#RelType_CVW:hasViewSpecification2_UUID&#34;)
        set hasLanguageSpecificationType = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/spec_relships.kmd#RelType_CVW:hasLanguageSpecification_UUID&#34;)
        set hasViewStrategyType          = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/spec_relships.kmd#RelType_CVW:hasViewStrategy_UUID&#34;)
        set hasViewstyleType             = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/spec_relships.kmd#RelType_CVW:hasViewstyleSpecification_UUID&#34;)
        set consistsOfType               = metis.findType(&#34;http://xml.activeknowledgemodeling.com/eka/languages/eka_relships.kmd#RelType_EKA:Member_UUID&#34;)
        &#39; Get arguments
        set cvwArgValue = new CVW_ArgumentValue
        call getArguments(cvwArgValue, aObject)
    End Sub
   &#39;---------------------------------------------------------------------------------------------------

End Class

</string>
  </valueset>
 </object>

 <object id="_002aspt01b45jlh9i40l">
  <valueset size="10" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="../languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Class CVW_CircularLayout
</string>
   <string name="description"></string>
   <integer name="dbms-admin.commitFlag">0</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20070820 123345599</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="comments"></string>
   <string name="script">option explicit

Class CVW_CircularLayout

    Public Title

    &#39; Variant parameters
    Public NoLevels
    Public WorkWindow
    Public CenterObjectView

    &#39; Local variables
    Private model
    Private modelView
    Private radius
    Private a0                      &#39; Angle 1
    Private a1                      &#39; Angle 2
    Private a2                      &#39; Angle 3
    Private x0                      &#39; X-position
    Private y0                      &#39; Y-position
    Private level                   &#39; Current level
    Private tsRatio0                &#39; Text factor ratio
    Private tsRatio1                &#39; Text factor ratio
    Private tsRatio2                &#39; Text factor ratio

    Private winGeo
    Private objGeo

    Private isBuilt

    &#39; The number pi
    Private pi

    &#39; Methods
&#39;-----------------------------------------------------------
    Public Sub build

        if isValid(WorkWindow) then
            set winGeo = WorkWindow.absScaleGeometry
            isBuilt = true
        end if

    End Sub

&#39;-----------------------------------------------------------
    Public Function getObjectSize(level, objectView)
        dim objGeo, sf
        dim size

        set objGeo = objectView.absScaleGeometry
        sf = getScaleFactor(level)
        if isBuilt then
            set size = getSize(winGeo, objGeo, level)
        else
            set size = objGeo.size
        end if
        size.width  = size.width * sf
        size.height = size.height * sf

        set getObjectSize = size
    End Function

&#39;-----------------------------------------------------------
    Public Function getObjectPosition(level, objectView, size, i, no)
        dim objGeo
        dim x, y, dx, dy, a, da
        dim x1, y1
        dim pnt

        set objGeo = objectView.absScaleGeometry
        radius = getRadius(winGeo, objGeo)
        if level = 0 then
            &#39; Calculate position of center object
            a0 = 0
            a1 = 0
            a2 = 2 * pi
            dx = size.width / 2
            dy = size.height / 2
            x1 = winGeo.width / 2
            y1 = winGeo.height / 2
            x0 = x1 - dx * 1.5
            y0 = y1 - dy * 1.5
            x  = x0
            y  = y0
        else
            a1 = 0
            if level &#62; 1 then
                a2 = 7 * pi / 8
            else
                a2 = 2 * pi
            end if
            da = (a2 - a1) / no
            a = a0 -pi/2 + a1 + da * (i - 0.5)

            dx = size.width / 2
            dy = size.height / 2
            x = x0 + (radius + size.width) * cos(a) + dx
            y = y0 + (radius) * sin(a) + dy
        end if

        set pnt = modelView.newPoint(x, y)
        set getObjectPosition = pnt
    End Function

&#39;-----------------------------------------------------------
    Public Sub populate(level, objView, size, point)
        dim geo
        dim winTS, ts

        if not isValid(objView) then
            set objView = WorkWindow.newObjectView(inst)
        end if
        ts = getTextScaleFactor(level)
        if objView.isNested then
            ts = ts * 4
        end if
        objView.textScale = ts
        if isValid(objView) then
            set geo = objView.absScaleGeometry
            set geo.size = size
            set geo.point = point
            set objView.absScaleGeometry = geo
        end if
    End Sub

&#39;-----------------------------------------------------------
    Public Sub execute(workareaView, inst)
        dim objView
        dim childView, children
        dim winGeo, objGeo
        dim winSize, objSize
        dim x0, y0, h
        dim winTs, ts, sf
        dim size0, w0, h0
        dim level

        &#39; First remove all
        set children = workareaView.children
        for each childView in children
            modelView.deleteObjectView(childView)
        next

        &#39; Set level
        level = 0
        &#39; Then create objView in center
        set objView = workareaView.newObjectView(inst)

        &#39; Get geometry of center object
        set winGeo = workareaView.absScaleGeometry
        set objGeo = objView.absScaleGeometry
        &#39; Calculate size of center object
        set size0 = getSize(winGeo, objGeo, level)
        set objGeo.size = size0

        &#39; Calculate position of center object
        x0 = objGeo.x - objGeo.width / 4
        y0 = objGeo.y - objGeo.height / 2
        objGeo.x = x0
        objGeo.y = y0
        &#39; Set size and position
        set objView.absScaleGeometry = objGeo

        &#39; Calculate text size
        winTs = workareaView.textScale
        ts = winTs * tsRatio0
        ts = getTextScaleFactor(level)
        objView.textScale = ts

        &#39; Get radius to be used in circular layout
        radius = getRadius(winGeo, objGeo)

        &#39; Create neighbour objects
        call populateObjects(workareaView, objView, level+1, radius, 0, 0, 2*pi, x0, y0)
        &#39; Create the connecting relationships
        call populateRelationships(workareaView, objView, level+1)
    End Sub

&#39;-----------------------------------------------------------
    Private Sub populateObjects(parentView, instView, level, radius, a0, a1, a2, x0, y0)
        dim pnt, size, size1, geo1, objGeo, winGeo
        dim da, a, x, y, dx, dy, sf, ts
        dim inst, objView
        dim obj, objects
        dim i, no, no1
        dim test
 &#39;stop
        sf = getScaleFactor(level)
        ts = getTextScaleFactor(level)
        if instView.isNested then ts = ts * 4

        set inst = instView.instance
        set objects = inst.neighbourObjects
        no = objects.count
&#39;stop
        if no &#62; 0 then
            &#39; Get geometry of parent object
            set winGeo = parentView.absScaleGeometry
            set objGeo = instView.absScaleGeometry
            &#39; Calculate size of parent object
            set size1 = getSize(winGeo, objGeo, level)

            set pnt = modelView.newPoint(x0, y0)
            set size = modelView.newSize(size1.width * sf, size1.height * sf)
            dx = size.width / 2
            dy = size.height / 2
            set objGeo = modelView.newRect(pnt, size)
            da = (a2 - a1) / no
        end if
        i = 1
        for each obj in objects
            if isEnabled(obj) then
                &#39;if not obj.type.inherits(valueType) then
                    set objView = viewExists(obj, parentView)
                    if not isValid(objView) then
                        &#39; Create object view
                        a = a0 -pi/2 + a1 + da*(i-0.5)
                        &#39;a = a0 + a1 + da*(i-1)
                        x = x0 + (radius + size.width) * cos(a) + dx
                        y = y0 + (radius) * sin(a) + dy
                        pnt.x = x
                        pnt.y = y
                        set objGeo.point = pnt
                        set objView = parentView.newObjectView(obj)
                        objView.textScale = ts
                        set objView.absScaleGeometry = objGeo
                        i = i + 1
                        &#39; Recursive call
                        if level &#60; NoLevels then
                            call populateObjects(parentView, objView, level+1, radius, a, 0, 7*pi/8, x, y)
                        end if
                    end if
                &#39;end if
            end if
        next
    End Sub

&#39;-----------------------------------------------------------
    Private Sub populateRelationships(parentView, objView, level)
        dim obj
        dim relship, relships
        dim origin, target
        dim originView, targetView
        dim originViews, targetViews
        dim relView
        dim done

        set obj = objView.instance
        set relships = obj.neighbourRelationships
        for each relship in relships
            done = false
            set origin = relship.origin
            set target = relship.target
            if obj.uri = origin.uri then
                set originView = objView
                set targetViews = target.views
                for each targetView in targetViews
                    if isInParentView(parentView, targetView) then
                        set relView = modelView.newRelationshipView(relship, originView, targetView)
                        if level &#60; NoLevels then
                            call populateRelationships(parentView, targetView, level+1)
                        end if
                        exit for
                    end if
                next
            elseif obj.uri = target.uri then
                set targetView = objView
                set originViews = origin.views
                for each originView in originViews
                    if isInParentView(parentView, originView) then
                        set relView = modelView.newRelationshipView(relship, originView, targetView)
                        if level &#60; NoLevels then
                            call populateRelationships(parentView, originView, level+1)
                        end if
                        exit for
                    end if
                next
            end if
        next
    End Sub

&#39;-----------------------------------------------------------
    Private Function isInParentView(parentView, objView)
        dim children, childView

        isInParentView = false
        set children = parentView.children
        for each childView in children
            if objView.uri = childView.uri then
                isInParentView = true
            end if
        next
    End Function

&#39;-----------------------------------------------------------
    Private Function getRadius(winGeo, objGeo)
        dim w, h, distance_ratio
        dim w1, h1, r1, r2

        w = objGeo.width
        h = objGeo.height
        w1 = winGeo.width
        h1 = winGeo.height
        r1 = h1 / (2 * NoLevels) - h/2

        select case NoLevels
        case 1      distance_ratio = 1
        case 2      distance_ratio = 1.25
        case 3      distance_ratio = 1.5
        case else
                    distance_ratio = 1.5
        end select
        r2 = w * distance_ratio
        getRadius = r1
    End Function

&#39;-----------------------------------------------------------
    Private Function getSize(winGeo, objGeo, level)
        dim winSize, objSize
        dim w0, h0
        dim sf

        set winSize = winGeo.size
        set objSize = objGeo.size
        select case level
        case 0      sf = 0.1 / NoLevels
        case 1      sf = 0.1 / NoLevels
        case 2      sf = 0.1 / NoLevels
        case else   sf = 0.1 / NoLevels
        end select
        h0 = winSize.height * sf
        w0 = h0 * objGeo.width / objGeo.height
        set getSize = modelView.newSize(w0, h0)
    End Function

&#39;-----------------------------------------------------------
    Private Function getScaleFactor(level)
        select case level
        case 0      getScaleFactor = 1.0
        case 1      getScaleFactor = 0.7
        case 2      getScaleFactor = 0.5
        case 3      getScaleFactor = 0.25
        case else   getScaleFactor = 0.125
        end select
    End Function

&#39;-----------------------------------------------------------
    Private Function getTextScaleFactor(level)
        select case level
        case 0      getTextScaleFactor = 0.35
        case 1      getTextScaleFactor = 0.5
        case 2      getTextScaleFactor = 0.75       &#39;ts * (NoLevels + 16)
        case 3      getTextScaleFactor = 1       &#39;ts * (NoLevels + 20)
        case else   getTextScaleFactor = 1.25       &#39;ts * (NoLevels + 24)
        end select
    End Function

&#39;-----------------------------------------------------------
    Private Sub Class_Initialize()

        set model     = metis.currentModel
        set modelView = model.currentModelView

        isBuilt = false

        pi       = 3.1415926535897932

        tsRatio0 = 0.1
        tsRatio1 = 1
        tsRatio2 = 1

        NoLevels = 2

    End Sub

End Class</string>
  </valueset>
 </object>

 <object id="_002aspt01b45jlobokn4">
  <valueset size="10" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="../languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Class CVW_Workarea
</string>
   <string name="description"></string>
   <integer name="dbms-admin.commitFlag">0</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20070820 123345599</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="comments"></string>
   <string name="script">option explicit


&#39;-----------------------------------------------------------
&#39;-----------------------------------------------------------
Class CVW_Workarea

    &#39; Variant parameters
    Public Title                          &#39; String
    Public Mode                           &#39; String
    Public TitleBar                       &#39; String
    Public TitleBarAddOn                  &#39; String
    Public LayoutStrategy                 &#39; URI
    Public WindowLayoutStrategy           &#39; URI
    Public WindowLayoutMode               &#39; String
    Public HierarchyLayout                &#39; URI
    Public SymbolOpen                     &#39; URI
    Public SymbolClosed                   &#39; URI
    Public TextScale                      &#39; Float as String
    Public TreeTextScale                  &#39; Float as String
    Public NestedTextScaleTop             &#39; Float as String
    Public NestedTextScale                &#39; Float as String
    Public Height                         &#39; Integer as String
    Public Width                          &#39; Integer as String
    Public FilterModel                    &#39; URI
    Public InstanceContextModel           &#39; URI
    Public ModelContextModel              &#39; URI
    Public ViewStrategyModel              &#39; URI
    Public LanguageModel                  &#39; URI
    Public Workspace                      &#39; IMetisObjectView
    Public ObjectAspectRatio              &#39; Float
    Public RelationshipViewMode           &#39; Hierarchy | Relationship
    Public ContentInRepository
    Public applyFilter                    &#39; Boolean

    &#39; Context variables (public)
    Public currentModel
    Public currentModelView
    Public currentInstance
    Public currentInstanceView
    Public contextInstance                &#39; IMetisInstance

    &#39; Context variables (private)
    Private model
    Private cObject                      &#39; Component object   - IMetisInstance
    Private aObject                      &#39; Configuring object - IMetisInstance
    Private currentWorkarea              &#39; IMetisObjectView
    Private searchModel
    Private content_model

    &#39; Types
    Private buttonType                   &#39; IMetisType
    Private consistsOfType               &#39; IMetisType
    Private titlebarType                 &#39; IMetisType
    Private windowType                   &#39; IMetisType
    Private window2Type                  &#39; IMetisType
    Private hasFilterType                &#39; IMetisType
    Private hasLanguageType              &#39; IMetisType
    Private hasInstanceContextType       &#39; IMetisType
    Private hasInstanceContext2Type      &#39; IMetisType
    Private hasModelContextType          &#39; IMetisType
    Private hasViewStrategyType          &#39; IMetisType
    Private hasSearchSpecificationType   &#39; IMetisType
    Private specContainerType            &#39; IMetisType
    Private propertyType
    Private hasPropertyType

    &#39; Methods
    Private addMetamodelMethod           &#39; IMetisMethod
    Private addPartRuleMethod            &#39; IMetisMethod

    &#39; Layout strategies
    Private workareaLayoutStrategy       &#39; IMetisInstance
    Private workwinLayoutStrategy        &#39; IMetisInstance
    Private hierarchy_layout             &#39; IMetisInstance

    &#39; Components
    Private cvwArg                       &#39; CVW_ArgumentValue
    Private compTitleBar                 &#39; CVW_Component
    Private compWorkareaWindow           &#39; CVW_Component
    Private window                       &#39; CVW_Window

    &#39; Others
    Private work_window
    Private WorkspaceName                &#39; String
    Private titleBarIndex                &#39; Integer
    Private workareaIndex                &#39; Integer
    Private noFilterRules
    Private filterRules()

&#39;-----------------------------------------------------------
    Public Property Get component           &#39;IMetisObject
        set component = cObject
    End Property

    Public Property Set component(obj)
        if isEnabled(obj) then
            set cObject = obj
        end if
    End Property

&#39;-----------------------------------------------------------
    Public Property Get configObject           &#39;IMetisObject
        set configObject = aObject
    End Property

    Public Property Set configObject(obj)
        if isEnabled(obj) then
            set aObject = obj
        end if
    End Property

&#39;-----------------------------------------------------------
    Public Property Get WorkWindow
        set WorkWindow = work_window
    End Property

    Public Property Set WorkWindow(win)
        set work_window = win
    End Property

&#39;-----------------------------------------------------------
    Public Property Get contentModel           &#39;IMetisObject
        dim context

        if isValid(content_model) then
            set contentModel = content_model
        else
            &#39; Find ContentModel
            set contentModel = currentModel
            set context = new EKA_Context
            set context.currentModel        = currentModel
            set context.currentModelView    = currentModelView
            set context.currentInstance     = work_window.instance
            set context.currentInstanceView = work_window
            set context.contextInstance     = contextInstance
            if isValid(context) then
                set content_model = context.contentModel
                set contentModel = content_model
                ContentInRepository = context.isRepository
            end if
        end if
    End Property

    Public Property Set contentModel(m)
        set content_model = m
    End Property
&#39;-----------------------------------------------------------
    Public Property Get ContentSearchModel
        set ContentSearchModel = searchModel
    End Property

    Public Property Let ContentSearchModel(search_model)
        if isvalid(work_window) then
            searchModel = search_model
            call connectContentSearchModel(searchModel)
        end if
    End Property

&#39;-----------------------------------------------------------
    Public Sub setFilterRules(rules, noRules)

        dim rule
        dim i

        noFilterRules = noRules
        ReDim Preserve filterRules(noFilterRules)
        for i = 1 to noRules
            set rule = rules(i)
            set filterRules(i) = rule
        next
    End Sub

&#39;-----------------------------------------------------------
    &#39; Build internal structures
    Public Sub build
        &#39; Set variant parameters from configuring object - if given
        Title                = cvwArg.getConfiguredValue(component, &#34;Name&#34;)
        Mode                 = cvwArg.getConfiguredValue(component, &#34;Mode&#34;)
        TitleBar             = cvwArg.getConfiguredValue(component, &#34;TitleBar&#34;)
        TitleBarAddOn        = cvwArg.getConfiguredValue(component, &#34;TitleBarAddOn&#34;)
        LayoutStrategy       = cvwArg.getConfiguredValue(component, &#34;LayoutStrategy&#34;)
        WindowLayoutStrategy = cvwArg.getConfiguredValue(component, &#34;WorkwinLayoutStrategy&#34;)
        WindowLayoutMode     = cvwArg.getConfiguredValue(component, &#34;WorkwinLayoutMode&#34;)
        RelationshipViewMode = cvwArg.getConfiguredValue(component, &#34;RelationshipViewMode&#34;)
        SymbolOpen           = cvwArg.getConfiguredValue(component, &#34;SymbolOpen&#34;)
        SymbolClosed         = cvwArg.getConfiguredValue(component, &#34;SymbolClosed&#34;)
        TextScale            = cvwArg.getConfiguredValue(component, &#34;Textscale&#34;)
        TreeTextScale        = cvwArg.getConfiguredValue(component, &#34;TreeTextScale&#34;)
        NestedTextScale      = cvwArg.getConfiguredValue(component, &#34;NestedTextScale&#34;)
        NestedTextScaleTop   = cvwArg.getConfiguredValue(component, &#34;NestedTextScaleTop&#34;)
        Height               = cvwArg.getConfiguredValue(component, &#34;Height&#34;)
        Width                = cvwArg.getConfiguredValue(component, &#34;Width&#34;)
        ObjectAspectRatio    = cvwArg.getConfiguredValue(component, &#34;ObjectAspectRatio&#34;)
        FilterModel          = cvwArg.getConfiguredValue(component, &#34;FilterSpecification_Model&#34;)
        InstanceContextModel = cvwArg.getConfiguredValue(component, &#34;InstanceContext_Model&#34;)
        ModelContextModel    = cvwArg.getConfiguredValue(component, &#34;ModelContext_Model&#34;)
        LanguageModel        = cvwArg.getConfiguredValue(component, &#34;Language_Model&#34;)
        ViewStrategyModel    = cvwArg.getConfiguredValue(component, &#34;ViewStrategy_Model&#34;)
        if Len(TextScale) = 0 then
            TextScale = 1
        else
            TextScale = CDbl(TextScale)
        end if
        if Len(TreeTextScale) = 0 then
            TreeTextScale = -1
        else
            TreeTextScale = CDbl(TreeTextScale)
        end if
        if Len(NestedTextScale) = 0 then
            NestedTextScale = -1
        else
            NestedTextScale = CDbl(NestedTextScale)
        end if
        if Len(NestedTextScaleTop) = 0 then
            NestedTextScaleTop = -1
        else
            NestedTextScaleTop = CDbl(NestedTextScaleTop)
        end if
        if Len(ObjectAspectRatio) = 0 then
            ObjectAspectRatio = -1
        else
            ObjectAspectRatio = CDbl(ObjectAspectRatio)
        end if
        set workareaLayoutStrategy = metis.findLayoutStrategy(LayoutStrategy)
        set workwinLayoutStrategy = metis.findLayoutStrategy(WindowLayoutStrategy)

        &#39; Find used components
        set compTitleBar       = findCVWcomponent(component, &#34;TitleBar&#34;)
        set compWorkareaWindow = findCVWcomponent(component, &#34;WorkareaWindow&#34;)
   End Sub

&#39;-----------------------------------------------------------
    &#39; Configure used components
    Public Sub configure
        &#39; Propagate parameters to sub-components
        call resetCVWcomponent(compTitleBar)
        call configureCVWcomponent(component, compTitleBar, true)
        call resetCVWcomponent(compWorkareaWindow)
        call configureCVWcomponent(component, compWorkareaWindow, true)
    End Sub

&#39;-----------------------------------------------------------
    &#39; Do what the component is built for - return result
    Public Function execute
        dim index, noWindows
        dim clearMode, newMode, copyMode, moveMode
        dim layout_strategy
        dim obj

        set execute = Nothing
        &#39; The code
        &#39; Check workspace view
        if not isValid(Workspace) then
            exit function
        end if
        &#39; Set some flags
        newMode   = true
        clearMode = false
        copyMode  = false
        moveMode  = false
        if Mode   = &#34;New&#34; then
            newMode = true
        elseif Mode = &#34;Reuse&#34; then
            newMode = false
        elseif Mode = &#34;ReuseAndClear&#34; then
            clearMode = true
            newMode = false
        elseif Mode = &#34;CopyView&#34; then
            copyMode = true
        elseif Mode = &#34;MoveView&#34; then
            moveMode = true
        end if

        set currentWorkarea = currentInstanceView.parent.parent
        if newMode or not find(Title, Workspace, currentWorkarea) then
            &#39; Create workarea
            if window.create(&#34;&#34;, windowType, Workspace) then
                window.title = Title
                with window.objectView
                    on error resume next
                    if Len(Height) &#62; 0 then
                        .geometry.height = CInt(Height)
                    end if
                    if Len(Width) &#62; 0 then
                        .geometry.width  = CInt(Width)
                    end if
                    set .layoutStrategy = workareaLayoutStrategy
                    .openSymbol         = SymbolOpen
                    .closedSymbol       = SymbolClosed
                    if Len(TextScale) &#62; 0 then
                        .absTextScale   = CInt(TextScale)
                    end if
                end with
                index = 1
                if Len(TitleBar) &#62; 0 then
                    &#39; Create title bar
                    titlebarIndex = index
                    if isEnabled(compTitleBar) then
                        call createTitleBar(compTitleBar)
                    end if
                    index = index + 1
                end if
                &#39; Create work window
                workareaIndex = index
                call createWorkareaWindow(compWorkareaWindow)
                index = index + 1
                set obj = window.objectView.instance
                obj.name = window.title
            end if
        else
            workareaIndex = 2
            set work_window = window.objectView.children(workareaIndex)
            if not isEnabled(work_window) then
                workareaIndex = 1
                set work_window = window.objectView.children(workareaIndex)
            end if
        end if
        if clearMode then
            call window.clean()
        end if
        if copyMode then
            call copyViewToWorkarea()
        end if
        &#39;call window.doParentLayout
        call doWorkspaceLayout(work_window.parent.parent)

        &#39; End code
        execute = true
    End Function

&#39;-----------------------------------------------------------
    Public Function find(name, parentView, instance)              &#39; as Boolean
        if name = &#34;$Current$&#34; then
            find = window.find2(windowType, parentView, instance)
        else
            find = window.find(name, windowType, parentView)
        end if
    End Function

&#39;-----------------------------------------------------------
    Private Sub createTitleBar(compTitleBar)
        dim TitleBarName, TemplateName, TemplateAddOn
        dim OpenSymbol, ClosedSymbol
        dim TextScale, Height
        dim TitleLayout, layout_strategy
        dim m, obj, objectMenu, objectMenuAddOn, titleView, itemView
        dim ts, wsWidth, waWidth, wsHeight, waHeight

        &#39; Get variant parameter values
        TitleBarName      = cvwArg.getConfiguredValue(compTitleBar, &#34;Name&#34;)
        TemplateName      = cvwArg.getConfiguredValue(compTitleBar, &#34;TemplateName&#34;)
        TemplateAddOn     = cvwArg.getConfiguredValue(compTitleBar, &#34;TemplateAddOn&#34;)
        TitleLayout       = cvwArg.getConfiguredValue(compTitleBar, &#34;LayoutStrategy&#34;)
        OpenSymbol        = cvwArg.getConfiguredValue(compTitleBar, &#34;SymbolOpen&#34;)
        ClosedSymbol      = cvwArg.getConfiguredValue(compTitleBar, &#34;SymbolClosed&#34;)
        TextScale         = cvwArg.getConfiguredValue(compTitleBar, &#34;Textscale&#34;)
        Height            = cvwArg.getConfiguredValue(compTitleBar, &#34;Height&#34;)
        set layout_strategy = metis.findLayoutStrategy(TitleLayout)

        &#39; Create title bar according to configuration
        set m = getCVWmodel
        set objectMenu = metis.findInstance(TemplateName)
        if not isEnabled(objectMenu) then
            set objectMenu = m.findInstances(buttonType, &#34;name&#34;, TemplateName)
        end if
        if Len(TemplateAddOn) &#62; 0 then
            set objectMenuAddOn = metis.findInstance(TemplateAddOn)
            if not isEnabled(objectMenuAddOn) then
                set objectMenuAddOn = m.findInstances(buttonType, &#34;name&#34;, TemplateAddOn)
            end if
        end if
        call window.addSubWindow(&#34;Top&#34;, &#34;&#34;, titlebarType)
        set titleView = window.objectView.children(titlebarIndex)
        titleView.title = TitleBarName
        if isValid(objectMenu) then
            set itemView = objectMenu.views(1)
            call generateTree(itemView, titleView, consistsOfType, buttonType, 0.05, 1.3)
        end if
        if isValid(objectMenuAddOn) then
            set itemView = objectMenuAddOn.views(1)
            call generateTree(itemView, titleView, consistsOfType, buttonType, 0.05, 1.3)
        end if
        with titleView
            on error resume next
            if Len(Height) &#62; 0 then
                .geometry.height    = CInt(Height)
            end if
            set .layoutStrategy = layout_strategy
            .openSymbol         = OpenSymbol
            .closedSymbol       = ClosedSymbol
            if Len(TextScale) &#62; 0 then
                wsHeight = window.objectView.parent.absScaleGeometry.height
                waHeight = window.objectView.absScaleGeometry.height
                wsWidth = window.objectView.parent.absScaleGeometry.width
                waWidth = window.objectView.absScaleGeometry.width
                ts = CInt(TextScale)
                if wsHeight &#62; waHeight then
                    ts = ts * wsHeight / waHeight
                elseif wsWidth &#62; waWidth then
                    ts = ts * wsWidth / waWidth
                end if
                .absTextScale = ts
            end if
            set obj = .instance
            obj.name = .title
        end with

    End Sub

&#39;-----------------------------------------------------------
    Private Sub createWorkareaWindow(compWorkareaWindow)
        dim WindowName, TemplateName, TemplateAddOn
        dim OpenSymbol, ClosedSymbol
        dim TextScale, Height, Width
        dim WindowLayout, layout_strategy
        dim m
        dim ts, wsWidth, waWidth, wsHeight, waHeight

        &#39; Get variant parameter values
        WindowName          = cvwArg.getConfiguredValue(compWorkareaWindow, &#34;Name&#34;)
        TemplateName        = cvwArg.getConfiguredValue(compWorkareaWindow, &#34;TemplateName&#34;)
        TemplateAddOn        = cvwArg.getConfiguredValue(compWorkareaWindow, &#34;TemplateAddOn&#34;)
        WindowLayout        = cvwArg.getConfiguredValue(compWorkareaWindow, &#34;LayoutStrategy&#34;)
        HierarchyLayout     = cvwArg.getConfiguredValue(compWorkareaWindow, &#34;TreeLayout&#34;)
        OpenSymbol          = cvwArg.getConfiguredValue(compWorkareaWindow, &#34;SymbolOpen&#34;)
        ClosedSymbol        = cvwArg.getConfiguredValue(compWorkareaWindow, &#34;SymbolClosed&#34;)
        TextScale           = cvwArg.getConfiguredValue(compWorkareaWindow, &#34;Textscale&#34;)
        Height              = cvwArg.getConfiguredValue(compWorkareaWindow, &#34;Height&#34;)
        Width               = cvwArg.getConfiguredValue(compWorkareaWindow, &#34;Width&#34;)
        set layout_strategy  = metis.findLayoutStrategy(WindowLayout)
        set hierarchy_layout = metis.findLayoutStrategy(HierarchyLayout)

        &#39; Create workarea window according to configuration
        set m = getCVWmodel
        if WindowLayoutMode = &#34;Manual&#34; then
            call window.addSubWindow(&#34;Top&#34;, &#34;WorkArea_[&#34;&#38; WindowName &#38;&#34;]&#34;, window2Type)
            set work_window = window.objectView.children(workareaIndex)
            set currentModel.currentInstance = work_window.instance
            set currentModelView.currentInstanceView = work_window
            metis.runCommand(&#34;toggle-next-fixed-layout&#34;)
            set currentModel.currentInstance = currentInstance
            set currentModelView.currentInstanceView = currentInstanceView
        else
            call window.addSubWindow(&#34;Top&#34;, &#34;WorkArea_[&#34;&#38; WindowName &#38;&#34;]&#34;, windowType)
            set work_window = window.objectView.children(workareaIndex)
        end if
        with work_window
            on error resume next
            set .layoutStrategy = layout_strategy
            .openSymbol         = OpenSymbol
            .closedSymbol       = ClosedSymbol
            if Len(TextScale) &#62; 0 then
                wsHeight = window.objectView.parent.absScaleGeometry.height
                waHeight = window.objectView.absScaleGeometry.height
                wsWidth = window.objectView.parent.absScaleGeometry.width
                waWidth = window.objectView.absScaleGeometry.width
                ts = CInt(TextScale)
                if wsHeight &#62; waHeight then
                    ts = ts * wsHeight / waHeight
                elseif wsWidth &#62; waWidth then
                    ts = ts * wsWidth / waWidth
                end if
                .absTextScale = ts
            end if
            if Len(Height) &#62; 0 then
                .geometry.height = CInt(Height)
            end if
            if Len(Width) &#62; 0 then
                .geometry.width  = CInt(Width)
            end if
        end with
        call metis.doLayout(work_window.parent)

        &#39; Set view strategy if given
        call connectFilter()
        call connectLanguageModel()
        call connectModelContext()
        call connectInstanceContext()
        call connectViewStrategy()
    End Sub

&#39;-----------------------------------------------------------
    Public Sub populate(instances, noLevels)
        dim obj, obj1, obj2, objView
        dim origin, target
        dim relType, type1, type2
        dim inst, workarea, wObject
        dim viewStrategies, viewStrategy
        dim instanceConts, instanceCont
        dim strategyConts, strategyCont
        dim cvwViewStrategy, cvwCircularLayout
        dim ekaInstance
        dim rel, relView, hasViewList
        dim originView, originViews, targetView, targetViews
        dim propVal
        dim done

        &#39; Get variant parameter values
        &#39;if TreeTextScale &#60; 0 then TreeTextScale = cvwArg.getConfiguredValue(compWorkareaWindow, &#34;TreeTextScale&#34;)
        &#39;if NestedTextScale &#60; 0 then NestedTextScale = cvwArg.getConfiguredValue(compWorkareaWindow, &#34;NestedTextScale&#34;)
        &#39;if NestedTextScaleTop &#60; 0 then NestedTextScaleTop = cvwArg.getConfiguredValue(compWorkareaWindow, &#34;NestedTextScaleTop&#34;)

        set wObject = work_window.instance
        set ekaInstance = new EKA_Instance
        if WindowLayoutStrategy = &#34;akm:layout#CircularLayout1&#34; then
            for each inst in instances
                if isEnabled(inst) then
                    if inst.isObject then
                        set cvwCircularLayout = new CVW_CircularLayout
                        call cvwCircularLayout.build
                        call cvwCircularLayout.execute(work_window, inst)
                        exit for
                    end if
                end if
            next
        else
            &#39; Get view strategy
            set strategyConts = wObject.getNeighbourObjects(0, hasViewStrategyType, specContainerType)
            if strategyConts.count &#62; 0 then
                set strategyCont = strategyConts(1)
                set cvwViewStrategy = new CVW_ViewStrategy
                call cvwViewStrategy.build(strategyCont)
                propVal = ekaInstance.getPropertyValue(strategyCont, &#34;RelationshipViewMode&#34;)
                if Len(propVal) &#62; 0 then
                    RelationshipViewMode = propVal
                end if
            end if
            &#39; Get instance context parameters
            set instanceConts = wObject.getNeighbourObjects(0, hasInstanceContextType, specContainerType)
            if instanceConts.count &#62; 0 then
                set instanceCont = instanceConts(1)
                propVal = ekaInstance.getPropertyValue(instanceCont, &#34;ObjectAspectRatio&#34;)
                if Len(propVal) &#62; 0 then
                    ObjectAspectRatio = CDbl(propVal)
                end if
            end if
            set hasViewList = metis.newInstanceList
            call addViewsToList(hasViewList, work_window)
            for each obj in instances
                if not obj.isRelationship then
                    if not instanceInList(obj, hasViewList) then
                        set objView = creTreeView(obj, hasViewList, work_window, cvwViewStrategy, 0, noLevels)
                    end if
                end if
            next
            for each rel in instances
                done = false
                if rel.isRelationship then
                    set origin = rel.origin
                    set originViews = currentModelView.findInstanceViews(origin)
                    set target = rel.target
                    set targetViews = currentModelView.findInstanceViews(target)
                    for each originView in originViews
                        if isInView(originView, work_window) then
                            for each targetView in targetViews
                                if isInView(targetView, work_window) then
                                    if isValid(cvwViewStrategy) then
                                        done = isHierarchyRelView(rel, originView, targetView, cvwViewStrategy)
                                    end if
                                    if not done then
                                        set relView = currentModelView.newRelationshipView(rel, originView, targetView)
                                    end if
                                end if
                            next
                        end if
                    next
                end if
            next
        end if

        &#39; Do the layout on work_window
        if work_window.instance.type.uri &#60;&#62; window2Type.uri then
            call metis.doLayout(work_window)
        end if

        &#39; Set layout strategy on topObject
        if isEnabled(hierarchy_layout) and isEnabled(objView) then
            set objView.layoutStrategy = hierarchy_layout
        end if
        if isEnabled(objView) then
            &#39; Do the layout on topObject
            call metis.doLayout(objView)
        end if
        set ekaInstance = Nothing
    End Sub

&#39;-----------------------------------------------------------
    Private Function creTreeView(obj, hasViewList, parentView, cvwViewStrategy, level, noLevels)
        dim obj1, obj2, objView
        dim relType, type1, type2
        dim workarea, wObject
        dim strategies, strategy
        dim relDir, rels, rel, relView
        dim childInst, childInstView
        dim textScale, parentAbsScale, objAbsScale
        dim i, found
        dim rule
        dim cvwObjView, cvwFilter
        dim objGeo, size

        if level &#62;= noLevels then
            if noLevels &#62; -1 then
                set creTreeView = Nothing
                exit Function
            end if
        end if

        if isEnabled(obj) then
            &#39; Create view of each of the top instances
            set cvwObjView = new CVW_ObjectView
            cvwObjView.treeTextFactor    = TreeTextScale
            cvwObjView.nestedTextFactor1 = NestedTextScaleTop
            cvwObjView.nestedTextFactor2 = NestedTextScale
            cvwObjView.heightRatio       = ObjectAspectRatio
            set cvwObjView.viewStrategy  = cvwViewStrategy
            set objView = cvwObjView.create(work_window, parentView, obj, 0)
            set cvwObjView = Nothing
            if not isValid(objView) then
                exit Function
            end if
            if objView.isNested then
                objView.close
            end if
            if isValid(hasViewList) then
                hasViewList.addLast obj
            end if
            if isValid(cvwViewStrategy) then
                set cvwFilter = new CVW_Filter
                for i = 1 to cvwViewStrategy.noHierarchyRules
                    set rule = cvwViewStrategy.hierarchyRules(i)
                    if obj.type.uri = rule.parentType.uri then
                        set rels = obj.getNeighbourRelationships(rule.relDir, rule.relType)
                        for each rel in rels
                            if not applyFilter or cvwFilter.instIsValid(rel, filterRules, noFilterRules) then
                                if rule.relDir = 0 then
                                    set childInst = rel.target
                                else
                                    set childInst = rel.origin
                                end if
                                if not applyFilter or cvwFilter.instIsValid(childInst, filterRules, noFilterRules) then
                                    level = level + 1
                                    if RelationshipViewMode = &#34;Hierarchy&#34; then
                                        set childInstView = creTreeView(childInst, hasViewList, objView, cvwViewStrategy, level, noLevels)
                                    elseif not instanceInList(childInst, hasViewList) then
                                        set childInstView = creTreeView(childInst, hasViewList, work_window, cvwViewStrategy, level, noLevels)
                                        set relView = currentModelView.newRelationshipView(rel, objView, childInstView)
                                    end if
                                    level = level - 1
                                end if
                            end if
                        next
                    end if
                next
                set cvwFilter = Nothing
            end if
        end if
        if objView.isNested then
            on error resume next
            &#39;if level = 0 then
                call objView.doLayout
            &#39;    objView.open
            &#39;end if
        end if
        set creTreeView = objView
    End Function

    &#39;---------------------------------------------------------------------------------------------------
    Private Function isHierarchyRelView(rel, originView, targetView, cvwViewStrategy)
        dim rule
        dim i

        isHierarchyRelView = false
        for i = 1 to cvwViewStrategy.noHierarchyRules
            set rule = cvwViewStrategy.hierarchyRules(i)
            if rule.relType.uri = rel.type.uri then
                if rule.relDir = 0 then
                    if rel.origin.type.uri = rule.parentType.uri then
                        if rel.target.type.uri = rule.childType.uri then
                            isHierarchyRelView = true
                        end if
                    end if
                elseif rule.relDir = 1 then
                    if rel.target.type.uri = rule.parentType.uri then
                        if rel.origin.type.uri = rule.childType.uri then
                            isHierarchyRelView = true
                        end if
                    end if
                end if
            end if
        next
    End Function

   &#39;---------------------------------------------------------------------------------------------------
    Public Sub copyViewToWorkarea(sourceContainerView)
        dim topContainer
        dim instance
        dim workwin

        if isEnabled(sourceContainerView) then
            set workwin = window.objectView.children(workareaIndex)
            set currentModelView.currentInstanceView = sourceContainerView
            Call metis.runCommand(&#34;copy&#34;)
            set currentModelView.currentInstanceView = workwin
            Call metis.runCommand(&#34;paste-structure&#34;)
            &#39;Call metis.runCommand(&#34;paste-synchronized-view&#34;)
            &#39;Call metis.runCommand(&#34;paste-auto-virtual-synchronized-view&#34;)
            set currentModelView.currentInstanceView = currentInstanceView
            currentModelView.clearSelection
        end if
    End Sub

   &#39;---------------------------------------------------------------------------------------------------
    Private Sub addViewsToList(hasViewList, parentView)
        dim child, children
        dim inst

        set children = parentView.children
        for each child in children
            if hasInstance(child) then
                set inst = child.instance
                if not instanceInList(inst, hasViewList) then
                    hasViewList.addLast inst
                end if
            end if
            call addViewsToList(hasViewList, child)
        next

    End Sub

   &#39;---------------------------------------------------------------------------------------------------
    Private Function findContainer(parent, contType, contName)
        dim container, containers
        dim foundContainer

        set findContainer = Nothing
        set foundContainer = Nothing
        set containers = parent.parts
        for each container in containers
            if container.type.uri = contType.uri then
                if container.name = contName then
                    set foundContainer = container
                    exit for
                else
                    set foundContainer = findContainer(container, contType, contName)
                end if
            end if
        next
        if isEnabled(foundContainer) then
            set findContainer = foundContainer
        end if
    End Function

&#39;-----------------------------------------------------------
    Private Sub connectLanguageModel()
        dim langModel
        dim obj, rel
        dim langObjView

        if Len(LanguageModel) &#62; 0 then
            set langModel = metis.findInstance(LanguageModel)
            if isEnabled(langModel) then
                set langObjView = langModel.views(1)
                if isEnabled(work_window) then
                    &#39; Connect rel from work_window to language model specification container
                    set obj = work_window.instance
                    set rel = currentModel.newRelationship(hasLanguageType, obj, langModel)
                    &#39; Create metamodel and connect to model
                    if isEnabled(addMetamodelMethod) then
                        set currentModel.currentInstance = langModel
                        set currentModelView.currentInstanceView = langObjView
                        call currentModel.runMethodOnInst(addMetamodelMethod, langModel)
                        set currentModel.currentInstance = currentInstance
                        set currentModelView.currentInstanceView = currentInstanceView
                    end if
                end if
            end if
        end if
    End Sub

&#39;-----------------------------------------------------------
    Private Sub connectModelContext()
        dim specModel
        dim obj, rel
        dim specObjView
        dim context

        if Len(ModelContextModel) &#62; 0 then
            set specModel = metis.findInstance(ModelContextModel)
            if isEnabled(specModel) then
                set specObjView = specModel.views(1)
                if isEnabled(work_window) then
                    &#39; Connect rel from work_window to model context specification container
                    set obj = work_window.instance
                    set rel = currentModel.newRelationship(hasModelContextType, obj, specModel)
                end if
            end if
        end if
    End Sub

&#39;-----------------------------------------------------------
    Private Sub connectFilter()
        dim specModel
        dim obj, rel
        dim specObjView
        dim context

        if Len(FilterModel) &#62; 0 then
            set specModel = metis.findInstance(FilterModel)
            if isEnabled(specModel) then
                set specObjView = specModel.views(1)
                if isEnabled(work_window) then
                    &#39; Connect rel from work_window to model context specification container
                    set obj = work_window.instance
                    set rel = currentModel.newRelationship(hasFilterType, obj, specModel)
                end if
            end if
        end if
    End Sub

&#39;-----------------------------------------------------------
    Private Sub connectInstanceContext()
        dim specModel
        dim specObjView
        dim cvwContentSpec
        dim contextObj, obj, rel
        dim instances
        dim cvwInstance
        dim instName
        dim workarea, titleObj
        dim indx

        if Len(InstanceContextModel) &#62; 0 then
            set specModel = metis.findInstance(InstanceContextModel)
            if isEnabled(specModel) then
                set specObjView = specModel.views(1)
                if isEnabled(work_window) then
                    &#39; Connect rel from work_window to instanceContext specification container
                    set obj = work_window.instance
                    set rel = currentModel.newRelationship(hasInstanceContextType, obj, specModel)
                    &#39; Connect rel from window to actual context instance
                    set cvwContentSpec = new CVW_ContentSpecification
                    set cvwContentSpec.currentModel     = currentModel
                    set cvwContentSpec.currentModelView = currentModelView
                    set cvwContentSpec.contextInstance  = contextInstance
                    if isEnabled(contextInstance) then
                        set cvwContentSpec.contentModel = contextInstance.ownerModel
                    else
                        set cvwContentSpec.contentModel     = contentModel
                    end if
                    cvwContentSpec.SearchMode           = &#34;SelectOneFromList&#34;
                    cvwContentSpec.PathMode             = &#34;NoPath&#34;
                    cvwContentSpec.SpecificationModel   = InstanceContextModel
                    &#39; Find actual context instance
                    set instances = cvwContentSpec.execute
                    if instances.count &#62; 0 then
                        set contextObj = instances(1)
                        set rel = currentModel.newRelationship(hasInstanceContext2Type, obj, contextObj)
                        set cvwInstance = new CVW_Instance
                        set cvwInstance.currentInstance = work_window.instance
                        set cvwInstance.currentInstanceView = work_window
                        instName = cvwInstance.getInstanceName
                        set cvwInstance = Nothing
                        if Len(instName) &#62; 0 then
                            set workarea = work_window.parent
                            indx = workarea.children.count
                            if indx &#62; 1 then
                                set titleObj = workarea.children(1).instance
                                titleObj.name = instName
                                titleObj.title = instName
                            end if
                        end if
                    end if
                end if
            end if
        end if
    End Sub

&#39;-----------------------------------------------------------
    Private Sub connectViewStrategy()
        dim specModel
        dim obj, rel
        dim specObjView
        dim strategyCont, strategyConts
        dim cvwViewStrategy
        dim ekaInstance

        if Len(ViewStrategyModel) &#62; 0 then
            set specModel = metis.findInstance(ViewStrategyModel)
            if isEnabled(specModel) then
                set specObjView = specModel.views(1)
                if isEnabled(work_window) then
                    &#39; Connect rel from work_window to viewstrategy specification container
                    set obj = work_window.instance
                    set rel = currentModel.newRelationship(hasViewStrategyType, obj, specModel)
                    &#39; Check for properties
                    set cvwViewStrategy = new CVW_ViewStrategy
                    call cvwViewStrategy.build(strategyCont)
                    set ekaInstance = new EKA_Instance
                    WindowLayoutStrategy = ekaInstance.getPropertyValue(specModel, &#34;WorkwinLayoutStrategy&#34;)
                    if Len(WindowLayoutStrategy) &#62; 0 then
                        set workwinLayoutStrategy = metis.findLayoutStrategy(WindowLayoutStrategy)
                        set work_window.layoutStrategy = workwinLayoutStrategy
                    end if
                    set ekaInstance = Nothing
                    set cvwViewStrategy = Nothing
                    &#39; Create metamodel and connect to model
                    if isEnabled(addPartRuleMethod) then
                        set currentModel.currentInstance = specModel
                        set currentModelView.currentInstanceView = specObjView
                        call currentModel.runMethodOnInst(addPartRuleMethod, specModel)
                        set currentModel.currentInstance = currentInstance
                        set currentModelView.currentInstanceView = currentInstanceView
                    end if
                end if
            end if
        end if
    End Sub

&#39;-----------------------------------------------------------
    Private Sub connectContentSearchModel(searchModel)
        dim specModel
        dim wObject, rel
        dim specObjView
        dim searchConts
        dim context

        if Len(searchModel) &#62; 0 then
            set specModel = metis.findInstance(searchModel)
            if isEnabled(specModel) then
                set specObjView = specModel.views(1)
                if isEnabled(work_window) then
                    &#39; Connect rel from work_window to model context specification container
                    set wObject = work_window.instance
                    set searchConts = wObject.getNeighbourObjects(0, hasSearchSpecificationType, specContainerType)
                    if searchConts.count = 0 then
                        set rel = currentModel.newRelationship(hasSearchSpecificationType, wObject, specModel)
                    end if
                end if
            end if
        end if
    End Sub

&#39;-----------------------------------------------------------
    Private Sub doWorkspaceLayout(objView)
        dim layoutStrategy
        dim workspaceLayoutStrategy

        set workspaceLayoutStrategy = objView.layoutStrategy
        set layoutStrategy = metis.findLayoutStrategy(&#34;http://xml.activeknowledgemodeling.com/akm/views/matrix_layouts.kmd#_002ash3011bccb0hs5tr&#34;)
        set objView.layoutStrategy = layoutStrategy
        call metis.doLayout(objView)
        set objView.layoutStrategy = workspaceLayoutStrategy
        call metis.doLayout(objView)
    End Sub

&#39;-----------------------------------------------------------
    Private Sub Class_Initialize()
        set currentModel        = metis.currentModel
        set currentModelView    = currentModel.currentModelView
        set currentInstance     = currentModel.currentInstance
        set currentInstanceView = currentModelView.currentInstanceView
        set contextInstance = Nothing
        &#39; Assume started on button
        if isValid(currentInstanceView) then
            set currentWorkarea = currentInstanceView.parent.parent
        end if
        set cObject   = currentInstance
        set aObject   = currentInstance
        &#39; Types
        set titlebarType    = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/view_objects.kmd#UiType_CVW:Workarea_UUID&#34;)
        set windowType      = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/view_objects.kmd#UiType_CVW:Workarea_UUID&#34;)
        set window2Type     = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/view_objects.kmd#UiType_CVW:Workarea2_UUID&#34;)
        set buttonType      = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/action_objects.kmd#ObjType_CVW:Button_UUID&#34;)
        set consistsOfType  = metis.findType(&#34;http://xml.activeknowledgemodeling.com/eka/languages/eka_relships.kmd#RelType_EKA:Member_UUID&#34;)
        set hasFilterType   = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/spec_relships.kmd#RelType_CVW:hasFilterSpecification_UUID&#34;)
        set hasLanguageType = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/spec_relships.kmd#RelType_CVW:hasLanguageSpecification2_UUID&#34;)
        set hasViewStrategyType     = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/spec_relships.kmd#RelType_CVW:hasViewStrategy2_UUID&#34;)
        set hasModelContextType     = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/spec_relships.kmd#RelType_CVW:hasModelContext_UUID&#34;)
        set hasInstanceContextType  = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/spec_relships.kmd#RelType_CVW:hasInstanceContext_UUID&#34;)
        set hasInstanceContext2Type = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/spec_relships.kmd#RelType_CVW:hasInstanceContext2_UUID&#34;)
        set specContainerType       = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/spec_objects.kmd#ObjType_CVW:Specification_Container_UUID&#34;)
        set hasSearchSpecificationType = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/spec_relships.kmd#RelType_CVW:hasSearchSpecification_UUID&#34;)
        set propertyType    = metis.findType(&#34;http://xml.activeknowledgemodeling.com/eka/languages/eka_property.kmd#ObjType_EKA:Property_UUID&#34;)
        set hasPropertyType = metis.findType(&#34;http://xml.activeknowledgemodeling.com/eka/languages/eka_relships.kmd#RelType_EKA:HasProperty_UUID&#34;)
        &#39; Methods
        set addMetamodelMethod  = metis.findMethod(&#34;http://xml.activeknowledgemodeling.com/cvw/operations/spec_methods.kmd#addVirtualMetamodel&#34;)
        set addPartRuleMethod   = metis.findMethod(&#34;http://xml.activeknowledgemodeling.com/cvw/operations/spec_methods.kmd#addPartRules&#34;)
        &#39; Arguments
        TreeTextScale        = -1
        NestedTextScaleTop   = -1
        NestedTextScale      = -1
        ObjectAspectRatio    = -1
        WindowLayoutStrategy = &#34;&#34;
        RelationshipViewMode = &#34;Hierarchy&#34;
        ContentInRepository  = false
        set content_model = Nothing
        set cvwArg    = new CVW_ArgumentValue
        set Workspace = Nothing
        set window    = new CVW_Window
    End Sub

&#39;-----------------------------------------------------------
    Private Sub Class_Terminate()
        set cvwArg = Nothing
    End Sub

End Class

</string>
  </valueset>
 </object>

 <object id="_002aspt01b45jlp00htf">
  <valueset size="10" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="../languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Class CVW_MenuAction</string>
   <string name="description"></string>
   <integer name="dbms-admin.commitFlag">0</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20070820 123345599</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="comments"></string>
   <string name="script">option explicit


&#39;-----------------------------------------------------------
&#39;-----------------------------------------------------------
Class CVW_MenuAction

    &#39; Variant parameters
    Public Title
    Public ParameterName                 &#39; String
    Public noViewLevels
    Public noNeighbourLevels
    Public TreeTextScale                  &#39; Float as String
    Public NestedTextScaleTop             &#39; Float as String
    Public NestedTextScale                &#39; Float as String
    Public applyFilter                   &#39; Boolean

    &#39; Context variables
    Public  currentModel
    Public  currentModelView
    Public  currentInstance
    Public  currentInstanceView
    Public  contextInstance
    Public  contextModel

    Private cObject                      &#39; Component object   - IMetisInstance
    Private aObject                      &#39; Configuring object - IMetisInstance
    Private work_area

    &#39; Types
    Private actionType                   &#39; IMetisType
    Private componentType                &#39; IMetisType
    Private isType
    Private consistsOfType               &#39; IMetisType
    Private usesType                     &#39; IMetisType
    Private anyObjectType
    Private isInstanceType

    &#39; Others
    Private cvwArg                       &#39; CVW_ArgumentValue
    Private kind                         &#39; String
    Private MatrixLayout1                &#39; String
    Private MatrixLayout2                &#39; String

&#39;-----------------------------------------------------------
    Public Property Get component           &#39;IMetisObject
        set component = cObject
    End Property

    Public Property Set component(obj)
        if isEnabled(obj) then
            set cObject = obj
        end if
    End Property

&#39;-----------------------------------------------------------
    Public Property Get configObject           &#39;IMetisObject
        set configObject = aObject
    End Property

    Public Property Set configObject(obj)
        if isEnabled(obj) then
            set aObject = obj
        end if
    End Property

&#39;-----------------------------------------------------------
    Public Property Get workarea               &#39;IMetisObject
        set workarea = Nothing
        if isValid(work_area) then
            set workarea = work_area
        end if
    End Property
&#39;-----------------------------------------------------------
    &#39; Build internal structures
    Public Sub build
        kind = configObject.getNamedStringValue(&#34;kind&#34;)
   End Sub

&#39;-----------------------------------------------------------
    &#39; Configure used components
    Public Sub configure
        &#39; Only relevant if this component uses other components
    End Sub

&#39;-----------------------------------------------------------
    &#39; Do what the component is built for - return result
    Public Function execute
        dim action, actions
        dim comp, components
        &#39;dim contextInstance
        dim instances, objects
        dim workspace, workspaceWindow
        dim workWindow, wObject
        dim layoutStrategy
        dim contentSpec
        dim child, geo
        dim indx, wa, win
        dim cvwContentSpec, cvwAction
        dim i

        set execute = Nothing
        set workspace = Nothing
        &#39; The code
        if kind = &#34;Menu&#34; then
            &#39; Find actions
            set actions = configObject.getNeighbourObjects(0, consistsOfType, actionType)
            for each action in actions
                if isEnabled(action) then
                    set cvwAction = new CVW_MenuAction
                    cvwAction.noNeighbourLevels = noNeighbourLevels
                    set cvwAction.configObject = action
                    call cvwAction.build
                    set cvwAction.contextModel = contextModel
                    cvwAction.applyFilter = applyFilter
                    set workspace = cvwAction.execute
                    set contextModel = cvwAction.contextModel
                end if
            next
        elseif kind = &#34;Action&#34; then
            set components = metis.newInstanceList
            set components = findComponents(configObject, components)
            for each comp in components
                if isEnabled(comp) then
                    if comp.name = &#34;Workspace&#34; then
                        set workspace = execWorkspace(comp)
                        set workspaceWindow = workspace.WorkspaceWindow
                        exit for
                    end if
                end if
            next
            for each comp in components
                if isEnabled(comp) then
                    if comp.name = &#34;Workarea&#34; then
                        set work_area = execWorkarea(comp, workspaceWindow)
                        set workWindow = work_area.WorkWindow
                        set wObject = workWindow.instance
                        if isEnabled(wObject) then
                            set objects = wObject.getNeighbourObjects(0, isInstanceType, anyObjectType)
                            if isValid(objects) then
                                if objects.count &#62; 0 then
                                    set contextInstance = objects(1)
                                end if
                            end if
                        end if
                        exit for
                    end if
                end if
            next
            if isEnabled(work_area.ContentModel) then
                set contextModel = work_area.ContentModel
            end if
            for each comp in components
                if isEnabled(comp) then
                    if comp.name = &#34;ContentSpecification&#34; then
                        set contentSpec = comp
                        set instances = Nothing
                        set cvwContentSpec = execContentSpecification(contentSpec, work_area.ContentModel, work_area.ContentInRepository, contextInstance, instances)
                        exit for
                    end if
                end if
            next
            if isValid(work_area) and isValid(cvwContentSpec) then
                work_area.ContentSearchModel = cvwContentSpec.SpecificationModel
                if isValid(instances) then
                    &#39; Textscale handling
                    if TreeTextScale &#62; 0 then work_area.TreeTextScale = TreeTextScale
                    if NestedTextScale &#62; 0 then work_area.NestedTextScale = NestedTextScale
                    if NestedTextScaleTop &#62; 0 then work_area.NestedTextScaleTop = NestedTextScaleTop
                    &#39; Copy filter rules
                    call work_area.setFilterRules(cvwContentSpec.filterRules, cvwContentSpec.noFilterRules)
                    &#39; Populate work_area
                    call work_area.populate(instances, noViewLevels)
                end if
            end if
            if isValid(workspace) then
                if workspace.LayoutStrategy = &#34;akm:layout#AutoMatrix&#34; then
                    if workspaceWindow.children.count &#60;= 2 then
                        set layoutStrategy = metis.findLayoutStrategy(MatrixLayout1)
                    else
                        set layoutStrategy = metis.findLayoutStrategy(MatrixLayout2)
                    end if
                    set workspaceWindow.layoutStrategy = layoutStrategy
                end if
                &#39; Hack: Move the windows a little to trigger the aoutolayout
                for each wa in workspaceWindow.children
                    indx = wa.children.count
                    if indx &#62; 0 then
                        set win = wa.children(indx)
                        if isValid(win) then
                            set geo = win.geometry
                            geo.x = geo.x + 1
                            set win.geometry = geo
                        end if
                    end if
                next
            end if
        end if
        set components = Nothing
        set execute = workspace
    End Function

&#39;-----------------------------------------------------------
    Private Function findComponents(inst, components)
        dim comp, comps, parents

        set findComponents = Nothing
        Do
            set comps = inst.getNeighbourObjects(0, usesType, componentType)
            if comps.count &#62; 0 then
                for each comp in comps
                    components.addLast comp
                next
            end if
            set parents = inst.getNeighbourObjects(0, isType, actionType)
            if isValid(parents) then
                for each inst in parents
                    set comps = findComponents(inst, components)
                    for each comp in comps
                        if not instanceInList(comp, comps) then
                            components.addLast comp
                        end if
                    next
                next
            end if
            exit do
        Loop
        set findComponents = components
    End Function

&#39;-----------------------------------------------------------
    Private Function execWorkarea(comp, workspace)
        dim cvwWorkarea, cvwWorkspace

        set execWorkarea = Nothing
        &#39; Configure workarea
        call resetCVWcomponent(comp)
        call configureCVWcomponent(configObject, comp, false)
        &#39; Build and execute
        set cvwWorkarea = new CVW_Workarea
        set cvwWorkarea.currentModel = currentModel
        set cvwWorkarea.currentModelView = currentModelView
        set cvwWorkarea.currentInstance = currentInstance
        set cvwWorkarea.currentInstanceView = currentInstanceView
        set cvwWorkarea.contextInstance = contextInstance
        set cvwWorkarea.component = comp
        set cvwWorkarea.configObject = configObject
        if not isValid(workspace) then
            set cvwWorkspace = new CVW_Workspace
            set workspace = cvwWorkspace.execute             &#39; Execute methods dependent on configuration
        end if
        set cvwWorkarea.workspace = workspace
        if applyFilter then
            cvwWorkarea.applyFilter = true
        end if
        if isValid(contextModel) then
            set cvwWorkarea.contentModel = contextModel
        end if
        call cvwWorkarea.build                          &#39; Build internal structures
        call cvwWorkarea.configure
        call cvwWorkarea.execute                        &#39; Execute: Builds workarea (as an empty window w titlebar)

        set execWorkarea = cvwWorkarea
    End Function

&#39;-----------------------------------------------------------
    Private Function execWorkspace(comp)
        dim workspace, cvwWorkspace

        set execWorkspace = Nothing
        &#39; Configure workspace
        call resetCVWcomponent(comp)
        call configureCVWcomponent(configObject, comp, false)
        &#39; Build and execute
        set cvwWorkspace = new CVW_Workspace
        set cvwWorkspace.component = comp
        set cvwWorkspace.configObject = configObject
        call cvwWorkspace.build                          &#39; Build internal structures
        set workspace = cvwWorkspace.execute             &#39; Execute methods dependent on configuration
        if isValid(workspace) then
            set execWorkspace = cvwWorkspace
        end if
    End Function

&#39;-----------------------------------------------------------
    Private Function execContentSpecification(comp, contentModel, contentInRepository, contextInstance, instances)
        dim cvwContentSpec

        &#39; Configure content specification
        set execContentSpecification = Nothing
        call resetCVWcomponent(comp)
        call configureCVWcomponent(configObject, comp, false)
        &#39; Build and execute
        set cvwContentSpec = new CVW_ContentSpecification
        set cvwContentSpec.currentModel     = currentModel
        set cvwContentSpec.currentModelView = currentModelView
        set cvwContentSpec.component    = comp
        set cvwContentSpec.configObject = configObject
        set cvwContentSpec.contentModel = contentModel
        cvwContentSpec.RepositoryConnection = contentInRepository
        cvwContentSpec.PathMode = &#34;Path&#34;
        cvwContentSpec.noLevels = noNeighbourLevels
        if applyFilter then
            cvwContentSpec.applyFilter = true
        end if
        call cvwContentSpec.build                          &#39; Build internal structures
        set instances = cvwContentSpec.execute             &#39; Execute methods dependent on configuration
        set execContentSpecification = cvwContentSpec
    End Function

&#39;-----------------------------------------------------------
    Private Sub Class_Initialize()
        set currentModel        = metis.currentModel
        set currentModelView    = currentModel.currentModelView
        set currentInstance     = currentModel.currentInstance
        set currentInstanceView = currentModelView.currentInstanceView
        set contextInstance = Nothing
        set contextModel    = Nothing
        set cObject   = currentInstance
        set aObject   = currentInstance
        set cvwArg    = new CVW_ArgumentValue
        set work_area = Nothing

        set actionType      = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/action_objects.kmd#ObjType_CVW:Button_UUID&#34;)
        set componentType   = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/cvw_objects.kmd#ObjType_CVW:CVW_Component_UUID&#34;)
        set isType          = metis.findType(&#34;http://xml.activeknowledgemodeling.com/eka/languages/eka_relships.kmd#RelType_EKA:Is_UUID&#34;)
        set consistsOfType  = metis.findType(&#34;http://xml.activeknowledgemodeling.com/eka/languages/eka_relships.kmd#RelType_EKA:Member_UUID&#34;)
        set usesType        = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/cvw_relships.kmd#RelType_CVW:usesComponent2_UUID&#34;)
        set anyObjectType   = metis.findType(&#34;metis:stdtypes#oid1&#34;)
        set isInstanceType  = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/spec_relships.kmd#RelType_CVW:hasInstanceContext2_UUID&#34;)

        MatrixLayout1 = &#34;http://xml.activeknowledgemodeling.com/cvw/views/cvw_layout_strategies.kmd#Layout_CVW:ContainerMatrixHorizontal&#34;
        MatrixLayout2 = &#34;http://xml.activeknowledgemodeling.com/cvw/views/cvw_layout_strategies.kmd#Layout_CVW:ContainerLayout&#34;

        noViewLevels = -1
        noNeighbourLevels = 2
        TreeTextScale = -1
        NestedTextScale = -1
        NestedTextScaleTop = -1
        applyFilter          = false

    End Sub

&#39;-----------------------------------------------------------
    Private Sub Class_Terminate()
        set cvwArg = Nothing
    End Sub

End Class

</string>
  </valueset>
 </object>

 <object id="_002aspt01b45jlp5bub2">
  <valueset size="10" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="../languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Class CVW_SelectDialog</string>
   <string name="description"></string>
   <integer name="dbms-admin.commitFlag">0</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20070820 123345599</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="comments"></string>
   <string name="script">option explicit

Class CVW_SelectDialog

    Private dialog

&#39;-----------------------------------------------------------
    Public Property Let title(str1)
        if isValid(dialog) then
            dialog.title = str1
        end if
    End Property

&#39;-----------------------------------------------------------
    Public Property Let heading(str1)
        if isValid(dialog) then
            dialog.heading = str1
        end if
    End Property

&#39;-----------------------------------------------------------
    Public Property Let singleSelect(str1)
        if isValid(dialog) then
            dialog.singleSelect = str1
        end if
    End Property

&#39;-----------------------------------------------------------
    Public Function show(instances)
        set show = Nothing
        if isValid(dialog) and isValid(instances) then
            dialog.clear
            if instances.count &#62; 0 then
                dialog.addData instances
                set show = dialog.show
            end if
        end if
    End Function

&#39;-----------------------------------------------------------
    Public Sub Class_Initialize()
        set dialog = CreateObject(&#34;Metis.SelectDialog.&#34; &#38; metis.versionMajor &#38; &#34;.&#34; &#38; metis.versionMinor)
        if isValid(dialog) then
            with dialog
				.title = &#34;Select&#34;
				.heading = &#34;Select dialog&#34;
    .singleSelect = False
    .columnLabel = True
    .columnURI = False
    .columnType = False
            end with
  &#39;else
            &#39; Error handling
        end if
    End Sub

&#39;-----------------------------------------------------------
    Public Sub Class_Terminate()
        set dialog = Nothing
    End Sub

&#39;-----------------------------------------------------------

End Class</string>
  </valueset>
 </object>

 <object id="_002aspt01b45jlqbukmk">
  <valueset size="10" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="../languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Class CVW_Task</string>
   <string name="description"></string>
   <integer name="dbms-admin.commitFlag">0</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20070820 123345599</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="comments"></string>
   <string name="script">option explicit

&#39;-----------------------------------------------------------
&#39;-----------------------------------------------------------
Class CVW_Task

    &#39; Context variables
    Public  currentModel
    Public  currentModelView
    Public  currentInstance
    Public  currentInstanceView
    Public  useObjectType
    Public  noViewLevels
    Public  noNeighbourLevels
    Public  selectCurrent
    Public  contentModel
    Public  applyFilter

    Private buttonType
    Private consistsOfType
    Private specContainerType
    Private hasFilterType
    Private hasInstanceContextType
    Private hasSearchSpecificationType
    Private isTopType

    Private cvwArgValue

&#39;-----------------------------------------------------------
    Public Function openObjectWindow(obj, taskName, isTop)
        dim cvwModel, cvwAction, cvwWorkarea, cvwContentSpec
        dim actionName, actionObject
        dim workarea, workWindow, wObject
        dim searchCont, searchConts
        dim filterCont, filterConts
        dim rel, rels
        dim child, children
        dim selection
        dim instances

        set openObjectWindow = Nothing
        if not isEnabled(obj) then
            exit function
        end if

        set cvwModel = getCVWmodel
        set actionObject = findActionObject(obj, taskName)
        if isEnabled(actionObject) then
            set cvwAction = new CVW_MenuAction
            set cvwAction.currentInstance = currentInstance
            set cvwAction.currentInstanceView = currentInstanceView
            set cvwAction.configObject = actionObject
            if not isTop then
                set cvwAction.contextInstance  = obj
            end if
            call cvwAction.build
            if applyFilter then
                cvwAction.applyFilter = true
            end if
            if isEnabled(contentModel) then
                set cvwAction.contextModel = contentModel
            end if
            call cvwAction.execute
            set workarea = cvwAction.workarea
            if isValid(workarea) then
                set workWindow = workarea.WorkWindow
                set openObjectWindow = workWindow
                &#39; Get CVW_Workarea
                set cvwWorkarea = new CVW_Workarea
                set cvwWorkarea.WorkWindow = workWindow
                &#39; Set context instance
                set wObject = workWindow.instance
                set rels = wObject.getNeighbourRelationships(0, hasInstanceContextType)
                if rels.count &#62; 0 then
                    set rel = rels(1)
                    set rel.target = obj
                end if
                &#39; Get search specification
                set searchConts = wObject.getNeighbourObjects(0, hasSearchSpecificationType, specContainerType)
                if searchConts.count &#62; 0 then
                    set searchCont = searchConts(1)
                    &#39; Build the content specification
                    set cvwContentSpec = new CVW_ContentSpecification
                    set cvwContentSpec.currentModel     = currentModel
                    set cvwContentSpec.currentModelView = currentModelView
                    if isEnabled(contentModel) then
                        set cvwContentSpec.contentModel = contentModel
                    else
                        set cvwContentSpec.contentModel = cvwWorkarea.contentModel
                    end if
                    if isTop then
                        set cvwContentSpec.topInstance      = obj
                        call relocateIsTop(searchCont, obj)
                    else
                        set cvwContentSpec.contextInstance  = obj
                    end if
                    cvwContentSpec.SpecificationModel   = searchCont.uri
                    cvwContentSpec.PathMode = &#34;Path&#34;
                    cvwContentSpec.noLevels = noNeighbourLevels
                    if applyFilter then
                        cvwContentSpec.applyFilter = true
                        set filterConts = wObject.getNeighbourObjects(0, hasFilterType, specContainerType)
                        if filterConts.count &#62; 0 then
                            set filterCont = filterConts(1)
                            cvwContentSpec.FilterModel = filterCont.uri
                        end if
                    end if
                    &#39; Do the search
                    set instances = cvwContentSpec.execute
                    if isValid(instances) then
                        cvwWorkarea.ContentSearchModel = cvwContentSpec.SpecificationModel
                        call cvwWorkarea.populate(instances, noViewLevels)
                        if isTop and selectCurrent then
                            set selection = metis.newInstanceList
                            selection.addLast obj
                            call currentModelView.select(selection)
                        end if
                    end if
                    set cvwContentSpec = Nothing
                end if
                call doWorkspaceLayout(workWindow.parent.parent)
                set cvwWorkarea = Nothing
            end if
            set cvwAction = Nothing
        end if

    End Function

&#39;-----------------------------------------------------------
    Private Sub relocateIsTop(searchCont, contextObj)
        dim obj
        dim part, parts
        dim rel, relships
        dim relView, partView

        set relships = searchCont.getNeighbourRelationships(0, isTopType)
        if relships.count &#62; 0 then
            set rel = relships(1)
            set obj = rel.target
            if obj.type.uri = contextObj.type.uri then
                exit sub
            end if
            set relView = rel.views(1)
            set parts = searchCont.parts
            if parts.count &#62; 0 then
                for each part in parts
                    if part.type.uri = contextObj.type.uri then
                        set rel.target = part
                        set partView = part.views(1)
                        set relView.target = partView
                        exit sub
                    end if
                next
            end if
        end if
    End Sub

&#39;-----------------------------------------------------------
    Private Function findActionObject(inst, actionName)
        dim cvwModel
        dim taskObject, taskObjects, actionObjects
        dim obj, typeInst, typeInstUri

        set findActionObject = Nothing
        set cvwModel = getCVWmodel
        &#39; Find specified action object
        set taskObjects = cvwModel.findInstances(buttonType, &#34;name&#34;, actionName)
        if isValid (taskObjects) then
            if taskObjects.count &#62; 0 then
                set taskObject = taskObjects(1)
                &#39; Find member corresponding to type
                set actionObjects = taskObject.getNeighbourObjects(0, consistsOfType, buttonType)
                if actionObjects.count &#62; 0 then
                    for each obj in actionObjects
                        typeInstUri = cvwArgValue.getArgumentValue(obj, &#34;Type&#34;)
                        set typeInst = metis.findInstance(typeInstUri)
                        if isEnabled(typeInst) then
                            if inst.type.uri = typeInst.type.uri then
                                set findActionObject = obj
                                exit for
                            end if
                        end if
                    next
                end if
                if not isEnabled(findActionObject) and not useObjectType then
                    set findActionObject = taskObject
                end if
            end if
        end if
    End Function

&#39;-----------------------------------------------------------
    Private Sub doWorkspaceLayout(objView)
        dim layoutStrategy
        dim workspaceLayoutStrategy
        
        set workspaceLayoutStrategy = objView.layoutStrategy
        set layoutStrategy = metis.findLayoutStrategy(&#34;http://xml.activeknowledgemodeling.com/akm/views/matrix_layouts.kmd#_002ash3011bccb0hs5tr&#34;)
        set objView.layoutStrategy = layoutStrategy
        call metis.doLayout(objView)
        set objView.layoutStrategy = workspaceLayoutStrategy
        call metis.doLayout(objView)
    End Sub

&#39;-----------------------------------------------------------
    Private Sub Class_Initialize()
        set currentModel        = metis.currentModel
        set currentModelView    = currentModel.currentModelView
        set currentInstance     = currentModel.currentInstance
        set currentInstanceView = currentModelView.currentInstanceView
        &#39; Types
        set buttonType                 = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/action_objects.kmd#ObjType_CVW:Button_UUID&#34;)
        set consistsOfType             = metis.findType(&#34;http://xml.activeknowledgemodeling.com/eka/languages/eka_relships.kmd#RelType_EKA:Member_UUID&#34;)
        set specContainerType          = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/spec_objects.kmd#ObjType_CVW:Specification_Container_UUID&#34;)
        set hasFilterType              = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/spec_relships.kmd#ObjType_CVW:hasFilterSpecification_UUID&#34;)
        set hasInstanceContextType     = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/spec_relships.kmd#RelType_CVW:hasInstanceContext2_UUID&#34;)
        set hasSearchSpecificationType = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/spec_relships.kmd#RelType_CVW:hasSearchSpecification_UUID&#34;)
        set isTopType                  = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/spec_relships.kmd#RelType_CVW:isTop_UUID&#34;)
        &#39; Others
        useObjectType = false
        selectCurrent  = false
        noViewLevels  = -1
        noNeighbourLevels = 2
        applyFilter = false
        set cvwArgValue = new CVW_ArgumentValue
    End Sub

&#39;-----------------------------------------------------------
    Private Sub Class_Terminate()
        set cvwArgValue = Nothing
    End Sub

End Class

</string>
  </valueset>
 </object>

 <object id="_002aspt01b45jlqvtc9l">
  <valueset size="10" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="../languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Class CVW_Navigate</string>
   <string name="description"></string>
   <integer name="dbms-admin.commitFlag">0</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20071130 111951906</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="comments"></string>
   <string name="script">option explicit


&#39;-----------------------------------------------------------
&#39;-----------------------------------------------------------
Class CVW_Navigate

    &#39; Variant parameters
    Public Title                          &#39; String

    &#39; Context variables (public)
    Public currentModel
    Public currentModelView
    Public currentInstance
    Public currentInstanceView
    Public NoNeighbourLevels
    Public RelDirection                   &#39; Integer = -1 | 0 | 1
    Public ClearMode                      &#39; String  = NoClear | Clear
    Public LayoutMode                     &#39; Auto | Circular
    Public AskForObjectType               &#39; Boolean
    Public NeighbourObjectType            &#39; URI
    Public NeighbourRelshipType           &#39; URI
    Public ObjectAspectRatio              &#39; Float  = Height / Width
    Public NeighbourAsChild

    &#39; Types
    Private specContainerType
    Private hasInstanceContextType        &#39; IMetisType
    Private hasLanguageModelType
    Private hasViewStrategyType
    Private neighbourObjType
    Private neighbourRelType
    Private propertyType
    Private hasPropertyType

    &#39; Other arguments
    Private cvwCL
    Private noRelRules
    Private relRules()

    &#39;-----------------------------------------------------------
    Public Sub addNeighbours(workWindow, objView)
        dim wObject, obj
        dim cvwLanguageSpec
        dim languageCont, languageConts
        dim instanceCont, instanceConts
        dim strategyCont, strategyConts
        dim cvwViewStrategy
        dim propVal
        dim rel, rels, relDir
        dim size, pos
        dim level, i, no
        dim cvwSelectDialog
        dim ekaInstance
        dim typeList, typeInst, typeInstances
        dim parentView
        dim isHierarchy

        if isValid(workWindow) and isEnabled(objView) then
            set wObject = workWindow.instance
            set ekaInstance = new EKA_Instance
            &#39; Handle ClearMode
            if ClearMode = &#34;Clear&#34; then
                set children = workWindow.children
                for each childView in children
                    if childView.uri &#60;&#62; instView.uri then
                        modelView.deleteObjectView(childView)
                    end if
                next
            end if
            &#39; Handle neighbour types
            if Len(NeighbourObjectType) &#62; 0 then
                set neighbourObjType = metis.findType(NeighbourObjectType)
            end if
            if Len(NeighbourRelshipType) &#62; 0 then
                set neighbourRelType = metis.findType(NeighbourRelshipType)
            end if
            &#39; Get instance context parameters
            set instanceConts = wObject.getNeighbourObjects(0, hasInstanceContextType, specContainerType)
            if instanceConts.count &#62; 0 then
                set instanceCont = instanceConts(1)
                propVal = ekaInstance.getPropertyValue(instanceCont, &#34;ObjectAspectRatio&#34;)
                if Len(propVal) &#62; 0 then
                    ObjectAspectRatio = CDbl(propVal)
                end if
            end if
            &#39; Get view strategy
            set strategyConts = wObject.getNeighbourObjects(0, hasViewStrategyType, specContainerType)
            if strategyConts.count &#62; 0 then
                set strategyCont = strategyConts(1)
                set cvwViewStrategy = new CVW_ViewStrategy
                call cvwViewStrategy.build(strategyCont)
                isHierarchy = cvwViewStrategy.viewAsHierarchy
                propVal = ekaInstance.getPropertyValue(strategyCont, &#34;LayoutMode&#34;)
                if Len(propVal) &#62; 0 then
                    LayoutMode = propVal
                end if
                propVal = ekaInstance.getPropertyValue(strategyCont, &#34;RelDirection&#34;)
                if Len(propVal) &#62; 0 then
                    RelDirection = CInt(propVal)
                end if
                propVal = ekaInstance.getPropertyValue(strategyCont, &#34;NeighbourAsChild&#34;)
                if Len(propVal) &#62; 0 then
                    if LCase(propVal) = &#34;true&#34; then
                        NeighbourAsChild = true
                    end if
                end if
                propVal = ekaInstance.getPropertyValue(strategyCont, &#34;RelDirection&#34;)
                if Len(propVal) &#62; 0 then
                    RelDirection = CInt(propVal)
                end if
            end if

            &#39; Main action
            level = 0
            &#39; Resize and position current object
            if LayoutMode = &#34;Circular&#34; then
                set cvwCL.WorkWindow = workWindow
                set cvwCL.CenterObjectView = objView
                cvwCL.NoLevels = NoNeighbourLevels
                call cvwCL.build
                set size = cvwCL.getObjectSize(0, objView)
                set pos  = cvwCL.getObjectPosition(level, objView, size, 0, 0)
                call cvwCL.populate(level, objView, size, pos)
            end if
            set obj = objView.instance
            &#39; Get language constraints
            set languageConts = wObject.getNeighbourObjects(0, hasLanguageModelType, specContainerType)
            if languageConts.count &#62; 0 then
                set languageCont = languageConts(1)
                set cvwLanguageSpec = new CVW_LanguageSpecification
                call cvwLanguageSpec.build(languageCont)
                &#39; Handle ask for type
                if AskForObjectType then
                    set typeList = cvwLanguageSpec.getTypeList(languageCont, obj.type, RelDirection)
                    if isValid(typeList) then
                        if typeList.count = 0 then
                            exit sub
                        elseif typeList.count = 1 then
                            set typeInstances = typeList
                        else
                            set cvwSelectDialog = new CVW_SelectDialog
                            cvwSelectDialog.singleSelect = false
                            cvwSelectDialog.title = &#34;Select dialog&#34;
                            cvwSelectDialog.heading = &#34;Select neighbour type&#34;
                            set typeInstances = cvwSelectDialog.show(typeList)
                        end if
                    end if
                end if
            end if
            &#39; Find neighbors
            if isValid(typeInstances) then
                for each typeInst in typeInstances
                    if isHierarchy then
                        if NeighbourAsChild then
                            set parentView = objView
                        else
                            set parentView = objView.parent
                        end if
                    else
                        set parentView = workWindow
                    end if
                    set neighbourObjType = typeInst.type
                    call addNeighbourViews(workWindow, parentView, objView, level, cvwLanguageSpec, cvwViewStrategy)
                next
            elseif isValid(neighbourObjType) or isValid(neighbourRelType) then
                if isHierarchy then
                    if NeighbourAsChild then
                        set parentView = objView
                    else
                        set parentView = objView.parent
                    end if
                else
                    set parentView = workWindow
                end if
                call addNeighbourViews(workWindow, parentView, objView, level, cvwLanguageSpec, cvwViewStrategy)
            else
                MsgBox &#34;No neighbours!&#34;
            end if
            set ekaInstance = Nothing
        end if
    End Sub

    &#39;-----------------------------------------------------------
    Private Sub addNeighbourViews(workWindow, parentView, objView, level, cvwLanguageSpec, cvwViewStrategy)
        dim obj, obj2
        dim rel, rels, relDir
        dim l, i, j, no
        dim removed, isNested
        dim rule

        set obj = objView.instance
        set rels = obj.neighbourRelationships


        if isValid(rels) then
            i = 0
            l = level + 1
            no = 1
            for each rel in rels
                if rel.origin.uri = obj.uri then
                    relDir = 0
                    set obj2 = rel.target
                else
                    relDir = 1
                    set obj2 = rel.origin
                end if
                removed = false
                if isValid(neighbourRelType) then
                    if not rel.type.inherits(neighbourRelType) then
                        rels.removeAt(no)
                        removed = true
                    end if
                elseif isValid(neighbourObjType) then
                    if not obj2.type.inherits(neighbourObjType) then
                        rels.removeAt(no)
                        removed = true
                    end if
                elseif not cvwLanguageSpec.relIsAllowed(rel) then
                    rels.removeAt(no)
                    removed = true
                else
                    if not (RelDirection = -1 or RelDirection = relDir) then
                        rels.removeAt(no)
                        removed = true
                    end if
                end if
                if not removed then
                    no = no + 1
                end if
            next
            no = rels.count
            for each rel in rels
                if rel.origin.uri = obj.uri then
                    relDir = 0
                    set obj2 = rel.target
                else
                    relDir = 1
                    set obj2 = rel.origin
                end if

                if RelDirection = -1 or RelDirection = relDir then
                    if not l &#62; NoNeighbourLevels then
                        isNested = false
                        for j = 1 to cvwViewStrategy.noHierarchyRules
                            set rule = cvwViewStrategy.hierarchyRules(j)
                            if rule.relType.uri = rel.type.uri then
                                if rule.parentType.uri = obj.type.uri and rule.childType.uri = obj2.type.uri then
                                    isNested = true
                                    exit for
                                elseif rule.parentType.uri = obj2.type.uri and rule.childType.uri = obj.type.uri then
                                    isNested = true
                                    exit for
                                end if
                            end if
                        next
                        i = i + 1
                        call addNeighbourView(workWindow, parentView, objView, relDir, rel, l, i, no, cvwLanguageSpec, cvwViewStrategy, isNested)
                    end if
                end if
            next
        end if
    End Sub

    &#39;-----------------------------------------------------------
    Private Sub addNeighbourView(workWindow, parentView, objView, relDir, rel, level, i, no, cvwLanguageSpec, cvwViewStrategy, isNested)
        dim obj, relView
        dim originView, originViews
        dim targetView, targetViews
        dim view
        dim isHierarchy
        dim l

        &#39; Create relationship view
        l = level
        isHierarchy = cvwViewStrategy.viewAsHierarchy
        if relDir = 0 then
            set obj = rel.target
            set originView = objView
            set targetView = viewExists(obj, parentView)
            if isHierarchy or isNested then
                if NeighbourAsChild or isNested then
                    set parentView = objView
                else
                    set parentView = objView.parent
                end if
            end if
            if not isValid(targetView) then
                set targetView = addObjectView(workWindow, parentView, obj, l, i, no)
            end if
            set view = targetView
        else
            set obj = rel.origin
            set targetView = objView
            set originView = viewExists(obj, workWindow)
            if not isValid(originView) then
                set originView = addObjectView(workWindow, parentView, obj, l, i, no)
            end if
            set view = originView
        end if
        if isValid(originView) and isValid(targetView) then
            set relView = relViewExists(rel, originView, targetView)
            if not isValid(relView) then
                if not isNested then
                    if not isHierarchy  then
                        set relView = currentModelView.newRelationshipView(rel, originView, targetView)
                    elseif view.parent.uri = workWindow.uri then
                        set relView = currentModelView.newRelationshipView(rel, originView, targetView)
                    else
                        parentView.open
                    end if
                else
                    parentView.open
                end if
                if l &#60; NoNeighbourLevels then
                    call addNeighbourViews(workWindow, parentView, view, l, cvwLanguageSpec, cvwViewStrategy)
                end if
            end if
        end if
    End Sub

    &#39;-----------------------------------------------------------
    Private Function addObjectView(workWindow, parentView, obj, level, i, no)
        dim objView, objGeo
        dim cvwObjView
        dim textscale
        dim size, pos
        dim l

        set addObjectView = Nothing
        &#39; Create object view
        l = level
        set cvwObjView = new CVW_ObjectView
        set objView = cvwObjView.create(workWindow, parentView, obj, ObjectAspectRatio)
        set cvwObjView = Nothing
        if LayoutMode = &#34;Circular&#34; then
            set size = cvwCL.getObjectSize(l, objView)
            set pos  = cvwCL.getObjectPosition(l, objView, size, i, no)
            call cvwCL.populate(l, objView, size, pos)
        end if
        if objView.isNested then
            objView.close
        end if
        set addObjectView = objView
    End Function

    &#39;-----------------------------------------------------------
    Private Sub Class_Initialize()

        set currentModel        = metis.currentModel
        set currentModelView    = currentModel.currentModelView
        set currentInstance     = currentModel.currentInstance
        set currentInstanceView = currentModelView.currentInstanceView

        &#39; Types
        set specContainerType       = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/spec_objects.kmd#ObjType_CVW:Specification_Container_UUID&#34;)
        set hasInstanceContextType  = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/spec_relships.kmd#RelType_CVW:hasInstanceContext_UUID&#34;)
        set hasLanguageModelType    = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/spec_relships.kmd#RelType_CVW:hasLanguageSpecification2_UUID&#34;)
        set hasViewStrategyType     = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/spec_relships.kmd#RelType_CVW:hasViewStrategy2_UUID&#34;)
        set propertyType            = metis.findType(&#34;http://xml.activeknowledgemodeling.com/eka/languages/eka_property.kmd#ObjType_EKA:Property_UUID&#34;)
        set hasPropertyType         = metis.findType(&#34;http://xml.activeknowledgemodeling.com/eka/languages/eka_relships.kmd#RelType_EKA:HasProperty_UUID&#34;)
        
        set neighbourObjType = Nothing
        set neighbourRelType = Nothing
        
        &#39; CVW objects
        set cvwCL = new CVW_CircularLayout
        &#39; Defaults
        NoNeighbourLevels = 1
        RelDirection = -1
        ClearMode = &#34;Clear&#34;
        LayoutMode = &#34;Auto&#34;
        ObjectAspectRatio = -1
        AskForObjectType = false
        NeighbourAsChild = false
    End Sub

&#39;-----------------------------------------------------------
    Public Sub Class_Terminate()
        set cvwCL = Nothing
    End Sub

End Class

</string>
  </valueset>
 </object>

 <object id="_002aspt01b7t9q2l2j8k">
  <valueset size="10" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="../languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Class EKA_Instance</string>
   <string name="description"></string>
   <integer name="dbms-admin.commitFlag">0</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20070820 123548154</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="comments"></string>
   <string name="script">option explicit

&#39;-----------------------------------------------------------
&#39;-----------------------------------------------------------
Class EKA_Instance


    &#39; Variant parameters
    Public Title                        &#39; String
    Public Instance                     &#39; IMetisInstance

    &#39; Context variables (public)
    Public currentModel
    Public currentModelView
    Public currentInstance
    Public currentInstanceView
    &#39; Types
    Private objectType
    Private propertyType
    Private hasPropertyType
    Private hasValueType
    Private hasValue2Type
    Private isType


&#39;-----------------------------------------------------------
    Public Function findObject(model, instName)
        dim instances

        set findObject = Nothing

        if isEnabled(model) then
            set instances = model.findInstances(objectType, &#34;name&#34;, instName)
            if instances.count &#62;= 1 then
                set findObject= instances(1)
            end if
        end if
    End Function

&#39;-----------------------------------------------------------
    Public Property Get Properties
        set Properties = Nothing
        if isEnabled(Instance) then
            set Properties = getProperties(Instance)
        end if
    End Property

&#39;-----------------------------------------------------------
    Public Function getPropertyValue(inst, propName)
        dim prop, properties

        getPropertyValue = &#34;&#34;
        set properties = inst.getNeighbourObjects(0, hasPropertyType, propertyType)
        if isValid(properties) then
            for each prop in properties
                if prop.title = propName then
                    getPropertyValue = prop.getNamedStringValue(&#34;value&#34;)
                end if
            next
        end if
    End Function

&#39;-----------------------------------------------------------
    Private Function hasValue(prop)
        dim propValue
        dim relships

        hasValue = false
        propValue = prop.getNamedStringValue(&#34;value&#34;)
        if Len(propValue) &#62; 0 then
            hasValue = true
        else
            set relships = prop.getNeighbourRelationships(0, hasValueType)
            if isValid(relships) then
                hasValue = true
            else
                set relships = prop.getNeighbourRelationships(0, hasValue2Type)
                if isValid(relships) then
                    hasValue = true
                end if
            end if
        end if

    End Function

&#39;-----------------------------------------------------------
    Private Function getProperties(inst)                  &#39; as IMetisCollection of IMetisInstance
        dim prop, props
        dim i, removed

        set getProperties = Nothing
        if isEnabled(inst) then
            set props = inst.getNeighbourObjects(0, hasPropertyType, propertyType)
            if isValid(props) then
                i = 1
                removed = false
                for each prop in props
                    if not hasValue(prop) then
                        props.removeAt(i)
                        removed = true
                    end if
                    if not removed then
                        i = i + 1
                    end if
                next
                set props = getInheritedProperties(inst, props)
            end if
            set getProperties = props
        end if

    End Function

&#39;-----------------------------------------------------------
    Private Function getInheritedProperties(inst, props)  &#39; as IMetisCollection of IMetisInstance
        dim rel, rels
        dim prop, parentProps
        dim parentInst

        set rels = inst.getNeighbourRelationships(0, isType)
        for each rel in rels
            set parentInst = rel.target
            if isEnabled(parentInst) then
                set parentProps = parentInst.getNeighbourObjects(0, hasPropertyType, propertyType)
                if isValid(parentProps) then
                    for each prop in parentProps
                        if not instanceByNameInList(prop, props) then
                            props.addLast prop
                        end if
                    next
                end if
                set props = getInheritedProperties(parentInst, props)
            end if
        next
        set getInheritedProperties = props
    End Function

&#39;-----------------------------------------------------------
    Private Sub Class_Initialize()
        &#39; Context variables
        set currentModel        = metis.currentModel
        set currentModelView    = currentModel.currentModelView
        set currentInstance     = currentModel.currentInstance
        set currentInstanceView = currentModelView.currentInstanceView
        &#39; Types
        set objectType      = metis.findType(&#34;http://xml.activeknowledgemodeling.com/eka/languages/eka_object.kmd#ObjType_EKA:Object_UUID&#34;)
        set propertyType    = metis.findType(&#34;http://xml.activeknowledgemodeling.com/eka/languages/eka_property.kmd#ObjType_EKA:Property_UUID&#34;)
        set hasPropertyType = metis.findType(&#34;http://xml.activeknowledgemodeling.com/eka/languages/eka_relships.kmd#RelType_EKA:HasProperty_UUID&#34;)
        set isType          = metis.findType(&#34;http://xml.activeknowledgemodeling.com/eka/languages/eka_relships.kmd#RelType_EKA:Is_UUID&#34;)
        set hasValueType    = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/cvw_relships.kmd#RelType_CVW:hasValue_UUID&#34;)
        set hasValue2Type   = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/cvw_relships.kmd#RelType_CVW:hasValue2_UUID&#34;)

    End Sub

&#39;-----------------------------------------------------------
    Public Sub Class_Terminate()
    End Sub

End Class
</string>
  </valueset>
 </object>

 <object id="_002aspt01b7t9qc4bsm6">
  <valueset size="10" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="../languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Class EKA_Context
</string>
   <string name="description"></string>
   <integer name="dbms-admin.commitFlag">0</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20070820 131757976</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="comments"></string>
   <string name="script">option explicit

&#39;-----------------------------------------------------------
&#39;-----------------------------------------------------------
Class EKA_Context

    Public contextMode                      &#39; String
    Public modelViewName                    &#39; String
    Public modelObjectType                  &#39; IMetisType
    Public currentModel
    Public currentModelView
    Public currentInstance
    Public currentInstanceView
    Public contextInstance
    Public forceSearch

    Private model
    Private modelView
    Private contextType                     &#39; IMetisType
    Private propertyType                    &#39; IMetisType
    Private hasPropertyType                 &#39; IMetisType
    Private hasModelContextType             &#39; IMetisType
    Private hasContentModelType             &#39; IMetisType
    Private hasProjectModelType             &#39; IMetisType
    Private specContainerType               &#39; IMetisType
    Private windowType                      &#39; IMetisType
    Private window2Type                     &#39; IMetisType
    Private anyObjectType                   &#39; IMetisType
    Private is_repository                   &#39; Boolean

   &#39;---------------------------------------------------------------------------------------------------
    Public Property Get contentModel
        set contentModel = getContentModel(forceSearch)
    End Property

   &#39;---------------------------------------------------------------------------------------------------
    Public Property Get modelObject
        dim contModel

        set modelObject = Nothing
        set contModel   = getContentModel(forceSearch)
        if isEnabled(contModel) then
            set modelObject = metis.findInstance(contModel.uri)
        end if
    End Property

&#39;-----------------------------------------------------------------
    Public Property Get isRepository
        isRepository = is_repository
    End Property

&#39;-----------------------------------------------------------------
    Private Function findModelObject(instModel, modelObjectType)
        dim inst, instances, obj

        set findModelObject = Nothing
        set obj = metis.findInstance(instModel.uri)
        set instances = obj.parts
        for each inst in instances
            if isEnabled(inst) then
                if inst.type.uri = modelObjectType.uri then
                    set findModelObject = inst
                    exit for
                end if
            end if
        next
        if not isEnabled(findModelObject) then
            set findModelObject = metis.findInstance(instModel.uri)
        end if
    End function

&#39;-----------------------------------------------------------------
    Public Function getProjectModel(doFind, contextMode, modelObjectType, modelViewName)
        dim wObject
        dim connector, connectors
        dim model, instModel, parentModel
        dim rel

        set getProjectModel = Nothing

        set wObject = findWorkWindow(currentInstanceView)
        if isEnabled(wObject) then
            if not doFind then
                &#39; Check if content model is connected via a relationship
                set connectors = wObject.getNeighbourObjects(0, hasProjectModelType, anyObjectType)
                if connectors.count &#62; 0 then
                    set connector = connectors(1)
                    set getProjectModel = getModelFromConnector(connector)
                    exit function
                end if
            end if
        end if

        if isEnabled(wObject) then
            set parentModel = wObject.ownerModel
            select case contextMode
            case &#34;CurrentModel&#34;
                &#39; Model object is returned
                if isEnabled(modelObjectType) then
                    set getProjectModel = findModelObject(parentModel, modelObjectType)
                end if
            case &#34;SubModel&#34;
                &#39; Model is returned
                if Len(modelViewName) &#62; 0 then
                    set connector = findInstModel2(contextMode, modelViewName)
                    if isEnabled(connector) then
                        set instModel = getModelFromConnector(connector)
                        set model = wObject.ownerModel
                        set rel = model.newRelationship(hasProjectModelType, wObject, connector)
                    end if
                else
                    set instModel = getInstModel(contextMode, &#34;&#34;)
                end if
                if isEnabled(instModel) then
                    set getProjectModel = instModel
                else
                    set getProjectModel = parentModel
                end if
            case &#34;Repository&#34;
                &#39; Model object is returned
                if isEnabled(modelObjectType) then
                    set getContentModel = findModelObject(parentModel, modelObjectType)
                    is_repository = true
                end if
            end select
        end if
    End Function

&#39;-----------------------------------------------------------------
    Private Function getContentModel(doFind)
        dim modelUri, model
        dim context, contexts
        dim prop, properties
        dim modelObjectTypeUri
        dim parentModel, instModel
        dim contextCont, contextConts
        dim contextContView
        dim connector, connectors
        dim child, children
        dim wObject
        dim rel

        set getContentModel = Nothing

        set wObject = findWorkWindow(currentInstanceView)
        if isEnabled(wObject) then
            if not doFind then
                &#39; Check if content model is connected via a relationship
                set connectors = wObject.getNeighbourObjects(0, hasContentModelType, anyObjectType)
                if connectors.count &#62; 0 then
                    set connector = connectors(1)
                    set getContentModel = getModelFromConnector(connector)
                    exit function
                end if
            end if
            set parentModel = wObject.ownerModel
            set contextConts = wObject.getNeighbourObjects(0, hasModelContextType, specContainerType)
            if contextConts.count &#62; 0 then
                set contextCont = contextConts(1)
            end if
        else
            set parentModel = metis.currentModel
        end if

        if isEnabled(contextCont) then
            set contextContView = contextCont.views(1)
            set children = contextContView.children
            if isValid(children) then
                for each child in children
                    if hasInstance(child) then
                        if child.instance.type.uri = contextType.uri then
                            set context = child.instance
                            exit for
                        end if
                    end if
                next
            end if
        end if

        if isEnabled(context) then
            set properties = context.getNeighbourObjects(0, hasPropertyType, propertyType)
            for each prop in properties
                if prop.title = &#34;ContextMode&#34; then
                    contextMode = prop.getNamedStringValue(&#34;value&#34;)
                elseif prop.title = &#34;ContentModelView&#34; then
                    modelViewName = prop.getNamedStringValue(&#34;value&#34;)
                elseif prop.title = &#34;ModelObjectType&#34; then
                    modelObjectTypeUri = prop.getNamedStringValue(&#34;value&#34;)
                    if Len(modelObjectTypeUri) &#62; 0 then
                        set modelObjectType = metis.findType(modelObjectTypeUri)
                    end if
                end if
            next
            select case contextMode
            case &#34;CurrentModel&#34;
                &#39; Model object is returned
                if isEnabled(modelObjectType) then
                    set getContentModel = findModelObject(parentModel, modelObjectType)
                end if
            case &#34;SubModel&#34;
                &#39; Model is returned
                if Len(modelViewName) &#62; 0 then
                    if isEnabled(contextInstance) then
                        set instModel = contextInstance.ownerModel
                    else
                        set connector = findInstModel2(contextMode, modelViewName)
                        if isEnabled(connector) then
                            set instModel = getModelFromConnector(connector)
                            if isEnabled(wObject) then
                                set model = wObject.ownerModel
                                set rel = model.newRelationship(hasContentModelType, wObject, connector)
                            end if
                        end if
                    end if
                else
                    set instModel = getInstModel(contextMode, &#34;&#34;)
                end if
                if isEnabled(instModel) then
                    set getContentModel = instModel
                else
                    set getContentModel = parentModel
                end if
            case &#34;Repository&#34;
                &#39; Model object is returned
                if isEnabled(modelObjectType) then
                    set getContentModel = findModelObject(parentModel, modelObjectType)
                    is_repository = true
                end if
            end select
        end if

    End Function

&#39;-----------------------------------------------------------
    Private Function getModelFromConnector(connector)
        dim container, containers
        dim part, parts
        dim mdl

        set getModelFromConnector = Nothing
        set containers = connector.parts
        if containers.count &#62; 0 then
            for each container in containers
                if isEnabled(container) then
                    set parts = container.parts
                    for each part in parts
                        set getModelFromConnector = part.ownerModel
                        exit for
                    next
                    exit for
                end if          
            next
        end if
    End Function

&#39;-----------------------------------------------------------
    Private Sub Class_Initialize()
        dim view, views

        set currentModel        = metis.currentModel
        set currentModelView    = currentModel.currentModelView
        set currentInstance     = currentModel.currentInstance
        set currentInstanceView = currentModelView.currentInstanceView
        if not isValid(currentInstanceView) and isEnabled(currentInstance) then
            set views = currentInstance.views
            for each view in views
                if isInView(view, modelView) then
                    set currentInstanceView = view
                end if
            next
        end if
        set contextInstance     = Nothing
        set contextType         = metis.findType(&#34;http://xml.activeknowledgemodeling.com/eka/languages/eka_context.kmd#ObjType_EKA:Context_UUID&#34;)
        set propertyType        = metis.findType(&#34;http://xml.activeknowledgemodeling.com/eka/languages/eka_property.kmd#ObjType_EKA:Property_UUID&#34;)
        set hasPropertyType     = metis.findType(&#34;http://xml.activeknowledgemodeling.com/eka/languages/eka_relships.kmd#RelType_EKA:HasProperty_UUID&#34;)
        set hasModelContextType = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/spec_relships.kmd#RelType_CVW:hasModelContext_UUID&#34;)
        set hasContentModelType = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/spec_relships.kmd#RelType_CVW:hasModelContext2_UUID&#34;)
        set hasProjectModelType = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/spec_relships.kmd#RelType_CVW:hasProjectModel_UUID&#34;)
        set specContainerType   = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/spec_objects.kmd#ObjType_CVW:Specification_Container_UUID&#34;)
        set windowType          = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/view_objects.kmd#UiType_CVW:Workarea_UUID&#34;)
        set window2Type         = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/view_objects.kmd#UiType_CVW:Workarea2_UUID&#34;)
        set anyObjectType       = metis.findType(&#34;metis:stdtypes#oid1&#34;)
        is_repository = false
        forceSearch = false
    End Sub

End Class

</string>
  </valueset>
 </object>

 <object id="_002aspt01b7t9qdkqel6">
  <valueset size="10" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="../languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Class EKA_Globals</string>
   <string name="description"></string>
   <integer name="dbms-admin.commitFlag">0</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20080327 132706034</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="comments"></string>
   <string name="script">option explicit


&#39;-----------------------------------------------------------
&#39;-----------------------------------------------------------
Class EKA_Globals


    Private Sub Class_Initialize()

        if not isEmpty(ekaGlobalsInitialized) then exit Sub

        &#39; Object types
        set GLOBAL_Type_AnyObject          = metis.findType(&#34;metis:stdtypes#oid1&#34;)
        set GLOBAL_Type_EkaSpace           = metis.findType(&#34;http://xml.activeknowledgemodeling.com/eka/languages/eka_space.kmd#ObjType_EKA:Space_UUID&#34;)
        set GLOBAL_Type_EkaProject         = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/project.kmd#AKM_Project&#34;)
        set GLOBAL_Type_EkaElement         = metis.findType(&#34;http://xml.activeknowledgemodeling.com/eka/languages/eka_element.kmd#ObjType_EKA:Element_UUID&#34;)
        set GLOBAL_Type_EkaObject          = metis.findType(&#34;http://xml.activeknowledgemodeling.com/eka/languages/eka_object.kmd#ObjType_EKA:Object_UUID&#34;)
        set GLOBAL_Type_EkaProperty        = metis.findType(&#34;http://xml.activeknowledgemodeling.com/eka/languages/eka_property.kmd#ObjType_EKA:Property_UUID&#34;)
        set GLOBAL_Type_EkaPropertyView    = metis.findType(&#34;http://xml.activeknowledgemodeling.com/eka/languages/eka_property.kmd#ObjType_EKA:PropertyView_UUID&#34;)
        set GLOBAL_Type_EkaSymbol          = metis.findType(&#34;http://xml.activeknowledgemodeling.com/eka/languages/eka_value.kmd#ObjType_EKA:Symbol_UUID&#34;)
        set GLOBAL_Type_EkaValue           = metis.findType(&#34;http://xml.activeknowledgemodeling.com/eka/languages/eka_value.kmd#ObjType_EKA:StringValue_UUID&#34;)
        &#39; Relationship types
        set GLOBAL_Type_AnyRelationship    = metis.findType(&#34;metis:stdtypes#oid101&#34;)
        set GLOBAL_Type_EkaRelationship    = metis.findType(&#34;http://xml.activeknowledgemodeling.com/eka/languages/symbol_relships.kmd#RelType_EKA:Relationship_UUID&#34;)
        set GLOBAL_Type_EkaEquals          = metis.findType(&#34;http://xml.activeknowledgemodeling.com/eka/languages/eka_relships.kmd#RelType_EKA:Equals_UUID&#34;)
        set GLOBAL_Type_EkaIs              = metis.findType(&#34;http://xml.activeknowledgemodeling.com/eka/languages/eka_relships.kmd#RelType_EKA:Is_UUID&#34;)
        set GLOBAL_Type_EkaHasMember       = metis.findType(&#34;http://xml.activeknowledgemodeling.com/eka/languages/eka_relships.kmd#RelType_EKA:Member_UUID&#34;)
        set GLOBAL_Type_EkaHasPart         = metis.findType(&#34;http://xml.activeknowledgemodeling.com/eka/languages/eka_relships.kmd#RelType_EKA:Part_UUID&#34;)
        set GLOBAL_Type_EkaHasProperty     = metis.findType(&#34;http://xml.activeknowledgemodeling.com/eka/languages/eka_relships.kmd#RelType_EKA:HasProperty_UUID&#34;)
        set GLOBAL_Type_EkaHasParameter    = metis.findType(&#34;http://xml.activeknowledgemodeling.com/eka/languages/eka_relships.kmd#RelType_EKA:HasParameter_UUID&#34;)
        set GLOBAL_Type_EkaHasValue        = metis.findType(&#34;http://xml.activeknowledgemodeling.com/eka/languages/eka_relships.kmd#RelType_EKA:HasValue_UUID&#34;)
        set GLOBAL_Type_EkaHasValue2       = metis.findType(&#34;http://xml.activeknowledgemodeling.com/eka/languages/eka_relships.kmd#RelType_EKA:HasValue2_UUID&#34;)
        set GLOBAL_Type_EkaHasDefinition   = metis.findType(&#34;http://xml.activeknowledgemodeling.com/eka/languages/eka_relships.kmd#RelType_EKA:HasDefinition_UUID&#34;)
        set GLOBAL_Type_EkaHasAllowedValue = metis.findType(&#34;http://xml.activeknowledgemodeling.com/eka/languages/eka_relships.kmd#RelType_EKA:HasAllowedValue_UUID&#34;)
        set GLOBAL_Type_EkaHasIcon         = metis.findType(&#34;http://xml.activeknowledgemodeling.com/eka/languages/symbol_relships.kmd#RelType_EKA:HasIcon_UUID&#34;)
        set GLOBAL_Type_EkaHasSymbol       = metis.findType(&#34;http://xml.activeknowledgemodeling.com/eka/languages/symbol_relships.kmd#RelType_EKA:HasSymbol_UUID&#34;)
        &#39; Methods
        set GLOBAL_Mtd_EkaEditProperties   = metis.findMethod(&#34;http://xml.activeknowledgemodeling.com/eka/operations/virtual_methods.kmd#Method_EKA:editProperties_UUID&#34;)
        set GLOBAL_Mtd_EkaSetSymbol        = metis.findMethod(&#34;http://xml.activeknowledgemodeling.com/eka/operations/eka_methods.kmd#Method_EKA:SetSymbol_UUID&#34;)
        set GLOBAL_Mtd_EkaSetTypeView      = metis.findMethod(&#34;http://xml.activeknowledgemodeling.com/eka/operations/eka_methods.kmd#Method_EKA:SetTypeView_UUID&#34;)

    End Sub
    
End Class

</string>
  </valueset>
 </object>

 <object id="_002aspt01b7t9qh92bnn">
  <valueset size="10" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="../languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Class EKA_Property
</string>
   <string name="description"></string>
   <integer name="dbms-admin.commitFlag">0</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20070820 123548154</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="comments"></string>
   <string name="script">option explicit

Function ekaGetPropertyLabel
    on error resume next
    dim ekaProp

    ekaGetPropertyLabel = &#34;&#34;
    set ekaProp = new EKA_Property
    set ekaProp.metisObject = metis.currentModel.currentInstance
    ekaGetPropertyLabel = ekaProp.Label
    set ekaProp = Nothing

End Function

Function ekaGetPropertyIcon
    on error resume next
    dim ekaProp

    ekaGetPropertyIcon = &#34;&#34;
    set ekaProp = new EKA_Property
    set ekaProp.metisObject = metis.currentModel.currentInstance
    ekaGetPropertyIcon = ekaProp.getIcon
    set ekaProp = Nothing

End Function

&#39;-----------------------------------------------------------
&#39;-----------------------------------------------------------
Class EKA_Property

    Public metisObject

    Private IsType
    Private PropertyType
    Private PropertyIcon
    Private ValueIcon
    Private PropertyAndValueIcon
    Private types_ok

&#39;-----------------------------------------------------------
    Public Property Let Name(strName)
        if isEnabled(metisObject) then
            call metisObject.setNamedStringValue(&#34;name&#34;, strName)
        end if
    End Property

    Public Property Get Name
        if isEnabled(metisObject) then
            Name = metisObject.getNamedStringValue(&#34;name&#34;)
        end if
    End Property

&#39;-----------------------------------------------------------
    Public Property Let Value(strVal)
        on error resume next
        if isEnabled(metisObject) then
            call metisObject.setNamedStringValue(&#34;value&#34;, strVal)
            call metisObject.setNamedStringValue(&#34;tempvalue&#34;, strVal)
        end if
    End Property

    Public Property Get Value
        if isEnabled(metisObject) then
            Value = metisObject.getNamedStringValue(&#34;value&#34;)
        end if
    End Property

&#39;-----------------------------------------------------------
    Public Property Get Label
        if isEnabled(metisObject) then
            if Len(Name) &#62; 0 then
                Label = Name
            elseif types_ok then
                Label = getValue(metisObject)
            end if
        end if
    End Property

&#39;-----------------------------------------------------------
    Private Function getValue(inst)
        dim value
        dim prop, parentProps

        getValue = &#34;&#34;
        if isEnabled(inst) then
            value = inst.getNamedStringValue(&#34;value&#34;)
            if Len(value) = 0 then
                set parentProps = inst.getNeighbourObjects(1, IsType, PropertyType)
                for each prop in parentProps
                    if isEnabled(prop) then
                        value = getValue(prop)
                        if Len(value) &#62; 0 then
                            getValue = value
                            exit for
                        end if
                    end if
                next
            else
                getValue = value
            end if
        end if
    End Function

&#39;-----------------------------------------------------------
    Public Function getIcon
    
            getIcon = PropertyIcon
            if Len(Name) &#62; 0 and Len(Value) &#62; 0 then
                getIcon = PropertyAndValueIcon
            elseif Len(Value) &#62; 0 then
                getIcon = ValueIcon
            end if

    End Function

&#39;-----------------------------------------------------------
    Public Sub Class_Initialize()
        types_ok = false
        set PropertyType = metis.findType(&#34;http://xml.activeknowledgemodeling.com/eka/languages/eka_property.kmd#ObjType_EKA:Property_UUID&#34;)
        if isEnabled(PropertyType) then
            set IsType = metis.findType(&#34;http://xml.activeknowledgemodeling.com/eka/languages/eka_relships.kmd#RelType_EKA:Is_UUID&#34;)
            if isEnabled(IsType) then
                types_ok = true
            end if
        end if
        PropertyIcon         = &#34;http://xml.activeknowledgemodeling.com/eka/views/symbols/productproperty.svg#oid1&#34;
        ValueIcon            = &#34;http://xml.activeknowledgemodeling.com/eka/views/symbols/productmethod.svg#oid1&#34;
        PropertyAndValueIcon = &#34;http://xml.activeknowledgemodeling.com/eka/views/symbols/productmodule.svg#oid1&#34;
        if not types_ok then
            MsgBox &#34;Initialization of EKA_Property failed!&#34;
        end if
    End Sub

&#39;-----------------------------------------------------------
    Public Sub Class_Terminate()
    End Sub


End Class
&#39;-----------------------------------------------------------
&#39;-----------------------------------------------------------
</string>
  </valueset>
 </object>

 <object id="_002asqb014ve34ijbaoe">
  <valueset size="10" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="../languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Class CVW_Rating</string>
   <string name="description"></string>
   <integer name="dbms-admin.commitFlag">0</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20070903 104631347</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="comments"></string>
   <string name="script">option explicit

&#39;-----------------------------------------------------------
&#39;-----------------------------------------------------------
Class CVW_Rating

    &#39; Variant parameters
    Public Title                         &#39; String
    Public noFirstObjects

    Private isTopType
    Private hasValueType
    Private hasValueConstraintType
    Private propertyType

    Private noRelTypes                   &#39; Integer
    Private relTypeList()                &#39; Collection of relationship types

    Private noObjectRules
    Private objectRules()

    Private noPathRules
    Private pathRules()

&#39;-----------------------------------------------------------
    Public Sub initRating(specModel)
        dim rel, relships
        dim obj

        set relships = specModel.getNeighbourRelationships(0, isTopType)
        if relships.count &#62; 0 then
            &#39; This is a path query - find top object types and path rules
            for each rel in relships
                set obj = rel.target
                if isEnabled(obj) then
                    call buildPathRules(obj, objectRules, noObjectRules, pathRules, noPathRules, relTypeList, noRelTypes)
                end if
            next
        end if
    End Sub

&#39;-----------------------------------------------------------
    Public Function noOfFirstObjects(inst)
        dim relRule
        dim rel, rels
        dim relDir
        dim obj
        dim count

        if isEnabled(inst) then
            count = 0
            set relRule = pathRules(1)
            set rels = inst.neighbourRelationships
            for each rel in rels
                if rel.type.inherits(relRule.relType) then
                    if rel.origin.uri = inst.uri then
                        relDir = 0
                    else
                        relDir = 1
                    end if
                    if relRule.relDir = relDir then
                        if relDir = 0 then
                            set obj = rel.target
                        else
                            set obj = rel.origin
                        end if
                        if obj.type.uri = relRule.childType.uri then
                            count = count + 1
                        end if
                    end if
                end if
            next
        end if
        noOfFirstObjects = count
    End Function

&#39;-----------------------------------------------------------
    Public Sub setRating(inst, n)
        dim i, j
        dim relRule, objRule
        dim obj
        dim rel, rels
        dim relDir
        dim count, countValue
        dim propName
        dim found
        dim objList, resultList

        noFirstObjects = n
        found = false
        set objRule = objectRules(1)
        if inst.type.inherits(objRule.instType) then
            propName = objRule.propName
            found = true
        end if
        if not found then exit sub

        set objList    = metis.newInstanceList
        call objList.addLast(inst)
        for j = 1 to noPathRules
            set resultList = metis.newInstanceList
            set relRule = pathRules(j)
            set objRule = objectRules(j+1)
            if isValid(relRule) then
                call findConnected(relRule, objRule, objList, resultList, 2)
            end if
            set objList = resultList
        next
    End Sub

&#39;-----------------------------------------------------------
    Public Sub countRating(inst, mode)
        dim i, j
        dim relRule, objRule
        dim obj
        dim rel, rels
        dim relDir
        dim count, countValue
        dim propName
        dim found
        dim objList, resultList

        found = false
        set objRule = objectRules(1)
        if inst.type.inherits(objRule.instType) then
            propName = objRule.propName
            found = true
        end if
        if not found then exit sub

        set objList    = metis.newInstanceList
        call objList.addLast(inst)
        for j = 1 to noPathRules
            set resultList = metis.newInstanceList
            set relRule = pathRules(j)
            set objRule = objectRules(j+1)
            if isValid(relRule) then
                call findConnected(relRule, objRule, objList, resultList, mode)
            end if
            set objList = resultList
        next
    End Sub

&#39;---------------------------------------------------------------------------------------------------
    Private Sub findConnected(relRule, objRule, objList, resultList, mode)
        dim rel, rels
        dim relDir
        dim obj, obj2
        dim propName
        dim count, countValue
        dim prop, propType
        dim sval, rating
        dim testArray

        propName = objRule.propName
        for each obj in objList
            set rels = obj.neighbourRelationships
            for each rel in rels
                if rel.type.inherits(relRule.relType) then
                    if rel.origin.uri = obj.uri then
                        relDir = 0
                    else
                        relDir = 1
                    end if
                    if relRule.relDir = relDir then
                        if relDir = 0 then
                            set obj2 = rel.target
                        else
                            set obj2 = rel.origin
                        end if
                        if obj2.type.uri = relRule.childType.uri then
                            call resultList.addLast(obj2)
                            if Len(propName) &#62; 0 then
                                set prop = obj2.type.getProperty(propName)
                                set propType = prop.type
                                if propType.isString then
                                    if mode = 0 then
                                        call obj2.setNamedStringValue(propName, &#34;&#34;)
                                    elseif mode = 1 then
                                        sval = obj2.getNamedStringValue(propName)
                                        if Len(sval) &#62; 0 then
                                            count = CInt(sval)
                                        else
                                            count = 0
                                        end if
                                        call obj2.setNamedStringValue(propName, count + 1)
                                    elseif mode = 2 then
                                        sval = obj2.getNamedStringValue(propName)
                                        if Len(sval) = 0 then sval = &#34;0&#34;
                                        if Len(sval) &#62; 0 then
                                            testArray = Split(sval, &#34; &#34;, -1, 1)
                                            if UBound(testArray, 1) = 0 then
                                                rating  = sval &#38; &#34; of &#34; &#38; noFirstObjects
                                                call obj2.setNamedStringValue(propName, rating)
                                            end if
                                        end if
                                    end if
                                end if
                            end if
                        end if
                    end if
                end if
            next
        next
    End Sub

&#39;---------------------------------------------------------------------------------------------------
    Private Sub buildPathRules(obj1, objList, noObjList, relList, noRelList, excludeRelTypeList, noRelTypes)
        dim obj2, rel, rels
        dim relDir
        dim type1, type2, relType, excludeRelType
        dim cvwRule, isTopType
        dim i, exclude

        if isEnabled(obj1) then
            call buildInstRules(obj1, objList, noObjList, hasValueConstraintType)
            set rels = obj1.neighbourRelationships
            for each rel in rels
                if isEnabled(rel) then
                    exclude = false
                    for i = 1 to noRelTypes
                        set excludeRelType = excludeRelTypeList(i)
                        if isEnabled(excludeRelType) then
                            if excludeRelType.uri = rel.type.uri then
                                exclude = true
                                exit for
                            end if
                        end if
                    next
                    if not exclude then
                        call buildPathRule(rel, obj1, objList, noObjList, relList, noRelList, excludeRelTypeList, noRelTypes)
                    end if
                end if
            next
        end if
    end sub

&#39;---------------------------------------------------------------------------------------------------
    Private Sub buildPathRule(rel, obj1, objList, noObjList, relList, noRelList, excludeRelTypeList, noRelTypes)
        dim relType, relDir
        dim type1, type2, excludeRelType
        dim obj2, rel2, rels
        dim i, exclude
        dim relRule

        set relType = rel.type
        if rel.origin.uri = obj1.uri then
            relDir = 0
            set type1 = obj1.type
            set obj2 = rel.target
            set type2 = obj2.type
        elseif rel.target.uri = obj1.uri then
            relDir = 1
            set type1 = obj1.type
            set obj2 = rel.origin
            set type2 = obj2.type
        end if
        set relRule = new CVW_RelRule
        set relRule.parentType = type1
        set relRule.relType = relType
        set relRule.childType = type2
        relRule.relDir = relDir
        relRule.title = type1.title &#38; &#34;_&#34; &#38; relType.title &#38; &#34;_&#34; &#38; type2.title
        call addRuleToList(relRule, relList, noRelList)
        call buildInstRules(obj2, objList, noObjList, hasValueConstraintType)

        set rels = obj2.neighbourRelationships
        for each rel2 in rels
            if isEnabled(rel2) then
                exclude = false
                for i = 1 to noRelTypes
                    if rel2.uri = rel.uri then
                        exclude = true
                        exit for
                    end if
                    set excludeRelType = excludeRelTypeList(i)
                    if isEnabled(excludeRelType) then
                        if excludeRelType.uri = rel2.type.uri then
                            exclude = true
                            exit for
                        end if
                    end if
                next
                if not exclude then
                    call buildPathRule(rel2, obj2, objList, noObjList, relList, noRelList, excludeRelTypeList, noRelTypes)
                end if
            end if
        next
    end sub

&#39;-----------------------------------------------------------
    Private Sub Class_Initialize()

        set isTopType              = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/spec_relships.kmd#RelType_CVW:isTop_UUID&#34;)
        set hasValueType           = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/cvw_relships.kmd#RelType_CVW:hasValue_UUID&#34;)
        set hasValueConstraintType = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/spec_relships.kmd#RelType_CVW:hasValueConstraint_UUID&#34;)
        set propertyType           = metis.findType(&#34;http://xml.activeknowledgemodeling.com/eka/languages/eka_property.kmd#ObjType_EKA:Property_UUID&#34;)

        noFirstObjects = 0

        noObjectRules  = 0
        noPathRules    = 0
        noRelTypes     = 3
        ReDim Preserve relTypeList(noRelTypes)
        set relTypeList(1)   = isTopType
        set relTypeList(2)   = hasValueType
        set relTypeList(3)   = hasValueConstraintType
    End Sub

&#39;-----------------------------------------------------------
    Public Sub Class_Terminate()
    End Sub

End Class

</string>
  </valueset>
 </object>

 <object id="_002asqb01632nafng64n">
  <valueset size="10" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="../languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Function getRatingColor</string>
   <string name="description"></string>
   <integer name="dbms-admin.commitFlag">0</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20070903 110608166</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="comments"></string>
   <string name="script">option explicit


Function getRatingColor(propName)
    dim model, inst
    dim ratingText
    dim testArray
    dim rating, all

    getRatingColor = &#34;white&#34;

    set model = metis.currentModel
    set inst  = model.currentInstance

    ratingText = inst.getNamedStringValue(propName)
    testArray = Split(ratingText, &#34; &#34;, -1, 1)
    if UBound(testArray, 1) &#62; 1 then
        rating = testArray(0)
        all    = testArray(2)
        if rating = all then
            getRatingColor = &#34;green&#34;
        elseif rating = 0 then
            getRatingColor = &#34;red&#34;
        else
            getRatingColor = &#34;yellow&#34;
        end if
    end if
End Function
</string>
  </valueset>
 </object>

 <relationship id="_002asqd011lc5usdslfh">
  <valueset size="7" xlink:role="type" xlink:title="Depends on" xlink:href="../../eka/languages/eka_relships.kmd#RelType_EKA:DependsOn_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <integer name="dbms-admin.commitFlag">1</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20070905 094823614</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <integer name="connectionStrength">100</integer>
   <string name="name"></string>
  </valueset>
  <origin seq="0" xlink:role="object" xlink:title="Class CVW_ParameterManager" xlink:href="#_002aso00190aa1fag2qn"/>
  <target seq="0" xlink:role="object" xlink:title="Class IRTV_Config" xlink:href="#_002asnu015d0g0nfq0ql"/>
 </relationship>

 <object id="_002asr000rddf0mfe626">
  <valueset size="10" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="../languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Class Rule_Globals</string>
   <string name="description"></string>
   <integer name="dbms-admin.commitFlag">0</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20070924 112225982</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="comments"></string>
   <string name="script">option explicit

    Public RuleGlobalsInitialized

    &#39; Rule types
    Public GLOBAL_Type_Rule &#39; EKA rule, generic
    Public GLOBAL_Type_Expr &#39; Rule (script)
    public GLOBAL_Type_Script &#39; Script
    Public GLOBAL_Type_Action &#39; Task
    Public GLOBAL_Type_Condition &#39; condition
    Public GLOBAL_Type_inputTo1 &#39; has input
    Public GLOBAL_Type_inputTo2 &#39; has input
    Public GLOBAL_Type_inputTo3 &#39; has input
    Public GLOBAL_Type_outputTo &#39; has output
    Public GLOBAL_Type_inputToExpr1 &#39; has input
    Public GLOBAL_Type_inputToExpr2 &#39; has input
    Public GLOBAL_Type_outputFromExpr  &#39; has output
    Public GLOBAL_Type_hasExpr &#39; works on 
    Public GLOBAL_Type_hasRule &#39; works on
    Public GLOBAL_Type_subjectOf 
    Public GLOBAL_Type_ifThen &#39; ifThen, inherits trigger
    Public GLOBAL_Type_hasAction &#39; points to task
    Public GLOBAL_Type_hasCondition &#39; points to condition

    &#39; Methods
    Public GLOBAL_Method_RuleExecute
    Public GLOBAL_Method_ExprExecute


&#39;-----------------------------------------------------------
&#39;-----------------------------------------------------------
Class Rule_Globals


    Private Sub Class_Initialize()
        dim ekaGlobals

        if RuleGlobalsInitialized then exit Sub

        set ekaGlobals = new EKA_Globals

        &#39; Rule types
        set GLOBAL_Type_Rule      = metis.findType(&#34;http://xml.activeknowledgemodeling.com/eka/languages/eka_rule.kmd#ekaRule&#34;)
        set GLOBAL_Type_Expr      = metis.findType(&#34;http://xml.activeknowledgemodeling.com/rule/languages/rule_expression.kmd#expression&#34;)
        set GLOBAL_Type_Script		= metis.findType(&#34;http://xml.activeknowledgemodeling.com/rule/languages/script.kmd#Script&#34;)
        set GLOBAL_Type_Action    = metis.findType(&#34;http://xml.activeknowledgemodeling.com/eka/languages/eka_task.kmd#ekaTask&#34;)
        set GLOBAL_Type_Condition = metis.findType(&#34;http://xml.activeknowledgemodeling.com/rule/languages/rule_condition.kmd#condition&#34;)
      
        set GLOBAL_Type_inputTo1  = metis.findType(&#34;http://xml.activeknowledgemodeling.com/eka/languages/has_parameter.kmd#Has_input&#34;)
        set GLOBAL_Type_inputTo2  = GLOBAL_Type_inputTo1
        set GLOBAL_Type_inputTo3  = GLOBAL_Type_inputTo1
        set GLOBAL_Type_outputTo  = metis.findType(&#34;http://xml.activeknowledgemodeling.com/eka/languages/has_parameter.kmd#Has_output&#34;)
        set GLOBAL_Type_inputToExpr1   = GLOBAL_Type_inputTo1
        set GLOBAL_Type_inputToExpr2   = GLOBAL_Type_inputTo1
        set GLOBAL_Type_outputFromExpr = GLOBAL_Type_outputTo

        set GLOBAL_Type_hasRule   = metis.findType(&#34;http://xml.activeknowledgemodeling.com/eka/languages/eka_relships.kmd#works_on&#34;)
        set GLOBAL_Type_subjectOf = GLOBAL_Type_hasRule
        set GLOBAL_Type_hasExpr   = GLOBAL_Type_hasRule
        
        set GLOBAL_Type_ifThen    = metis.findType(&#34;http://xml.activeknowledgemodeling.com/rule/languages/rule.kmd#if_then&#34;)
        set GLOBAL_Type_hasAction = metis.findType(&#34;http://xml.activeknowledgemodeling.com/rule/languages/rule.kmd#has_action&#34;)
        set GLOBAL_Type_hasCondition = metis.findType(&#34;http://xml.activeknowledgemodeling.com/rule/languages/rule.kmd#has_condition&#34;)

        &#39; Methods
        set GLOBAL_Method_RuleExecute = metis.findMethod(&#34;http://xml.activeknowledgemodeling.com/rule/operations/rule_methods.kmd#evaluateRule&#34;)
        set GLOBAL_Method_ExprExecute = metis.findMethod(&#34;http://xml.activeknowledgemodeling.com/rule/operations/rule_methods.kmd#evaluateExpression&#34;)

        RuleGlobalsInitialized = true

    End Sub
    
End Class


</string>
  </valueset>
 </object>

 <object id="_002asr000re02hqan45t">
  <valueset size="10" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="../languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Class Rule</string>
   <string name="description"></string>
   <integer name="dbms-admin.commitFlag">0</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20080226 103511875</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="comments"></string>
   <string name="script">option explicit
&#39;-----------------------------------------------------------
&#39;-----------------------------------------------------------
Class Rule


    &#39; Variant parameters
    Public Title                        &#39; String

    &#39; Context variables (public)
    Public currentModel
    Public currentModelView
    Public currentInstance
    Public currentInstanceView
    Public ObjectAspectRatio
    Public contextModel
    Public ExpressionLayout

    &#39; Debug
    Public debug

    &#39; Types
    Private buttonType
    Private hasContextType
    Private specContainerType
    Private hasInstanceContextType

    Private anyObjectType

    Private modelObjectType

    Private partType
    Private requirementType
    Private specificationType

    &#39; Methods

    &#39; Arguments
    Private currentWindow
    Private configModel
    Private ruleKind &#39;- handled by type rather than attribute
    Private ExprEvaluatedToProperty
    Private RuleEvaluatedToProperty
    
    &#39; Modes
    private REQUIREMENT_TYPE
    private SPECIFICATION_TYPE
    private PART_TYPE
    
    &#39;-- IRTV config objects:
    private currentConfig
	private params
	
	Public Property Get config        &#39;IRTV_Config
		if not isValid(currentConfig) then
			if not isValid(GLOBAL_Context) then &#39; if internal not valid, then create it ..
				set currentConfig = new IRTV_Config
			else
				set currentConfig = GLOBAL_Context
			end if 
		end if
        set config = currentConfig
    End Property

    Public Property Set config(obj)
        if isValid(obj) then
            set currentConfig = obj
            set model           = currentConfig.model
			set modelView       = currentConfig.modelView
			set inst            = currentConfig.inst
			set instView        = currentConfig.instView 
        end if
    End Property
    
    Public Property Get parameters     
		if not isValid(params) then 
			set params = new CVW_ParameterManager
			set params.config = config
		end if
        set parameters = params
    End Property

    Public Property Set parameters(obj)
        if isValid(obj) then
			set params = obj
            set config = params.config
		end if
    End Property

&#39;-----------------------------------------------------------
    Public Sub execute(mode)
        dim ruleObject
        dim cvwTask

        if mode = &#34;Edit&#34; then
            set ruleObject = findRule()
            if not isEnabled(ruleObject) then
                &#39;MsgBox &#34;There is no rule connected!&#34;
                exit sub
            end if
        end if
        if isEnabled(ruleObject) then
            title = ruleObject.title
            if title = &#34;New rule&#34; then
                ruleKind = &#34;Logical rule&#34;
                set ruleObject = buildRule(ruleObject)
            elseif title = &#34;New expression&#34; then
                ruleKind = &#34;Expression&#34;
                set ruleObject = buildRule(ruleObject)
            elseif title = &#34;New service&#34; then
                ruleKind = &#34;Service&#34;
                set ruleObject = buildRule(ruleObject)
            else
				ruleKind = kind(rule)
			end if
        end if
        if isEnabled(ruleObject) then
            call openRuleWindow(ruleObject)
        end if
    End Sub

&#39;-----------------------------------------------------------
    Public Function getRules(inst)
        dim rules, noRules

        set rules = Nothing
        if inst.type.uri = GLOBAL_Type_Rule.uri then
            set rules = metis.newInstanceList
            call rules.addLast(inst)
        elseif inst.isRelationship then
            set rules = metis.newInstanceList
            noRules = getRelationshipRules(inst, rules)
        elseif inst.isObject then
            set rules = inst.getNeighbourObjects(1, GLOBAL_Type_subjectOf, GLOBAL_Type_Rule) &#39; object &#60;--works-on-- rule
        end if
        set getRules = rules
    End Function

&#39;-----------------------------------------------------------
    Private Function getRelationshipRules(relship, rules)
        dim ruleIds, ruleUri, ruleObject
        dim idArray
        dim i

        getRelationshipRules = 0
        if isEnabled(relship) then
            on error resume next
            ruleIds = relship.getNamedStringValue(&#34;ruleIds&#34;)
            if Len(ruleIds) &#62; 0 then
	            idArray = Split(ruleIds, &#34;;&#34;, -1, 1)
                i = 0
                ruleUri = &#34;&#34;
                do
                    on error resume next
                    ruleUri = idArray(i)
                    if Len(ruleUri) &#62; 0 then
                        if Left(ruleUri, 1) = &#34;#&#34; then
                            ruleUri = relship.url &#38; ruleUri
                        end if
                        set ruleObject = metis.findInstance(ruleUri)
                        if isEnabled(ruleObject) then
                            if not isValid(rules) then
                                set rules = metis.newInstanceList
                            end if
                            call rules.addLast(ruleObject)
                        end if
                    else
                        exit do
                    end if
                    i = i + 1
                    ruleUri = &#34;&#34;
                loop
            end if
        end if
        if isValid(rules) then
            getRelationshipRules = rules.count
        end if
    End Function

&#39;-----------------------------------------------------------
    Private Function findRule()
        dim r, rules
        dim ruleObject, expressionObject, serviceObject
        dim model, modelObject
        dim cvwSelectDialog

        set findRule = Nothing
        if currentInstance.type.uri = GLOBAL_Type_Rule.uri then
            set findRule = currentInstance
            exit function
        end if
        set rules = getRules(currentInstance)
        if isValid(rules) then
            &#39; Get model object
            set model = contentModel()
            if isEnabled(model) then
                set modelObject = metis.findInstance(model.uri)
                &#39; Create the rule object
                set ruleObject = modelObject.newPart(GLOBAL_Type_Rule)
                if isEnabled(ruleObject) then
                    ruleObject.title = &#34;New rule&#34;
                    rules.addLast ruleObject
                end if
                &#39; Create the expression object
                set expressionObject = modelObject.newPart(GLOBAL_Type_Expr)
                if isEnabled(expressionObject) then
                    expressionObject.title = &#34;New expression&#34;
                    &#39;call expressionObject.setNamedStringValue(&#34;ruleKind&#34;, &#34;Expression&#34;)
                    rules.addLast expressionObject
                end if
                &#39; Create the service object
                set serviceObject = modelObject.newPart(GLOBAL_Type_Script)
                if isEnabled(serviceObject) then
                    serviceObject.title = &#34;New service&#34;
                    &#39;call serviceObject.setNamedStringValue(&#34;ruleKind&#34;, &#34;Service&#34;)
                    rules.addLast serviceObject
                end if
            end if
            if rules.count = 0 then
                exit function
            else
                set cvwSelectDialog = new CVW_SelectDialog
                cvwSelectDialog.singleSelect = true
                cvwSelectDialog.title = &#34;Select dialog&#34;
                cvwSelectDialog.heading = &#34;Select rule&#34;
                set rules = cvwSelectDialog.show(rules)
                if isValid(rules) then
                    if rules.count = 1 then
                        set findRule = rules(1)
                    end if
                end if
                if isEnabled(findRule) then
                    if findRule.uri &#60;&#62; ruleObject.uri or rules.count = 0 then
                        model.deleteObject(ruleObject)
                    end if
                    if findRule.uri &#60;&#62; expressionObject.uri or rules.count = 0 then
                        model.deleteObject(expressionObject)
                    end if
                    if findRule.uri &#60;&#62; serviceObject.uri or rules.count = 0 then
                        model.deleteObject(serviceObject)
                    end if
                end if
            end if
        end if
    End Function

&#39;-----------------------------------------------------------
    Private Function buildRule(ruleObject)
        dim model, modelObject
        dim actionObject, conditionObject
        dim expressionObject, inputObject, outputObject
        dim ruleName
        dim hasRuleRel, subjectOfRel, partOfRel, ifThenRel
        dim infoObject, infoObjects
        dim ruleIds
        dim idArray
        dim hasSubject
        dim isLogical

        set buildRule = Nothing
        if not isEnabled(ruleObject) then
            exit function
        else
            &#39; Create rule object
            &#39; Get model object
            if ruleKind = &#34;Expression&#34; or ruleKind = &#34;Service&#34; then
                isLogical = false
            else
                isLogical = true
            end if
            set model = contentModel()
            if isEnabled(model) then
                set modelObject = metis.findInstance(model.uri)
                set infoObjects = model.findInstances(GLOBAL_Type_EkaObject, &#34;&#34;, &#34;&#34;)
                if isValid(infoObjects) then
                    if infoObjects.count &#62; 0 then
                        set infoObject = infoObjects(1)
                    end if
                end if
                title = ruleObject.title
                if title = &#34;New rule&#34; then
                    ruleName = &#34;Rule[&#34; &#38; currentInstance.title &#38; &#34;]&#34;
                elseif title = &#34;New expression&#34; then
                    ruleName = &#34;Expression[&#34; &#38; currentInstance.title &#38; &#34;]&#34;
                elseif title = &#34;New service&#34; then
                    ruleName = &#34;Service[&#34; &#38; currentInstance.title &#38; &#34;]&#34;
                end if
                if Len(ruleName) &#62; 0 then
                    ruleName = InputBox(&#34;Enter rule name&#34;, &#34;Input dialog&#34;, ruleName)
                    if Len(ruleName) &#62; 0 then
                        ruleObject.title = ruleName
                    else
                        exit function
                    end if
                    &#39; Connect the relationships
                    if isEnabled(infoObject) then
                        set hasRuleRel = model.newRelationship(GLOBAL_Type_hasRule, infoObject, ruleObject)
                    end if
                    hasSubject = false
                    if currentInstance.isRelationship then
                        ruleIds = currentInstance.getNamedStringValue(&#34;ruleIds&#34;)
                        if currentInstance.url = ruleObject.url then
	                        idArray = Split(ruleObject.uri, &#34;#&#34;, -1, 1)
	                        if Len(ruleIds) &#62; 0 then
                                ruleIds = ruleIds &#38; &#34;;&#34;
                            end if
                            ruleIds = ruleIds &#38; Chr(35) &#38; idArray(1)
                        else
                            ruleIds = ruleObject.uri
                        end if
                        call currentInstance.setNamedStringValue(&#34;ruleIds&#34;, ruleIds)
                        hasSubject = true
                    else
                        set subjectOfRel = model.newRelationship(GLOBAL_Type_subjectOf, currentInstance, ruleObject)
                        if isEnabled(subjectOfRel) then hasSubject = true
                    end if
                    if hasSubject then
                        if isLogical then
                            &#39; Create condition and action objects
                            set conditionObject = modelObject.newPart(GLOBAL_Type_Condition)
                            set actionObject = modelObject.newPart(GLOBAL_Type_Action)
                            if isEnabled(conditionObject) and isEnabled(actionObject) then
                                &#39; Create relationships
                                set partOfRel = model.newRelationship(GLOBAL_Type_hasCondition, ruleObject, conditionObject)
                                set partOfRel = model.newRelationship(GLOBAL_Type_hasAction, ruleObject, actionObject)
                                set ifThenRel = model.newRelationship(GLOBAL_Type_ifThen, conditionObject, actionObject)
                            end if
                        else
                            &#39; Create expression
                            set expressionObject = modelObject.newPart(GLOBAL_Type_Expr)
                            if isEnabled(expressionObject) then
                                expressionObject.title = &#34;Expression&#34;
                                &#39; Create relationship
                                set partOfRel    = model.newRelationship(GLOBAL_Type_hasExpr, ruleObject, expressionObject)
                            end if
                        end if
                    end if
                end if
            end if
            if isEnabled(ruleObject) then
                set buildRule = ruleObject
            end if
        end if
   End Function

&#39;-----------------------------------------------------------
    Public Function getSubjectOf(rule)
        dim model
        dim rel, relships
        dim r, rules, noRules

        set getSubjectOf = Nothing

        set relships = rule.getNeighbourRelationships(0, GLOBAL_Type_subjectOf)
        if relships.count &#62; 0 then
            set getSubjectOf = relships(1).origin
        else
            set model = contentModel
            set relships = model.relationships
            for each rel in relships
                if isEnabled(rel) then
                    set rules = Nothing
                    noRules = getRelationshipRules(rel, rules)
                    if noRules &#62; 0 then
                        for each r in rules
                            if r.uri = rule.uri then
                                set getSubjectOf = rel
                                exit function
                            end if
                        next
                    end if
                end if
            next
        end if
    End Function

   
	&#39; ----
	private function kind(ruleObject)
        &#39;if inheritsType(ruleObject, GLOBAL_Type_Script, config.inheritance) then
        &#39;    kind = &#34;Service&#34;
        &#39;else
        if Global_InformationManager.inheritsType(ruleObject, GLOBAL_Type_Expr) then
            kind = &#34;Expression&#34;
        else
			kind = &#34;Logical rule&#34;
        end if
	end function



&#39;-----------------------------------------------------------
&#39;   Transform rules to scripts
&#39;-----------------------------------------------------------
    Public Sub transformRulesToScripts(parentInst)
        dim r, rules
        dim intVal

        set rules = getRules(parentInst)
        if rules.count &#62; 0 then
            for each r in rules
                if isEnabled(r) then
                    call transformToScript(r)
                end if
            next
        else
            set intVal = metis.newValue
            call intVal.setInteger(1)
            call parentInst.setNamedValue(RuleEvaluatedToProperty, intVal)
        end if
    End Sub

&#39;-----------------------------------------------------------
    Public Sub transformToScript(ruleObject)
        dim expression, expressions
        dim text1, text2, text3

        if isEnabled(ruleObject) then
            ruleKind = kind(ruleObject)
            if ruleKind = &#34;Expression&#34; or ruleKind = &#34;Service&#34; then
                call transformExpressionToScript(ruleObject) &#39; HDJ added this first step
                &#39;text1 = ruleObject.getNamedStringValue(&#34;ruleInitCode&#34;)
                &#39;text2 = ruleObject.getNamedStringValue(&#34;ruleCode&#34;)
                &#39;text3 = ruleObject.getNamedStringValue(&#34;rulePostCode&#34;)
                &#39;call ruleObject.setNamedStringValue(&#34;ruleCode&#34;, text1 &#38; text2 &#38; text3)
                set expressions = ruleObject.getNeighbourObjects(0, GLOBAL_Type_hasExpr, GLOBAL_Type_Expr)               
                if expressions.count &#62; 0 then
                    set expression = expressions(1)
                    call transformExpressionToScript(expression)
                    &#39; Set complete script in rule object
                    text1 = expression.getNamedStringValue(&#34;ruleInitCode&#34;)
                    text2 = expression.getNamedStringValue(&#34;ruleCode&#34;)
                    text3 = expression.getNamedStringValue(&#34;rulePostCode&#34;)
                    call ruleObject.setNamedStringValue(&#34;ruleCode&#34;, text1 &#38; vbcrlf &#38; text2 &#38; vbcrlf &#38; text3)
                end if
            else
                call transformLogicalRuleToScript(ruleObject)
            end if
        end if
    End Sub

&#39;-------------------------returns input parameter objects of a rule (recursive)  ----------------------------------
    public function getInputs(rule)
		dim s, p, rels
		set rels = Global_InformationManager.getAllNeighbours(rule, &#34;&#34;, GLOBAL_Type_inputToExpr1, 0)
		set getInputs = metis.newInstanceList()
		for each p in rels
			if not getInputs.contains(p.target) then call getInputs.addLast(p.target)
		next
		&#39; check inherited parameters ...
		for each s in config.inheritance.supers(rule)
			for each p in Global_InformationManager.getAllNeighbours(s, &#34;&#34;, GLOBAL_Type_inputToExpr1, 0)
				if not getInputs.contains(p.target) then call getInputs.addLast(p.target)
			next
		next
        &#39; check recursively all related condititions and actions, which have to be included
        for each s in Global_InformationManager.getAllNeighbours(rule, &#34;&#34;, GLOBAL_Type_EkaHasPart, 0) &#39; by inheritance this includes has_action, has_condition
 			for each p in getInputs(s.target)
				if not getInputs.contains(p) then call getInputs.addLast(p)
			next       
        next
    end function
    
 &#39;----------------------- returns output parameter objects of a rule (recursive) ------------------------------------
    public function getOutputs(rule)
    	dim s, p, rels
		set getOutputs = metis.newInstanceList()
    	set rels = Global_InformationManager.getAllNeighbours(rule, &#34;&#34;, GLOBAL_Type_outputTo, 0)
    	for each p in rels
			if not getOutputs.contains(p.target) then call getOutputs.addLast(p.target)
		next
		&#39; check inherited parameters ...
		for each s in config.inheritance.supers(rule)
			for each p in Global_InformationManager.getAllNeighbours(s, &#34;&#34;, GLOBAL_Type_outputTo, 0)
				if not getOutputs.contains(p.target) then call getOutputs.addLast(p.target)
			next
		next
        &#39; check recursively all related conditions and actions, which have to be included
        for each s in Global_InformationManager.getAllNeighbours(rule, &#34;&#34;, GLOBAL_Type_EkaHasPart , 0)
 			for each p in getOutputs(s.target)
				if not getOutputs.contains(p) then call getOutputs.addLast(p)
			next       
        next
        
    end function

&#39; --- finds and sets the initcode and precode properties of a rule based on input parameters-----

private sub setInputs(rule, inputs, outputs)
	dim decl, value, comment, param, name, first
	first = true
	
	decl = &#34;dim parameters&#34;
	value = &#34;set parameters = new CVW_ParameterManager&#34; &#38; vbcrlf
	comment = &#34;&#39;----------------------------------------------------------------------------&#34; &#38; vbcrlf
    comment  = comment &#38; &#34;&#39; Context parameters: &#34;
      
	for each param in inputs
		name = param.getNamedStringValue(&#34;name&#34;)
		if Len(name) &#62; 0 then
			if instr(1,decl,name,1) &#60;= 0 then &#39; ignore duplicate names
				decl = decl &#38; &#34;, &#34; &#38; name
				if first then 
					first = false
					comment = comment &#38; name
				else 
					comment = comment &#38; &#34;, &#34; &#38; name 
				end if
				value = value &#38; name &#38; &#34; = parameters.getValue(&#34; &#38; Chr(34) &#38; name &#38; Chr(34) &#38; &#34;)&#34; &#38; vbcrlf 
			end if
		end if
	next
	for each param in outputs
		name = param.getNamedStringValue(&#34;name&#34;)
		if Len(name) &#62; 0 then
			if instr(1,decl,name,1) &#60;= 0 then &#39; ignore duplicate names
				decl = decl &#38; &#34;, &#34; &#38; name
				if first then 
					first = false
					comment = comment &#38; name
				else 
					comment = comment &#38; &#34;, &#34; &#38; name 
				end if
			end if
		end if
	next
    call rule.setNamedStringValue(&#34;ruleInitCode&#34;, decl &#38; vbcrlf &#38; value &#38; vbcrlf)
    call rule.setNamedStringValue(&#34;rulePreCode&#34;, comment)
end sub


&#39; --- finds and sets the postcode property of a rule based on output parameters-----
private sub setOutputs(rule, parameters)
	dim postscript, param, name
	postscript = &#34;&#34;
	for each param in parameters
		name = param.getNamedStringValue(&#34;name&#34;)
		if Len(name) &#62; 0 then	
           postScript = postScript &#38; &#34;call parameters.setValue(&#34; &#38; Chr(34) &#38; name &#38; Chr(34) &#38; &#34;, &#34; &#38; name &#38; &#34;)&#34; &#38; vbcrlf
        end if
    next
    postScript = postScript &#38; &#34;set parameters = Nothing&#34; &#38; vbcrlf
    postScript = postScript &#38; &#34;&#39; End&#34;&#38; vbcrlf
    call rule.setNamedStringValue(&#34;rulePostCode&#34;, postScript &#38; vbcrlf)
end sub
&#39;-----------------------------------------------------------
    Private Sub transformExpressionToScript(expression)
		dim inputs, outputs
		set inputs = getInputs(expression)
		set outputs = getOutputs(expression)
		call setInputs(expression, inputs, outputs)
		call setOutputs(expression, outputs)
    End Sub

&#39;-----------------------------------------------------------
    Private Sub transformLogicalRuleToScript(ruleObject)
        dim lineNo
        dim action, actions, outputs, ifThens
        dim operator, operation
        dim condition
        dim paramType, paramObj, valueObj
        dim script(), text, tt
        dim setParam
        dim i
        
        call transformExpressionToScript(ruleObject) &#39; set inputs and outputs ... HDJ added

        &#39; Find the action
        set actions = Global_InformationManager.getAllNeighbours(ruleObject, &#34;&#34;, GLOBAL_Type_hasAction, 0)
        if actions.count &#62; 0 then
            &#39;setParam = false
            text = &#34;&#34;
            for each action in actions
				set action = action.target &#39; list of relationships ...
				call transformExpressionToScript(action)
                lineNo = 0
				&#39;set action = actions(1)
				&#39;operation = &#34;setParameterValue&#34; &#39;action.getNamedStringValue(&#34;operation&#34;)
				&#39;if operation = &#34;setParameterValue&#34; then
				&#39;    setParam = true
				&#39;end if
				&#39;if Len(operation) &#62; 0 then
				ReDim Preserve script(lineNo + 5)
				lineNo = lineNo + 1
				script(lineNo) = &#34;end if&#34;
				lineNo = lineNo + 1
				if debug then
					script(lineNo) = &#34;    GLOBAL_TaskManager.perform( &#34; &#38; Chr(34)&#38; action.uri &#38; Chr(34)&#38;&#34;)&#34;
				else
					&#39;script(lineNo) = &#34;    GLOBAL_TaskManager.perform( &#34; &#38; Chr(34)&#38; action.uri &#38; Chr(34)&#38;&#34;)&#34;
					script(lineNo) = action.getNamedStringValue(&#34;ruleCode&#34;)
				end if
				&#39; get all inherited neighbours related by reltype has_output or a subtype ...
				&#39;set outputs = parameters.getAllNeighbours(action, &#34;&#34;, GLOBAL_Type_outputTo, 0) &#39;action.getNeighbourObjects(0, GLOBAL_Type_outputTo, anyObjectType)
				&#39; Parameter resolution ...
				&#39;if outputs.count &#62; 0 then
				&#39;    set valueObj = outputs(1)
				&#39;    &#39;set paramObj = getCcParameterObj(valueObj)
				&#39;    &#39;if debug then
				&#39;    &#39;    paramType = getCcParameterType(valueObj)
				&#39;    &#39;    script(lineNo) = script(lineNo) &#38; &#34;(&#34; &#38; Chr(34) &#38; paramType &#38; &#34;, &#34; &#38; Chr(34) &#38; paramObj.title &#38; Chr(34) &#38; &#34;, &#34; &#38; Chr(34) &#38; valueObj.title &#38; Chr(34) &#38; &#34;) &#34;
				&#39;    &#39;else
				&#39;        script(lineNo) = script(lineNo) &#38; &#34;(&#34; &#38; Chr(34) &#38; valueObj.name &#38; Chr(34) &#38; &#34;, &#34; &#38; Chr(34) &#38; valueObj.uri &#38; Chr(34) &#38; &#34;) &#34;
				&#39;    &#39;end if
				&#39;end if

				lineNo = lineNo + 1
				&#39; Find the conditions
				set ifThens = Global_InformationManager.getAllNeighbours(action, &#34;&#34;, GLOBAL_Type_ifThen, 1)
				tt = &#34;&#34;
				for each condition in ifThens
					set condition = condition.origin &#39; list of relships
					tt = getCondition(ruleObject, condition, tt, debug)
					if Len(tt) = 0 then exit for
					tt = tt &#38; &#34; AND &#34;
				next
				if Len(tt) &#62; 0 then
					&#39;lineNo = lineNo + 1
					script(lineNo) = &#34;if &#34;&#38;left(tt,len(tt)-5)&#38; &#34; then&#34;
					&#39;script(lineNo) = &#34;condition = &#34; &#38; left(tt,len(tt)-5)
				end if
				&#39;text = &#39;&#34;set rEngine = new RuleEngine&#34; &#38; vbCrLf
				for i = lineNo to 1 step -1
					text = text &#38; script(i) &#38; vbCrLf
				next
            next
            &#39;if setParam then
            &#39;    text = text &#38; &#34;call rEngine.includeInConfiguration&#34; &#38; vbCrLf
            &#39;end if
            &#39;text = text &#38; &#34;set rEngine = Nothing&#34; &#38; vbCrLf
            if Len(text) &#62; 0 then
                if debug then
                    &#39;msgBox text
                else
                    call ruleObject.setNamedStringValue(&#34;ruleCode&#34;, text &#38; vbcrlf) &#39;&#34;dim condition&#34; &#38; vbcrlf &#38;
                end if
            end if
        end if
    End Sub

&#39;-----------------------------------------------------------
    Private Function getCondition(ruleObject, condition, text, debug)
        dim model
        dim inputRel, inputRels
        dim rel, rels
        dim valueObj, paramObj
        dim paramType, operator
        dim conditionObj
        dim testCondition
        dim expression
        dim i, ival, intVal

        operator = condition.getNamedStringValue(&#34;operator&#34;)
        
        if operator = &#34;NOT&#34; then
            text = text &#38; &#34; NOT &#34;
        end if
        set inputRels = Global_InformationManager.getAllNeighbours(condition,&#34;&#34;, GLOBAL_Type_EkaHasPart  , 0)   &#39;condition.getNeighbourRelationships(1, GLOBAL_Type_inputTo1)
        &#39;set rels = parameters.getAllNeighbours(condition,&#34;&#34;,GLOBAL_Type_inputTo3, 0) &#39;condition.getNeighbourRelationships(1, GLOBAL_Type_inputTo3)
        operator = condition.getNamedStringValue(&#34;operator&#34;)
        &#39;for each rel in rels
        &#39;    inputRels.addLast rel
        &#39;next
        if inputRels.count = 0 then
            if not (operator = &#34;TRUE&#34; or operator = &#34;FALSE&#34;) then
                MsgBox &#34;Syntax error: &#34; &#38; vbCrLf &#38; &#34;Illegal condition in rule: &#34; &#38; Chr(34) &#38; ruleObject.title &#38; Chr(34), vbExclamation
                getCondition = &#34;&#34;
            else
                getCondition = operator
            end if
        else
            i = 0
            for each inputRel in inputRels
                i = i + 1
                set valueObj = inputRel.target &#39; origin
                if valueObj.type.uri = GLOBAL_Type_Expr.uri then
                    set expression = valueObj
                    call transformExpressionToScript(expression)
                    &#39;&#39; Execute expression
                    &#39;testCondition = &#34;FALSE&#34;
                    &#39;set intVal = metis.newValue
                    &#39;call intVal.setInteger(0)
                    &#39;call expression.setNamedValue(ExprEvaluatedToProperty, intVal)
                    &#39;set model = expression.ownerModel
                    &#39;call model.runMethodOnInst(GLOBAL_Method_ExprExecute, expression)
                    &#39;ival = expression.getNamedValue(ExprEvaluatedToProperty).getInteger
                    &#39;if ival &#62; 0 then
                    &#39;    testCondition = &#34;TRUE&#34;
                    &#39;end if
                    text = text &#38; &#34; (&#34; &#38; expression.getNamedStringValue(&#34;ruleCode&#34;)&#38; &#34;)&#34;
                else
                    &#39;set paramObj = getCcParameterObj(valueObj)
                    &#39;if debug then
                    &#39;    paramType = getCcParameterType(valueObj)
                    &#39;    text = text &#38; &#34;(getParameterValue(&#34; &#38; Chr(34) &#38; paramType &#38; Chr(34) &#38; &#34;, &#34; &#38; Chr(34) &#38; paramObj.title &#38; Chr(34) &#38; &#34;) = &#34; &#38; Chr(34) &#38; valueObj.title &#38;  Chr(34) &#38; &#34;)&#34;
                    &#39;else
                        text = text &#38; &#34;(parameters.getValue(&#34; &#38; Chr(34) &#38; valueObj.title &#38; Chr(34) &#38; &#34;) = &#34; &#38; Chr(34) &#38; valueObj.getNamedStringValue(&#34;value&#34;) &#38;  Chr(34) &#38; &#34;)&#34;
                    &#39;end if
                end if
                if i &#60; inputRels.count then
                    text = text &#38; &#34; &#34; &#38; operator &#38; &#34; &#34;
                end if
            next

            set inputRels = condition.getNeighbourRelationships(1, GLOBAL_Type_inputTo2)
            for each inputRel in inputRels
                set conditionObj = inputRel.origin
                text = text &#38; &#34; &#34; &#38; operator &#38; &#34; (&#34;
                text = getCondition(ruleObject, conditionObj, text, debug)
                text = text &#38; &#34;)&#34;
            next
            getCondition = text
        end if
    End Function

&#39;-----------------------------------------------------------
    Private Function contentModel           &#39;IMetisObject
        dim context

        &#39; Find ContentModel
        if isValid(contextModel) then
            set contentModel = contextModel
            exit function
        end if
        if isValid(currentWindow) then
            set contentModel = currentModel
            set context = new EKA_Context
            set context.currentModel        = currentModel
            set context.currentModelView    = currentModelView
            set context.currentInstance     = currentWindow.instance
            set context.currentInstanceView = currentWindow
            if isValid(context) then
                if isEnabled(context.contentModel) then
                    set contextModel = context.contentModel
                    set contentModel = contextModel
                end if
            end if
            set context = Nothing
        end if
    End Function

&#39;-----------------------------------------------------------
    Private Sub Class_Initialize()

        set currentModel        = metis.currentModel
        set currentModelView    = currentModel.currentModelView
        set currentInstance     = currentModel.currentInstance
        if not isEnabled(currentInstance) then set currentInstance = Global_Context.inst
        set currentInstanceView = currentModelView.currentInstanceView
        set currentWindow       = findWorkWindowView(currentInstanceView)
        set contextModel        = Nothing

        &#39; Initialize global variables
        if not RuleGlobalsInitialized then
			dim r
			set r = new Rule_Globals
		end if

        &#39; Types
        set buttonType       = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/action_objects.kmd#ObjType_CVW:Button_UUID&#34;)
        set hasContextType   = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/spec_relships.kmd#RelType_CVW:hasInstanceContext2_UUID&#34;)
        set hasInstanceContextType = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/spec_relships.kmd#RelType_CVW:hasInstanceContext2_UUID&#34;)

        set anyObjectType    = metis.findType(&#34;metis:stdtypes#oid1&#34;)

        set modelObjectType  = metis.findType(&#34;http://xml.activeknowledgemodeling.com/eka/languages/eka_space.kmd#ObjType_EKA:Space_UUID&#34;)

        set partType          = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cppd/languages/productelement.kmd#ObjType_CPPD:ProductElement_UUID&#34;)
        set requirementType   = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cppd/languages/productelement.kmd#ObjType_CPPD:ProductElement_UUID&#34;)
        set specificationType = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cppd/languages/productelement.kmd#ObjType_CPPD:ProductElement_UUID&#34;)

        &#39; Methods

        &#39; Model
        &#39;set inst = metis.findInstance(&#34;http://xml.chalmers.se/metamodels/cvw_cc_actions_1.kmv#_002ask601qg2tl2ra0ce&#34;)
        if not isEnabled(currentInstance) then
            set configModel  = currentInstance.ownerModel
        else
            set configModel  = currentModel
        end if

        &#39; Variables
        ExpressionLayout = &#34;http://xml.activeknowledgemodeling.com/cvw/views/matrix_layouts.kmd#_002ash3011bccb0hs5tr&#34;
        ExprEvaluatedToProperty = &#34;expressionEvaluatedTo&#34;
        RuleEvaluatedToProperty = &#34;ruleEvaluatedTo&#34;
        ruleKind = &#34;Logical rule&#34;
        ObjectAspectRatio = 1.0
        debug = false

        &#39; Modes
        REQUIREMENT_TYPE    = 1
        SPECIFICATION_TYPE  = 2
        PART_TYPE           = 3

    End Sub
    
End Class

</string>
  </valueset>
 </object>

 <object id="_002asr901869eg7jqab5">
  <valueset size="10" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="../languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Function selectAmong</string>
   <string name="description"></string>
   <integer name="dbms-admin.commitFlag">0</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20071003 114259656</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="comments"></string>
   <string name="script"> function selectAmong(tekst, singleselect, list)
  dim dia, l
  set selectAmong = Nothing
  set dia = new CVW_SelectDialog
  dia.singleSelect = singleselect
  dia.title = tekst
  dia.heading = tekst
  set l = dia.show(list)
  if isObject(l) and l.count &#62;0 then
   set selectAmong = l(1)
  end if
 end function</string>
  </valueset>
 </object>

 <object id="_002asr901apini85v53v">
  <valueset size="10" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="../languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Function isInMenu, Function getWorkarea</string>
   <string name="description"></string>
   <integer name="dbms-admin.commitFlag">0</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20071016 094435265</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="comments"></string>
   <string name="script">&#39; returns true if the view is found inside a menu pane 
 function isInMenu(objview)
isInMenu = false
 if not isEnabled(objview) then exit function
    isInMenu = true
    dim p
    set p = objview.parent
    while isEnabled(p)
        if (instr(1,p.instance.title, &#34;left&#34;,1) &#62; 0) then exit function
        if (instr(1,p.instance.title, &#34;menu&#34;,1) &#62; 0) then exit function
        if (instr(1,p.instance.title, &#34;workarea&#34;,1) &#62; 0) then
            isInMenu = false
            exit function
        elseif (instr(1,p.instance.title, &#34;workplace&#34;,1) &#62; 0) then
            isInMenu = false
            exit function
        end if
        set p = p.parent
    wend
    isInMenu = false &#39; not found ...
 end function   
 
 &#39; returns the workarea if the view is found inside such an object, 
 &#39; workplace if it is in the heading, or the leftpane object if it is in a menu
 function getWorkarea(objview)
    set getWorkarea = nothing
if not isEnabled(objview) then exit function
    dim p
    set p = objview
    do while isEnabled(p) 
if  p.instance.type.uri = &#34;http://xml.activeknowledgemodeling.com/cvw/languages/view_objects.kmd#UiType_CVW:Workarea_UUID&#34; then exit do
        set p = p.parent &#39; run through all the elements up to a workarea
    loop
    if isEnabled(p) then
 set getWorkarea = p
        set p = p.parent
        if isEnabled(p) then
 if p.instance.type.uri = &#34;http://xml.activeknowledgemodeling.com/cvw/languages/view_objects.kmd#UiType_CVW:Workarea_UUID&#34; then 
            set getWorkarea = p &#39; all elements have two workareas in their view parent hierarchy, return the second one
         end if
       end if
    end if
 end function</string>
  </valueset>
 </object>

 <object id="_002asre019rp1g5t7ru6">
  <valueset size="10" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="../languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Class EKA_InformationManager</string>
   <string name="description"></string>
   <integer name="dbms-admin.commitFlag">0</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20080404 140812109</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="comments"></string>
   <string name="script">&#39; VBScript File
dim Global_InformationManager

class EKA_InformationManager
    &#39; uses these global singleton objects:
    &#39;Global_Context
    &#39;Global_TaskManager
    &#39;Global_ViewManager

    &#39; ------- 
    &#39; Properties that links to subcomponents for managing inheritance and properties/parameters:
    private inh, params
    private infoParent, roleParent, taskParent, viewParent &#39; default parents for new elements
    private buttonParent, buttonType
    private typeParent
    
    Private Property Get inheritance   &#39;EKA_Inheritance
		if not isValid(inh) then  &#39; if internal not valid, then create it ...
		    if isValid(Global_Context) then
			    set inh = Global_Context.inheritance
	        else
	            set Global_Context = new IRTV_Config
	            set inh = Global_Context.inheritance
		    end if
		end if
		set inheritance = inh
    End Property

    Private Property Set inheritance(obj)
        if isValid(obj) then
            set inh = obj
        end if
    End Property
    
    Public Property Get parameters     
		if not isValid(params) then 
			set params = new CVW_ParameterManager
		end if
        set parameters = params
    End Property

    Public Property Set parameters(obj)
        if isValid(obj) then
			set params = obj
		end if
    End Property
    &#39; ------- 
	
    
    &#39; finds all parts and members of the obj, including Metis-parts
    public function getParts(obj)
        set getParts = metis.newInstanceList()
        dim p
        for each p in obj.parts
            call getParts.addLast(p)
        next
        for each p in getAllNeighbours(obj, &#34;&#34;, GLOBAL_Type_EkaHasMember, 0)
            if not getParts.contains(p.target) then
                call getParts.addLast(p.target)
            end if
        next
        &#39;msgbox (obj.title&#38;&#34;:&#34;&#38;obj.uri&#38;&#34; has &#34;&#38;getParts.count&#38;&#34; parts.&#34;)
    end function
    
    &#39; finds all elements that obj is part of (including membership)   
    public function getParents(obj)
        set getParents = metis.newInstanceList()
        if not isEnabled(obj) then exit function
        if isEnabled(obj.parent) then call getParents.addLast(obj.parent)
        dim p
        for each p in getAllNeighbours(obj, &#34;&#34;, GLOBAL_Type_EkaHasMember, 1) &#39; into
            if not getParents.contains(p.origin) then
                call getParents.addLast(p.origin)
            end if
        next
        &#39;msgbox (obj.title&#38;&#34;:&#34;&#38;obj.uri&#38;&#34; has &#34;&#38;getParts.count&#38;&#34; parts.&#34;)
    end function

    
     &#39; find all neighbours of a given object that has the given name and/or type (obj or rel) , using inheritance. Name = &#34;&#34; implies ignore, as do typ = nothing
     public function getAllNeighbours(object, name, typ, direction)
        on error resume next
        dim props, prop, o
        set getAllNeighbours = metis.newInstanceList()
        if (typ is nothing) or (not typ.isRelationshipType())  then
            set props = object.getNeighbourObjects(direction, Nothing, Nothing) &#39; scan all neigbours, implies that we can use the type name as property name and search for a neighbour
            for each prop in props
                if (name = &#34;&#34;) or (prop.name = name) then
                    if (typ is nothing) or inheritsType(prop, typ) then
                        if not getAllNeighbours.contains(prop) then
                            getAllNeighbours.addLast(prop)
                        end if
                    end if
                end if
           next
        else
            set props = object.getNeighbourRelationships(direction, nothing) &#39; scan all neigbours, implies that we can use the type name as property name and search for a neighbour
            for each prop in props
                if direction = 0 then 
                    set o = prop.target
                else 
                    set o = prop.origin
                end if
                if (name = &#34;&#34;) or (o.name = name) then
                    if (typ is nothing) or inheritsType(prop, typ) then
                        if not getAllNeighbours.contains(prop) then
                            getAllNeighbours.addLast(prop)
                        end if
                    end if
                end if
            next
        end if 
        &#39;for each o in inheritance.supers(object) &#39; removed April 4, 2008
        &#39;    for each prop in getAllNeighbours(o, name, typ, direction)
        &#39;        if not getAllNeighbours.contains(prop) then
        &#39;            getAllNeighbours.addLast(prop)
        &#39;        end if
        &#39;    next
        &#39;next 
    end function

    
    &#39; return true of obj is instance of type
    public function isType(byval obj, byval typ)
        isType = false
        if not isValid(obj) then exit function
        if not isValid(typ) then exit function
        if obj.type.inherits(typ) then
            isType = true
        end if
    end function

    &#39; return true if the object or one of its ancestors , is an instance of the type
    public function inheritsType(byval obj, byval typ)
        on error resume next
        inheritsType = false
        if not isValid(obj) then exit function
        if not isValid(typ) then exit function
        if isType(obj, typ) then
            inheritsType  = true
            exit function
        end if
        dim sup, s
        set sup = inheritance.supers(obj)
        if not isValid(sup) then exit function
        for each s in sup
            if isType(s, typ) then 
                inheritsType  = true
                exit function
            end if
        next
    end function

    &#39;creates a new element of the type, taking into account specifications given by typereps in addition to Metis standard
    public function newElement(typ, byref map)
        set newElement = Nothing
        if not isObject(typ) then set typ = metis.findType(typ) &#39; if string uri input
        if not isEnabled(typ) then exit function  
        &#39; add features from typereps ...
        dim rep, i
        set rep = inheritance.representative(typ) 
        if not isEnabled(rep) then
            set newElement = Global_Context.model.newObject(typ)
            call initialiseParents()
            call setParent(newElement)
            &#39; notify view manager, rule-driven task trigging etc.
            dim ev
            set ev = new CVW_Event
            ev.Action = Created
            ev.Elements = metis.newInstanceList()
            cal ev.Element.addLast(newElement)
            call Global_EventManager.eventOccured(ev)
        else
            set newElement = copyElement(rep)
        end if
    end function
    
    &#39; creates a new element based on the template
    &#39; Map contains a mapping between old elements and new, so that relationships are moved to the new structure
    public function copyElement(template)
        dim map, part, uri
        set map = CreateObject(&#34;Scripting.Dictionary&#34;)
        set copyElement = Nothing
        if not isEnabled(template) then exit function
        set copyElement = getContentModel.newObject(template.type)
        call initialiseParents() 
        call setParent(copyElement)
        if not isObject(map) then set map = CreateObject(&#34;Scripting.Dictionary&#34;)
        call duplicateParts(template, copyElement, map) &#39;copy parts, build up map before copying relationships
        for each uri in map.Keys
            set part = metis.findInstance(uri) &#39; uri in map
            call copyFeatures(part, map.Item(uri), map)
        next
        &#39; notify view manager, rule-driven task trigging etc.
        dim ev
        set ev = new CVW_Event
        ev.Action = Created
        ev.Elements = map.Items()
        &#39;if template.uri &#60;&#62; Global_Context.task.uri then &#39; autoamted instantiation of tasks should not be propagated, this is now handled bu sleep()/wakeup()
            call Global_EventManager.eventOccured(ev)
        &#39;end if
    end function
    
    public function getContentModel()
        if isEnabled(Global_Context.Project) then
            set getContentModel = Global_Context.Project.ownerModel
        else
            set getContentModel = Global_Context.model
        end if
    end function
    
    &#39; duplicates parts and properties of the element
    private sub duplicateParts(fromElement, toElement, byref map)
        dim part, newPart
        dim repetitive
        repetitive = false
        if isType(fromElement, Global_Context.TaskType) then
            repetitive = Global_TaskManager.isRepetitive(fromElement)
        end if
        call map.Add(fromElement.uri, toElement)
        for each part in getParts(fromElement)
            if not map.Exists(part.uri) then &#39; avoid recursion or repetition if part graph, not tree, even handling cycles
                if repetitive then
                    if not Global_TaskManager.isRepetition(fromElement, part) then
                        set newPart = Global_Context.model.newObject(part.type) &#39; copied from below, for performance
                        call setParent(newPart)
                        call duplicateParts(part, newPart, map)
                    end if
                else 
                    set newPart = Global_Context.model.newObject(part.type)
                    call setParent(newPart)
                    call duplicateParts(part, newPart, map)
                end if
            end if
        next
        &#39;for each part in getAllNeighbours(fromElement, &#34;&#34;, GLOBAL_Type_EkaProperty, 0) &#39; included above, hasproperty is a subtype of has-member
        &#39;     if not map.Exists(part.uri) then &#39; avoid recursion or repetition if part graph, not tree, even handling cycles
        &#39;        set newPart = Global_Context.model.newObject(part.type)
        &#39;        call setParent(newPart)
        &#39;        call duplicateParts(part, newPart, map)
        &#39;    end if         
        &#39;next
    end sub
    
    public sub initialiseParents() 
        set infoParent = nothing
        set roleParent = nothing
        set taskParent = nothing
        set viewParent = nothing
        if isEnabled(Global_Context.Project) then
            
            dim a, b
            for each a in getAllNeighbours(Global_Context.Project, &#34;&#34;, GLOBAL_Type_EkaSpace, 0)
                if instr(1, a.title, &#34;task&#34;, 1) &#62; 0 then set taskParent = a
                if instr(1, a.title, &#34;role&#34;, 1) &#62; 0 then set roleParent = a
                if instr(1, a.title, &#34;view&#34;, 1) &#62; 0 then set viewParent = a
                if instr(1, a.title, &#34;information&#34;, 1) &#62; 0 then 
                    set infoParent = a
                elseif not isEnabled(infoParent) then
                    set infoParent = a
                end if
                if isEnabled(infoParent) and isEnabled(roleParent) and isEnabled(taskParent) and isEnabled(viewParent) then exit sub 
                for each b in getParts(a)
                    if isType(b, GLOBAL_Type_EkaSpace) then &#39; found space related to the project
                        if instr(1, b.title, &#34;task&#34;, 1) &#62; 0 then set taskParent = b
                        if instr(1, b.title, &#34;role&#34;, 1) &#62; 0 then set roleParent = b
                        if instr(1, b.title, &#34;view&#34;, 1) &#62; 0 then set viewParent = b
                        if instr(1, b.title, &#34;information&#34;, 1) &#62; 0 then set infoParent = b
                        if isEnabled(infoParent) and isEnabled(roleParent) and isEnabled(taskParent) and isEnabled(viewParent) then exit sub 
                    end if                            
                next
            next
            if not isEnabled(infoParent) then
                set infoParent = Global_Context.Project.parent
            end if
            if isEnabled(infoParent) then
                if not isEnabled(roleParent) then set roleParent = infoParent
                if not isEnabled(taskParent) then set taskParent = infoParent
                if not isEnabled(viewParent) then set viewParent = infoParent
            end if
        end if
        
    end sub
    
    public sub setParent(element)
        dim p 
        set p = Nothing
        if isType(element, buttonType) then
            if not isEnabled(buttonParent) then
                for each p in Global_Context.model.parts
                    if p.title = &#34;Buttons&#34; then
                        set buttonParent = p
                        exit for
                    end if
                next
                if not isEnabled(buttonParent) then
                    set buttonParent = Global_Context.model.newObject(GLOBAL_Type_EkaSpace)
                    call buttonParent.setNamedStringValue(&#34;name&#34;, &#34;Buttons&#34;)
                end if
            end if
            set p = buttonParent
        elseif isEnabled(infoParent) then
            set p = infoParent
            if isValid(Global_Context.Infos) then
                if Global_Context.Infos.count = 1 then
                    if Global_Context.infos(1).type.inherits(Global_Context.ViewType) then
                        set p = Global_Context.infos(1)
                        set element.parent = p
                        exit sub
                    elseif Global_Context.infos(1).type.inherits(GLOBAL_Type_EkaSpace) then
                        set p = Global_Context.infos(1)
                        set element.parent = p
                        exit sub
                    end if
                end if
            end if
            if isType(element, Global_Context.TaskType) then set p = taskParent
            if isType(element, Global_Context.RoleType) then set p = roleParent
            if isType(element, Global_Context.ViewType) then set p = viewParent
        end if
        if isEnabled(p) then set element.parent = p
    end sub
    
    &#39; copies features from one object (the template) to another (e.g. a new object).
    &#39; - copy property values
    &#39; - copy interrelationships between parts
    &#39; - copy hasProperty and hasValue trees
    &#39; - copy Relationships to/from this object
    &#39; Map contains a mapping between old elements and new, so that relationships are moved to the new structure
    public sub copyFeatures(fromElement, toElement, byref map)
        on error resume next
        dim rel, feature, newrel, prop, newPart, o, parentfound
        if not isEnabled(fromElement) then exit sub
        if not isEnabled(toElement) then exit sub
        if not isObject(map) then set map = CreateObject(&#34;Scripting.Dictionary&#34;)
        call copyMetisProperties(fromElement, toElement)
        if not inheritance.representatives(fromElement.type).contains(fromElement) then &#39; add inheritance relationship to template
            call Global_Context.model.newRelationship(inheritance.InheritanceRelType, toElement, fromElement)
        end if
        
        &#39; Metis composition
        parentfound = false
        if isEnabled(fromElement.parent) then 
            if map.Exists(fromElement.parent.uri) then
                set toElement.parent = map.Item(fromElement.parent.uri)
                parentfound = true
            else &#39; check if there exists an element in the current project that is instantiated from the parent in the template
                if isEnabled(InfoParent) then
                    for each rel in getAllNeighbours(fromElement.parent, &#34;&#34;, inheritance.InheritanceRelType, 1)
                        set o = rel.origin
                        do while isEnabled(o) &#39; see if the candidate is part of the project
                            if o.uri = infoparent.uri or o.uri = taskparent.uri or o.uri = roleparent.uri or o.uri = viewparent.uri then
                                set toElement.parent = rel.origin
                                parentfound = true
                                set o = nothing
                            else
                                set o = o.parent
                            end if
                        loop
                    next
                end if
            end if
        end if
        &#39;if (not parentfound) and inheritsType(toElement, Global_Context.TaskType) then
        &#39;    set toElement.parent = Global_Context.project
        &#39;end if
        
        if not inheritance.representatives(fromElement.type).contains(fromElement) then 
           &#39; outgoing rels
            for each rel in fromElement.getNeighbourRelationships(0, nothing) 
                if not inheritsType(rel, inheritance.InheritanceRelType) then &#39; do not copy inheritance relationship from the template           
                    if map.Exists(rel.target.uri) then
                        set newrel = Global_Context.model.newRelationship(rel.type, toElement, map.Item(rel.target.uri))
                    else
                        set newrel = Global_Context.model.newRelationship(rel.type, toElement, rel.target)
                    end if
                    call copyMetisProperties(rel, newrel)
                    call map.Add(rel.uri, newrel)
                end if
            next
            
            &#39;copy incoming rels, except part relationships, which are treated especially in duplicateParts()
            for each rel in fromElement.getNeighbourRelationships(1, nothing)
                if not map.Exists(rel.origin.uri) then &#39; do not copy relationship inside mapped tree twice ...
                   if (not inheritsType(rel, inheritance.InheritanceRelType )) and (not inheritsType(rel, GLOBAL_Type_EkaHasMember)) then &#39; do not copy inheritance or composition relationships to new object
                      set newrel = Global_Context.model.newRelationship(rel.type, rel.origin, toElement)
                      call copyMetisProperties(rel, newrel)
                      call map.Add(rel.uri, newrel)
                   end if
                end if
            next
        end if
        &#39;set newrel = Global_Context.model.newRelationship(inheritance.InheritanceRelType, toElement, fromElement) 
    end sub
    
    public sub copyMetisProperties(fromElement, toElement)
        on error resume next 
        dim prop
        for each prop in fromElement.type.allProperties
            if not instr(1, prop.name, &#34;status&#34;, 1) &#62; 0 then
                call toElement.setValue(prop, fromElement.getValue(prop))
            end if
        next
        call toElement.setNamedStringValue(&#34;name&#34;, fromElement.getNamedStringValue(&#34;name&#34;))
        call toElement.setNamedStringValue(&#34;description&#34;, fromElement.getNamedStringValue(&#34;description&#34;))
    end sub

    public sub removeElement(element)
        if not isEnabled(element) then exit sub
        if element.isRelationship() then
            call element.ownerModel.deleteRelationship(element)
        else 
            call element.ownerModel.deleteObject(element)
        end if
    end sub
    
    public function getTemplates(aType, includeSubs)
        set getTemplates = inheritance.representatives(aType)
        if not isValid(getTemplates) then set getTemplates = metis.newInstanceList()
        dim t, o
        for each t in GLOBAL_WorkplaceModel.findInstances(GLOBAL_Type_EkaElement, &#34;name&#34;, &#34;Template&#34;)
            for each o in getAllNeighbours(t, &#34;&#34;, inheritance.InheritanceRelType, 1)
                if (includeSubs and inheritsType(o.origin, aType)) or o.origin.type.uri = aType.uri then
                    if not getTemplates.contains(o.origin) then call getTemplates.addLast(o.origin)
                end if
            next
        next
        for each t in Global_ConfigModel.findInstances(GLOBAL_Type_EkaElement, &#34;name&#34;, &#34;Template&#34;)
            for each o in getAllNeighbours(t, &#34;&#34;, inheritance.InheritanceRelType, 1)
                if (includeSubs and inheritsType(o.origin, aType)) or o.origin.type.uri = aType.uri then
                    if not getTemplates.contains(o.origin) then call getTemplates.addLast(o.origin)
                end if
            next
        next
    end function
    
    public function isTemplate(element)
        dim n
        set n = metis.newInstanceList()
        isTemplate = ParentIsTemplate(element, n)
    end function
    
    private function ParentIsTemplate(element, byref alreadyscanned)
        ParentIsTemplate = false
        if not isEnabled(element) then exit function
        if not isEnabled(alreadyscanned) then
            set alreadyscanned = metis.newInstanceList()
        elseif alreadyscanned.contains(element) then 
            exit function
        end if
        call alreadyscanned.addLast(element)
        &#39; rules for finding tremplates:
        dim n
        if lcase(element.title) = &#34;template&#34; then
            ParentIsTemplate = true
            exit function
        elseif lcase(element.title) = &#34;concrete&#34; then
            ParentIsTemplate = false
            exit function
        end if
        for each n in getAllNeighbours(element, &#34;&#34;, inheritance.InheritanceRelType, 0) &#39; direct inheritance link to template
            if lcase(n.target.title) = &#34;template&#34; then
                ParentIsTemplate = true
                exit function
            elseif lcase(n.target.title) = &#34;concrete&#34; then
                ParentIsTemplate = false
                exit function
            end if
        next
        &#39;if instr(1, element.uri, &#34;http&#34;, 1) then &#39; the element is stored in the template directories ..
        &#39;    ParentIsTemplate = true
        &#39;    exit function
        &#39;elseif element.type.title = element.title then
        &#39;    ParentIsTemplate = true
        &#39;    exit function
        &#39;else
        if inheritance.representatives(element.type).contains(element) then
            ParentIsTemplate = true
            exit function
        end if
        &#39; check parents recursively, parts of templates are templates
        for each n in getParents(element)
            if ParentIsTemplate(n, alreadyscanned) then
                ParentIsTemplate = true
                exit function
            end if
        next
    end function
    
    &#39; Global elements should no be logged as normal instances. They capture global features,
    &#39; e.g. basic tasks that we need not bother with capturing the execution details of, such as close or rearrange windows
    public function isGlobal(element)
        isGlobal = false
        if isValid(element.parent) then
            if element.parent.type.inherits(Global_ViewManager.QueryType) then
                isGlobal = true
                exit function
            end if
        end if
        if lcase(element.title) = &#34;concrete&#34; then
            isGlobal = true
            exit function
        end if
        dim n
        &#39;if instr(1, element.uri, &#34;http&#34;, 1) then 
        for each n in getAllNeighbours(element, &#34;&#34;, inheritance.InheritanceRelType, 0) &#39; direct inheritance link to template
            if lcase(n.target.title) = &#34;concrete&#34; then
                isGlobal = true
                exit function
            end if
        next
        if isEnabled(element.parent) then 
            isGlobal = isGlobal(element.parent)
        end if
    end function
    
    
 &#39; Elements that get true from this function implies that e.g. no task should be performed or no view shown:
 public function isNothing(byval obj)
  isNothing = false
  on error resume next
  if not isValid(obj) then
   exit function
  end if
  if instr(1,obj.title, &#34;Nothing&#34;, 1) = 1 then
   isNothing = true
   exit function
  end if
  if instr(1,obj.title, &#34;Empty&#34;, 1) = 1 then
   isNothing = true
   exit function
  end if
  if instr(1,obj.title, &#34;Null&#34;, 1) = 1 then
   isNothing = true
   exit function
  end if
 end function
    
    private Sub Class_Initialize
        if not isValid(Global_InformationManager) then
            set Global_InformationManager = me     
        end if
        set buttonType = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/action_objects.kmd#ObjType_CVW:Button_UUID&#34;)
        set buttonParent = nothing
        set typeParent = nothing
    end sub
end class
</string>
  </valueset>
 </object>

 <relationship id="_002asre019sqebe7emtb">
  <valueset size="7" xlink:role="type" xlink:title="Depends on" xlink:href="../../eka/languages/eka_relships.kmd#RelType_EKA:DependsOn_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <integer name="dbms-admin.commitFlag">1</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20071008 121216203</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <integer name="connectionStrength">100</integer>
   <string name="name"></string>
  </valueset>
  <origin seq="0" xlink:role="object" xlink:title="Class EKA_InformationManager" xlink:href="#_002asre019rp1g5t7ru6"/>
  <target seq="0" xlink:role="object" xlink:title="Class IRTV_Config" xlink:href="#_002asnu015d0g0nfq0ql"/>
 </relationship>

 <relationship id="_002asre019svmp9tbfhj">
  <valueset size="7" xlink:role="type" xlink:title="Depends on" xlink:href="../../eka/languages/eka_relships.kmd#RelType_EKA:DependsOn_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <integer name="dbms-admin.commitFlag">1</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20071008 121221593</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <integer name="connectionStrength">100</integer>
   <string name="name"></string>
  </valueset>
  <origin seq="0" xlink:role="object" xlink:title="Class EKA_InformationManager" xlink:href="#_002asre019rp1g5t7ru6"/>
  <target seq="0" xlink:role="object" xlink:title="Class CVW_ParameterManager" xlink:href="#_002aso00190aa1fag2qn"/>
 </relationship>

 <relationship id="_002asre019t41uukj367">
  <valueset size="7" xlink:role="type" xlink:title="Depends on" xlink:href="../../eka/languages/eka_relships.kmd#RelType_EKA:DependsOn_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <integer name="dbms-admin.commitFlag">1</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20071008 121226046</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <integer name="connectionStrength">100</integer>
   <string name="name"></string>
  </valueset>
  <origin seq="0" xlink:role="object" xlink:title="Class EKA_InformationManager" xlink:href="#_002asre019rp1g5t7ru6"/>
  <target seq="0" xlink:role="object" xlink:title="Class EKA_Inheritance" xlink:href="#_002asnu015cvuge5edr9"/>
 </relationship>

 <relationship id="_002asre019taop6s5hep">
  <valueset size="7" xlink:role="type" xlink:title="Depends on" xlink:href="../../eka/languages/eka_relships.kmd#RelType_EKA:DependsOn_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <integer name="dbms-admin.commitFlag">1</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20071008 121232921</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <integer name="connectionStrength">100</integer>
   <string name="name"></string>
  </valueset>
  <origin seq="0" xlink:role="object" xlink:title="Class CVW_TaskManager" xlink:href="#_002aso001909h0b11ndt"/>
  <target seq="0" xlink:role="object" xlink:title="Class EKA_InformationManager" xlink:href="#_002asre019rp1g5t7ru6"/>
 </relationship>

 <object id="_002asrj0166n9nkjaq3q">
  <valueset size="10" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="../languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Class CVW_EventManager, Class CVW_Event</string>
   <string name="description"></string>
   <integer name="dbms-admin.commitFlag">0</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20080305 120031687</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="comments"></string>
   <string name="script">option explicit
dim GLOBAL_EventManager

dim Created, Deleted, Updated, Performed
Created = 1
Deleted = 2
Updated = 3
Performed = 4 &#39; for tasks

Class CVW_Event
    public Elements
    public Action &#39; Created | Deleted | Updated | Performed
    public Context &#39; IRTV_Config
    public View
    public TimeOccured   
    
 private Sub Class_Initialize
    dim v
    on error resume next
    TimeOccured = Now()
    Action = Updated
    set Context = GLOBAL_Context
    set View = Context.View
    set v = getWorkArea(GLOBAL_Context.instview)
    if isEnabled(v) and instr(1, v.title, &#34;menu&#34;,1) &#60;= 0 and instr(1, v.title, &#34;left&#34;,1) &#60;= 0 then
        set View = v.children(v.children.count).instance &#39; last child is workwindow part of the workarea
    end if
 end sub
end class

Class CVW_EventManager
    private sleeping
   
    public sub sleep()
        sleeping = true
    end sub
         
    public sub wakeup()
        sleeping = false
    end sub
    
     public sub eventOccured(ev)
        if sleeping then exit sub
        dim elem
        if isObject(ev.Action) then
            exit sub
        elseif ev.Action = Created then
            &#39;if isEmpty(ev.Elements) then exit sub
            &#39;if ev.Elements.count = 0 then exit sub
            if isEnabled(ev.Context.Task) then &#39; connect the elements to the task that created them
                if not (Global_InformationManager.isGlobal(ev.Context.Task) or Global_InformationManager.isTemplate(ev.Context.Task)) then
                    for each elem in ev.Elements &#39; 1st objects
                        if not elem.isRelationship() then call ev.Context.model.newRelationship(ev.Context.TIType, ev.Context.Task, elem)
                    next
                end if
                &#39; find surrounding task context connected to the view, if it exists ...
                dim task &#39;
                set task = ev.Context.ParentTask
                if isValid(task) then
                    if task.uri &#60;&#62; ev.Context.Task.uri and (not Global_InformationManager.isGlobal(Task)) and (not Global_InformationManager.isTemplate(Task)) then
                        for each elem in ev.Elements &#39; 1st objects
                            if not elem.isRelationship() then call ev.Context.model.newRelationship(ev.Context.TIType, task, elem)
                        next
                    end if
                end if
            end if
            dim infodone, e2, view, addlist, r

            set elem = ev.Elements(0) &#39; the root element copied
            set addlist = metis.newInstanceList()
            set view = getWorkarea(ev.Context.instview)
            if isEnabled(view) then
                if view.children.count &#62; 0 then set view = view.children(view.children.count) &#39; the workwindow
            end if
            infodone = false
            if isEnabled(ev.Context.Infos) then
                if ev.Context.Infos.count &#62; 0 then
                    infodone = true
                    for each e2 in ev.Context.Infos
                        if not e2.isRelationship() then
                            set r = createContextRelationships(e2, elem, view)
                            if isEnabled(r) then call addlist.addLast(r)
                        end if
                    next
                end if
            end if
            if (not infodone) and isEnabled(ev.Context.Info) then &#39; connect the elements to the current Info according to rules
                if not ev.Context.Info.isRelationship() then
                    set r = createContextRelationships(ev.Context.Info, elem, view)
                    if isEnabled(r) then call addlist.addLast(r)
                end if
            end if

            if isEnabled(ev.View) then
                for each elem in ev.Elements &#39; 1st objects
                    if not elem.isRelationship() then call GLOBAL_ViewManager.showObject(ev.View, elem)
                next
                for each elem in ev.Elements &#39; 2nd relationships
                    if elem.isRelationship() then call GLOBAL_ViewManager.showRelationship(ev.View, elem)
                next
                for each elem in addList &#39; 2nd relationships
                    call GLOBAL_ViewManager.showRelationship(ev.View, elem)
                next
            end if
            &#39; if task created, connect it to the current user, by default
            &#39;if isEnabled(Global_User) then
            &#39;    if not isTemplate(Global_User) then 
            &#39;        for each elem in ev.Elements &#39; 1st objects
            &#39;            if Global_InformationManager.isType(elem, Global_Context.TaskType) then 
            &#39;                call ev.Context.model.newRelationship(ev.Context.RTType, Global_User, elem)
            &#39;            end if
            &#39;        next  
            &#39;    end if
            &#39;end if
            
        elseif ev.Action = Updated then 

        elseif ev.Action = Deleted then &#39; automatically deletes views as well, nothing to do ...

        elseif ev.Action = Performed then

        end if
     end sub

     &#39; removew the links between the objects in question, according to the relationships found in the view.
     public function removeContextRelationships(elem1, elem2, view)
        dim rels,  rel, rel2
        set removeContextRelationships = nothing
        if not isEnabled(view) then exit function
        if not isEnabled(elem1) then exit function
        if not isEnabled(elem2) then exit function
        set rels = Global_Context.getCurrentRelationshipTypes(view.instance, elem1.type, elem2.type, true)
        for each rel in Global_InformationManager.getAllNeighbours(elem1, &#34;&#34;, Global_Context.RootRelType, 0)
            if rel.target.uri = elem2.uri then
                if rels.contains(rel.type) or rel.type.uri = Global_Context.RootRelType.uri then
                    call Global_Context.model.deleteRelationship(rel)
                end if
            end if
        next
        set rels = Global_Context.getCurrentRelationshipTypes(view.instance, elem2.type, elem1.type, true)
        for each rel in Global_InformationManager.getAllNeighbours(elem1, &#34;&#34;, Global_Context.RootRelType, 1)
            if rel.origin.uri = elem2.uri then
                if rels.contains(rel.type) or rel.type.uri = Global_Context.RootRelType.uri then
                    call Global_Context.model.deleteRelationship(rel)
                end if
            end if
        next


     end function
     
     &#39; creates the links between the objects in question, according to the relationships found in the view.
     public function createContextRelationships(elem1, elem2, view)
        dim rels,  rel, reverse
        reverse = false
        set createContextRelationships = nothing
        if not isEnabled(view) then exit function
        if not isEnabled(elem1) then exit function
        if not isEnabled(elem2) then exit function
        if elem1.uri = Global_Context.Task.uri then exit function &#39; mask out duplicates
        if elem1.uri = Global_Context.View.uri then exit function &#39; mask out duplicates
        set rels = Global_Context.getCurrentRelationshipTypes(view.instance, elem1.type, elem2.type, true)
        set rel = Nothing
        if rels.count = 0 then
            if elem2.parent.uri = elem1.uri then
                exit function
            end if
            set rels = Global_Context.getCurrentRelationshipTypes(view.instance, elem2.type, elem1.type, true)
            reverse = true
        end if
        if rels.count = 0 then &#39; none found in any direction
            set rel = Global_Context.RootRelType &#39; default ....
            reverse = false
        elseif rels.count = 1 then
            set rel = rels.item(1).type
        elseif rels.count &#62; 1 then
            dim nl, s, t
            set nl = metis.newInstanceList()
            for each s in rels
                set t = Global_Context.inheritance.representative(s.type)
                if isEnabled(t) then call nl.addLast(t)
            next
            if nl.count = 1 then
                set rel = metis.findType(nl.item(1).getNamedStringValue(&#34;relationshipType&#34;))
            else
                set rel = SelectAmong(&#34;Select the kind(s) of relationships you want to create from &#39;&#34;&#38;elem1.title&#38;&#34;&#39; to &#39;&#34;&#38;elem2.title&#38;&#34;&#39;&#34;, true , nl)
                if isEnabled(rel) then set rel = metis.findType(rel.getNamedStringValue(&#34;relationshipType&#34;))
            end if
        end if
        if isEnabled(rel) then
            if not reverse then
                if rel.inherits(GLOBAL_Type_EkaHasPart) then
                    &#39; If parent is Query then use Metis parts else use relationships
                    if Global_InformationManager.inheritsType(elem1, GLOBAL_Type_EkaSpace) or Global_InformationManager.inheritsType(elem1, GLOBAL_Context.TaskType)  then &#39;elem1.type.uri = &#34;http://xml.activeknowledgemodeling.com/cvw/languages/query.kmd#ekaQuery&#34; then
                        set elem2.parent = elem1
                    else
                        set createContextRelationships =  Global_Context.model.newRelationship(rel, elem1, elem2)
                    end if
                else
                    set createContextRelationships =  Global_Context.model.newRelationship(rel, elem1, elem2)
                end if
            else
                set createContextRelationships =  Global_Context.model.newRelationship(rel, elem2, elem1)
            end if
        end if
    end function

     private Sub Class_Initialize
        if not isObject(GLOBAL_EventManager) then
             set GLOBAL_EventManager = me
        end if
        sleeping = false
     end sub
 
End class
</string>
  </valueset>
 </object>

 <relationship id="_002asrj0168l7l1uoq4f">
  <valueset size="7" xlink:role="type" xlink:title="Depends on" xlink:href="../../eka/languages/eka_relships.kmd#RelType_EKA:DependsOn_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <integer name="dbms-admin.commitFlag">1</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20071013 110849781</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <integer name="connectionStrength">100</integer>
   <string name="name"></string>
  </valueset>
  <origin seq="0" xlink:role="object" xlink:title="Class EKA_InformationManager" xlink:href="#_002asre019rp1g5t7ru6"/>
  <target seq="0" xlink:role="object" xlink:title="Class CVW_EventManager, Class CVW_Event" xlink:href="#_002asrj0166n9nkjaq3q"/>
 </relationship>

 <relationship id="_002asrj0168plo3rk0pf">
  <valueset size="7" xlink:role="type" xlink:title="Depends on" xlink:href="../../eka/languages/eka_relships.kmd#RelType_EKA:DependsOn_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <integer name="dbms-admin.commitFlag">1</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20071013 110854328</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <integer name="connectionStrength">100</integer>
   <string name="name"></string>
  </valueset>
  <origin seq="0" xlink:role="object" xlink:title="Class CVW_EventManager, Class CVW_Event" xlink:href="#_002asrj0166n9nkjaq3q"/>
  <target seq="0" xlink:role="object" xlink:title="Class CVW_ViewManager" xlink:href="#_002aso001908jt4cfilt"/>
 </relationship>

 <relationship id="_002asrl00vcfsv6ods9h">
  <valueset size="7" xlink:role="type" xlink:title="Depends on" xlink:href="../../eka/languages/eka_relships.kmd#RelType_EKA:DependsOn_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <integer name="dbms-admin.commitFlag">1</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20071015 090838734</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <integer name="connectionStrength">100</integer>
   <string name="name"></string>
  </valueset>
  <origin seq="0" xlink:role="object" xlink:title="Class CVW_EventManager, Class CVW_Event" xlink:href="#_002asrj0166n9nkjaq3q"/>
  <target seq="0" xlink:role="object" xlink:title="Class CVW_TaskManager" xlink:href="#_002aso001909h0b11ndt"/>
 </relationship>

 <relationship id="_002asrs00ua7jtandpt0">
  <valueset size="7" xlink:role="type" xlink:title="Depends on" xlink:href="../../eka/languages/eka_relships.kmd#RelType_EKA:DependsOn_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <integer name="dbms-admin.commitFlag">1</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20071022 084952765</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <integer name="connectionStrength">100</integer>
   <string name="name"></string>
  </valueset>
  <origin seq="0" xlink:role="object" xlink:title="Class CVW_TaskManager" xlink:href="#_002aso001909h0b11ndt"/>
  <target seq="0" xlink:role="object" xlink:title="Class Rule" xlink:href="#_002asr000re02hqan45t"/>
 </relationship>

 <object id="_002asuc01fbia13dschl">
  <valueset size="10" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="../languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Sub setHourGlass</string>
   <string name="description"></string>
   <integer name="dbms-admin.commitFlag">0</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20080110 141816681</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="comments"></string>
   <string name="script">    Sub setHourGlass(model, onOff)
        dim method
        if (onOff = &#34;On&#34;) then
            set method = metis.findMethod(&#34;http://xml.activeknowledgemodeling.com/cvw/operations/view_methods.kmd#Method_CVW:setHourGlassOn_UUID&#34;)
            call model.runMethod(method)
        else
            set method = metis.findMethod(&#34;http://xml.activeknowledgemodeling.com/cvw/operations/view_methods.kmd#Method_CVW:setHourGlassOff_UUID&#34;)
            call model.runMethod(method)
        end if
    End Sub
</string>
  </valueset>
 </object>

 <object id="_002asvr010ff1f7hu0k1">
  <valueset size="10" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="../languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Class CVW_Webservice</string>
   <string name="description"></string>
   <integer name="dbms-admin.commitFlag">0</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20080327 073748711</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="comments"></string>
   <string name="script">option explicit

&#39;-----------------------------------------------------------
&#39; This class is used for invoking IE in a parameterised manner,
&#39; and for parsing the results, if the call is to be performed 
&#39; without user interaction.
&#39;-----------------------------------------------------------
Class CVW_Webservice
   public IE
   public operation
   public OldParamType
   public OldInputType
   public OldTaskType
   public OldWebServiceType
   public OldWebServiceOperationType
   
&#39;---------------------------------------------------------------------------------------------------
    Public Property Get parameters
		set parameters = IE.parameters
    End Property

&#39;---------------------------------------------------------------------------------------------------
    Public Property Get server
		&#39;msgbox metis.currentModel.currentInstance.getNamedValue(&#34;serviceURL&#34;).getUrl()
        server = &#34;http://localhost/&#34;
        dim marshall
        for each marshall in metis.currentModel.findInstances(metis.findType(&#34;metis:troux#TrouxMarshalling&#34;), &#34;&#34;,&#34;&#34;)
             server = marshall.getNamedStringValue(&#34;serverName&#34;)
             if (instr(server, &#34;://&#34;) &#60;= 0) then
                server = &#34;http://&#34;&#38;server
             end if
             if (instrrev(server, &#34;/&#34;) &#60; len(server)) then
                server = server&#38;&#34;/&#34;
             end if
             exit for
        next
    End Property
 
    &#39;-----------------------------------------------------------
    public function getRepositoryId(ByVal instance)
        getRepositoryId = &#34;&#34;
        if not isValid(instance) then exit function
        Dim c
	    c = InStrRev (instance.uri, &#34;c&#34;)
	    if c &#62;0 then
		    getRepositoryId = Right(instance.uri, Len(instance.uri) - c)
		    if not isNumeric(getRepositoryId) then getRepositoryId = &#34;&#34; &#39; not valid
	    else
		    getRepositoryId = &#34;&#34;
	    end if
    end function

    &#39;-----------------------------------------------------------
    private function findService(ByVal task)
	    Dim rel
	    set findService = task

        for each rel in task.neighbourObjects
            if rel.type.uri = OldWebServiceOperationType.uri then
                set findService = rel
                exit function
            end if
        next

        &#39;for each rel in task.getNeighbourRelationships(0, metis.findType(&#34;http://xml.activeknowledgemodeling.com/task/relationshiptypes/task_works_on.kmd#AKM_Task_Works_On&#34;))
        &#39;    set findService = rel.target
        &#39;    exit function
        &#39;next
        
        &#39;for each rel in task.getNeighbourRelationships(0, metis.findType(&#34;http://xml.activeknowledgemodeling.com/task/relationshiptypes/task_content.kmd#AKM_Task_Content&#34;))
        &#39;    set findService = rel.target
        &#39;    exit function
        &#39;next
    end function
   
        
&#39;-----------------------------------------------------------
    Public function invoke()
        dim object, url, reps
        set invoke = nothing
        if not isValid(operation) then exit function
        set object = nothing

        if operation.type.inherits(OldTaskType) or operation.type.inherits(Global_Context.TaskType) then
            set object = findService(operation) &#39; if the selected object is a task
            if (not isEnabled(object)) then
                msgbox &#34;The task &#39;&#34;&#38;operation.getNamedStringValue(&#34;name&#34;)&#38; &#34;&#39; does not have a service related to it.&#34;
                exit function
            end if
        end if
         
        Dim objectid, taskid
        dim htmldoc
        objectid = getRepositoryId(object)
        taskid = getRepositoryId(operation)
        
        if (len(taskid) &#62;0) AND (len(objectid) &#62; 0) then
           url = server&#38; &#34;tip/do/mupsWebService?context=&#34;&#38; taskid &#38; &#34;&#38;Service=&#34;&#38;objectid
           &#39;url = url &#38; getParameters(object)
        elseif (len(taskid) &#60;= 0) and (len(objectid) &#60;= 0) then
           msgbox &#34;The object &#39;&#34;&#38;operation.getNamedStringValue(&#34;name&#34;)&#38; &#34;&#39; is not stored in the repository. Please commit it to the repository before you try to execute it on the repository.&#34;
           exit function
        else &#39;not task, service...
            url = server&#38;&#34;tip/do/mupsWebService?Service=&#34;&#38;taskid&#38;&#34;&#38;context=&#34;&#38; taskid
            &#39;url = url &#38; getParameters(operation)
        end if  
      
        set reps = getRepetitions(Global_Context.task)
        if reps.count &#62; 0 then
            dim oldi, rep, fullurl
            set oldi = Global_Context.info
            for each rep in reps &#39; invoke the webservice once for each repetition
                set Global_Context.info = rep
                if len(objectid) &#62; 0 then 
                   fullurl = url &#38; getParameters(object)
                else
                   fullurl = url &#38; getParameters(operation)
                end if
                &#39;ie.
                set htmldoc = ie.invoke(fullurl)
                call parseResults(htmldoc, operation)
            next
            set Global_Context.info = oldi
        else &#39; by default, just once
            if len(objectid) &#62; 0 then 
               url = url &#38; getParameters(object)
            else
                url = url &#38; getParameters(operation)
            end if
            &#39;ie.
            set htmldoc = ie.invoke(url)
            call parseResults(htmldoc, operation)
        end if
   End function
     
private Sub Sleep(intSecs)
    Dim dtStart, boolDone
    dtStart = now()
    boolDone = False
    While Not boolDone
    If DateDiff(&#34;s&#34;,dtStart,now()) &#62;= cint(intSecs) Then
    boolDone = True
    End If
    Wend
End Sub
     
&#39;-----------------------------------------------------------
&#39; pattern: Name of parameter in TD/B, in next TD
    private sub parseResults(document, obj)
        dim name, value, num, num2, result, s1, s1l
        on error resume next
        name = &#34;&#34;
        s1 = &#34;&#60;TD align=right&#62;&#60;B&#62;&#34;
        s1l = 1
        result = &#34;&#34;
        result = document.body.innerHTML
        while result = &#34;&#34;  and s1l &#60; 10 &#39; for some strange reason the document variable does not always have the correct value.
            &#39;call Wscript.sleep(50)
            sleep(1)
            &#39;msgbox &#34;The web service results are not yet ready. Wait a few seconds, then click OK to proceed.&#34;
            result = document.body.innerHTML
            s1l = s1l + 1
        wend
         s1l = 1
        num = instr(1,result, s1,1)
        while num &#60;= 0 and s1l &#60; 30 &#39; not loaded correctly yet
            &#39;call Wscript.sleep(50) &#39; wait total of 5 seconds
            sleep(1)
            &#39;msgbox &#34;The complete web service results are not yet ready. Wait a few seconds, then click OK to proceed.&#34;
            result = document.body.innerHTML &#39; some delay may have caused problems above
            num = instr(1,result, s1,1)
            s1l = s1l + 1
        wend
        if num &#60;= 0 then 
            msgbox result, vbOKOnly, &#34;Unable to parse web service results&#34;
            ie.ie.visible = true
            exit sub
        end if 
        s1l = len(s1) &#39;&#38;chr(34)&#38;&#34;right&#34;&#38;chr(34)&#38;&#34;&#62;&#60;B&#62;&#34;)
        num = instr(num+s1l , result, s1,1) &#39; second
        while num &#62; 0 
            num2 = instr(num+s1l+1, result, &#34;&#60;&#34;,1)
            name = mid(result, num+s1l, num2- (num+s1l))
            num = instr(num2 , result, &#34;&#60;TD&#34;,1)
            num = instr(num+2, result, &#34;&#62;&#34;,1)
            num2 = instr(num+1, result, &#34;&#60;&#34;,1)
            value = mid(result, num+1, num2- (num+1))
            if isValid(value) and isValid(name) then
                call parameters.setValue(name, value)
            end if
            num = instr(num2 , result, s1,1) &#39;next
        wend
        
        &#39;dim hz
        &#39; set hz = CreateObject(&#34;HtmlZap.HtmlZap.1&#34;)
        &#39;hz.LoadBuffer  document.body.innerHTML
        &#39;while (not hz.eof) and (hz.tagname &#60;&#62; &#34;table&#34;)
        &#39;   hz.next
        &#39;wend
        &#39;while not hz.eof
        &#39;    if hz.tagname = &#34;td&#34; then
        &#39;        if num &#62;= 5 then &#39; 5 first are headings
        &#39;            hz.next
        &#39;            value = hz.text
        &#39;            if isValid(value) and isValid(name) then
        &#39;                call parameters.setValue(name, value)
        &#39;                name = &#34;&#34;
        &#39;            end if
        &#39;        end if 
        &#39;        num = num + 1
        &#39;    elseif hz.tagname = &#34;b&#34; and num &#62;= 6 then
        &#39;        hz.next
        &#39;        name = hz.text
        &#39;    end if
        &#39;    hz.next
        &#39;wend
    end sub
    
    public function getRepetitions(task)
        &#39; returns all the information objects that the web service should be invoked for, 
        &#39; if the input is a link to another task that defines the inputs
        dim r, param, inp
        set r = new Rule
        set getRepetitions = metis.newInstanceList()
        for each param in r.getInputs(task)
            if Global_InformationManager.inheritsType(param, Global_Context.TaskType) then
                for each inp in Global_InformationManager.getAllNeighbours(param, &#34;&#34;, Global_Context.TIType, 0)
                    if not getRepetitions.contains(inp.target) then call getRepetitions.addLast(inp.target)
                next
            end if
        next
    end function
    
    &#39;-----------------------------------------------------------
    Public function getParameters(obj)
        getParameters = &#34;&#34;
        dim r, param, val, name
        set r = new Rule
        for each param in r.getInputs(operation)
            name = param.getNamedStringValue(&#34;name&#34;)
		    if Len(name) &#62; 0 then
				if not parameters.getValueForObject(obj, name, val) then
				    call parameters.putValue(name, val)
				end if
				if not isValid(val) then val = &#34;&#34;
				getParameters = getParameters&#38; &#34;&#38;&#34; &#38; name &#38; &#34;=&#34;&#38;val
		    end if
        next
        call appendPartParameters (obj, getParameters)
    end function
    
    private sub appendPartParameters (byval obj, byref params)
       dim param, name, val
       for each param in obj.parts
            if param.type.inherits(OldInputType) then
                call appendPartParameters(param, params)
            elseif param.type.inherits(OldParamType) then
                name = param.getNamedStringValue(&#34;name&#34;)
		        if Len(name) &#62; 0 then
		            val = param.getNamedStringValue(&#34;value&#34;)
		            if not isValid(val) then
				        if not parameters.getValueForObject(obj, name, val) then
				            call parameters.putValue(name, val)
				        end if
				        if not isValid(val) then val = &#34;&#34;
				    end if
				    if isObject(val) then val = val.title
				    params = params&#38; &#34;&#38;&#34; &#38; name &#38; &#34;=&#34;&#38;val
		        end if
		        call appendPartParameters(param, params)
		    end if
        next
        params = replace(params, &#34; &#34;, &#34;%20&#34;)
    end sub

&#39;-----------------------------------------------------------
    Private Sub Class_Initialize()
       set ie = new CVW_Internet_Explorer
       set operation = Global_Context.Info
       set OldParamType = metis.findType(&#34;http://xml.activeknowledgemodeling.com/system/objecttypes/parameter.kmd#AKM_Parameter&#34;)
       set OldInputType = metis.findType(&#34;http://xml.activeknowledgemodeling.com/task/objecttypes/task_input.kmd#AKM_Task_Input&#34;)
       set OldTaskType = metis.findType(&#34;http://xml.activeknowledgemodeling.com/task/objecttypes/task.kmd#AKM_Task&#34;)
       set OldWebServiceType = metis.findType(&#34;http://xml.activeknowledgemodeling.com/system/objecttypes/web_service.kmd#AKM_Web_Service&#34;)
       set OldWebServiceOperationType = metis.findType(&#34;http://xml.activeknowledgemodeling.com/system/objecttypes/web_service.kmd#AKM_Web_Service&#34;)
    End Sub

&#39;-----------------------------------------------------------
    Private Sub Class_Terminate()
        &#39;call ie.quit()
        set ie = nothing
    End Sub

End Class


</string>
  </valueset>
 </object>

 <object id="_002asvr010h8th99i88p">
  <valueset size="10" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="../languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Class CVW_Internet_Explorer</string>
   <string name="description"></string>
   <integer name="dbms-admin.commitFlag">0</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20080327 073725054</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="comments"></string>
   <string name="script">option explicit

&#39;-----------------------------------------------------------
&#39; This class is used for invoking IE in a parameterised manner,
&#39; and for parsing the results, if the call is to be performed 
&#39; without user interaction.
&#39;-----------------------------------------------------------
Class CVW_Internet_Explorer

   public IE
   public hidden
   
&#39;---------------------------------------------------------------------------------------------------
    Public Property Get parameters
  set parameters = Global_ViewManager.parameters
    End Property
    
&#39;-----------------------------------------------------------
    Public function invoke(sUrl)
        ie.visible = not hidden
  
        ie.navigate(sUrl)
        Do While (ie.Busy)
        Loop
        set invoke = ie.document
      End function
 
&#39;---------------------------------------------------------
      
&#39;-----------------------------------------------------------
    Public function parseResults(document)
        dim name
        name =  doc.title

     
        set hz = CreateObject(&#34;HtmlZap.HtmlZap.1&#34;)
        hz.LoadBuffer  document.body.innerHTML
        while not hz.eof
            if hz.tagname = &#34;a&#34; then
               &#39; set newObject = newNodeObject.newPart(objectType)
               &#39; newObject.setNamedStringValue &#34;name&#34;,  hz.text
                &#39;cDescription =    hz.param(&#34;href&#34;)
                &#39;newObject.setNamedStringValue &#34;description&#34;, cDescription
            end if

            if hz.tagname = &#34;frame&#34; then
                &#39;set newObject = newNodeObject.newPart(objectType)
                &#39;newObject.setNamedStringValue &#34;name&#34;,  hz.param(&#34;name&#34;)
                &#39;cDescription =    hz.param(&#34;src&#34;)
                &#39;newObject.setNamedStringValue &#34;description&#34;, cDescription
            end if
            hz.next
        wend
    end function

&#39;-----------------------------------------------------------
    Private Sub Class_Initialize()
        hidden = true
        set ie = CreateObject(&#34;InternetExplorer.Application&#34;)
    End Sub

&#39;-----------------------------------------------------------
    Private Sub Class_Terminate()
        &#39;ie.visible = true
        if not ie.visible then ie.quit
        set ie = nothing
    End Sub

End Class


</string>
  </valueset>
 </object>

 <object id="_002at1100qtusq4vqp7c">
  <valueset size="10" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="../languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Class EKA_Import</string>
   <string name="description"></string>
   <integer name="dbms-admin.commitFlag">0</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20080408 092200578</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="comments"></string>
   <string name="script">option explicit


Class EKA_Import

   public function execute()
        dim fil, dialog
        Set dialog = CreateObject(&#34;UserAccounts.CommonDialog&#34;) 
        execute = dialog.ShowOpen
        if execute then  &#39; else= cancel -&#62; quit import, but do manipulation of data structures
            fil = dialog.FileName
            if instr(1, fil, &#34;.xl&#34;, 1) then
                execute = importFromExcel(fil)
            else &#39; cancelled, do nothing

            end if
        end if
   end function 

    public function importFromExcel(fil)
        dim excel, w, wb, row, val
        importFromExcel = true
        set excel = CreateObject(&#34;Excel.Application&#34;) 
        if not isValid (Excel) then 
            msgbox &#34;Error connecting to Excel. Please make certain that Excel is installed correctly on this machine.&#34;
            importFromExcel = false
            exit function
        end if
        excel.visible = false
        call excel.Workbooks.open(fil)
        set wb = excel.Workbooks(excel.Workbooks.Count)
        &#39;set w = wb.Worksheets(1)
        dim reqtype, prodtype, proptype, suppliertype, rptype, spectype
        set reqtype = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cppd/languages/fm_objects.kmd#ObjType_CPPD:FunctionalRequirement_UUID&#34;)
        set prodtype = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cppd/languages/cc_objects.kmd#ObjType_CPPD:ConfigurableComponent_UUID&#34;)
        set proptype = GLOBAL_Type_EkaProperty
        set suppliertype = Global_Context.RoleType
        set spectype = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cppd/languages/fm_objects.kmd#ObjType_CPPD:ConstraintElement_UUID&#34;)
        set rptype = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cppd/languages/has_requirement.kmd#RelType_CPPD:HasRequirement_UUID&#34;)
 
        dim r1, r2, r3, prod, spec, prop, supplier, created, iii
        set iii = Nothing
 
        dim objectsCreated
        set objectsCreated = metis.newInstanceList
        if isEnabled(Global_Context.Infos) then 
            for each r1 in Global_Context.Infos
                call objectsCreated.addLast(r1)
            next
            set Global_Context.Infos = Nothing
            set iii = Global_Context.Info
            set Global_Context.Info = Nothing
        end if
        for each w in wb.Worksheets
            val = w.Range(&#34;A1&#34;).value
            row = 2
            do while len(val) &#62; 0
                val = w.Range(&#34;A&#34;&#38;row).value
                if len(val) &#62; 0 then
                    set r1 =  createOrReuse(val, reqtype, objectsCreated, created)
                end if
                val = w.Range(&#34;B&#34;&#38;row).value
                if len(val) &#62; 0 then
                    set r2 =  createOrReuse(val, reqtype, objectsCreated, created)
                    if created and isEnabled(r1) then set r2.parent = r1
                end if
                val = w.Range(&#34;C&#34;&#38;row).value
                if len(val) &#62; 0 then
                    set r3 =  createOrReuse(val, reqtype, objectsCreated, created)
                    if created and isEnabled(r2) then set r3.parent = r2
                end if
                val = w.Range(&#34;F&#34;&#38;row).value
                if len(val) &#62; 0 then
                    set prod = createOrReuse(val, prodtype, objectsCreated, created)
                    if created and isEnabled(r3)  then call createOrReuseRelationship(rptype, prod, r3)
                    set spec = createOrReuse(val, spectype, objectsCreated, created)
                    call createOrReuseRelationship(GLOBAL_Type_EkaIs, prod, spec)
                    if created and isEnabled(r3)  then set spec.parent = r3
                end if
                
                val = w.Range(&#34;G&#34;&#38;row).value
                if len(val) &#62; 0 then
                    set prop =  createOrReuse(val, proptype, objectsCreated, created)
                    if created  and isEnabled(spec)  then call createOrReuseRelationship(GLOBAL_Type_EkaHasProperty, spec, prop)
                    val = w.Range(&#34;N&#34;&#38;row).value
                    if len(val) &#62; 0 then call prop.setNamedStringValue(&#34;value&#34;, val)
                    val = w.Range(&#34;H&#34;&#38;row).value
                    if len(val) &#62; 0 then call prop.setNamedStringValue(&#34;description&#34;, val)
                end if
                val = w.Range(&#34;H&#34;&#38;row).value
                if len(val) &#62; 0 then
                    set supplier = createOrReuse(val, suppliertype, objectsCreated, created)
                    if created and isEnabled(prod) then call createOrReuseRelationship(GLOBAL_Context.RIType, supplier, prod)
                end if
                row = row + 1
                val = w.Range(&#34;A&#34;&#38;row).value
            loop
        next
        call excel.quit()
        set excel = nothing
        set Global_Context.Infos = objectsCreated
        set Global_Context.Info = iii
    end function
    
    public function createOrReuseRelationship(rtype, origin, target)
        set createOrReuseRelationship = Nothing
        dim r
        for each r in Global_InformationManager.getAllNeighbours(origin, &#34;&#34;, rtype, 0)
            if r.target.uri = target.uri then
                set createOrReuseRelationship = r
                exit function
            end if
        next
        set r = Global_Context.model.newRelationship(rtype, origin, target)
    end function

&#39; creates a ew object if it is not already found in the list of existing ones. Returns the match or new object
    public function createOrReuse(name, ntype, existing, byref created)
        set createOrReuse = Nothing
        created = false
        if isValid(existing) then 
            dim n
            for each n in existing
                if n.name = name and ntype.uri = n.type.uri then
                    set createOrReuse = n
                    exit for
                end if
            next
        else
            set existing = metis.newInstanceList
        end if
        if not isValid(createOrReuse) then &#39; create new
            set createOrReuse = Global_InformationManager.newElement(ntype, Nothing)
            created = true
            call existing.addLast(createOrReuse)
            call createOrReuse.setNamedStringValue(&#34;name&#34; , name)
        end if
    end function

    private Sub Class_Initialize
    
    end sub
    
End class
</string>
  </valueset>
 </object>

 <object id="_002at11019j8sg4osiij">
  <valueset size="10" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="../languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Class CVW_RoleManager</string>
   <string name="description"></string>
   <integer name="dbms-admin.commitFlag">0</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20080408 073314328</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="comments"></string>
   <string name="script">option explicit
dim GLOBAL_RoleManager


Class CVW_RoleManager
    
    
    public function removeNoAccess(instances)
        set removeNoAccess = removeNoAccessFrom(instances, 0)
    end function
    
    public function removeNoAccessFrom(instances, startAt)
        if not isEnabled(Global_User) then 
            set removeNoAccessFrom = instances
            exit function
        end if
        dim prevented, obj, rel, prev, remove, r2
        dim included, include
        set removeNoAccessFrom = metis.newInstanceList()
        set included = metis.newInstanceList()
        set prevented = metis.newInstanceList()
        for each rel in Global_User.getNeighbourRelationships(0, Nothing)
            if rel.type.inherits(Global_Context.RemoveType) then 
                if not prevented.contains(rel.target) then call prevented.addLast(rel.target)
            elseif not included.contains(rel.target) then &#39; all other rels give access, for now
                call included.addLast(rel.target)
                if rel.target.type.inherits(Global_Context.TaskType) then
                    for each r2 in Global_InformationManager.getAllNeighbours(rel.target,&#34;&#34;, GLOBAL_Context.TIType, 0)
                        if not included.contains(r2.target) then call included.addLast(r2.target)
                    next
                end if
            end if
        next
        for each obj in Global_Context.inheritance.supers(Global_User)  
            for each rel in obj.getNeighbourRelationships(0, Nothing)
                if rel.type.inherits(Global_Context.RemoveType) then 
                    if not prevented.contains(rel.target) then call prevented.addLast(rel.target)
                elseif not included.contains(rel.target) then &#39; all other rels
                    call included.addLast(rel.target)
                    if rel.target.type.inherits(Global_Context.TaskType) then
                        for each r2 in Global_InformationManager.getAllNeighbours(rel.target,&#34;&#34;, GLOBAL_Context.TIType, 0)
                            if not included.contains(r2.target) then call included.addLast(r2.target)
                        next
                    end if
                end if
             next
        next
        
        if prevented.count = 0 then
            set removeNoAccessFrom = instances
            exit function
        end if
        dim i
        i = 1
        for each obj in instances
            remove = false
            include = false
            if i &#62;= startAt then
                remove = prevented.contains(obj) 
                include = included.contains(obj)         
                set prev = obj.parent
                do while isEnabled(prev) and not (remove or include)                  
                    remove = prevented.contains(prev)
                    include = included.contains(prev)  
                    set prev = prev.parent
                loop
                if not (remove or include) then
                    for each prev in Global_Context.inheritance.supers(obj)
                        remove = prevented.contains(prev)
                        include = included.contains(prev) 
                        if remove then exit for
                    next
                end if
            end if
            if include or not remove then call removeNoAccessFrom.addLast(obj)
            i = i + 1
        next
    end function
    
    
     private Sub Class_Initialize
        if not isObject(GLOBAL_RoleManager) then
             set GLOBAL_RoleManager = me
        end if
     end sub
	
End class
</string>
  </valueset>
 </object>

 <object id="_002at1d013lge530no0n">
  <valueset size="10" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="../languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Class EKA_Compare</string>
   <string name="description"></string>
   <integer name="dbms-admin.commitFlag">0</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20080417 091953724</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="comments"></string>
   <string name="script">&#39; eka_compare.vbs

dim GLOBAL_Compare_instance

Class EKA_Compare

    Public compareMode

    Public Function getPropViewStatus
        dim currentModel
        dim prop, propView, propName
        dim status
        dim rel, rels
        dim first

        status = -1
        getPropViewStatus = status

        if not isValid(GLOBAL_Compare_instance) then
            exit function
        end if

        set currentModel = metis.currentModel
        set propView = currentModel.currentInstance

        &#39; Find the property to compare to
        if isEnabled(propView) then
            propName = propView.title
            minval1 = getPropValue(propView, &#34;Minimum&#34;)
            maxval1 = getPropValue(propView, &#34;Maximum&#34;)
            set rels = Global_InformationManager.getAllNeighbours(GLOBAL_Compare_instance, &#34;&#34;, GLOBAL_Type_EkaHasProperty, 0)
            first = true
            for each rel in rels
                dim prop1, prop2
                set prop = rel.target
                if prop.title = propName then
                    minval2 = getPropValue(prop, &#34;Minimum&#34;)
                    maxval2 = getPropValue(prop, &#34;Maximum&#34;)
                    exit for
                end if
                if isParamValue(prop) then
                    dim propTitles
                    set prop1 = prop
                    set prop2 = prop
	                propTitles = Split(prop.title, &#34;.&#34;, -1, 1)
                    if propTitles(0) = propName then
                        if propTitles(1) = &#34;Minimum&#34; then 
                            set prop1 = prop
                            minval2 = getPropValue(prop1, &#34;Minimum&#34;)
                        elseif propTitles(1) = &#34;Maximum&#34; then 
                            set prop2 = prop
                            maxval2 = getPropValue(prop2, &#34;Maximum&#34;)
                        end if
                    end if
                    if not isEmpty(minval2) and not isEmpty(maxval2) then exit for
                end if
           next
        end if
        if not isEmpty(minval1) and not isEmpty(maxval1) and not isEmpty(minval2) and not isEmpty(maxval2) then
            getPropViewStatus = compareVals(minval1, maxval1, minval2, maxval2)
        end if

    End Function


    private function getPropValue(p, minOrMax)
        dim propval, valueProp
        if minOrMax = &#34;Minimum&#34; then valueProp = &#34;minval&#34; else valueProp = &#34;maxval&#34;
        if p.type.inherits(GLOBAL_Type_EkaPropertyView) then
            propval = p.getNamedStringValue(valueProp)
            if Len(propval) = 0 then propval = p.getNamedStringValue(&#34;value&#34;)
            if isNumeric(propval) then
                getPropValue = CDbl(propval)
            else
                getPropValue = Empty
            end if
        elseif p.type.inherits(GLOBAL_Type_EkaProperty) then
            if isParamValue(p) then
                dim propTitles
	            propTitles = Split(p.title, &#34;.&#34;, -1, 1)
                if propTitles(1) = &#34;Minimum&#34; then getPropValue = p.getNamedStringValue(&#34;value&#34;)
                if propTitles(1) = &#34;Maximum&#34; then getPropValue = p.getNamedStringValue(&#34;value&#34;)
            else
                dim rel, rels
                set rels = Global_InformationManager.getAllNeighbours(p, &#34;&#34;, GLOBAL_Type_EkaHasParameter, 0)
                if rels.count = 0 then
                    propval = p.getNamedStringValue(&#34;value&#34;)
                    if isNumeric(propval) then
                        getPropValue = CDbl(propval)
                    else
                        getPropValue = Empty
                    end if
                    exit function
                else
                    dim nomval, tolval
                    propval = &#34;&#34;
                    for each rel in rels
                        set param = rel.target
                        if param.title = &#34;Minimum&#34; then
                            propval = param.getNamedStringValue(&#34;value&#34;)
                            if Len(propval) &#62; 0 then
                                if isNumeric(propval) then
                                    getPropValue = CDbl(propval)
                                else
                                    getPropValue = Empty
                                end if
                                exit function
                            end if
                        elseif param.title = &#34;Nominal&#34; then
                            nomval = param.getNamedStringValue(&#34;value&#34;)
                         elseif param.title = &#34;Tolerance&#34; then
                            tolval = param.getNamedStringValue(&#34;tolerance&#34;)
                        end if
                    next
                    if isNumeric(nomval) then
                        propval = CDbl(nomval)
                        if isNumeric(tolval) then
                            tolval = CDbl(tolval)
                            if minOrMax = &#34;Minimum&#34; then
                                propval = propval * (1 - tolval / 100)
                            else
                                propval = propval * (1 + tolval / 100)
                            end if
                        end if
                        getPropValue = propval
                    elseif Len(nomval) &#62; 0 then
                        getPropValue = Empty
                    end if
                end if
            end if
        end if
    end function

    private function compareVals(minval1, maxval1, minval2, maxval2)    &#39; -1 = Undefined
                                                                        &#39;  0 = Not within range,
                                                                        &#39;  1 = Partly within range,
                                                                        &#39;  2 = Within range
        dim valmin1, valmin2, valmax1, valmax2
        dim valmin, valmax

        valmin1 = Sgn(minval1 - minval2)            &#39; -1: Lower, 0: Equal, 1: Higher
        valmin2 = Sgn(minval1 - maxval2)
        valmax1 = Sgn(maxval1 - maxval2)
        valmax2 = Sgn(maxval1 - minval2)
        
        if valmin2 &#60; 0 then 
            valmin = -2 
        elseif valmin1 &#60; 0 then 
            valmin = -1 
        elseif valmin2 &#62; 0 then 
            valmin = 2 
        elseif valmin1 &#62;0 then 
            valmin = 1 
        else 
            valmin = 0 
        end if
        if valmax2 &#60; 0 then 
            valmax = -2 
        elseif valmax1 &#60; 0 then 
            valmax = -1 
        elseif valmax2 &#62; 0 then 
            valmax = 2 
        elseif valmax1 &#62;0 then 
            valmax = 1 
        else 
            valmax = 0 
        end if

        if compareMode = 1 then
            if valmin = -2 and valmax = -2 then compareVals =  0      &#39; Too low and Too low
            if valmin = -2 and valmax = -1 then compareVals =  1      &#39; Too Low and Lower
            if valmin = -2 and valmax =  0 then compareVals =  1      &#39; Too Low and Exact
            if valmin = -2 and valmax =  1 then compareVals =  1      &#39; Too Low and Higher
            if valmin = -2 and valmax =  2 then compareVals =  0      &#39; Too Low and Too high

            if valmin = -1 and valmax = -2 then compareVals =  0      &#39; Lower and Too low
            if valmin = -1 and valmax = -1 then compareVals =  1      &#39; Lower and Lower
            if valmin = -1 and valmax =  0 then compareVals =  1      &#39; Lower and Exact
            if valmin = -1 and valmax =  1 then compareVals =  1      &#39; Lower and Higher
            if valmin = -1 and valmax =  2 then compareVals =  0      &#39; Lower and Too high

            if valmin =  0 and valmax = -2 then compareVals =  0      &#39; Exact and Too low
            if valmin =  0 and valmax = -1 then compareVals =  1      &#39; Exact and Lower
            if valmin =  0 and valmax =  0 then compareVals =  2      &#39; Exact and Exact
            if valmin =  0 and valmax =  1 then compareVals =  2      &#39; Exact and Higher
            if valmin =  0 and valmax =  2 then compareVals =  0      &#39; Exact and Too high

            if valmin =  1 and valmax = -2 then compareVals =  0      &#39; Higher and Too low
            if valmin =  1 and valmax = -1 then compareVals =  1      &#39; Higher and Lower
            if valmin =  1 and valmax =  0 then compareVals =  1      &#39; Higher and Exact
            if valmin =  1 and valmax =  1 then compareVals =  1      &#39; Higher and Higher
            if valmin =  1 and valmax =  2 then compareVals =  0      &#39; Higher and Too high

            if valmin =  2 and valmax = -2 then compareVals =  0      &#39; Too high and Too low
            if valmin =  2 and valmax = -1 then compareVals =  0      &#39; Too high and Lower
            if valmin =  2 and valmax =  0 then compareVals =  0      &#39; Too high and Exact
            if valmin =  2 and valmax =  1 then compareVals =  0      &#39; Too high and Higher
            if valmin =  2 and valmax =  2 then compareVals =  0      &#39; Too high and Too high

        end if

    end function

    &#39;-----------------------------------------------------------
    public function compareVal(valobj1, valobj2, accuracy)  &#39;  0: 1 = 2
                                                            &#39; -1: 1 &#60; 2
                                                            &#39; +1: 1 &#62; 2
                                                            &#39; -9: Different
        dim strval1, strval2
        dim dblval1, dblval2

        compareVal = -9

        if isObject(valobj1) then
            strval1 = valobj1.getNamedStringValue(&#34;value&#34;)
        else
            strval1 = valobj1
        end if
        if isObject(valobj2) then
            strval2 = valobj2.getNamedStringValue(&#34;value&#34;)
        else
            strval2 = valobj2
        end if

        if isNumeric(strval1) then
            dblval1 = CDbl(strval1)
            if isNumeric(strval2) then
                dblval2 = CDbl(strval2)
                if dblval1 &#62;= dblval2 * (1 - accuracy) and dblval1 &#60;= dblval2 * (1 + accuracy) then
                    compareVal = 0
                elseif dblval1 &#62;= dblval2 * (1 - accuracy) then
                    compareVal = 1
                elseif dblval1 &#60;= dblval2 * (1 - accuracy) then
                    compareVal = -1
                end if
            end if
        elseif strval1 = strval2 then
            compareVal = 0
        end if
    end function


    private function isParamValue(prop)
        if InStr(1, prop.title, &#34;.&#34;) &#62; 0 then isParamValue = true else isParamValue = false
    end function

    private function getParamValue(obj, paramName)
        dim rel, rels, param
        getParamValue = Empty
        set rels = Global_InformationManager.getAllNeighbours(obj, &#34;&#34;, GLOBAL_Type_EkaHasProperty, 0)
        for each rel in rels
            set param = rel.target
            if param.title = paramName then
                getParamValue = param.getNamedStringValue(&#34;value&#34;)
                exit function
            end if
        next
    end function

    private Sub Class_Initialize
        compareMode = 1
    end sub
End Class</string>
  </valueset>
 </object>

 <object id="_002at1d013nf8r52a4h0">
  <valueset size="10" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="../languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Function getPropertyViewStatus, getStatusLineColor</string>
   <string name="description"></string>
   <integer name="dbms-admin.commitFlag">0</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20080417 073034327</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="comments"></string>
   <string name="script">option explicit

function getPropertyViewStatus
    dim ekaCompare

    set ekaCompare = new EKA_Compare
    getPropertyViewStatus = ekaCompare.getPropViewStatus
    set ekaCompare = nothing
end function

Function getStatusLineColor(isProperty)
    dim status

    getStatusLineColor = &#34;white&#34;
    if isProperty then
        status = getPropertyViewStatus
    else
        status = -1
    end if
    if status &#62; -1 then
        getStatusLineColor = &#34;black&#34;
    end if
    if status &#62; -1 then
        getStatusLineColor = &#34;black&#34;
    end if
End Function

</string>
  </valueset>
 </object>

 <objectview id="_002asj60272bqgu0h19s" xlink:role="object" xlink:title="Information" xlink:href="#_002asj60272bqgti3c9a" state="open" behavior="nested" text-scale="0.421782" decomp-scale="0.5" left="64" top="2144.08" width="2304" height="1536">
  <symbol-override state="open" xlink:role="symbol" xlink:title="Open Nested Object" xlink:href="metis:stdsyms#oid67" xlink:actuate="user">
  </symbol-override>
  <symbol-override state="closed" xlink:role="symbol" xlink:title="Closed Nested Object" xlink:href="metis:stdsyms#oid68" xlink:actuate="user">
  </symbol-override>
  <child-link xlink:role="objectview" xlink:title="Class EKA_Inheritance" xlink:href="#_002asnu015cvug0fn0i0"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002asnu015cvug17vht4"/>
  <child-link xlink:role="objectview" xlink:title="Class EKA_Property&#10;" xlink:href="#_002aspt01b7t9qcona5p"/>
  <child-link xlink:role="objectview" xlink:title="Class EKA_Context&#10;" xlink:href="#_002aspt01b7t9q973qr8"/>
  <child-link xlink:role="objectview" xlink:title="Class EKA_Instance" xlink:href="#_002aspt01b7t9qc1vv1p"/>
  <child-link xlink:role="objectview" xlink:title="Class EKA_Globals" xlink:href="#_002aspt01b7t9qndoqh0"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002aspt01b7t9qrlcrjh"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002aspt01b7t9qpmrtks"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002aspt01b7ta4uu6c5j"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002aspt01b7ta4nsvm7l"/>
  <child-link xlink:role="objectview" xlink:title="Class EKA_InformationManager" xlink:href="#_002asre019rp1v265jn4"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002asre019rp3ead0c6k"/>
  <child-link xlink:role="objectview" xlink:title="Class CVW_ParameterManager" xlink:href="#_002aso00190aa1r6eqbh"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002aso00190aa1hb0na0"/>
  <child-link xlink:role="objectview" xlink:title="Class EKA_Import" xlink:href="#_002at1100qtusqpcbl1q"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002at1100qtusq5dkip4"/>
  <child-link xlink:role="objectview" xlink:title="Class CVW_RoleManager" xlink:href="#_002at11019j8sgbc7cej"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002at11019j8sg0f21me"/>
  <child-link xlink:role="objectview" xlink:title="Class EKA_Compare" xlink:href="#_002at1d013lge58kihj3"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002at1d013lge5p8phla"/>
 </objectview>

 <relationshipview id="_002asj60272bqq7g887b" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:href="#_002asj6027323duqrqb2"/>
  <target-link xlink:role="objectview" xlink:title="Information" xlink:href="#_002asj60272bqgu0h19s"/>
 </relationshipview>

 <objectview id="_002asj602731to4i2b9a" xlink:role="object" xlink:title="View" xlink:href="#_002asj602731tohevjet" state="open" behavior="nested" text-scale="0.421782" decomp-scale="0.5" left="2368" top="96.08" width="2304" height="2048">
  <symbol-override state="open" xlink:role="symbol" xlink:title="Open Nested Object" xlink:href="metis:stdsyms#oid67" xlink:actuate="user">
  </symbol-override>
  <symbol-override state="closed" xlink:role="symbol" xlink:title="Closed Nested Object" xlink:href="metis:stdsyms#oid68" xlink:actuate="user">
  </symbol-override>
  <child-link xlink:role="objectview" xlink:title="Class CVW_Filter" xlink:href="#_002aspt01b45jv5qp072"/>
  <child-link xlink:role="objectview" xlink:title="Class CVW_Task" xlink:href="#_002aspt01b45jvo5280l"/>
  <child-link xlink:role="objectview" xlink:title="Class CVW_Instance" xlink:href="#_002aspt01b45jvll5dja"/>
  <child-link xlink:role="objectview" xlink:title="Class CVW_ObjectView" xlink:href="#_002aspt01b45jvomco79"/>
  <child-link xlink:role="objectview" xlink:title="Class CVW_Navigate" xlink:href="#_002aspt01b45jvrd4ak4"/>
  <child-link xlink:role="objectview" xlink:title="Class CVW_LanguageSpecification" xlink:href="#_002aspt01b45jv1j3rns"/>
  <child-link xlink:role="objectview" xlink:title="Class CVW_InstRule,  CVW_RelRule, CVW_SymbolRule" xlink:href="#_002aspt01b45jvfk9dc8"/>
  <child-link xlink:role="objectview" xlink:title="Class CVW_Object" xlink:href="#_002aspt01b45jvf19mro"/>
  <child-link xlink:role="objectview" xlink:title="Class CVW_MenuAction" xlink:href="#_002aspt01b45jv9lm0q5"/>
  <child-link xlink:role="objectview" xlink:title="Class CVW_Workspace" xlink:href="#_002aspt01b45jvubi1md"/>
  <child-link xlink:role="objectview" xlink:title="Class CVW_CircularLayout&#10;" xlink:href="#_002aspt01b45jvguicte"/>
  <child-link xlink:role="objectview" xlink:title="Class CVW_MenuTree&#10;" xlink:href="#_002aspt01b45jvgr5rns"/>
  <child-link xlink:role="objectview" xlink:title="Class CVW_StatusBar&#10;DK" xlink:href="#_002aspt01b45jvn1d4e7"/>
  <child-link xlink:role="objectview" xlink:title="Class CVW_ViewStrategy&#10;" xlink:href="#_002aspt01b45jv4rgsh7"/>
  <child-link xlink:role="objectview" xlink:title="Class CVW_ViewSpecification&#10;" xlink:href="#_002aspt01b45jv9iob6g"/>
  <child-link xlink:role="objectview" xlink:title="Class CVW_Workarea&#10;" xlink:href="#_002aspt01b45jvs8bsao"/>
  <child-link xlink:role="objectview" xlink:title="Class CVW_Action" xlink:href="#_002aspt01b45jvqvunti"/>
  <child-link xlink:role="objectview" xlink:title="Class CVW_ViewstyleSpecification&#10;" xlink:href="#_002aspt01b45jln5fvsg"/>
  <child-link xlink:role="objectview" xlink:title="Class CVW_SelectDialog" xlink:href="#_002aspt01b45jlh084l8"/>
  <child-link xlink:role="objectview" xlink:title="Class CVW_ContentSpecification" xlink:href="#_002aspt01b45jlq0o28i"/>
  <child-link xlink:role="objectview" xlink:title="Class CVW_Window" xlink:href="#_002aspt01b45jlnvfgph"/>
  <child-link xlink:role="objectview" xlink:title="Class CVW_ArgumentValue" xlink:href="#_002aspt01b45jl5to7nf"/>
  <child-link xlink:role="objectview" xlink:title="Class CVW_GenericWorkarea&#10;" xlink:href="#_002asjb01dkcl45hj97c"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002asjb01dkcl4pr5hrp"/>
  <child-link xlink:role="objectview" xlink:title="Class CVW_StatusBar&#10;" xlink:href="#_002asjd00rcftrt4le1g"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002asjd00rcftrl6qseo"/>
  <child-link xlink:role="objectview" xlink:title="Class CVW_WorkspaceH" xlink:href="#_002ask0025hc03jv8qa6"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002ask0025hc03toaroj"/>
  <child-link xlink:role="objectview" xlink:title="Class CVW_GenericAction" xlink:href="#_002asnj01040sum43ss1"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002asnj01040t8fgpso7"/>
  <child-link xlink:role="objectview" xlink:title="Class CVW_GenericMenuTree" xlink:href="#_002asnj0106ereggr05i"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002asnj0106erernncvo"/>
  <child-link xlink:role="objectview" xlink:title="Class CVW_GenericSearch" xlink:href="#_002asnu00uibotmrq683"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002asnu00uibot88qcpj"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002aspt01b45jvhdpp4h"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002aspt01b45jvan0rl1"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002aspt01b45jv8e31er"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002aspt01b45jvdobi9u"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002aspt01b45jv9me0al"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002aspt01b45jvi896a1"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002aspt01b45jvqoeh7m"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002aspt01b45jvha3pju"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002aspt01b45jvtut4i0"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002aspt01b45jv3k4kl1"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002aspt01b45jvig03bi"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002aspt01b45jva2tgg9"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002aspt01b45jv9pcj7u"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002aspt01b45jvm681mq"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002aspt01b45jvr68v9t"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002aspt01b45k938bgid"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002aspt01b45k9evlr32"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002aspt01b45k91evs2b"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002aspt01b45k99mc4ld"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002aspt01b45k93mik9r"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002aspt01b45k9gn6qn1"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002aspt01b45k9h7a9go"/>
  <child-link xlink:role="objectview" xlink:title="Class CVW_Rating" xlink:href="#_002asqb014ve340jgr4t"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002asqb014ve3424aoon"/>
 </objectview>

 <relationshipview id="_002asj602731tor4rp3q" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:href="#_002asj6027323duqrqb2"/>
  <target-link xlink:role="objectview" xlink:title="View" xlink:href="#_002asj602731to4i2b9a"/>
 </relationshipview>

 <relationshipview id="_002asj6027323d42dctp" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:href="#_002asj6027323duqrqb2"/>
  <target-link xlink:role="objectview" xlink:href="#_002asj6027323duqrqb2"/>
 </relationshipview>

 <objectview id="_002asj6027323duqrqb2" xlink:role="object" xlink:href="#_002asj6027323dphmg96" state="open" behavior="nested" text-scale="0.843564" decomp-scale="0.25" left="-1632" top="-712.02" width="1184" height="936.02">
  <symbol-override state="open" xlink:role="symbol" xlink:title="Open Nested Object" xlink:href="metis:stdsyms#oid67" xlink:actuate="user">
  </symbol-override>
  <symbol-override state="closed" xlink:role="symbol" xlink:title="Closed Nested Object" xlink:href="metis:stdsyms#oid68" xlink:actuate="user">
  </symbol-override>
  <child-link xlink:role="relationshipview" xlink:href="#_002asj6027323d42dctp"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002asj60272bqq7g887b"/>
  <child-link xlink:role="objectview" xlink:title="View" xlink:href="#_002asj602731to4i2b9a"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002asj602731tor4rp3q"/>
  <child-link xlink:role="objectview" xlink:title="Utilities" xlink:href="#_002asj6027328323iv1c"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002asj60273283dcp1pi"/>
  <child-link xlink:role="objectview" xlink:title="Task" xlink:href="#_002ask701tmsf99c81tn"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002ask701tmsf979j6eg"/>
  <child-link xlink:role="objectview" xlink:title="Class Rule_Globals" xlink:href="#_002asr000rddf05ejjmk"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002asr000rddfutmfije"/>
  <child-link xlink:role="objectview" xlink:title="Class Rule" xlink:href="#_002asr000re02hmes7bn"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002asr000re02h7neuh5"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002aso701iev4gn666tf"/>
  <child-link xlink:role="objectview" xlink:title="Information" xlink:href="#_002asj60272bqgu0h19s"/>
  <child-link xlink:role="objectview" xlink:href="#_002aso701iev4g97nco6"/>
 </objectview>

 <objectview id="_002asj6027328323iv1c" xlink:role="object" xlink:title="Utilities" xlink:href="#_002asj60273283vqvfr0" state="open" behavior="nested" text-scale="0.421782" decomp-scale="0.5" left="64" top="96.08" width="2304" height="2048">
  <symbol-override state="open" xlink:role="symbol" xlink:title="Open Nested Object" xlink:href="metis:stdsyms#oid67" xlink:actuate="user">
  </symbol-override>
  <symbol-override state="closed" xlink:role="symbol" xlink:title="Closed Nested Object" xlink:href="metis:stdsyms#oid68" xlink:actuate="user">
  </symbol-override>
  <child-link xlink:role="objectview" xlink:title="Function getModelFromConnector" xlink:href="#_002aspt01b1nhdc0n49g"/>
  <child-link xlink:role="objectview" xlink:title="Function getWorkareaLabelText" xlink:href="#_002aspt01b1nhdfglgq4"/>
  <child-link xlink:role="objectview" xlink:title="Function findWorkWindow, findWorkWindowView, getWorkWindowView" xlink:href="#_002aspt01b1nhdpr53lh"/>
  <child-link xlink:role="objectview" xlink:title="Function isInView" xlink:href="#_002aspt01b1nhdn1dvut"/>
  <child-link xlink:role="objectview" xlink:title="Function buildInstRules, buildRelRules, buildSymbolRules" xlink:href="#_002aspt01b1nhdj8nd3c"/>
  <child-link xlink:role="objectview" xlink:title="Function findPartsDK" xlink:href="#_002aspt01b1nhdgvojmp"/>
  <child-link xlink:role="objectview" xlink:title="Function instancesInModel" xlink:href="#_002aspt01b1nhd8vqprc"/>
  <child-link xlink:role="objectview" xlink:title="Function relocate" xlink:href="#_002aspt01b1nhdphe702"/>
  <child-link xlink:role="objectview" xlink:title="Sub copyPropertyValues" xlink:href="#_002aspt01b1nhdhl40ip"/>
  <child-link xlink:role="objectview" xlink:title="Function findInstModel, findInstModel2" xlink:href="#_002aspt01b1nhd2q7o71"/>
  <child-link xlink:role="objectview" xlink:title="Function viewExists, relViewExists" xlink:href="#_002aspt01b1nhda9mg25"/>
  <child-link xlink:role="objectview" xlink:title="Function findCVWcomponent" xlink:href="#_002aspt01b1nhd7ind15"/>
  <child-link xlink:role="objectview" xlink:title="Sub resetCVWcomponent" xlink:href="#_002aspt01b1nhdb2hctq"/>
  <child-link xlink:role="objectview" xlink:title="Sub configureCVWcomponent" xlink:href="#_002aspt01b1nhd3pe4ql"/>
  <child-link xlink:role="objectview" xlink:title="Function getCVWmodel" xlink:href="#_002aspt01b1nhd7andg2"/>
  <child-link xlink:role="objectview" xlink:title="Function getInstModel" xlink:href="#_002aspt01b1nhdhteslj"/>
  <child-link xlink:role="objectview" xlink:title="Function cleanTree" xlink:href="#_002aspt01b1nhdvv5uln"/>
  <child-link xlink:role="objectview" xlink:title="Function generateTree" xlink:href="#_002aspt01b1nhds3dnri"/>
  <child-link xlink:role="objectview" xlink:title="Function findInstanceView" xlink:href="#_002aspt01b1nhdv4fcsd"/>
  <child-link xlink:role="objectview" xlink:title="Function instanceInList, instanceByNameInList, isInList, addToList" xlink:href="#_002aspt01b1nhd04eg0q"/>
  <child-link xlink:role="objectview" xlink:title="Function hasInstance" xlink:href="#_002aspt01b1nhd46ts2u"/>
  <child-link xlink:role="objectview" xlink:title="Function isValid" xlink:href="#_002aspt01b1nhdl6qvpq"/>
  <child-link xlink:role="objectview" xlink:title="Function isEnabled" xlink:href="#_002aspt01b1nhdn459rl"/>
  <child-link xlink:role="objectview" xlink:title="Function findParts" xlink:href="#_002ask801bsu5naqa6o7"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002ask801bsu5ninum64"/>
  <child-link xlink:role="objectview" xlink:title="Function getEqualObject, getEqualObject2" xlink:href="#_002asnj01gh2uaapvj97"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002asnj01gh2ua8872ie"/>
  <child-link xlink:role="objectview" xlink:title="Class ArrayList" xlink:href="#_002asnk01779mddrvni7"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002asnk01779md8i7pfj"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002aspt01b1nhno8v6eg"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002aspt01b1nhnbtegfh"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002aspt01b1nhn543cfc"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002aspt01b1nhnhm2uu3"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002aspt01b1nhn4h7fnn"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002aspt01b1nhntvv81e"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002aspt01b1nhne60mn0"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002aspt01b1nhn4re9d9"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002aspt01b1nhnc9p9fj"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002aspt01b1nhn9nllgd"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002aspt01b1nhn0qo67i"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002aspt01b1nhnm12kaa"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002aspt01b1nhnncvfb8"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002aspt01b1nhn2p4a2o"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002aspt01b1nhn53gg1q"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002aspt01b1nhnuoq93h"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002aspt01b1nhn73l4jv"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002aspt01b1nhn9sh3ju"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002aspt01b1ni111v34h"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002aspt01b1ni1eq72mf"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002aspt01b1ni1c9dhr4"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002aspt01b1ni1k1ln8e"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002aspt01b1ni1osg80n"/>
  <child-link xlink:role="objectview" xlink:title="Function getRatingColor" xlink:href="#_002asqb01632na49k42k"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002asqb01632naantmgo"/>
  <child-link xlink:role="objectview" xlink:title="Function selectAmong" xlink:href="#_002asr901869eg42gvnr"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002asr901869egmb5p6m"/>
  <child-link xlink:role="objectview" xlink:title="Function isInMenu, Function getWorkarea" xlink:href="#_002asr901apinijcajnl"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002asr901apinii5u5hq"/>
  <child-link xlink:role="objectview" xlink:title="Sub setHourGlass" xlink:href="#_002asuc01fbia1h6uv0k"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002asuc01fbia1ukgvdj"/>
  <child-link xlink:role="objectview" xlink:title="Function getPropertyViewStatus, getStatusLineColor" xlink:href="#_002at1d013nf8rqrg4hs"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002at1d013nf8rh0ig4i"/>
 </objectview>

 <relationshipview id="_002asj60273283dcp1pi" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:href="#_002asj6027323duqrqb2"/>
  <target-link xlink:role="objectview" xlink:title="Utilities" xlink:href="#_002asj6027328323iv1c"/>
 </relationshipview>

 <objectview id="_002asjb01dkcl45hj97c" xlink:role="object" xlink:title="Class CVW_GenericWorkarea&#10;" xlink:href="#_002asjb01dkcl46pjf25" state="open" behavior="nested" text-scale="0.240519" decomp-scale="0.176778" left="3200" top="3456" width="1323" height="353.048">
  <symbol-override state="open" xlink:role="symbol" xlink:title="ToolButton_gray_blu" xlink:href="../views/akm.svg#_002asht025gbhac8tf7s" xlink:actuate="user">
   <replace tag="text" property="value" macro="(expand (property name))"/>
   <replace tag="canvas" property="fillcolor" macro="(expand &#34;lightgreen&#34;)"/>
   <replace tag="text" property="fillcolor" macro="(expand &#34;lightgreen&#34;)"/>
  </symbol-override>
 </objectview>

 <relationshipview id="_002asjb01dkcl4pr5hrp" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="View" xlink:href="#_002asj602731to4i2b9a"/>
  <target-link xlink:role="objectview" xlink:title="Class CVW_GenericWorkarea&#10;" xlink:href="#_002asjb01dkcl45hj97c"/>
 </relationshipview>

 <relationshipview id="_002asjd00rcftrl6qseo" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="View" xlink:href="#_002asj602731to4i2b9a"/>
  <target-link xlink:role="objectview" xlink:title="Class CVW_StatusBar&#10;" xlink:href="#_002asjd00rcftrt4le1g"/>
 </relationshipview>

 <objectview id="_002asjd00rcftrt4le1g" xlink:role="object" xlink:title="Class CVW_StatusBar&#10;" xlink:href="#_002asjd00rcftrmj7m16" state="open" behavior="nested" text-scale="0.240519" decomp-scale="0.176778" left="1664" top="2688" width="1323" height="353.048">
  <symbol-override state="open" xlink:role="symbol" xlink:title="ToolButton_gray_blu" xlink:href="../views/akm.svg#_002asht025gbhac8tf7s" xlink:actuate="user">
   <replace tag="text" property="value" macro="(expand (property name))"/>
   <replace tag="canvas" property="fillcolor" macro="(expand &#34;lightgreen&#34;)"/>
   <replace tag="text" property="fillcolor" macro="(expand &#34;lightgreen&#34;)"/>
  </symbol-override>
 </objectview>

 <objectview id="_002ask0025hc03jv8qa6" xlink:role="object" xlink:title="Class CVW_WorkspaceH" xlink:href="#_002ask0025hc03qbnha6" state="open" behavior="nested" text-scale="0.240519" decomp-scale="0.176778" left="3200" top="0" width="1323" height="353.048">
  <symbol-override state="open" xlink:role="symbol" xlink:title="ToolButton_gray_blu" xlink:href="../views/akm.svg#_002asht025gbhac8tf7s" xlink:actuate="user">
   <replace tag="text" property="value" macro="(expand (property name))"/>
   <replace tag="canvas" property="fillcolor" macro="(expand &#34;lightgreen&#34;)"/>
   <replace tag="text" property="fillcolor" macro="(expand &#34;lightgreen&#34;)"/>
  </symbol-override>
 </objectview>

 <relationshipview id="_002ask0025hc03toaroj" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="View" xlink:href="#_002asj602731to4i2b9a"/>
  <target-link xlink:role="objectview" xlink:title="Class CVW_WorkspaceH" xlink:href="#_002ask0025hc03jv8qa6"/>
 </relationshipview>

 <relationshipview id="_002ask701tmsf979j6eg" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:href="#_002asj6027323duqrqb2"/>
  <target-link xlink:role="objectview" xlink:title="Task" xlink:href="#_002ask701tmsf99c81tn"/>
 </relationshipview>

 <objectview id="_002ask701tmsf99c81tn" xlink:role="object" xlink:title="Task" xlink:href="#_002ask701tmsf9rqqa6k" state="open" behavior="nested" text-scale="0.421782" decomp-scale="0.5" left="2368" top="2144.08" width="2304" height="1536">
  <symbol-override state="open" xlink:role="symbol" xlink:title="Open Nested Object" xlink:href="metis:stdsyms#oid67" xlink:actuate="user">
  </symbol-override>
  <symbol-override state="closed" xlink:role="symbol" xlink:title="Closed Nested Object" xlink:href="metis:stdsyms#oid68" xlink:actuate="user">
  </symbol-override>
  <child-link xlink:role="objectview" xlink:title="Class IRTV_Config" xlink:href="#_002asnu015d0g04533aa"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002asnu015d0g04sf3i0"/>
  <child-link xlink:role="objectview" xlink:title="Class CVW_ViewManager" xlink:href="#_002aso001908jt3rh7qg"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002aso001908jt2df86g"/>
  <child-link xlink:role="objectview" xlink:title="Class CVW_TaskManager" xlink:href="#_002aso001909h0f9eda1"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002aso001909h0s24ohp"/>
  <child-link xlink:role="objectview" xlink:title="Class CVW_EventManager, Class CVW_Event" xlink:href="#_002asrj0166n9nto3g9c"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002asrj0166n9n2clop1"/>
  <child-link xlink:role="objectview" xlink:title="Class CVW_Webservice" xlink:href="#_002asvr010ff1ftopgir"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002asvr010ff1fvf5qgc"/>
  <child-link xlink:role="objectview" xlink:title="Class CVW_Internet_Explorer" xlink:href="#_002asvr010h8tho6d599"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002asvr010h8thd4p6vb"/>
 </objectview>

 <objectview id="_002ask801bsu5naqa6o7" xlink:role="object" xlink:title="Function findParts" xlink:href="#_002ask801bsu5ne1tf0u" state="open" behavior="nested" text-scale="0.240519" decomp-scale="0.176778" left="1664" top="384" width="1323" height="353.048">
  <symbol-override state="open" xlink:role="symbol" xlink:title="ToolButton_gray_blu" xlink:href="../views/akm.svg#_002asht025gbhac8tf7s" xlink:actuate="user">
   <replace tag="text" property="value" macro="(expand (property name))"/>
   <replace tag="canvas" property="fillcolor" macro="(expand &#34;lightgreen&#34;)"/>
   <replace tag="text" property="fillcolor" macro="(expand &#34;lightgreen&#34;)"/>
  </symbol-override>
 </objectview>

 <relationshipview id="_002ask801bsu5ninum64" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="Utilities" xlink:href="#_002asj6027328323iv1c"/>
  <target-link xlink:role="objectview" xlink:title="Function findParts" xlink:href="#_002ask801bsu5naqa6o7"/>
 </relationshipview>

 <objectview id="_002asnj01040sum43ss1" xlink:role="object" xlink:title="Class CVW_GenericAction" xlink:href="#_002asnj01040su1uk5bh" state="open" behavior="nested" text-scale="0.240519" decomp-scale="0.176778" left="128" top="3712" width="1323" height="353.048">
  <symbol-override state="open" xlink:role="symbol" xlink:title="ToolButton_gray_blu" xlink:href="../views/akm.svg#_002asht025gbhac8tf7s" xlink:actuate="user">
   <replace tag="text" property="value" macro="(expand (property name))"/>
   <replace tag="canvas" property="fillcolor" macro="(expand &#34;lightgreen&#34;)"/>
   <replace tag="text" property="fillcolor" macro="(expand &#34;lightgreen&#34;)"/>
  </symbol-override>
 </objectview>

 <relationshipview id="_002asnj01040t8fgpso7" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="View" xlink:href="#_002asj602731to4i2b9a"/>
  <target-link xlink:role="objectview" xlink:title="Class CVW_GenericAction" xlink:href="#_002asnj01040sum43ss1"/>
 </relationshipview>

 <objectview id="_002asnj0106ereggr05i" xlink:role="object" xlink:title="Class CVW_GenericMenuTree" xlink:href="#_002asnj0106ere7ubme9" state="open" behavior="nested" text-scale="0.240519" decomp-scale="0.176778" left="1664" top="3712" width="1323" height="353.048">
  <symbol-override state="open" xlink:role="symbol" xlink:title="ToolButton_gray_blu" xlink:href="../views/akm.svg#_002asht025gbhac8tf7s" xlink:actuate="user">
   <replace tag="text" property="value" macro="(expand (property name))"/>
   <replace tag="canvas" property="fillcolor" macro="(expand &#34;lightgreen&#34;)"/>
   <replace tag="text" property="fillcolor" macro="(expand &#34;lightgreen&#34;)"/>
  </symbol-override>
 </objectview>

 <relationshipview id="_002asnj0106erernncvo" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="View" xlink:href="#_002asj602731to4i2b9a"/>
  <target-link xlink:role="objectview" xlink:title="Class CVW_GenericMenuTree" xlink:href="#_002asnj0106ereggr05i"/>
 </relationshipview>

 <relationshipview id="_002asnj01gh2ua8872ie" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="Utilities" xlink:href="#_002asj6027328323iv1c"/>
  <target-link xlink:role="objectview" xlink:title="Function getEqualObject, getEqualObject2" xlink:href="#_002asnj01gh2uaapvj97"/>
 </relationshipview>

 <objectview id="_002asnj01gh2uaapvj97" xlink:role="object" xlink:title="Function getEqualObject, getEqualObject2" xlink:href="#_002asnj01gh2uabed0io" state="open" behavior="nested" text-scale="0.240519" decomp-scale="0.176778" left="1664" top="3712" width="1323" height="353.048">
  <symbol-override state="open" xlink:role="symbol" xlink:title="ToolButton_gray_blu" xlink:href="../views/akm.svg#_002asht025gbhac8tf7s" xlink:actuate="user">
   <replace tag="text" property="value" macro="(expand (property name))"/>
   <replace tag="canvas" property="fillcolor" macro="(expand &#34;lightgreen&#34;)"/>
   <replace tag="text" property="fillcolor" macro="(expand &#34;lightgreen&#34;)"/>
  </symbol-override>
 </objectview>

 <relationshipview id="_002asnk01779md8i7pfj" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="Utilities" xlink:href="#_002asj6027328323iv1c"/>
  <target-link xlink:role="objectview" xlink:title="Class ArrayList" xlink:href="#_002asnk01779mddrvni7"/>
 </relationshipview>

 <objectview id="_002asnk01779mddrvni7" xlink:role="object" xlink:title="Class ArrayList" xlink:href="#_002asnk01779mdn260qd" state="open" behavior="nested" text-scale="0.240519" decomp-scale="0.176778" left="128" top="3712" width="1323" height="353.048">
  <symbol-override state="open" xlink:role="symbol" xlink:title="ToolButton_gray_blu" xlink:href="../views/akm.svg#_002asht025gbhac8tf7s" xlink:actuate="user">
   <replace tag="text" property="value" macro="(expand (property name))"/>
   <replace tag="canvas" property="fillcolor" macro="(expand &#34;lightgreen&#34;)"/>
   <replace tag="text" property="fillcolor" macro="(expand &#34;lightgreen&#34;)"/>
  </symbol-override>
 </objectview>

 <relationshipview id="_002asnu00uibot88qcpj" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="View" xlink:href="#_002asj602731to4i2b9a"/>
  <target-link xlink:role="objectview" xlink:title="Class CVW_GenericSearch" xlink:href="#_002asnu00uibotmrq683"/>
 </relationshipview>

 <objectview id="_002asnu00uibotmrq683" xlink:role="object" xlink:title="Class CVW_GenericSearch" xlink:href="#_002asnu00uibot2it5a4" state="open" behavior="nested" text-scale="0.240519" decomp-scale="0.176778" left="3200" top="2944" width="1323" height="353.048">
  <symbol-override state="open" xlink:role="symbol" xlink:title="ToolButton_gray_blu" xlink:href="../views/akm.svg#_002asht025gbhac8tf7s" xlink:actuate="user">
   <replace tag="text" property="value" macro="(expand (property name))"/>
   <replace tag="canvas" property="fillcolor" macro="(expand &#34;lightgreen&#34;)"/>
   <replace tag="text" property="fillcolor" macro="(expand &#34;lightgreen&#34;)"/>
  </symbol-override>
 </objectview>

 <objectview id="_002asnu015cvug0fn0i0" xlink:role="object" xlink:title="Class EKA_Inheritance" xlink:href="#_002asnu015cvuge5edr9" state="open" behavior="nested" text-scale="0.240519" decomp-scale="0.176778" left="1906.13" top="2077.35" width="1323" height="353.048">
  <symbol-override state="open" xlink:role="symbol" xlink:title="ToolButton_gray_blu" xlink:href="../views/akm.svg#_002asht025gbhac8tf7s" xlink:actuate="user">
   <replace tag="text" property="value" macro="(expand (property name))"/>
   <replace tag="canvas" property="fillcolor" macro="(expand &#34;lightgreen&#34;)"/>
   <replace tag="text" property="fillcolor" macro="(expand &#34;lightgreen&#34;)"/>
  </symbol-override>
 </objectview>

 <relationshipview id="_002asnu015cvug17vht4" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="Information" xlink:href="#_002asj60272bqgu0h19s"/>
  <target-link xlink:role="objectview" xlink:title="Class EKA_Inheritance" xlink:href="#_002asnu015cvug0fn0i0"/>
 </relationshipview>

 <objectview id="_002asnu015d0g04533aa" xlink:role="object" xlink:title="Class IRTV_Config" xlink:href="#_002asnu015d0g0nfq0ql" state="open" behavior="nested" text-scale="0.240519" decomp-scale="0.176778" left="1045.16" top="2339.03" width="1323" height="353.048">
  <symbol-override state="open" xlink:role="symbol" xlink:title="ToolButton_gray_blu" xlink:href="../views/akm.svg#_002asht025gbhac8tf7s" xlink:actuate="user">
   <replace tag="text" property="value" macro="(expand (property name))"/>
   <replace tag="canvas" property="fillcolor" macro="(expand &#34;lightgreen&#34;)"/>
   <replace tag="text" property="fillcolor" macro="(expand &#34;lightgreen&#34;)"/>
  </symbol-override>
 </objectview>

 <relationshipview id="_002asnu015d0g04sf3i0" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="Task" xlink:href="#_002ask701tmsf99c81tn"/>
  <target-link xlink:role="objectview" xlink:title="Class IRTV_Config" xlink:href="#_002asnu015d0g04533aa"/>
 </relationshipview>

 <relationshipview id="_002aso001908jt2df86g" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="Task" xlink:href="#_002ask701tmsf99c81tn"/>
  <target-link xlink:role="objectview" xlink:title="Class CVW_ViewManager" xlink:href="#_002aso001908jt3rh7qg"/>
 </relationshipview>

 <objectview id="_002aso001908jt3rh7qg" xlink:role="object" xlink:title="Class CVW_ViewManager" xlink:href="#_002aso001908jt4cfilt" state="open" behavior="nested" text-scale="0.240519" decomp-scale="0.176778" left="3200" top="384" width="1323" height="353.048">
  <symbol-override state="open" xlink:role="symbol" xlink:title="ToolButton_gray_blu" xlink:href="../views/akm.svg#_002asht025gbhac8tf7s" xlink:actuate="user">
   <replace tag="text" property="value" macro="(expand (property name))"/>
   <replace tag="canvas" property="fillcolor" macro="(expand &#34;lightgreen&#34;)"/>
   <replace tag="text" property="fillcolor" macro="(expand &#34;lightgreen&#34;)"/>
  </symbol-override>
 </objectview>

 <objectview id="_002aso001909h0f9eda1" xlink:role="object" xlink:title="Class CVW_TaskManager" xlink:href="#_002aso001909h0b11ndt" state="open" behavior="nested" text-scale="0.240519" decomp-scale="0.176778" left="384" top="1408" width="1323" height="353.048">
  <symbol-override state="open" xlink:role="symbol" xlink:title="ToolButton_gray_blu" xlink:href="../views/akm.svg#_002asht025gbhac8tf7s" xlink:actuate="user">
   <replace tag="text" property="value" macro="(expand (property name))"/>
   <replace tag="canvas" property="fillcolor" macro="(expand &#34;lightgreen&#34;)"/>
   <replace tag="text" property="fillcolor" macro="(expand &#34;lightgreen&#34;)"/>
  </symbol-override>
 </objectview>

 <relationshipview id="_002aso001909h0s24ohp" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="Task" xlink:href="#_002ask701tmsf99c81tn"/>
  <target-link xlink:role="objectview" xlink:title="Class CVW_TaskManager" xlink:href="#_002aso001909h0f9eda1"/>
 </relationshipview>

 <relationshipview id="_002aso00190aa1hb0na0" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="Information" xlink:href="#_002asj60272bqgu0h19s"/>
  <target-link xlink:role="objectview" xlink:title="Class CVW_ParameterManager" xlink:href="#_002aso00190aa1r6eqbh"/>
 </relationshipview>

 <objectview id="_002aso00190aa1r6eqbh" xlink:role="object" xlink:title="Class CVW_ParameterManager" xlink:href="#_002aso00190aa1fag2qn" state="open" behavior="nested" text-scale="0.240519" decomp-scale="0.176778" left="3968" top="2688" width="1323" height="353.048">
  <symbol-override state="open" xlink:role="symbol" xlink:title="ToolButton_gray_blu" xlink:href="../views/akm.svg#_002asht025gbhac8tf7s" xlink:actuate="user">
   <replace tag="text" property="value" macro="(expand (property name))"/>
   <replace tag="canvas" property="fillcolor" macro="(expand &#34;lightgreen&#34;)"/>
   <replace tag="text" property="fillcolor" macro="(expand &#34;lightgreen&#34;)"/>
  </symbol-override>
 </objectview>

 <relationshipview id="_002aso001934ad0cnlqv" xlink:role="relationship" xlink:href="#_002aso001934adrobm0n" origin-text-hidden-flag="true" mid-point-text-hidden-flag="true" target-text-hidden-flag="true">
  <origin-link xlink:role="objectview" xlink:title="Class CVW_ViewManager" xlink:href="#_002aso001908jt3rh7qg"/>
  <target-link xlink:role="objectview" xlink:title="Class CVW_GenericWorkarea&#10;" xlink:href="#_002asjb01dkcl45hj97c"/>
 </relationshipview>

 <relationshipview id="_002aso00194br1fa07f7" xlink:role="relationship" xlink:href="#_002aso00194br17kss6n" origin-text-hidden-flag="true" mid-point-text-hidden-flag="true" target-text-hidden-flag="true">
  <origin-link xlink:role="objectview" xlink:title="Class CVW_GenericAction" xlink:href="#_002asnj01040sum43ss1"/>
  <target-link xlink:role="objectview" xlink:title="Class CVW_TaskManager" xlink:href="#_002aso001909h0f9eda1"/>
 </relationshipview>

 <relationshipview id="_002aso00194g2hf0qk59" xlink:role="relationship" xlink:href="#_002aso00194g2hf5t9kd" origin-text-hidden-flag="true" mid-point-text-hidden-flag="true" target-text-hidden-flag="true">
  <origin-link xlink:role="objectview" xlink:title="Class CVW_GenericAction" xlink:href="#_002asnj01040sum43ss1"/>
  <target-link xlink:role="objectview" xlink:title="Class CVW_ViewManager" xlink:href="#_002aso001908jt3rh7qg"/>
  <path>
   <origin-point type="bottom"/>
   <target-point type="floating"/>
  </path>
 </relationshipview>

 <relationshipview id="_002aso00194lolgnu09a" xlink:role="relationship" xlink:href="#_002aso00194lolq69nll" origin-text-hidden-flag="true" mid-point-text-hidden-flag="true" target-text-hidden-flag="true">
  <origin-link xlink:role="objectview" xlink:title="Class CVW_ViewManager" xlink:href="#_002aso001908jt3rh7qg"/>
  <target-link xlink:role="objectview" xlink:title="Class CVW_GenericSearch" xlink:href="#_002asnu00uibotmrq683"/>
 </relationshipview>

 <relationshipview id="_002aso00194sh74u1jnp" xlink:role="relationship" xlink:href="#_002aso00194sh73fve12" origin-text-hidden-flag="true" mid-point-text-hidden-flag="true" target-text-hidden-flag="true">
  <origin-link xlink:role="objectview" xlink:title="Class CVW_TaskManager" xlink:href="#_002aso001909h0f9eda1"/>
  <target-link xlink:role="objectview" xlink:title="Class IRTV_Config" xlink:href="#_002asnu015d0g04533aa"/>
 </relationshipview>

 <relationshipview id="_002aso001954i5uaa74o" xlink:role="relationship" xlink:href="#_002aso001954i5vtf3m4" origin-text-hidden-flag="true" mid-point-text-hidden-flag="true" target-text-hidden-flag="true">
  <origin-link xlink:role="objectview" xlink:title="Class CVW_TaskManager" xlink:href="#_002aso001909h0f9eda1"/>
  <target-link xlink:role="objectview" xlink:title="Class CVW_ParameterManager" xlink:href="#_002aso00190aa1r6eqbh"/>
 </relationshipview>

 <relationshipview id="_002aso00195bt5epi211" xlink:role="relationship" xlink:href="#_002aso00195bt5irrs11" origin-text-hidden-flag="true" mid-point-text-hidden-flag="true" target-text-hidden-flag="true">
  <origin-link xlink:role="objectview" xlink:title="Class CVW_ViewManager" xlink:href="#_002aso001908jt3rh7qg"/>
  <target-link xlink:role="objectview" xlink:title="Class CVW_ParameterManager" xlink:href="#_002aso00190aa1r6eqbh"/>
 </relationshipview>

 <relationshipview id="_002aso00195rtpvu6r6j" xlink:role="relationship" xlink:href="#_002aso00195rtpiqt9i0" origin-text-hidden-flag="true" mid-point-text-hidden-flag="true" target-text-hidden-flag="true">
  <origin-link xlink:role="objectview" xlink:title="Class CVW_ViewManager" xlink:href="#_002aso001908jt3rh7qg"/>
  <target-link xlink:role="objectview" xlink:title="Class IRTV_Config" xlink:href="#_002asnu015d0g04533aa"/>
  <path>
   <origin-point type="bottom"/>
   <target-point type="floating"/>
  </path>
 </relationshipview>

 <relationshipview id="_002aso001970825fbj0f" xlink:role="relationship" xlink:href="#_002aso00197082k207vf" origin-text-hidden-flag="true" mid-point-text-hidden-flag="true" target-text-hidden-flag="true">
  <origin-link xlink:role="objectview" xlink:title="Class CVW_GenericAction" xlink:href="#_002asnj01040sum43ss1"/>
  <target-link xlink:role="objectview" xlink:title="Class IRTV_Config" xlink:href="#_002asnu015d0g04533aa"/>
 </relationshipview>

 <relationshipview id="_002aso001984t0ajv9j1" xlink:role="relationship" xlink:href="#_002aso001984t0kbl9rs" origin-text-hidden-flag="true" mid-point-text-hidden-flag="true" target-text-hidden-flag="true">
  <origin-link xlink:role="objectview" xlink:title="Class IRTV_Config" xlink:href="#_002asnu015d0g04533aa"/>
  <target-link xlink:role="objectview" xlink:title="Class EKA_Inheritance" xlink:href="#_002asnu015cvug0fn0i0"/>
 </relationshipview>

 <relationshipview id="_002aso00198gbed620oa" xlink:role="relationship" xlink:href="#_002aso00198gbeh2aud7" origin-text-hidden-flag="true" mid-point-text-hidden-flag="true" target-text-hidden-flag="true">
  <origin-link xlink:role="objectview" xlink:title="Class CVW_ParameterManager" xlink:href="#_002aso00190aa1r6eqbh"/>
  <target-link xlink:role="objectview" xlink:title="Class EKA_Inheritance" xlink:href="#_002asnu015cvug0fn0i0"/>
 </relationshipview>

 <relationshipview id="_002aso0019a35rbg4kaq" xlink:role="relationship" xlink:href="#_002aso0019a35r9eqbp4" origin-text-hidden-flag="true" mid-point-text-hidden-flag="true" target-text-hidden-flag="true">
  <origin-link xlink:role="objectview" xlink:title="Class CVW_GenericMenuTree" xlink:href="#_002asnj0106ereggr05i"/>
  <target-link xlink:role="objectview" xlink:title="Class CVW_GenericAction" xlink:href="#_002asnj01040sum43ss1"/>
 </relationshipview>

 <relationshipview id="_002aso0019a9b0t26337" xlink:role="relationship" xlink:href="#_002aso0019a9b0tnai9n" origin-text-hidden-flag="true" mid-point-text-hidden-flag="true" target-text-hidden-flag="true">
  <origin-link xlink:role="objectview" xlink:title="Class CVW_GenericMenuTree" xlink:href="#_002asnj0106ereggr05i"/>
  <target-link xlink:role="objectview" xlink:title="Class CVW_GenericSearch" xlink:href="#_002asnu00uibotmrq683"/>
 </relationshipview>

 <relationshipview id="_002aso0019fo65etrkl7" xlink:role="relationship" xlink:href="#_002aso0019fo65ekah9u" origin-text-hidden-flag="true" mid-point-text-hidden-flag="true" target-text-hidden-flag="true">
  <origin-link xlink:role="objectview" xlink:title="Class CVW_ViewManager" xlink:href="#_002aso001908jt3rh7qg"/>
  <target-link xlink:role="objectview" xlink:title="Class CVW_GenericMenuTree" xlink:href="#_002asnj0106ereggr05i"/>
 </relationshipview>

 <modelview id="_002aso001emm07u5kn6s" name="CopyOfMain" title="Code structure" standalone-flag="true" zoom-level="0.681064" x="-1139.83" y="-179.664" seq="1" xlink:role="model" xlink:title="CVW Script Library" xlink:href="#_002asj602701vd83c0rc" behavior="nested" text-scale="1" decomp-scale="0" visible-in="browser">
  <child-link xlink:role="objectview" xlink:href="#_002aso001emm0hj3ff7g"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002aso001emm0rtnqn0u"/>
  <viewbundle>
   <relationshipview-link xlink:role="relationshipview" xlink:href="#_002aso001eoj8gnp0l1f"/>
   <relationshipview-link xlink:role="relationshipview" xlink:href="#_002aso001eoj8g5pmgb1"/>
   <relationshipview-link xlink:role="relationshipview" xlink:href="#_002aso001eql39kngase"/>
   <relationshipview-link xlink:role="relationshipview" xlink:href="#_002aso001eql391ambvr"/>
   <relationshipview-link xlink:role="relationshipview" xlink:href="#_002aso001eql39msu3hi"/>
   <relationshipview-link xlink:role="relationshipview" xlink:href="#_002aso001eql394rb47m"/>
   <relationshipview-link xlink:role="relationshipview" xlink:href="#_002aso001eql39p6u11t"/>
   <relationshipview-link xlink:role="relationshipview" xlink:href="#_002aso001eql39lsk7u7"/>
   <relationshipview-link xlink:role="relationshipview" xlink:href="#_002aso001eql39ilj35b"/>
   <relationshipview-link xlink:role="relationshipview" xlink:href="#_002aso001eql39fuls6i"/>
   <relationshipview-link xlink:role="relationshipview" xlink:href="#_002aso001eql397arf3k"/>
   <relationshipview-link xlink:role="relationshipview" xlink:href="#_002aso001eup6suq76f6"/>
   <relationshipview-link xlink:role="relationshipview" xlink:href="#_002aso001eup6s8nvrs3"/>
   <relationshipview-link xlink:role="relationshipview" xlink:href="#_002aso001eup6sql5ii6"/>
  </viewbundle>
 </modelview>

 <objectview id="_002aso001emm0hj3ff7g" xlink:role="object" xlink:href="#_002asj6027323dphmg96" state="open" behavior="nested" text-scale="0.843564" decomp-scale="0.25" left="-1872" top="-704" width="1424" height="944">
  <symbol-override state="open" xlink:role="symbol" xlink:title="Open Nested Object" xlink:href="metis:stdsyms#oid67" xlink:actuate="user">
  </symbol-override>
  <symbol-override state="closed" xlink:role="symbol" xlink:title="Closed Nested Object" xlink:href="metis:stdsyms#oid68" xlink:actuate="user">
  </symbol-override>
  <child-link xlink:role="objectview" xlink:title="Class CVW_GenericWorkarea&#10;" xlink:href="#_002aso001eoj8gs9446p"/>
  <child-link xlink:role="objectview" xlink:title="Class CVW_GenericSearch" xlink:href="#_002aso001eoj8g6ebd62"/>
  <child-link xlink:role="objectview" xlink:title="Class EKA_Inheritance" xlink:href="#_002aso001eoj8gppr50k"/>
  <child-link xlink:role="objectview" xlink:title="Class CVW_GenericMenuTree" xlink:href="#_002aso001eoj8g2l21ar"/>
  <child-link xlink:role="objectview" xlink:title="Class CVW_GenericAction" xlink:href="#_002aso001eoj8glfcb6a"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002aso001eoj8gjk30dj"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002aso001eoj8gd8cnlf"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002aso001eoj8qu315h7"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002aso001eoj8qc1hb1g"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002aso001eoj8qba943e"/>
  <child-link xlink:role="objectview" xlink:title="Class CVW_ParameterManager" xlink:href="#_002aso001eql39tltlnp"/>
  <child-link xlink:role="objectview" xlink:title="Class IRTV_Config" xlink:href="#_002aso001eql39u14f37"/>
  <child-link xlink:role="objectview" xlink:title="Class CVW_TaskManager" xlink:href="#_002aso001eql39sgnm69"/>
  <child-link xlink:role="objectview" xlink:title="Class CVW_ViewManager" xlink:href="#_002aso001eql397uuoei"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002aso001eql3jr1g08u"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002aso001eql3jv7f4uj"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002aso001eql3jo0dgat"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002aso001eql3j8b6csd"/>
 </objectview>

 <relationshipview id="_002aso001emm0rtnqn0u" decomposition-flag="true">
  <origin-link xlink:role="modelview" xlink:title="Code structure" xlink:href="#_002aso001emm07u5kn6s"/>
  <target-link xlink:role="objectview" xlink:href="#_002aso001emm0hj3ff7g"/>
 </relationshipview>

 <objectview id="_002aso001eoj8g2l21ar" xlink:role="object" xlink:title="Class CVW_GenericMenuTree" xlink:href="#_002asnj0106ere7ubme9" state="open" behavior="nested" text-scale="0.240519" decomp-scale="0.176778" left="2752" top="128" width="1323" height="353.048">
  <symbol-override state="open" xlink:role="symbol" xlink:title="ToolButton_gray_blu" xlink:href="../views/akm.svg#_002asht025gbhac8tf7s" xlink:actuate="user">
   <replace tag="text" property="value" macro="(expand (property name))"/>
   <replace tag="canvas" property="fillcolor" macro="(expand &#34;lightgreen&#34;)"/>
   <replace tag="text" property="fillcolor" macro="(expand &#34;lightgreen&#34;)"/>
  </symbol-override>
 </objectview>

 <relationshipview id="_002aso001eoj8g5pmgb1" xlink:role="relationship" xlink:href="#_002aso0019a35r9eqbp4" origin-text-hidden-flag="true" mid-point-text-hidden-flag="true" target-text-hidden-flag="true">
  <origin-link xlink:role="objectview" xlink:title="Class CVW_GenericMenuTree" xlink:href="#_002aso001eoj8g2l21ar"/>
  <target-link xlink:role="objectview" xlink:title="Class CVW_GenericAction" xlink:href="#_002aso001eoj8glfcb6a"/>
  <path>
   <origin-point type="bottom"/>
   <target-point type="floating"/>
  </path>
 </relationshipview>

 <objectview id="_002aso001eoj8g6ebd62" xlink:role="object" xlink:title="Class CVW_GenericSearch" xlink:href="#_002asnu00uibot2it5a4" state="open" behavior="nested" text-scale="0.240519" decomp-scale="0.176778" left="4224" top="1088" width="1323" height="353.048">
  <symbol-override state="open" xlink:role="symbol" xlink:title="ToolButton_gray_blu" xlink:href="../views/akm.svg#_002asht025gbhac8tf7s" xlink:actuate="user">
   <replace tag="text" property="value" macro="(expand (property name))"/>
   <replace tag="canvas" property="fillcolor" macro="(expand &#34;lightgreen&#34;)"/>
   <replace tag="text" property="fillcolor" macro="(expand &#34;lightgreen&#34;)"/>
  </symbol-override>
 </objectview>

 <relationshipview id="_002aso001eoj8gd8cnlf" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:href="#_002aso001emm0hj3ff7g"/>
  <target-link xlink:role="objectview" xlink:title="Class CVW_GenericSearch" xlink:href="#_002aso001eoj8g6ebd62"/>
 </relationshipview>

 <relationshipview id="_002aso001eoj8gjk30dj" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:href="#_002aso001emm0hj3ff7g"/>
  <target-link xlink:role="objectview" xlink:title="Class CVW_GenericWorkarea&#10;" xlink:href="#_002aso001eoj8gs9446p"/>
 </relationshipview>

 <objectview id="_002aso001eoj8glfcb6a" xlink:role="object" xlink:title="Class CVW_GenericAction" xlink:href="#_002asnj01040su1uk5bh" state="open" behavior="nested" text-scale="0.240519" decomp-scale="0.176778" left="1024" top="704" width="1323" height="353.048">
  <symbol-override state="open" xlink:role="symbol" xlink:title="ToolButton_gray_blu" xlink:href="../views/akm.svg#_002asht025gbhac8tf7s" xlink:actuate="user">
   <replace tag="text" property="value" macro="(expand (property name))"/>
   <replace tag="canvas" property="fillcolor" macro="(expand &#34;lightgreen&#34;)"/>
   <replace tag="text" property="fillcolor" macro="(expand &#34;lightgreen&#34;)"/>
  </symbol-override>
 </objectview>

 <relationshipview id="_002aso001eoj8gnp0l1f" xlink:role="relationship" xlink:href="#_002aso0019a9b0tnai9n" origin-text-hidden-flag="true" mid-point-text-hidden-flag="true" target-text-hidden-flag="true">
  <origin-link xlink:role="objectview" xlink:title="Class CVW_GenericMenuTree" xlink:href="#_002aso001eoj8g2l21ar"/>
  <target-link xlink:role="objectview" xlink:title="Class CVW_GenericSearch" xlink:href="#_002aso001eoj8g6ebd62"/>
 </relationshipview>

 <objectview id="_002aso001eoj8gppr50k" xlink:role="object" xlink:title="Class EKA_Inheritance" xlink:href="#_002asnu015cvuge5edr9" state="open" behavior="nested" text-scale="0.240519" decomp-scale="0.176778" left="64" top="3200" width="1323" height="353.048">
  <symbol-override state="open" xlink:role="symbol" xlink:title="ToolButton_gray_blu" xlink:href="../views/akm.svg#_002asht025gbhac8tf7s" xlink:actuate="user">
   <replace tag="text" property="value" macro="(expand (property name))"/>
   <replace tag="canvas" property="fillcolor" macro="(expand &#34;lightgreen&#34;)"/>
   <replace tag="text" property="fillcolor" macro="(expand &#34;lightgreen&#34;)"/>
  </symbol-override>
 </objectview>

 <objectview id="_002aso001eoj8gs9446p" xlink:role="object" xlink:title="Class CVW_GenericWorkarea&#10;" xlink:href="#_002asjb01dkcl46pjf25" state="open" behavior="nested" text-scale="0.240519" decomp-scale="0.176778" left="4224" top="1792" width="1323" height="353.048">
  <symbol-override state="open" xlink:role="symbol" xlink:title="ToolButton_gray_blu" xlink:href="../views/akm.svg#_002asht025gbhac8tf7s" xlink:actuate="user">
   <replace tag="text" property="value" macro="(expand (property name))"/>
   <replace tag="canvas" property="fillcolor" macro="(expand &#34;lightgreen&#34;)"/>
   <replace tag="text" property="fillcolor" macro="(expand &#34;lightgreen&#34;)"/>
  </symbol-override>
 </objectview>

 <relationshipview id="_002aso001eoj8qba943e" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:href="#_002aso001emm0hj3ff7g"/>
  <target-link xlink:role="objectview" xlink:title="Class CVW_GenericAction" xlink:href="#_002aso001eoj8glfcb6a"/>
 </relationshipview>

 <relationshipview id="_002aso001eoj8qc1hb1g" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:href="#_002aso001emm0hj3ff7g"/>
  <target-link xlink:role="objectview" xlink:title="Class CVW_GenericMenuTree" xlink:href="#_002aso001eoj8g2l21ar"/>
 </relationshipview>

 <relationshipview id="_002aso001eoj8qu315h7" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:href="#_002aso001emm0hj3ff7g"/>
  <target-link xlink:role="objectview" xlink:title="Class EKA_Inheritance" xlink:href="#_002aso001eoj8gppr50k"/>
 </relationshipview>

 <relationshipview id="_002aso001eql391ambvr" xlink:role="relationship" xlink:href="#_002aso00197082k207vf" origin-text-hidden-flag="true" mid-point-text-hidden-flag="true" target-text-hidden-flag="true">
  <origin-link xlink:role="objectview" xlink:title="Class CVW_GenericAction" xlink:href="#_002aso001eoj8glfcb6a"/>
  <target-link xlink:role="objectview" xlink:title="Class IRTV_Config" xlink:href="#_002aso001eql39u14f37"/>
  <path>
   <origin-point type="fixed" x="362.036" y="2172.22"/>
   <target-point type="floating"/>
  </path>
 </relationshipview>

 <relationshipview id="_002aso001eql394rb47m" xlink:role="relationship" xlink:href="#_002aso00194g2hf5t9kd" origin-text-hidden-flag="true" mid-point-text-hidden-flag="true" target-text-hidden-flag="true">
  <origin-link xlink:role="objectview" xlink:title="Class CVW_GenericAction" xlink:href="#_002aso001eoj8glfcb6a"/>
  <target-link xlink:role="objectview" xlink:title="Class CVW_ViewManager" xlink:href="#_002aso001eql397uuoei"/>
  <path>
   <origin-point type="fixed" x="6878.68" y="2172.22"/>
   <target-point type="floating"/>
  </path>
 </relationshipview>

 <relationshipview id="_002aso001eql397arf3k" xlink:role="relationship" xlink:href="#_002aso00194sh73fve12" origin-text-hidden-flag="true" mid-point-text-hidden-flag="true" target-text-hidden-flag="true">
  <origin-link xlink:role="objectview" xlink:title="Class CVW_TaskManager" xlink:href="#_002aso001eql39sgnm69"/>
  <target-link xlink:role="objectview" xlink:title="Class IRTV_Config" xlink:href="#_002aso001eql39u14f37"/>
 </relationshipview>

 <objectview id="_002aso001eql397uuoei" xlink:role="object" xlink:title="Class CVW_ViewManager" xlink:href="#_002aso001908jt4cfilt" state="open" behavior="nested" text-scale="0.240519" decomp-scale="0.176778" left="2496" top="1472" width="1323" height="353.048">
  <symbol-override state="open" xlink:role="symbol" xlink:title="ToolButton_gray_blu" xlink:href="../views/akm.svg#_002asht025gbhac8tf7s" xlink:actuate="user">
   <replace tag="text" property="value" macro="(expand (property name))"/>
   <replace tag="canvas" property="fillcolor" macro="(expand &#34;lightgreen&#34;)"/>
   <replace tag="text" property="fillcolor" macro="(expand &#34;lightgreen&#34;)"/>
  </symbol-override>
 </objectview>

 <relationshipview id="_002aso001eql39fuls6i" xlink:role="relationship" xlink:href="#_002aso001984t0kbl9rs" origin-text-hidden-flag="true" mid-point-text-hidden-flag="true" target-text-hidden-flag="true">
  <origin-link xlink:role="objectview" xlink:title="Class IRTV_Config" xlink:href="#_002aso001eql39u14f37"/>
  <target-link xlink:role="objectview" xlink:title="Class EKA_Inheritance" xlink:href="#_002aso001eoj8gppr50k"/>
 </relationshipview>

 <relationshipview id="_002aso001eql39ilj35b" xlink:role="relationship" xlink:href="#_002aso001934adrobm0n" origin-text-hidden-flag="true" mid-point-text-hidden-flag="true" target-text-hidden-flag="true">
  <origin-link xlink:role="objectview" xlink:title="Class CVW_ViewManager" xlink:href="#_002aso001eql397uuoei"/>
  <target-link xlink:role="objectview" xlink:title="Class CVW_GenericWorkarea&#10;" xlink:href="#_002aso001eoj8gs9446p"/>
 </relationshipview>

 <relationshipview id="_002aso001eql39kngase" xlink:role="relationship" xlink:href="#_002aso00194br17kss6n" origin-text-hidden-flag="true" mid-point-text-hidden-flag="true" target-text-hidden-flag="true">
  <origin-link xlink:role="objectview" xlink:title="Class CVW_GenericAction" xlink:href="#_002aso001eoj8glfcb6a"/>
  <target-link xlink:role="objectview" xlink:title="Class CVW_TaskManager" xlink:href="#_002aso001eql39sgnm69"/>
 </relationshipview>

 <relationshipview id="_002aso001eql39lsk7u7" xlink:role="relationship" xlink:href="#_002aso0019fo65ekah9u" origin-text-hidden-flag="true" mid-point-text-hidden-flag="true" target-text-hidden-flag="true">
  <origin-link xlink:role="objectview" xlink:title="Class CVW_ViewManager" xlink:href="#_002aso001eql397uuoei"/>
  <target-link xlink:role="objectview" xlink:title="Class CVW_GenericMenuTree" xlink:href="#_002aso001eoj8g2l21ar"/>
  <path>
   <origin-point type="floating"/>
   <target-point type="fixed" x="5430.54" y="2172.22"/>
  </path>
 </relationshipview>

 <relationshipview id="_002aso001eql39msu3hi" xlink:role="relationship" xlink:href="#_002aso00194lolq69nll" origin-text-hidden-flag="true" mid-point-text-hidden-flag="true" target-text-hidden-flag="true">
  <origin-link xlink:role="objectview" xlink:title="Class CVW_ViewManager" xlink:href="#_002aso001eql397uuoei"/>
  <target-link xlink:role="objectview" xlink:title="Class CVW_GenericSearch" xlink:href="#_002aso001eoj8g6ebd62"/>
 </relationshipview>

 <relationshipview id="_002aso001eql39p6u11t" xlink:role="relationship" xlink:href="#_002aso00195rtpiqt9i0" origin-text-hidden-flag="true" mid-point-text-hidden-flag="true" target-text-hidden-flag="true">
  <origin-link xlink:role="objectview" xlink:title="Class CVW_ViewManager" xlink:href="#_002aso001eql397uuoei"/>
  <target-link xlink:role="objectview" xlink:title="Class IRTV_Config" xlink:href="#_002aso001eql39u14f37"/>
  <path>
   <origin-point type="bottom"/>
   <target-point type="floating"/>
  </path>
 </relationshipview>

 <objectview id="_002aso001eql39sgnm69" xlink:role="object" xlink:title="Class CVW_TaskManager" xlink:href="#_002aso001909h0b11ndt" state="open" behavior="nested" text-scale="0.240519" decomp-scale="0.176778" left="1024" top="1472" width="1323" height="353.048">
  <symbol-override state="open" xlink:role="symbol" xlink:title="ToolButton_gray_blu" xlink:href="../views/akm.svg#_002asht025gbhac8tf7s" xlink:actuate="user">
   <replace tag="text" property="value" macro="(expand (property name))"/>
   <replace tag="canvas" property="fillcolor" macro="(expand &#34;lightgreen&#34;)"/>
   <replace tag="text" property="fillcolor" macro="(expand &#34;lightgreen&#34;)"/>
  </symbol-override>
 </objectview>

 <objectview id="_002aso001eql39tltlnp" xlink:role="object" xlink:title="Class CVW_ParameterManager" xlink:href="#_002aso00190aa1fag2qn" state="open" behavior="nested" text-scale="0.240519" decomp-scale="0.176778" left="2112" top="3200" width="1323" height="353.048">
  <symbol-override state="open" xlink:role="symbol" xlink:title="ToolButton_gray_blu" xlink:href="../views/akm.svg#_002asht025gbhac8tf7s" xlink:actuate="user">
   <replace tag="text" property="value" macro="(expand (property name))"/>
   <replace tag="canvas" property="fillcolor" macro="(expand &#34;lightgreen&#34;)"/>
   <replace tag="text" property="fillcolor" macro="(expand &#34;lightgreen&#34;)"/>
  </symbol-override>
 </objectview>

 <objectview id="_002aso001eql39u14f37" xlink:role="object" xlink:title="Class IRTV_Config" xlink:href="#_002asnu015d0g0nfq0ql" state="open" behavior="nested" text-scale="0.240519" decomp-scale="0.176778" left="64" top="2304" width="1323" height="353.048">
  <symbol-override state="open" xlink:role="symbol" xlink:title="ToolButton_gray_blu" xlink:href="../views/akm.svg#_002asht025gbhac8tf7s" xlink:actuate="user">
   <replace tag="text" property="value" macro="(expand (property name))"/>
   <replace tag="canvas" property="fillcolor" macro="(expand &#34;lightgreen&#34;)"/>
   <replace tag="text" property="fillcolor" macro="(expand &#34;lightgreen&#34;)"/>
  </symbol-override>
 </objectview>

 <relationshipview id="_002aso001eql3j8b6csd" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:href="#_002aso001emm0hj3ff7g"/>
  <target-link xlink:role="objectview" xlink:title="Class CVW_ViewManager" xlink:href="#_002aso001eql397uuoei"/>
 </relationshipview>

 <relationshipview id="_002aso001eql3jo0dgat" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:href="#_002aso001emm0hj3ff7g"/>
  <target-link xlink:role="objectview" xlink:title="Class CVW_TaskManager" xlink:href="#_002aso001eql39sgnm69"/>
 </relationshipview>

 <relationshipview id="_002aso001eql3jr1g08u" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:href="#_002aso001emm0hj3ff7g"/>
  <target-link xlink:role="objectview" xlink:title="Class CVW_ParameterManager" xlink:href="#_002aso001eql39tltlnp"/>
 </relationshipview>

 <relationshipview id="_002aso001eql3jv7f4uj" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:href="#_002aso001emm0hj3ff7g"/>
  <target-link xlink:role="objectview" xlink:title="Class IRTV_Config" xlink:href="#_002aso001eql39u14f37"/>
 </relationshipview>

 <relationshipview id="_002aso001eup6s8nvrs3" xlink:role="relationship" xlink:href="#_002aso001954i5vtf3m4" origin-text-hidden-flag="true" mid-point-text-hidden-flag="true" target-text-hidden-flag="true">
  <origin-link xlink:role="objectview" xlink:title="Class CVW_TaskManager" xlink:href="#_002aso001eql39sgnm69"/>
  <target-link xlink:role="objectview" xlink:title="Class CVW_ParameterManager" xlink:href="#_002aso001eql39tltlnp"/>
 </relationshipview>

 <relationshipview id="_002aso001eup6sql5ii6" xlink:role="relationship" xlink:href="#_002aso00198gbeh2aud7" origin-text-hidden-flag="true" mid-point-text-hidden-flag="true" target-text-hidden-flag="true">
  <origin-link xlink:role="objectview" xlink:title="Class CVW_ParameterManager" xlink:href="#_002aso001eql39tltlnp"/>
  <target-link xlink:role="objectview" xlink:title="Class EKA_Inheritance" xlink:href="#_002aso001eoj8gppr50k"/>
 </relationshipview>

 <relationshipview id="_002aso001eup6suq76f6" xlink:role="relationship" xlink:href="#_002aso00195bt5irrs11" origin-text-hidden-flag="true" mid-point-text-hidden-flag="true" target-text-hidden-flag="true">
  <origin-link xlink:role="objectview" xlink:title="Class CVW_ViewManager" xlink:href="#_002aso001eql397uuoei"/>
  <target-link xlink:role="objectview" xlink:title="Class CVW_ParameterManager" xlink:href="#_002aso001eql39tltlnp"/>
 </relationshipview>

 <objectview id="_002aso701iev4g97nco6" xlink:role="object" xlink:href="#_002aso701iev4geuaqsh" state="open" behavior="nested" text-scale="0.290956" decomp-scale="0.0625" left="2176" top="2208.08" width="320" height="256">
 </objectview>

 <relationshipview id="_002aso701iev4gn666tf" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:href="#_002asj6027323duqrqb2"/>
  <target-link xlink:role="objectview" xlink:href="#_002aso701iev4g97nco6"/>
 </relationshipview>

 <objectview id="_002aspt01b1nhd04eg0q" xlink:role="object" xlink:title="Function instanceInList, instanceByNameInList, isInList, addToList" xlink:href="#_002aspt01b1nhd2ubqts" state="open" behavior="nested" text-scale="0.240519" decomp-scale="0.176778" left="256" top="1920" width="1323" height="353.048">
 </objectview>

 <objectview id="_002aspt01b1nhd2q7o71" xlink:role="object" xlink:title="Function findInstModel, findInstModel2" xlink:href="#_002aspt01b1nhd7fu9l0" state="open" behavior="nested" text-scale="0.240519" decomp-scale="0.176778" left="1664" top="1920" width="1323" height="353.048">
 </objectview>

 <objectview id="_002aspt01b1nhd3pe4ql" xlink:role="object" xlink:title="Sub configureCVWcomponent" xlink:href="#_002aspt01b1nhdkvcktm" state="open" behavior="nested" text-scale="0.240519" decomp-scale="0.176778" left="3072" top="1536" width="1323" height="353.048">
 </objectview>

 <objectview id="_002aspt01b1nhd46ts2u" xlink:role="object" xlink:title="Function hasInstance" xlink:href="#_002aspt01b1nhdd9t85l" state="open" behavior="nested" text-scale="0.240519" decomp-scale="0.176778" left="256" top="1536" width="1323" height="353.048">
 </objectview>

 <objectview id="_002aspt01b1nhd7andg2" xlink:role="object" xlink:title="Function getCVWmodel" xlink:href="#_002aspt01b1nhdk5mefe" state="open" behavior="nested" text-scale="0.240519" decomp-scale="0.176778" left="3072" top="768" width="1323" height="353.048">
 </objectview>

 <objectview id="_002aspt01b1nhd7ind15" xlink:role="object" xlink:title="Function findCVWcomponent" xlink:href="#_002aspt01b1nhd84rt86" state="open" behavior="nested" text-scale="0.240519" decomp-scale="0.176778" left="3072" top="1152" width="1323" height="353.048">
 </objectview>

 <objectview id="_002aspt01b1nhd8vqprc" xlink:role="object" xlink:title="Function instancesInModel" xlink:href="#_002aspt01b1nhdh7m7l4" state="open" behavior="nested" text-scale="0.240519" decomp-scale="0.176778" left="256" top="2688" width="1323" height="353.048">
 </objectview>

 <objectview id="_002aspt01b1nhda9mg25" xlink:role="object" xlink:title="Function viewExists, relViewExists" xlink:href="#_002aspt01b1nhds9h8st" state="open" behavior="nested" text-scale="0.240519" decomp-scale="0.176778" left="1664" top="3072" width="1323" height="353.048">
 </objectview>

 <objectview id="_002aspt01b1nhdb2hctq" xlink:role="object" xlink:title="Sub resetCVWcomponent" xlink:href="#_002aspt01b1nhdfnp0bn" state="open" behavior="nested" text-scale="0.240519" decomp-scale="0.176778" left="3072" top="2304" width="1323" height="353.048">
 </objectview>

 <objectview id="_002aspt01b1nhdc0n49g" xlink:role="object" xlink:title="Function getModelFromConnector" xlink:href="#_002aspt01b1nhdih5b2f" state="open" behavior="nested" text-scale="0.240519" decomp-scale="0.176778" left="1664" top="3456" width="1323" height="353.048">
 </objectview>

 <objectview id="_002aspt01b1nhdfglgq4" xlink:role="object" xlink:title="Function getWorkareaLabelText" xlink:href="#_002aspt01b1nhd9v94gu" state="open" behavior="nested" text-scale="0.240519" decomp-scale="0.176778" left="256" top="3456" width="1323" height="353.048">
 </objectview>

 <objectview id="_002aspt01b1nhdgvojmp" xlink:role="object" xlink:title="Function findPartsDK" xlink:href="#_002aspt01b1nhd0jcjqc" state="open" behavior="nested" text-scale="0.240519" decomp-scale="0.176778" left="1664" top="2304" width="1323" height="353.048">
  <symbol-override state="open" xlink:role="symbol" xlink:title="ToolButton_gray_blu" xlink:href="../views/akm.svg#_002asht025gbhac8tf7s" xlink:actuate="user">
   <replace tag="text" property="value" macro="(expand (property name))"/>
   <replace tag="canvas" property="fillcolor" macro="(expand &#34;lightsalmon&#34;)"/>
   <replace tag="text" property="fillcolor" macro="(expand &#34;lightsalmon&#34;)"/>
  </symbol-override>
 </objectview>

 <objectview id="_002aspt01b1nhdhl40ip" xlink:role="object" xlink:title="Sub copyPropertyValues" xlink:href="#_002aspt01b1nhdnqqjs0" state="open" behavior="nested" text-scale="0.240519" decomp-scale="0.176778" left="3072" top="1920" width="1323" height="353.048">
 </objectview>

 <objectview id="_002aspt01b1nhdhteslj" xlink:role="object" xlink:title="Function getInstModel" xlink:href="#_002aspt01b1nhd4sgba0" state="open" behavior="nested" text-scale="0.240519" decomp-scale="0.176778" left="1664" top="1536" width="1323" height="353.048">
 </objectview>

 <objectview id="_002aspt01b1nhdj8nd3c" xlink:role="object" xlink:title="Function buildInstRules, buildRelRules, buildSymbolRules" xlink:href="#_002aspt01b1nhdnvmq27" state="open" behavior="nested" text-scale="0.240519" decomp-scale="0.176778" left="3072" top="2688" width="1323" height="353.048">
 </objectview>

 <objectview id="_002aspt01b1nhdl6qvpq" xlink:role="object" xlink:title="Function isValid" xlink:href="#_002aspt01b1nhd4sbjoh" state="open" behavior="nested" text-scale="0.240519" decomp-scale="0.176778" left="256" top="1152" width="1323" height="353.048">
 </objectview>

 <objectview id="_002aspt01b1nhdn1dvut" xlink:role="object" xlink:title="Function isInView" xlink:href="#_002aspt01b1nhdvuiibc" state="open" behavior="nested" text-scale="0.240519" decomp-scale="0.176778" left="256" top="3072" width="1323" height="353.048">
 </objectview>

 <objectview id="_002aspt01b1nhdn459rl" xlink:role="object" xlink:title="Function isEnabled" xlink:href="#_002aspt01b1nhd6kk1di" state="open" behavior="nested" text-scale="0.240519" decomp-scale="0.176778" left="256" top="768" width="1323" height="353.048">
 </objectview>

 <objectview id="_002aspt01b1nhdphe702" xlink:role="object" xlink:title="Function relocate" xlink:href="#_002aspt01b1nhdec3ru9" state="open" behavior="nested" text-scale="0.240519" decomp-scale="0.176778" left="1664" top="2688" width="1323" height="353.048">
 </objectview>

 <objectview id="_002aspt01b1nhdpr53lh" xlink:role="object" xlink:title="Function findWorkWindow, findWorkWindowView, getWorkWindowView" xlink:href="#_002aspt01b1nhd5munni" state="open" behavior="nested" text-scale="0.240519" decomp-scale="0.176778" left="3072" top="3072" width="1323" height="353.048">
 </objectview>

 <objectview id="_002aspt01b1nhds3dnri" xlink:role="object" xlink:title="Function generateTree" xlink:href="#_002aspt01b1nhdh5k34g" state="open" behavior="nested" text-scale="0.240519" decomp-scale="0.176778" left="1664" top="768" width="1323" height="353.048">
 </objectview>

 <objectview id="_002aspt01b1nhdv4fcsd" xlink:role="object" xlink:title="Function findInstanceView" xlink:href="#_002aspt01b1nhdapthfc" state="open" behavior="nested" text-scale="0.240519" decomp-scale="0.176778" left="256" top="2304" width="1323" height="353.048">
 </objectview>

 <objectview id="_002aspt01b1nhdvv5uln" xlink:role="object" xlink:title="Function cleanTree" xlink:href="#_002aspt01b1nhd5ik2ph" state="open" behavior="nested" text-scale="0.240519" decomp-scale="0.176778" left="1664" top="1152" width="1323" height="353.048">
 </objectview>

 <relationshipview id="_002aspt01b1nhn0qo67i" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="Utilities" xlink:href="#_002asj6027328323iv1c"/>
  <target-link xlink:role="objectview" xlink:title="Sub resetCVWcomponent" xlink:href="#_002aspt01b1nhdb2hctq"/>
 </relationshipview>

 <relationshipview id="_002aspt01b1nhn2p4a2o" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="Utilities" xlink:href="#_002asj6027328323iv1c"/>
  <target-link xlink:role="objectview" xlink:title="Function findInstModel, findInstModel2" xlink:href="#_002aspt01b1nhd2q7o71"/>
 </relationshipview>

 <relationshipview id="_002aspt01b1nhn4h7fnn" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="Utilities" xlink:href="#_002asj6027328323iv1c"/>
  <target-link xlink:role="objectview" xlink:title="Function findInstanceView" xlink:href="#_002aspt01b1nhdv4fcsd"/>
 </relationshipview>

 <relationshipview id="_002aspt01b1nhn4re9d9" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="Utilities" xlink:href="#_002asj6027328323iv1c"/>
  <target-link xlink:role="objectview" xlink:title="Function getInstModel" xlink:href="#_002aspt01b1nhdhteslj"/>
 </relationshipview>

 <relationshipview id="_002aspt01b1nhn53gg1q" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="Utilities" xlink:href="#_002asj6027328323iv1c"/>
  <target-link xlink:role="objectview" xlink:title="Sub copyPropertyValues" xlink:href="#_002aspt01b1nhdhl40ip"/>
 </relationshipview>

 <relationshipview id="_002aspt01b1nhn543cfc" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="Utilities" xlink:href="#_002asj6027328323iv1c"/>
  <target-link xlink:role="objectview" xlink:title="Function hasInstance" xlink:href="#_002aspt01b1nhd46ts2u"/>
 </relationshipview>

 <relationshipview id="_002aspt01b1nhn73l4jv" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="Utilities" xlink:href="#_002asj6027328323iv1c"/>
  <target-link xlink:role="objectview" xlink:title="Function instancesInModel" xlink:href="#_002aspt01b1nhd8vqprc"/>
 </relationshipview>

 <relationshipview id="_002aspt01b1nhn9nllgd" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="Utilities" xlink:href="#_002asj6027328323iv1c"/>
  <target-link xlink:role="objectview" xlink:title="Sub configureCVWcomponent" xlink:href="#_002aspt01b1nhd3pe4ql"/>
 </relationshipview>

 <relationshipview id="_002aspt01b1nhn9sh3ju" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="Utilities" xlink:href="#_002asj6027328323iv1c"/>
  <target-link xlink:role="objectview" xlink:title="Function findPartsDK" xlink:href="#_002aspt01b1nhdgvojmp"/>
 </relationshipview>

 <relationshipview id="_002aspt01b1nhnbtegfh" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="Utilities" xlink:href="#_002asj6027328323iv1c"/>
  <target-link xlink:role="objectview" xlink:title="Function isValid" xlink:href="#_002aspt01b1nhdl6qvpq"/>
 </relationshipview>

 <relationshipview id="_002aspt01b1nhnc9p9fj" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="Utilities" xlink:href="#_002asj6027328323iv1c"/>
  <target-link xlink:role="objectview" xlink:title="Function getCVWmodel" xlink:href="#_002aspt01b1nhd7andg2"/>
 </relationshipview>

 <relationshipview id="_002aspt01b1nhne60mn0" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="Utilities" xlink:href="#_002asj6027328323iv1c"/>
  <target-link xlink:role="objectview" xlink:title="Function cleanTree" xlink:href="#_002aspt01b1nhdvv5uln"/>
 </relationshipview>

 <relationshipview id="_002aspt01b1nhnhm2uu3" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="Utilities" xlink:href="#_002asj6027328323iv1c"/>
  <target-link xlink:role="objectview" xlink:title="Function instanceInList, instanceByNameInList, isInList, addToList" xlink:href="#_002aspt01b1nhd04eg0q"/>
 </relationshipview>

 <relationshipview id="_002aspt01b1nhnm12kaa" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="Utilities" xlink:href="#_002asj6027328323iv1c"/>
  <target-link xlink:role="objectview" xlink:title="Function findCVWcomponent" xlink:href="#_002aspt01b1nhd7ind15"/>
 </relationshipview>

 <relationshipview id="_002aspt01b1nhnncvfb8" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="Utilities" xlink:href="#_002asj6027328323iv1c"/>
  <target-link xlink:role="objectview" xlink:title="Function viewExists, relViewExists" xlink:href="#_002aspt01b1nhda9mg25"/>
 </relationshipview>

 <relationshipview id="_002aspt01b1nhno8v6eg" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="Utilities" xlink:href="#_002asj6027328323iv1c"/>
  <target-link xlink:role="objectview" xlink:title="Function isEnabled" xlink:href="#_002aspt01b1nhdn459rl"/>
 </relationshipview>

 <relationshipview id="_002aspt01b1nhntvv81e" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="Utilities" xlink:href="#_002asj6027328323iv1c"/>
  <target-link xlink:role="objectview" xlink:title="Function generateTree" xlink:href="#_002aspt01b1nhds3dnri"/>
 </relationshipview>

 <relationshipview id="_002aspt01b1nhnuoq93h" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="Utilities" xlink:href="#_002asj6027328323iv1c"/>
  <target-link xlink:role="objectview" xlink:title="Function relocate" xlink:href="#_002aspt01b1nhdphe702"/>
 </relationshipview>

 <relationshipview id="_002aspt01b1ni111v34h" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="Utilities" xlink:href="#_002asj6027328323iv1c"/>
  <target-link xlink:role="objectview" xlink:title="Function buildInstRules, buildRelRules, buildSymbolRules" xlink:href="#_002aspt01b1nhdj8nd3c"/>
 </relationshipview>

 <relationshipview id="_002aspt01b1ni1c9dhr4" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="Utilities" xlink:href="#_002asj6027328323iv1c"/>
  <target-link xlink:role="objectview" xlink:title="Function findWorkWindow, findWorkWindowView, getWorkWindowView" xlink:href="#_002aspt01b1nhdpr53lh"/>
 </relationshipview>

 <relationshipview id="_002aspt01b1ni1eq72mf" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="Utilities" xlink:href="#_002asj6027328323iv1c"/>
  <target-link xlink:role="objectview" xlink:title="Function isInView" xlink:href="#_002aspt01b1nhdn1dvut"/>
 </relationshipview>

 <relationshipview id="_002aspt01b1ni1k1ln8e" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="Utilities" xlink:href="#_002asj6027328323iv1c"/>
  <target-link xlink:role="objectview" xlink:title="Function getWorkareaLabelText" xlink:href="#_002aspt01b1nhdfglgq4"/>
 </relationshipview>

 <relationshipview id="_002aspt01b1ni1osg80n" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="Utilities" xlink:href="#_002asj6027328323iv1c"/>
  <target-link xlink:role="objectview" xlink:title="Function getModelFromConnector" xlink:href="#_002aspt01b1nhdc0n49g"/>
 </relationshipview>

 <objectview id="_002aspt01b45jl5to7nf" xlink:role="object" xlink:title="Class CVW_ArgumentValue" xlink:href="#_002aspt01b45jl5k1020" state="open" behavior="nested" text-scale="0.240519" decomp-scale="0.176778" left="256" top="1024" width="1323" height="353.048">
  <symbol-override state="open" xlink:role="symbol" xlink:title="ToolButton_gray_blu" xlink:href="../views/akm.svg#_002asht025gbhac8tf7s" xlink:actuate="user">
   <replace tag="text" property="value" macro="(expand (property name))"/>
   <replace tag="canvas" property="fillcolor" macro="(expand &#34;lightsalmon&#34;)"/>
   <replace tag="text" property="fillcolor" macro="(expand &#34;lightsalmon&#34;)"/>
  </symbol-override>
 </objectview>

 <objectview id="_002aspt01b45jlh084l8" xlink:role="object" xlink:title="Class CVW_SelectDialog" xlink:href="#_002aspt01b45jlp5bub2" state="open" behavior="nested" text-scale="0.240519" decomp-scale="0.176778" left="1664" top="2176" width="1323" height="353.048">
 </objectview>

 <objectview id="_002aspt01b45jln5fvsg" xlink:role="object" xlink:title="Class CVW_ViewstyleSpecification&#10;" xlink:href="#_002aspt01b45jl1ekhjc" state="open" behavior="nested" text-scale="0.240519" decomp-scale="0.176778" left="3072" top="1024" width="1323" height="353.048">
 </objectview>

 <objectview id="_002aspt01b45jlnvfgph" xlink:role="object" xlink:title="Class CVW_Window" xlink:href="#_002aspt01b45jl3224de" state="open" behavior="nested" text-scale="0.240519" decomp-scale="0.176778" left="3072" top="1408" width="1323" height="353.048">
 </objectview>

 <objectview id="_002aspt01b45jlq0o28i" xlink:role="object" xlink:title="Class CVW_ContentSpecification" xlink:href="#_002aspt01b45jldc4n2u" state="open" behavior="nested" text-scale="0.240519" decomp-scale="0.176778" left="256" top="1792" width="1323" height="353.048">
  <symbol-override state="open" xlink:role="symbol" xlink:title="ToolButton_gray_blu" xlink:href="../views/akm.svg#_002asht025gbhac8tf7s" xlink:actuate="user">
   <replace tag="text" property="value" macro="(expand (property name))"/>
   <replace tag="canvas" property="fillcolor" macro="(expand &#34;lightgreen&#34;)"/>
   <replace tag="text" property="fillcolor" macro="(expand &#34;lightgreen&#34;)"/>
  </symbol-override>
 </objectview>

 <objectview id="_002aspt01b45jv1j3rns" xlink:role="object" xlink:title="Class CVW_LanguageSpecification" xlink:href="#_002aspt01b45jl5t35nd" state="open" behavior="nested" text-scale="0.240519" decomp-scale="0.176778" left="256" top="2944" width="1323" height="353.048">
 </objectview>

 <relationshipview id="_002aspt01b45jv3k4kl1" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="View" xlink:href="#_002asj602731to4i2b9a"/>
  <target-link xlink:role="objectview" xlink:title="Class CVW_StatusBar&#10;DK" xlink:href="#_002aspt01b45jvn1d4e7"/>
 </relationshipview>

 <objectview id="_002aspt01b45jv4rgsh7" xlink:role="object" xlink:title="Class CVW_ViewStrategy&#10;" xlink:href="#_002aspt01b45jlc06ekh" state="open" behavior="nested" text-scale="0.240519" decomp-scale="0.176778" left="3072" top="640" width="1323" height="353.048">
  <symbol-override state="open" xlink:role="symbol" xlink:title="ToolButton_gray_blu" xlink:href="../views/akm.svg#_002asht025gbhac8tf7s" xlink:actuate="user">
   <replace tag="text" property="value" macro="(expand (property name))"/>
   <replace tag="text" property="fillcolor" macro="(expand &#34;lightgreen&#34;)"/>
   <replace tag="canvas" property="fillcolor" macro="(expand &#34;lightgreen&#34;)"/>
  </symbol-override>
 </objectview>

 <objectview id="_002aspt01b45jv5qp072" xlink:role="object" xlink:title="Class CVW_Filter" xlink:href="#_002aspt01b45jla327hk" state="open" behavior="nested" text-scale="0.240519" decomp-scale="0.176778" left="256" top="2176" width="1323" height="353.048">
 </objectview>

 <relationshipview id="_002aspt01b45jv8e31er" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="View" xlink:href="#_002asj602731to4i2b9a"/>
  <target-link xlink:role="objectview" xlink:title="Class CVW_ContentSpecification" xlink:href="#_002aspt01b45jlq0o28i"/>
 </relationshipview>

 <objectview id="_002aspt01b45jv9iob6g" xlink:role="object" xlink:title="Class CVW_ViewSpecification&#10;" xlink:href="#_002aspt01b45jlfjobj7" state="open" behavior="nested" text-scale="0.240519" decomp-scale="0.176778" left="1664" top="3328" width="1323" height="353.048">
 </objectview>

 <objectview id="_002aspt01b45jv9lm0q5" xlink:role="object" xlink:title="Class CVW_MenuAction" xlink:href="#_002aspt01b45jlp00htf" state="open" behavior="nested" text-scale="0.240519" decomp-scale="0.176778" left="256" top="3328" width="1323" height="353.048">
 </objectview>

 <relationshipview id="_002aspt01b45jv9me0al" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="View" xlink:href="#_002asj602731to4i2b9a"/>
  <target-link xlink:role="objectview" xlink:title="Class CVW_ViewstyleSpecification&#10;" xlink:href="#_002aspt01b45jln5fvsg"/>
 </relationshipview>

 <relationshipview id="_002aspt01b45jv9pcj7u" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="View" xlink:href="#_002asj602731to4i2b9a"/>
  <target-link xlink:role="objectview" xlink:title="Class CVW_Workspace" xlink:href="#_002aspt01b45jvubi1md"/>
 </relationshipview>

 <relationshipview id="_002aspt01b45jva2tgg9" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="View" xlink:href="#_002asj602731to4i2b9a"/>
  <target-link xlink:role="objectview" xlink:title="Class CVW_CircularLayout&#10;" xlink:href="#_002aspt01b45jvguicte"/>
 </relationshipview>

 <relationshipview id="_002aspt01b45jvan0rl1" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="View" xlink:href="#_002asj602731to4i2b9a"/>
  <target-link xlink:role="objectview" xlink:title="Class CVW_Window" xlink:href="#_002aspt01b45jlnvfgph"/>
 </relationshipview>

 <relationshipview id="_002aspt01b45jvdobi9u" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="View" xlink:href="#_002asj602731to4i2b9a"/>
  <target-link xlink:role="objectview" xlink:title="Class CVW_SelectDialog" xlink:href="#_002aspt01b45jlh084l8"/>
 </relationshipview>

 <objectview id="_002aspt01b45jvf19mro" xlink:role="object" xlink:title="Class CVW_Object" xlink:href="#_002aspt01b45jl1ab6p8" state="open" behavior="nested" text-scale="0.240519" decomp-scale="0.176778" left="1664" top="1408" width="1323" height="353.048">
 </objectview>

 <objectview id="_002aspt01b45jvfk9dc8" xlink:role="object" xlink:title="Class CVW_InstRule,  CVW_RelRule, CVW_SymbolRule" xlink:href="#_002aspt01b45jl4rhipd" state="open" behavior="nested" text-scale="0.240519" decomp-scale="0.176778" left="3072" top="2560" width="1323" height="353.048">
 </objectview>

 <objectview id="_002aspt01b45jvgr5rns" xlink:role="object" xlink:title="Class CVW_MenuTree&#10;" xlink:href="#_002aspt01b45jl9r9a26" state="open" behavior="nested" text-scale="0.240519" decomp-scale="0.176778" left="1664" top="640" width="1323" height="353.048">
 </objectview>

 <objectview id="_002aspt01b45jvguicte" xlink:role="object" xlink:title="Class CVW_CircularLayout&#10;" xlink:href="#_002aspt01b45jlh9i40l" state="open" behavior="nested" text-scale="0.240519" decomp-scale="0.176778" left="256" top="1408" width="1323" height="353.048">
 </objectview>

 <relationshipview id="_002aspt01b45jvha3pju" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="View" xlink:href="#_002asj602731to4i2b9a"/>
  <target-link xlink:role="objectview" xlink:title="Class CVW_ViewSpecification&#10;" xlink:href="#_002aspt01b45jv9iob6g"/>
 </relationshipview>

 <relationshipview id="_002aspt01b45jvhdpp4h" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="View" xlink:href="#_002asj602731to4i2b9a"/>
  <target-link xlink:role="objectview" xlink:title="Class CVW_ArgumentValue" xlink:href="#_002aspt01b45jl5to7nf"/>
 </relationshipview>

 <relationshipview id="_002aspt01b45jvi896a1" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="View" xlink:href="#_002asj602731to4i2b9a"/>
  <target-link xlink:role="objectview" xlink:title="Class CVW_Action" xlink:href="#_002aspt01b45jvqvunti"/>
 </relationshipview>

 <relationshipview id="_002aspt01b45jvig03bi" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="View" xlink:href="#_002asj602731to4i2b9a"/>
  <target-link xlink:role="objectview" xlink:title="Class CVW_MenuTree&#10;" xlink:href="#_002aspt01b45jvgr5rns"/>
 </relationshipview>

 <objectview id="_002aspt01b45jvll5dja" xlink:role="object" xlink:title="Class CVW_Instance" xlink:href="#_002aspt01b45jl98re3k" state="open" behavior="nested" text-scale="0.240519" decomp-scale="0.176778" left="256" top="2560" width="1323" height="353.048">
 </objectview>

 <relationshipview id="_002aspt01b45jvm681mq" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="View" xlink:href="#_002asj602731to4i2b9a"/>
  <target-link xlink:role="objectview" xlink:title="Class CVW_MenuAction" xlink:href="#_002aspt01b45jv9lm0q5"/>
 </relationshipview>

 <objectview id="_002aspt01b45jvn1d4e7" xlink:role="object" xlink:title="Class CVW_StatusBar&#10;DK" xlink:href="#_002aspt01b45jl8d8ube" state="open" behavior="nested" text-scale="0.240519" decomp-scale="0.176778" left="1664" top="2560" width="1323" height="353.048">
  <symbol-override state="open" xlink:role="symbol" xlink:title="ToolButton_gray_blu" xlink:href="../views/akm.svg#_002asht025gbhac8tf7s" xlink:actuate="user">
   <replace tag="text" property="value" macro="(expand (property name))"/>
   <replace tag="canvas" property="fillcolor" macro="(expand &#34;lightsalmon&#34;)"/>
   <replace tag="text" property="fillcolor" macro="(expand &#34;lightsalmon&#34;)"/>
  </symbol-override>
 </objectview>

 <objectview id="_002aspt01b45jvo5280l" xlink:role="object" xlink:title="Class CVW_Task" xlink:href="#_002aspt01b45jlqbukmk" state="open" behavior="nested" text-scale="0.240519" decomp-scale="0.176778" left="1664" top="2944" width="1323" height="353.048">
 </objectview>

 <objectview id="_002aspt01b45jvomco79" xlink:role="object" xlink:title="Class CVW_ObjectView" xlink:href="#_002aspt01b45jl767joi" state="open" behavior="nested" text-scale="0.240519" decomp-scale="0.176778" left="1664" top="1792" width="1323" height="353.048">
 </objectview>

 <relationshipview id="_002aspt01b45jvqoeh7m" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="View" xlink:href="#_002asj602731to4i2b9a"/>
  <target-link xlink:role="objectview" xlink:title="Class CVW_Workarea&#10;" xlink:href="#_002aspt01b45jvs8bsao"/>
 </relationshipview>

 <objectview id="_002aspt01b45jvqvunti" xlink:role="object" xlink:title="Class CVW_Action" xlink:href="#_002aspt01b45jlge72rt" state="open" behavior="nested" text-scale="0.240519" decomp-scale="0.176778" left="256" top="640" width="1323" height="353.048">
 </objectview>

 <relationshipview id="_002aspt01b45jvr68v9t" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="View" xlink:href="#_002asj602731to4i2b9a"/>
  <target-link xlink:role="objectview" xlink:title="Class CVW_Object" xlink:href="#_002aspt01b45jvf19mro"/>
 </relationshipview>

 <objectview id="_002aspt01b45jvrd4ak4" xlink:role="object" xlink:title="Class CVW_Navigate" xlink:href="#_002aspt01b45jlqvtc9l" state="open" behavior="nested" text-scale="0.240519" decomp-scale="0.176778" left="1664" top="1024" width="1323" height="353.048">
 </objectview>

 <objectview id="_002aspt01b45jvs8bsao" xlink:role="object" xlink:title="Class CVW_Workarea&#10;" xlink:href="#_002aspt01b45jlobokn4" state="open" behavior="nested" text-scale="0.240519" decomp-scale="0.176778" left="3072" top="1792" width="1323" height="353.048">
 </objectview>

 <relationshipview id="_002aspt01b45jvtut4i0" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="View" xlink:href="#_002asj602731to4i2b9a"/>
  <target-link xlink:role="objectview" xlink:title="Class CVW_ViewStrategy&#10;" xlink:href="#_002aspt01b45jv4rgsh7"/>
 </relationshipview>

 <objectview id="_002aspt01b45jvubi1md" xlink:role="object" xlink:title="Class CVW_Workspace" xlink:href="#_002aspt01b45jl2f13mf" state="open" behavior="nested" text-scale="0.240519" decomp-scale="0.176778" left="3072" top="2176" width="1323" height="353.048">
  <symbol-override state="open" xlink:role="symbol" xlink:title="ToolButton_gray_blu" xlink:href="../views/akm.svg#_002asht025gbhac8tf7s" xlink:actuate="user">
   <replace tag="text" property="value" macro="(expand (property name))"/>
   <replace tag="canvas" property="fillcolor" macro="(expand &#34;lightsalmon&#34;)"/>
   <replace tag="text" property="fillcolor" macro="(expand &#34;lightsalmon&#34;)"/>
  </symbol-override>
 </objectview>

 <relationshipview id="_002aspt01b45k91evs2b" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="View" xlink:href="#_002asj602731to4i2b9a"/>
  <target-link xlink:role="objectview" xlink:title="Class CVW_Navigate" xlink:href="#_002aspt01b45jvrd4ak4"/>
 </relationshipview>

 <relationshipview id="_002aspt01b45k938bgid" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="View" xlink:href="#_002asj602731to4i2b9a"/>
  <target-link xlink:role="objectview" xlink:title="Class CVW_InstRule,  CVW_RelRule, CVW_SymbolRule" xlink:href="#_002aspt01b45jvfk9dc8"/>
 </relationshipview>

 <relationshipview id="_002aspt01b45k93mik9r" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="View" xlink:href="#_002asj602731to4i2b9a"/>
  <target-link xlink:role="objectview" xlink:title="Class CVW_Instance" xlink:href="#_002aspt01b45jvll5dja"/>
 </relationshipview>

 <relationshipview id="_002aspt01b45k99mc4ld" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="View" xlink:href="#_002asj602731to4i2b9a"/>
  <target-link xlink:role="objectview" xlink:title="Class CVW_ObjectView" xlink:href="#_002aspt01b45jvomco79"/>
 </relationshipview>

 <relationshipview id="_002aspt01b45k9evlr32" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="View" xlink:href="#_002asj602731to4i2b9a"/>
  <target-link xlink:role="objectview" xlink:title="Class CVW_LanguageSpecification" xlink:href="#_002aspt01b45jv1j3rns"/>
 </relationshipview>

 <relationshipview id="_002aspt01b45k9gn6qn1" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="View" xlink:href="#_002asj602731to4i2b9a"/>
  <target-link xlink:role="objectview" xlink:title="Class CVW_Task" xlink:href="#_002aspt01b45jvo5280l"/>
 </relationshipview>

 <relationshipview id="_002aspt01b45k9h7a9go" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="View" xlink:href="#_002asj602731to4i2b9a"/>
  <target-link xlink:role="objectview" xlink:title="Class CVW_Filter" xlink:href="#_002aspt01b45jv5qp072"/>
 </relationshipview>

 <objectview id="_002aspt01b7t9q973qr8" xlink:role="object" xlink:title="Class EKA_Context&#10;" xlink:href="#_002aspt01b7t9qc4bsm6" state="open" behavior="nested" text-scale="0.240519" decomp-scale="0.176778" left="132.969" top="1792.77" width="1323" height="353.048">
 </objectview>

 <objectview id="_002aspt01b7t9qc1vv1p" xlink:role="object" xlink:title="Class EKA_Instance" xlink:href="#_002aspt01b7t9q2l2j8k" state="open" behavior="nested" text-scale="0.240519" decomp-scale="0.176778" left="132.969" top="2176.77" width="1323" height="353.048">
 </objectview>

 <objectview id="_002aspt01b7t9qcona5p" xlink:role="object" xlink:title="Class EKA_Property&#10;" xlink:href="#_002aspt01b7t9qh92bnn" state="open" behavior="nested" text-scale="0.240519" decomp-scale="0.176778" left="132.969" top="2560.77" width="1323" height="353.048">
 </objectview>

 <objectview id="_002aspt01b7t9qndoqh0" xlink:role="object" xlink:title="Class EKA_Globals" xlink:href="#_002aspt01b7t9qdkqel6" state="open" behavior="nested" text-scale="0.240519" decomp-scale="0.176778" left="132.969" top="1408.77" width="1323" height="353.048">
 </objectview>

 <relationshipview id="_002aspt01b7t9qpmrtks" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="Information" xlink:href="#_002asj60272bqgu0h19s"/>
  <target-link xlink:role="objectview" xlink:title="Class EKA_Context&#10;" xlink:href="#_002aspt01b7t9q973qr8"/>
 </relationshipview>

 <relationshipview id="_002aspt01b7t9qrlcrjh" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="Information" xlink:href="#_002asj60272bqgu0h19s"/>
  <target-link xlink:role="objectview" xlink:title="Class EKA_Property&#10;" xlink:href="#_002aspt01b7t9qcona5p"/>
 </relationshipview>

 <relationshipview id="_002aspt01b7ta4nsvm7l" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="Information" xlink:href="#_002asj60272bqgu0h19s"/>
  <target-link xlink:role="objectview" xlink:title="Class EKA_Globals" xlink:href="#_002aspt01b7t9qndoqh0"/>
 </relationshipview>

 <relationshipview id="_002aspt01b7ta4uu6c5j" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="Information" xlink:href="#_002asj60272bqgu0h19s"/>
  <target-link xlink:role="objectview" xlink:title="Class EKA_Instance" xlink:href="#_002aspt01b7t9qc1vv1p"/>
 </relationshipview>

 <objectview id="_002asqb014ve340jgr4t" xlink:role="object" xlink:title="Class CVW_Rating" xlink:href="#_002asqb014ve34ijbaoe" state="open" behavior="nested" text-scale="0.240519" decomp-scale="0.176778" left="2427.52" top="275.989" width="1323" height="353.048">
 </objectview>

 <relationshipview id="_002asqb014ve3424aoon" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="View" xlink:href="#_002asj602731to4i2b9a"/>
  <target-link xlink:role="objectview" xlink:title="Class CVW_Rating" xlink:href="#_002asqb014ve340jgr4t"/>
 </relationshipview>

 <objectview id="_002asqb01632na49k42k" xlink:role="object" xlink:title="Function getRatingColor" xlink:href="#_002asqb01632nafng64n" state="open" behavior="nested" text-scale="0.240519" decomp-scale="0.176778" left="2906.66" top="384.981" width="1323" height="353.048">
 </objectview>

 <relationshipview id="_002asqb01632naantmgo" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="Utilities" xlink:href="#_002asj6027328323iv1c"/>
  <target-link xlink:role="objectview" xlink:title="Function getRatingColor" xlink:href="#_002asqb01632na49k42k"/>
 </relationshipview>

 <relationshipview id="_002asqd011lc5uhdi8u6" xlink:role="relationship" xlink:href="#_002asqd011lc5usdslfh" origin-text-hidden-flag="true" mid-point-text-hidden-flag="true" target-text-hidden-flag="true">
  <origin-link xlink:role="objectview" xlink:title="Class CVW_ParameterManager" xlink:href="#_002aso00190aa1r6eqbh"/>
  <target-link xlink:role="objectview" xlink:title="Class IRTV_Config" xlink:href="#_002asnu015d0g04533aa"/>
 </relationshipview>

 <objectview id="_002asr000rddf05ejjmk" xlink:role="object" xlink:title="Class Rule_Globals" xlink:href="#_002asr000rddf0mfe626" state="open" behavior="nested" text-scale="0.481038" decomp-scale="0.062501" left="3968" top="3040.08" width="661.5" height="176.524">
  <symbol-override state="open" xlink:role="symbol" xlink:title="ToolButton_gray_blu" xlink:href="../views/akm.svg#_002asht025gbhac8tf7s" xlink:actuate="user">
   <replace tag="text" property="value" macro="(expand (property name))"/>
   <replace tag="canvas" property="fillcolor" macro="(expand &#34;lightgreen&#34;)"/>
   <replace tag="text" property="fillcolor" macro="(expand &#34;lightgreen&#34;)"/>
  </symbol-override>
 </objectview>

 <relationshipview id="_002asr000rddfutmfije" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:href="#_002asj6027323duqrqb2"/>
  <target-link xlink:role="objectview" xlink:title="Class Rule_Globals" xlink:href="#_002asr000rddf05ejjmk"/>
 </relationshipview>

 <relationshipview id="_002asr000re02h7neuh5" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:href="#_002asj6027323duqrqb2"/>
  <target-link xlink:role="objectview" xlink:title="Class Rule" xlink:href="#_002asr000re02hmes7bn"/>
 </relationshipview>

 <objectview id="_002asr000re02hmes7bn" xlink:role="object" xlink:title="Class Rule" xlink:href="#_002asr000re02hqan45t" state="open" behavior="nested" text-scale="0.481038" decomp-scale="0.062501" left="3968" top="3232.08" width="661.5" height="176.524">
  <symbol-override state="open" xlink:role="symbol" xlink:title="ToolButton_gray_blu" xlink:href="../views/akm.svg#_002asht025gbhac8tf7s" xlink:actuate="user">
   <replace tag="text" property="value" macro="(expand (property name))"/>
   <replace tag="canvas" property="fillcolor" macro="(expand &#34;lightgreen&#34;)"/>
   <replace tag="text" property="fillcolor" macro="(expand &#34;lightgreen&#34;)"/>
  </symbol-override>
 </objectview>

 <objectview id="_002asr901869eg42gvnr" xlink:role="object" xlink:title="Function selectAmong" xlink:href="#_002asr901869eg7jqab5" state="open" behavior="nested" text-scale="0.240519" decomp-scale="0.176778" left="2263.03" top="24.2276" width="1323" height="353.048">
  <symbol-override state="open" xlink:role="symbol" xlink:title="ToolButton_gray_blu" xlink:href="../views/akm.svg#_002asht025gbhac8tf7s" xlink:actuate="user">
   <replace tag="text" property="value" macro="(expand (property name))"/>
   <replace tag="canvas" property="fillcolor" macro="(expand &#34;lightgreen&#34;)"/>
   <replace tag="text" property="fillcolor" macro="(expand &#34;lightgreen&#34;)"/>
  </symbol-override>
 </objectview>

 <relationshipview id="_002asr901869egmb5p6m" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="Utilities" xlink:href="#_002asj6027328323iv1c"/>
  <target-link xlink:role="objectview" xlink:title="Function selectAmong" xlink:href="#_002asr901869eg42gvnr"/>
 </relationshipview>

 <relationshipview id="_002asr901apinii5u5hq" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="Utilities" xlink:href="#_002asj6027328323iv1c"/>
  <target-link xlink:role="objectview" xlink:title="Function isInMenu, Function getWorkarea" xlink:href="#_002asr901apinijcajnl"/>
 </relationshipview>

 <objectview id="_002asr901apinijcajnl" xlink:role="object" xlink:title="Function isInMenu, Function getWorkarea" xlink:href="#_002asr901apini85v53v" state="open" behavior="nested" text-scale="0.240519" decomp-scale="0.176778" left="3285.35" top="42.163" width="1323" height="353.048">
  <symbol-override state="open" xlink:role="symbol" xlink:title="ToolButton_gray_blu" xlink:href="../views/akm.svg#_002asht025gbhac8tf7s" xlink:actuate="user">
   <replace tag="text" property="value" macro="(expand (property name))"/>
   <replace tag="canvas" property="fillcolor" macro="(expand &#34;lightgreen&#34;)"/>
   <replace tag="text" property="fillcolor" macro="(expand &#34;lightgreen&#34;)"/>
  </symbol-override>
 </objectview>

 <objectview id="_002asre019rp1v265jn4" xlink:role="object" xlink:title="Class EKA_InformationManager" xlink:href="#_002asre019rp1g5t7ru6" state="open" behavior="nested" text-scale="0.234792" decomp-scale="0.062501" left="2746.39" top="982.904" width="1280.02" height="384.008">
  <symbol-override state="open" xlink:role="symbol" xlink:title="ToolButton_gray_blu" xlink:href="../views/akm.svg#_002asht025gbhac8tf7s" xlink:actuate="user">
   <replace tag="text" property="value" macro="(expand (property name))"/>
   <replace tag="canvas" property="fillcolor" macro="(expand &#34;lightgreen&#34;)"/>
   <replace tag="text" property="fillcolor" macro="(expand &#34;lightgreen&#34;)"/>
  </symbol-override>
 </objectview>

 <relationshipview id="_002asre019rp3ead0c6k" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="Information" xlink:href="#_002asj60272bqgu0h19s"/>
  <target-link xlink:role="objectview" xlink:title="Class EKA_InformationManager" xlink:href="#_002asre019rp1v265jn4"/>
 </relationshipview>

 <relationshipview id="_002asre019sqebhe5hhi" xlink:role="relationship" xlink:href="#_002asre019sqebe7emtb" origin-text-hidden-flag="true" mid-point-text-hidden-flag="true" target-text-hidden-flag="true">
  <origin-link xlink:role="objectview" xlink:title="Class EKA_InformationManager" xlink:href="#_002asre019rp1v265jn4"/>
  <target-link xlink:role="objectview" xlink:title="Class IRTV_Config" xlink:href="#_002asnu015d0g04533aa"/>
 </relationshipview>

 <relationshipview id="_002asre019svmpo1jhgs" xlink:role="relationship" xlink:href="#_002asre019svmp9tbfhj" origin-text-hidden-flag="true" mid-point-text-hidden-flag="true" target-text-hidden-flag="true">
  <origin-link xlink:role="objectview" xlink:title="Class EKA_InformationManager" xlink:href="#_002asre019rp1v265jn4"/>
  <target-link xlink:role="objectview" xlink:title="Class CVW_ParameterManager" xlink:href="#_002aso00190aa1r6eqbh"/>
 </relationshipview>

 <relationshipview id="_002asre019t41uo6je34" xlink:role="relationship" xlink:href="#_002asre019t41uukj367" origin-text-hidden-flag="true" mid-point-text-hidden-flag="true" target-text-hidden-flag="true">
  <origin-link xlink:role="objectview" xlink:title="Class EKA_InformationManager" xlink:href="#_002asre019rp1v265jn4"/>
  <target-link xlink:role="objectview" xlink:title="Class EKA_Inheritance" xlink:href="#_002asnu015cvug0fn0i0"/>
 </relationshipview>

 <relationshipview id="_002asre019taopm1420u" xlink:role="relationship" xlink:href="#_002asre019taop6s5hep" origin-text-hidden-flag="true" mid-point-text-hidden-flag="true" target-text-hidden-flag="true">
  <origin-link xlink:role="objectview" xlink:title="Class CVW_TaskManager" xlink:href="#_002aso001909h0f9eda1"/>
  <target-link xlink:role="objectview" xlink:title="Class EKA_InformationManager" xlink:href="#_002asre019rp1v265jn4"/>
 </relationshipview>

 <relationshipview id="_002asrj0166n9n2clop1" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="Task" xlink:href="#_002ask701tmsf99c81tn"/>
  <target-link xlink:role="objectview" xlink:title="Class CVW_EventManager, Class CVW_Event" xlink:href="#_002asrj0166n9nto3g9c"/>
 </relationshipview>

 <objectview id="_002asrj0166n9nto3g9c" xlink:role="object" xlink:title="Class CVW_EventManager, Class CVW_Event" xlink:href="#_002asrj0166n9nkjaq3q" state="open" behavior="nested" text-scale="0.240519" decomp-scale="0.140628" left="1280" top="640" width="1323" height="353.048">
  <symbol-override state="open" xlink:role="symbol" xlink:title="ToolButton_gray_blu" xlink:href="../views/akm.svg#_002asht025gbhac8tf7s" xlink:actuate="user">
   <replace tag="text" property="value" macro="(expand (property name))"/>
   <replace tag="canvas" property="fillcolor" macro="(expand &#34;lightgreen&#34;)"/>
   <replace tag="text" property="fillcolor" macro="(expand &#34;lightgreen&#34;)"/>
  </symbol-override>
 </objectview>

 <relationshipview id="_002asrj0168l7ls86kht" xlink:role="relationship" xlink:href="#_002asrj0168l7l1uoq4f" origin-text-hidden-flag="true" mid-point-text-hidden-flag="true" target-text-hidden-flag="true">
  <origin-link xlink:role="objectview" xlink:title="Class EKA_InformationManager" xlink:href="#_002asre019rp1v265jn4"/>
  <target-link xlink:role="objectview" xlink:title="Class CVW_EventManager, Class CVW_Event" xlink:href="#_002asrj0166n9nto3g9c"/>
 </relationshipview>

 <relationshipview id="_002asrj0168plov0eklf" xlink:role="relationship" xlink:href="#_002asrj0168plo3rk0pf" origin-text-hidden-flag="true" mid-point-text-hidden-flag="true" target-text-hidden-flag="true">
  <origin-link xlink:role="objectview" xlink:title="Class CVW_EventManager, Class CVW_Event" xlink:href="#_002asrj0166n9nto3g9c"/>
  <target-link xlink:role="objectview" xlink:title="Class CVW_ViewManager" xlink:href="#_002aso001908jt3rh7qg"/>
 </relationshipview>

 <relationshipview id="_002asrl00vcfsvdsf9u2" xlink:role="relationship" xlink:href="#_002asrl00vcfsv6ods9h" origin-text-hidden-flag="true" mid-point-text-hidden-flag="true" target-text-hidden-flag="true">
  <origin-link xlink:role="objectview" xlink:title="Class CVW_EventManager, Class CVW_Event" xlink:href="#_002asrj0166n9nto3g9c"/>
  <target-link xlink:role="objectview" xlink:title="Class CVW_TaskManager" xlink:href="#_002aso001909h0f9eda1"/>
 </relationshipview>

 <relationshipview id="_002asrs00ua7jtkti01a" xlink:role="relationship" xlink:href="#_002asrs00ua7jtandpt0" origin-text-hidden-flag="true" mid-point-text-hidden-flag="true" target-text-hidden-flag="true">
  <origin-link xlink:role="objectview" xlink:title="Class CVW_TaskManager" xlink:href="#_002aso001909h0f9eda1"/>
  <target-link xlink:role="objectview" xlink:title="Class Rule" xlink:href="#_002asr000re02hmes7bn"/>
 </relationshipview>

 <objectview id="_002asuc01fbia1h6uv0k" xlink:role="object" xlink:title="Sub setHourGlass" xlink:href="#_002asuc01fbia13dschl" state="open" behavior="nested" text-scale="0.240519" decomp-scale="0.176778" left="3072" top="3456" width="1323" height="353.048">
 </objectview>

 <relationshipview id="_002asuc01fbia1ukgvdj" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="Utilities" xlink:href="#_002asj6027328323iv1c"/>
  <target-link xlink:role="objectview" xlink:title="Sub setHourGlass" xlink:href="#_002asuc01fbia1h6uv0k"/>
 </relationshipview>

 <objectview id="_002asvr010ff1ftopgir" xlink:role="object" xlink:title="Class CVW_Webservice" xlink:href="#_002asvr010ff1f7hu0k1" state="open" behavior="nested" text-scale="0.240519" decomp-scale="0.062501" left="3200" top="1408" width="1323" height="353.048">
  <symbol-override state="open" xlink:role="symbol" xlink:title="ToolButton_gray_blu" xlink:href="../views/akm.svg#_002asht025gbhac8tf7s" xlink:actuate="user">
   <replace tag="text" property="value" macro="(expand (property name))"/>
   <replace tag="canvas" property="fillcolor" macro="(expand &#34;lightgreen&#34;)"/>
   <replace tag="text" property="fillcolor" macro="(expand &#34;lightgreen&#34;)"/>
  </symbol-override>
 </objectview>

 <relationshipview id="_002asvr010ff1fvf5qgc" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="Task" xlink:href="#_002ask701tmsf99c81tn"/>
  <target-link xlink:role="objectview" xlink:title="Class CVW_Webservice" xlink:href="#_002asvr010ff1ftopgir"/>
 </relationshipview>

 <relationshipview id="_002asvr010h8thd4p6vb" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="Task" xlink:href="#_002ask701tmsf99c81tn"/>
  <target-link xlink:role="objectview" xlink:title="Class CVW_Internet_Explorer" xlink:href="#_002asvr010h8tho6d599"/>
 </relationshipview>

 <objectview id="_002asvr010h8tho6d599" xlink:role="object" xlink:title="Class CVW_Internet_Explorer" xlink:href="#_002asvr010h8th99i88p" state="open" behavior="nested" text-scale="0.240519" decomp-scale="0.062501" left="3200" top="1024" width="1323" height="353.048">
  <symbol-override state="open" xlink:role="symbol" xlink:title="ToolButton_gray_blu" xlink:href="../views/akm.svg#_002asht025gbhac8tf7s" xlink:actuate="user">
   <replace tag="text" property="value" macro="(expand (property name))"/>
   <replace tag="canvas" property="fillcolor" macro="(expand &#34;lightgreen&#34;)"/>
   <replace tag="text" property="fillcolor" macro="(expand &#34;lightgreen&#34;)"/>
  </symbol-override>
 </objectview>

 <relationshipview id="_002at1100qtusq5dkip4" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="Information" xlink:href="#_002asj60272bqgu0h19s"/>
  <target-link xlink:role="objectview" xlink:title="Class EKA_Import" xlink:href="#_002at1100qtusqpcbl1q"/>
 </relationshipview>

 <objectview id="_002at1100qtusqpcbl1q" xlink:role="object" xlink:title="Class EKA_Import" xlink:href="#_002at1100qtusq4vqp7c" state="open" behavior="nested" text-scale="0.240519" decomp-scale="0.176778" left="1020.07" top="960.444" width="1323" height="353.048">
  <symbol-override state="open" xlink:role="symbol" xlink:title="ToolButton_gray_blu" xlink:href="../views/akm.svg#_002asht025gbhac8tf7s" xlink:actuate="user">
   <replace tag="text" property="value" macro="(expand (property name))"/>
   <replace tag="canvas" property="fillcolor" macro="(expand &#34;lightgreen&#34;)"/>
   <replace tag="text" property="fillcolor" macro="(expand &#34;lightgreen&#34;)"/>
  </symbol-override>
 </objectview>

 <relationshipview id="_002at11019j8sg0f21me" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="Information" xlink:href="#_002asj60272bqgu0h19s"/>
  <target-link xlink:role="objectview" xlink:title="Class CVW_RoleManager" xlink:href="#_002at11019j8sgbc7cej"/>
 </relationshipview>

 <objectview id="_002at11019j8sgbc7cej" xlink:role="object" xlink:title="Class CVW_RoleManager" xlink:href="#_002at11019j8sg4osiij" state="open" behavior="nested" text-scale="0.240519" decomp-scale="0.176778" left="2560" top="384" width="1323" height="353.048">
  <symbol-override state="open" xlink:role="symbol" xlink:title="ToolButton_gray_blu" xlink:href="../views/akm.svg#_002asht025gbhac8tf7s" xlink:actuate="user">
   <replace tag="text" property="value" macro="(expand (property name))"/>
   <replace tag="canvas" property="fillcolor" macro="(expand &#34;lightgreen&#34;)"/>
   <replace tag="text" property="fillcolor" macro="(expand &#34;lightgreen&#34;)"/>
  </symbol-override>
 </objectview>

 <objectview id="_002at1d013lge58kihj3" xlink:role="object" xlink:title="Class EKA_Compare" xlink:href="#_002at1d013lge530no0n" state="open" behavior="nested" text-scale="0.240519" decomp-scale="0.176778" left="256" top="640" width="1323" height="353.048">
  <symbol-override state="open" xlink:role="symbol" xlink:title="ToolButton_gray_blu" xlink:href="../views/akm.svg#_002asht025gbhac8tf7s" xlink:actuate="user">
   <replace tag="text" property="value" macro="(expand (property name))"/>
   <replace tag="canvas" property="fillcolor" macro="(expand &#34;lightgreen&#34;)"/>
   <replace tag="text" property="fillcolor" macro="(expand &#34;lightgreen&#34;)"/>
  </symbol-override>
 </objectview>

 <relationshipview id="_002at1d013lge5p8phla" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="Information" xlink:href="#_002asj60272bqgu0h19s"/>
  <target-link xlink:role="objectview" xlink:title="Class EKA_Compare" xlink:href="#_002at1d013lge58kihj3"/>
 </relationshipview>

 <relationshipview id="_002at1d013nf8rh0ig4i" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="Utilities" xlink:href="#_002asj6027328323iv1c"/>
  <target-link xlink:role="objectview" xlink:title="Function getPropertyViewStatus, getStatusLineColor" xlink:href="#_002at1d013nf8rqrg4hs"/>
 </relationshipview>

 <objectview id="_002at1d013nf8rqrg4hs" xlink:role="object" xlink:title="Function getPropertyViewStatus, getStatusLineColor" xlink:href="#_002at1d013nf8r52a4h0" state="open" behavior="nested" text-scale="0.240519" decomp-scale="0.176778" left="3072" top="3712" width="1323" height="353.048">
  <symbol-override state="open" xlink:role="symbol" xlink:title="ToolButton_gray_blu" xlink:href="../views/akm.svg#_002asht025gbhac8tf7s" xlink:actuate="user">
   <replace tag="text" property="value" macro="(expand (property name))"/>
   <replace tag="canvas" property="fillcolor" macro="(expand &#34;lightgreen&#34;)"/>
   <replace tag="text" property="fillcolor" macro="(expand &#34;lightgreen&#34;)"/>
  </symbol-override>
 </objectview>

 <modelview id="oid1" name="Main" title="Main" primary-flag="true" standalone-flag="true" zoom-level="0.922854" x="-1040" y="-244.01" seq="2" xlink:role="model" xlink:title="CVW Script Library" xlink:href="#_002asj602701vd83c0rc" behavior="nested" text-scale="1" decomp-scale="0" visible-in="browser">
  <child-link xlink:role="objectview" xlink:href="#_002asj6027323duqrqb2"/>
  <viewbundle>
   <relationshipview-link xlink:role="relationshipview" xlink:href="#_002aso001934ad0cnlqv"/>
   <relationshipview-link xlink:role="relationshipview" xlink:href="#_002aso00194br1fa07f7"/>
   <relationshipview-link xlink:role="relationshipview" xlink:href="#_002aso00194g2hf0qk59"/>
   <relationshipview-link xlink:role="relationshipview" xlink:href="#_002aso00194lolgnu09a"/>
   <relationshipview-link xlink:role="relationshipview" xlink:href="#_002aso00194sh74u1jnp"/>
   <relationshipview-link xlink:role="relationshipview" xlink:href="#_002aso001954i5uaa74o"/>
   <relationshipview-link xlink:role="relationshipview" xlink:href="#_002aso00195bt5epi211"/>
   <relationshipview-link xlink:role="relationshipview" xlink:href="#_002aso00195rtpvu6r6j"/>
   <relationshipview-link xlink:role="relationshipview" xlink:href="#_002aso001970825fbj0f"/>
   <relationshipview-link xlink:role="relationshipview" xlink:href="#_002aso001984t0ajv9j1"/>
   <relationshipview-link xlink:role="relationshipview" xlink:href="#_002aso00198gbed620oa"/>
   <relationshipview-link xlink:role="relationshipview" xlink:href="#_002aso0019a35rbg4kaq"/>
   <relationshipview-link xlink:role="relationshipview" xlink:href="#_002aso0019a9b0t26337"/>
   <relationshipview-link xlink:role="relationshipview" xlink:href="#_002aso0019fo65etrkl7"/>
   <relationshipview-link xlink:role="relationshipview" xlink:href="#_002asqd011lc5uhdi8u6"/>
   <relationshipview-link xlink:role="relationshipview" xlink:href="#_002asre019sqebhe5hhi"/>
   <relationshipview-link xlink:role="relationshipview" xlink:href="#_002asre019svmpo1jhgs"/>
   <relationshipview-link xlink:role="relationshipview" xlink:href="#_002asre019t41uo6je34"/>
   <relationshipview-link xlink:role="relationshipview" xlink:href="#_002asre019taopm1420u"/>
   <relationshipview-link xlink:role="relationshipview" xlink:href="#_002asrj0168l7ls86kht"/>
   <relationshipview-link xlink:role="relationshipview" xlink:href="#_002asrj0168plov0eklf"/>
   <relationshipview-link xlink:role="relationshipview" xlink:href="#_002asrl00vcfsvdsf9u2"/>
   <relationshipview-link xlink:role="relationshipview" xlink:href="#_002asrs00ua7jtkti01a"/>
  </viewbundle>
 </modelview>


</metis>
