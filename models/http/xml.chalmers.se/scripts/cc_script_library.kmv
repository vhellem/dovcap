<?xml version="1.0"?>
<?metis version="5.2.2"?>
<?metisxml version="1.2"?>
<!DOCTYPE metis PUBLIC "-//METIS/METIS XML 1.2//EN" "http://xml.metis.no/metis12.dtd">
<metis
 xmlns="http://www.metis.no/metis"
 xmlns:xlink="http://www.w3.org/1999/xlink"
 types="1"
 instances="5"
 instanceviews="9"
 nextoid="1">

 <model id="_002aslb01sme0q6niekc" name="Standard Blank" title="Standard Blank" desc="Blank Metis Modeling model" standalone-flag="true">
  <metamodel-links size="2">
   <metamodel-link xlink:role="metamodel" xlink:title="Metis Modeling" xlink:href="http://xml.metis.no/xml/templates/blank/blank_metamodel.kmd#oid2" xlink:actuate="user"/>
   <metamodel-link xlink:role="metamodel" xlink:title="Workplace" xlink:href="http://xml.activeknowledgemodeling.com/cvw/templates/workplace_definition.kmd#MetaModel_CVW:Workplace_UUID" xlink:actuate="user"/>
  </metamodel-links>
  <valueset size="3" xlink:role="type" xlink:title="Container" xlink:href="metis:stdtypes#oid3" xlink:actuate="user">
   <string name="name"></string>
   <string name="description"></string>
   <string name="externalID"></string>
  </valueset>
  <part-link xlink:role="object" xlink:title="Classes and Utilities" xlink:href="#_002aslb01so0qj8pu96q"/>
  <bundle-rules>
   <bundle-rule>
    <origin-link xlink:role="model" xlink:title="Standard Blank" xlink:href="#_002aslb01sme0q6niekc" xlink:actuate="user"/>
    <target-link xlink:role="model" xlink:title="Standard Blank" xlink:href="#_002aslb01sme0q6niekc" xlink:actuate="user"/>
   </bundle-rule>
  </bundle-rules>
 </model>

 <object id="_002aslb01so0qj8pu96q">
  <valueset size="3" xlink:role="type" xlink:title="Container" xlink:href="metis:stdtypes#oid3" xlink:actuate="user">
   <string name="name">Classes and Utilities</string>
   <string name="description"></string>
   <string name="externalID"></string>
  </valueset>
  <part-link xlink:role="object" xlink:title="Class CC_Rule" xlink:href="#_002aslb01spoqh67dmsg"/>
  <part-link xlink:role="object" xlink:title="Function getParameterTitle" xlink:href="#_002asls00rc18ond6ves"/>
  <part-link xlink:role="object" xlink:title="Class CC_RuleEngine" xlink:href="#_002asmt01e9ug3vdtq5q"/>
 </object>

 <object id="_002aslb01spoqh67dmsg">
  <valueset size="10" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="http://xml.activeknowledgemodeling.com/cvw/languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Class CC_Rule</string>
   <string name="description"></string>
   <integer name="dbms-admin.commitFlag">0</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20070616 135947921</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="comments"></string>
   <string name="script">option explicit


&#39;-----------------------------------------------------------
&#39;-----------------------------------------------------------
Class CC_Rule


    &#39; Variant parameters
    Public Title                        &#39; String

    &#39; Context variables (public)
    Public currentModel
    Public currentModelView
    Public currentInstance
    Public currentInstanceView
    Public ObjectAspectRatio

    &#39; Debug
    Public debug

    &#39; Types
    Private buttonType
    Private hasContextType
    Private specContainerType
    Private hasInstanceContextType

    Private parameterType
    Private actionType
    Private ccType
    Private csType
    Private ceType
    Private crType
    Private conditionType
    Private expressionType
    Private inputType
    Private outputType
    Private ruleType
    Private frType
    Private dsType
    Private cType
    Private cpType
    Private dpType
    Private fpType
    Private ppType
    Private vpType
    Private hasDpType
    Private hasPpType
    Private paramValueType
    Private cpValueType
    Private dpValueType
    Private fpValueType
    Private ppValueType
    Private vpValueType
    Private hasCStype
    Private hasCEtype
    Private hasCRtype
    Private usesCCtype
    Private explainsType
    Private solvesType
    Private requiresType
    Private constrainedType

    Private hasActionType
    Private hasConditionType
    Private hasExpressionType
    Private hasInputType
    Private hasOutputType
    Private hasRuleType
    Private ifThenType
    Private inputToType
    Private inputTo2Type
    Private inputTo3Type
    Private inputToRelType
    Private inputTo2RelType
    Private isSubjectOfType
    Private outputToType
    Private outputToRelType
    Private anyObjectType
    
    Private modelObjectType
    Private partType
    Private memberType
    Private propertyType
    Private hasPropertyType
    Private valueType
    Private hasValueType
    Private hasDefinitionType

    &#39; Methods
    Private ruleMethod
    Private expressionMethod

    &#39; Arguments
    Private currentWindow
    Private configModel
    Private ccRuleEngine
    Private ruleKind
    Private ExprEvaluatedToProperty
    Private RuleEvaluatedToProperty

&#39;-----------------------------------------------------------
    Public Property Get ruleEngine
        set ruleEngine = ccRuleEngine
    End Property

&#39;-----------------------------------------------------------
    Public Sub execute(mode)
        dim ruleObject
        dim cvwTask

        if mode = &#34;Edit&#34; then
            set ruleObject = findRule()
            if not isEnabled(ruleObject) then
                &#39;MsgBox &#34;There is no rule connected!&#34;
                exit sub
            end if
        end if
        if isEnabled(ruleObject) then
            title = ruleObject.title
            if title = &#34;New rule&#34; then
                ruleKind = &#34;Logical rule&#34;
                set ruleObject = buildRule(ruleObject)
            elseif title = &#34;New expression&#34; then
                ruleKind = &#34;Expression&#34;
                set ruleObject = buildRule(ruleObject)
            elseif title = &#34;New service&#34; then
                ruleKind = &#34;Service&#34;
                set ruleObject = buildRule(ruleObject)
            else
                ruleKind = ruleObject.getNamedStringValue(&#34;ruleKind&#34;)
            end if
        end if
        if isEnabled(ruleObject) then
            call openRuleWindow(ruleObject)
        end if
    End Sub

&#39;-----------------------------------------------------------
    Public Function getRules(inst)
        dim rules, noRules

        set rules = Nothing
        if inst.type.uri = ruleType.uri then
            set rules = metis.newInstanceList
            call rules.addLast(inst)
        elseif inst.isRelationship then
            set rules = metis.newInstanceList
            noRules = getRelationshipRules(inst, rules)
        elseif inst.isObject then
            set rules = inst.getNeighbourObjects(0, isSubjectOfType, ruleType)
        end if
        set getRules = rules
    End Function

&#39;-----------------------------------------------------------
    Private Function getRelationshipRules(relship, rules)
        dim ruleIds, ruleUri, ruleObject
        dim idArray
        dim i

        getRelationshipRules = 0
        if isEnabled(relship) then
            on error resume next
            ruleIds = relship.getNamedStringValue(&#34;ruleIds&#34;)
            if Len(ruleIds) &#62; 0 then
	            idArray = Split(ruleIds, &#34;;&#34;, -1, 1)
                i = 0
                ruleUri = &#34;&#34;
                do
                    on error resume next
                    ruleUri = idArray(i)
                    if Len(ruleUri) &#62; 0 then
                        if Left(ruleUri, 1) = &#34;#&#34; then
                            ruleUri = relship.url &#38; ruleUri
                        end if
                        set ruleObject = metis.findInstance(ruleUri)
                        if isEnabled(ruleObject) then
                            if not isValid(rules) then
                                set rules = metis.newInstanceList
                            end if
                            call rules.addLast(ruleObject)
                        end if
                    else
                        exit do
                    end if
                    i = i + 1
                    ruleUri = &#34;&#34;
                loop
            end if
        end if
        if isValid(rules) then
            getRelationshipRules = rules.count
        end if
    End Function

&#39;-----------------------------------------------------------
    Private Function findRule()
        dim rule, rules
        dim ruleObject, expressionObject, serviceObject
        dim model, modelObject
        dim cvwSelectDialog

        set findRule = Nothing
        if currentInstance.type.uri = ruleType.uri then
            set findRule = currentInstance
            exit function
        end if
        set rules = getRules(currentInstance)
        if isValid(rules) then
            &#39; Get model object
            set model = contentModel()
            if isEnabled(model) then
                set modelObject = metis.findInstance(model.uri)
                &#39; Create the rule object
                set ruleObject = modelObject.newPart(ruleType)
                if isEnabled(ruleObject) then
                    ruleObject.title = &#34;New rule&#34;
                    rules.addLast ruleObject
                end if
                &#39; Create the expression object
                set expressionObject = modelObject.newPart(ruleType)
                if isEnabled(expressionObject) then
                    expressionObject.title = &#34;New expression&#34;
                    call expressionObject.setNamedStringValue(&#34;ruleKind&#34;, &#34;Expression&#34;)
                    rules.addLast expressionObject
                end if
                &#39; Create the service object
                set serviceObject = modelObject.newPart(ruleType)
                if isEnabled(serviceObject) then
                    serviceObject.title = &#34;New service&#34;
                    call serviceObject.setNamedStringValue(&#34;ruleKind&#34;, &#34;Service&#34;)
                    rules.addLast serviceObject
                end if
            end if
            if rules.count = 0 then
                exit function
            else
                set cvwSelectDialog = new CVW_SelectDialog
                cvwSelectDialog.singleSelect = true
                cvwSelectDialog.title = &#34;Select dialog&#34;
                cvwSelectDialog.heading = &#34;Select rule&#34;
                set rules = cvwSelectDialog.show(rules)
                if isValid(rules) then
                    if rules.count = 1 then
                        set findRule = rules(1)
                    end if
                end if
                if isEnabled(findRule) then
                    if findRule.uri &#60;&#62; ruleObject.uri or rules.count = 0 then
                        model.deleteObject(ruleObject)
                    end if
                    if findRule.uri &#60;&#62; expressionObject.uri or rules.count = 0 then
                        model.deleteObject(expressionObject)
                    end if
                    if findRule.uri &#60;&#62; serviceObject.uri or rules.count = 0 then
                        model.deleteObject(serviceObject)
                    end if
                end if
            end if
        end if
    End Function

&#39;-----------------------------------------------------------
    Private Function buildRule(ruleObject)
        dim model, modelObject
        dim actionObject, conditionObject
        dim expressionObject, inputObject, outputObject
        dim ruleName
        dim hasRuleRel, subjectOfRel, partOfRel, ifThenRel
        dim ccObject, ccObjects
        dim ruleIds
        dim idArray
        dim hasSubject
        dim isLogical

        set buildRule = Nothing
        if not isEnabled(ruleObject) then
            exit function
        else
            &#39; Create rule object
            &#39; Get model object
            if ruleKind = &#34;Expression&#34; or ruleKind = &#34;Service&#34; then
                isLogical = false
            else
                isLogical = true
            end if
            set model = contentModel()
            if isEnabled(model) then
                set modelObject = metis.findInstance(model.uri)
                set ccObjects = model.findInstances(ccType, &#34;&#34;, &#34;&#34;)
                if isValid(ccObjects) then
                    if ccObjects.count &#62; 0 then
                        set ccObject = ccObjects(1)
                    end if
                end if
                title = ruleObject.title
                if title = &#34;New rule&#34; then
                    ruleName = &#34;Rule[&#34; &#38; currentInstance.title &#38; &#34;]&#34;
                elseif title = &#34;New expression&#34; then
                    ruleName = &#34;Expression[&#34; &#38; currentInstance.title &#38; &#34;]&#34;
                elseif title = &#34;New service&#34; then
                    ruleName = &#34;Service[&#34; &#38; currentInstance.title &#38; &#34;]&#34;
                end if
                if Len(ruleName) &#62; 0 then
                    ruleName = InputBox(&#34;Enter rule name&#34;, &#34;Input dialog&#34;, ruleName)
                    if Len(ruleName) &#62; 0 then
                        ruleObject.title = ruleName
                    else
                        exit function
                    end if
                    &#39; Connect the relationships
                    if isEnabled(ccObject) then
                        set hasRuleRel = model.newRelationship(hasRuleType, ccObject, ruleObject)
                    end if
                    hasSubject = false
                    if currentInstance.isRelationship then
                        ruleIds = currentInstance.getNamedStringValue(&#34;ruleIds&#34;)
                        if currentInstance.url = ruleObject.url then
	                        idArray = Split(ruleObject.uri, &#34;#&#34;, -1, 1)
	                        if Len(ruleIds) &#62; 0 then
                                ruleIds = ruleIds &#38; &#34;;&#34;
                            end if
                            ruleIds = ruleIds &#38; Chr(35) &#38; idArray(1)
                        else
                            ruleIds = ruleObject.uri
                        end if
                        call currentInstance.setNamedStringValue(&#34;ruleIds&#34;, ruleIds)
                        hasSubject = true
                    else
                        set subjectOfRel = model.newRelationship(isSubjectOfType, currentInstance, ruleObject)
                        if isEnabled(subjectOfRel) then hasSubject = true
                    end if
                    if hasSubject then
                        if isLogical then
                            &#39; Create condition and action objects
                            set conditionObject = modelObject.newPart(conditionType)
                            set actionObject = modelObject.newPart(actionType)
                            if isEnabled(conditionObject) and isEnabled(actionObject) then
                                &#39; Create relationships
                                set partOfRel = model.newRelationship(hasConditionType, ruleObject, conditionObject)
                                set partOfRel = model.newRelationship(hasActionType, ruleObject, actionObject)
                                set ifThenRel = model.newRelationship(ifThenType, conditionObject, actionObject)
                            end if
                        else
                            &#39; Create expression
                            set expressionObject = modelObject.newPart(expressionType)
                            if isEnabled(expressionObject) then
                                expressionObject.title = &#34;Expression&#34;
                                &#39; Create relationship
                                set partOfRel    = model.newRelationship(hasExpressionType, ruleObject, expressionObject)
                                &#39;set inputObject  = expressionObject.newPart(inputType)
                                &#39;set outputObject = expressionObject.newPart(outputType)
                            end if
                        end if
                    end if
                end if
            end if
            if isEnabled(ruleObject) then
                set buildRule = ruleObject
            end if
        end if
   End Function

&#39;-----------------------------------------------------------
    Public Function getSubjectOf(rule)
        dim model
        dim rel, relships
        dim r, rules, noRules
        
        set getSubjectOf = Nothing

        set relships = rule.getNeighbourRelationships(1, isSubjectOfType)
        if relships.count &#62; 0 then
            set getSubjectOf = relships(1).origin
        else
            set model = contentModel
            set relships = model.relationships
            for each rel in relships
                if isEnabled(rel) then
                    set rules = Nothing
                    noRules = getRelationshipRules(rel, rules)
                    if noRules &#62; 0 then
                        for each r in rules
                            if r.uri = rule.uri then
                                set getSubjectOf = rel
                                exit function
                            end if
                        next
                    end if
                end if
            next
        end if
    End Function

&#39;-----------------------------------------------------------
    Private Sub openRuleWindow(ruleObject)
        dim cvwModel, cvwAction, cvwWorkarea
        dim actionName, actionObject, actionObjects
        dim workarea, workWindow, wObject
        dim rel, rels
        dim ruleView
        dim child, children
        dim textscale

        set cvwModel = getCVWmodel
        actionName = &#34;_Rules_&#34;
        set actionObjects = cvwModel.findInstances(buttonType, &#34;name&#34;, actionName)
        if isValid (actionObjects) then
            if actionObjects.count &#62; 0 then
                set actionObject = actionObjects(1)
                set cvwAction = new CVW_MenuAction
                set cvwAction.configObject = actionObject
                &#39;set cvwAction.contextInstance = ruleObject
                call cvwAction.build
                call cvwAction.execute
                set workarea = cvwAction.workarea
                if isValid(workarea) and isEnabled(ruleObject) then
                    set workWindow = workarea.WorkWindow
                    &#39; Get CVW_Workarea
                    set cvwWorkarea = new CVW_Workarea
                    set cvwWorkarea.WorkWindow = workWindow
                    &#39; Set context instance
                    set wObject = workWindow.instance
                    set rels = wObject.getNeighbourRelationships(0, hasInstanceContextType)
                    if rels.count &#62; 0 then
                        set rel = rels(1)
                        set rel.target = ruleObject
                    end if
                    set cvwWorkarea = Nothing
                    if ruleKind = &#34;Expression&#34; then
                        call populateExpression(workWindow, ruleObject, false)
                    elseif ruleKind = &#34;Service&#34; then
                        call populateExpression(workWindow, ruleObject, false)
                    else
                        call populateLogicalRule(workWindow, ruleObject, false)
                    end if
                end if
                set cvwAction = Nothing
            end if
        end if

    End Sub

&#39;-----------------------------------------------------------
    Public Function populateRule(workWindow, ruleObject, fromOpen)

        ruleKind = ruleObject.getNamedStringValue(&#34;ruleKind&#34;)
        if ruleKind = &#34;Expression&#34; then
            call populateExpression(workWindow, ruleObject, fromOpen)
        elseif ruleKind = &#34;Service&#34; then
            call populateExpression(workWindow, ruleObject, fromOpen)
        else
            call populateLogicalRule(workWindow, ruleObject, fromOpen)
        end if
    End Function

&#39;-----------------------------------------------------------
    Private Function populateLogicalRule(workWindow, ruleObject, fromOpen)
        dim ruleView
        dim child, children
        dim action, actions, actionView
        dim condition, conditions, conditionView
        dim expression, expressions, expressionView
        dim fromObj, fromObjView, toObj, toObjView
        dim parameterValue, parameterValueView
        dim parameterObject, parameterObjectView
        dim rel, rels, relView, view, views
        dim cvwObjectView
        dim textscale
        dim objGeo, size
        dim objHeight

        set populateLogicalRule = Nothing
        if not fromOpen then
            if isValid(workWindow) then
                set children = workWindow.children
                for each child in children
                    call currentModelView.deleteObjectView(child)
                next
            end if
        end if
        if isValid(workWindow) and isEnabled(ruleObject) then
            set ruleView = viewExists(ruleObject, workWindow)
            if isValid(ruleView) then
                if fromOpen then
                    textscale = ruleView.textscale
                    textscale = textscale / 1
                    ruleView.textScale = textScale
                end if
            else
                set ruleView = workWindow.newObjectView(ruleObject)
                textscale = ruleView.textscale
                textscale = textscale / 5
                ruleView.textScale = textScale
            end if
            if isValid(ruleView) then
                set cvwObjectView = new CVW_ObjectView
                cvwObjectView.heightRatio = ObjectAspectRatio
                if hasInstance(ruleView) then
                    &#39; Find actions
                    set actions = ruleObject.getNeighbourObjects(0, hasActionType, actionType)
                    for each action in actions
                        set actionView = viewExists(action, ruleView)
                        if not isValid(actionView) then
                            cvwObjectView.nestedTextFactor1 = 3
                            set actionView = cvwObjectView.create(workWindow, ruleView, action, 0)
                            actionView.close
                        end if
                    next
                    &#39; Find conditions
                    set conditions = ruleObject.getNeighbourObjects(0, hasConditionType, conditionType)
                    for each condition in conditions
                        set conditionView = viewExists(condition, ruleView)
                        if not isValid(conditionView) then
                            cvwObjectView.nestedTextFactor1 = 3
                            set conditionView = cvwObjectView.create(workWindow, ruleView, condition, 1)
                            conditionView.close
                        end if
                    next
                    &#39; Find expressions
                    set expressions = ruleObject.getNeighbourObjects(0, hasExpressionType, expressionType)
                    for each expression in expressions
                        set expressionView = viewExists(expression, ruleView)
                        if not isValid(expressionView) then
                            cvwObjectView.nestedTextFactor1 = 1.75
                            set expressionView = cvwObjectView.create(workWindow, ruleView, expression, 0)
                            expressionView.close
                        end if
                        exit for
                    next
                    &#39; Find ifThenRels
                    for each action in actions
                        set actionView = action.views(1)
                        if isValid(actionView) then
                            set rels = action.getNeighbourRelationships(1, ifThenType)
                            for each rel in rels
                                set condition = rel.origin
                                set conditionView = condition.views(1)
                                if isInView(conditionView, ruleView) then
                                    set relView = relViewExists(rel, conditionView, actionView)
                                    if not isValid(relView) then
                                        set relView = currentModelView.newRelationshipView(rel, conditionView, actionView)
                                    end if
                                end if
                            next
                        end if
                    next
                    &#39; Find inputToRels to conditions
                    for each condition in conditions
                        set conditionView = condition.views(1)
                        if isValid(conditionView) then
                            set rels = condition.getNeighbourRelationships(1, inputTo2Type)
                            if rels.count = 0 then
                                set rels = condition.getNeighbourRelationships(1, inputToType)
                            end if
                            for each rel in rels
                                set fromObj = rel.origin
                                if fromObj.type.uri = conditionType.uri then
                                    set fromObjView = fromObj.views(1)
                                    if isInView(fromObjView, ruleView) then
                                        set relView = relViewExists(rel, fromObjView, conditionView)
                                        if not isValid(relView) then
                                            set relView = currentModelView.newRelationshipView(rel, fromObjView, conditionView)
                                        end if
                                    end if
                                elseif fromObj.type.uri = vpValueType.uri then
                                end if
                            next
                        end if
                    next
                    &#39; Find inputToRels from expressions
                    for each expression in expressions
                        set expressionView = expression.views(1)
                        if isValid(expressionView) then
                            set rels = expression.getNeighbourRelationships(0, inputTo3Type)
                            for each rel in rels
                                set toObj = rel.target
                                if toObj.type.uri = conditionType.uri then
                                    set toObjView = toObj.views(1)
                                    if isInView(toObjView, ruleView) then
                                        set relView = relViewExists(rel, expressionView, toObjView)
                                        if not isValid(relView) then
                                            set relView = currentModelView.newRelationshipView(rel, expressionView, toObjView)
                                        end if
                                    end if
                                elseif fromObj.type.uri = vpValueType.uri then
                                end if
                            next
                        end if
                    next
                    for each expression in expressions
                        set expressionView = expression.views(1)
                        if isValid(expressionView) then
                            set rels = expression.getNeighbourRelationships(0, inputTo3Type)
                            for each rel in rels
                                set toObj = rel.target
                                if toObj.type.uri = conditionType.uri then
                                    set toObjView = toObj.views(1)
                                    if isInView(toObjView, ruleView) then
                                        set relView = relViewExists(rel, expressionView, toObjView)
                                        if not isValid(relView) then
                                            set relView = currentModelView.newRelationshipView(rel, expressionView, toObjView)
                                        end if
                                    end if
                                elseif fromObj.type.uri = vpValueType.uri then
                                end if
                            next
                        end if
                    next
                    &#39; Find inputToRels from parameter values to conditions
                    for each condition in conditions
                        set conditionView = condition.views(1)
                        if isValid(conditionView) then
                            set rels = condition.getNeighbourRelationships(1, inputToType)
                            for each rel in rels
                                set parameterValue = rel.origin
                                if isParameterValueType(parameterValue) then
                                    set parameterValueView = Nothing
                                    set views = parameterValue.views
                                    if isValid(views) then
                                        for each view in views
                                            if isInView(view, ruleView) then
                                                set parameterValueView = view
                                                exit for
                                            end if
                                        next
                                    end if
                                    if not isValid(parameterValueView) then
                                        &#39; Create view of parameterValue
                                        cvwObjectView.nestedTextFactor1 = 2.25
                                        set parameterValueView = cvwObjectView.create(workWindow, ruleView, parameterValue, 0)
                                        parameterValueView.close
                                    end if
                                    if isValid(parameterValueView) then
                                        set relView = relViewExists(rel, parameterValueView, conditionView)
                                        if not isValid(relView) then
                                            set relView = currentModelView.newRelationshipView(rel, parameterValueView, conditionView)
                                        end if
                                    end if
                                end if
                            next
                        end if
                    next
                    &#39; Find inputToRels from parameter( value)s to expressions
                    for each expression in expressions
                        set expressionView = expression.views(1)
                        if isValid(expressionView) then
                            set rels = expression.getNeighbourRelationships(1, inputToRelType)
                            for each rel in rels
                                set parameterObject = rel.origin
                                if isParameterType(parameterObject) then
                                    set parameterObjectView = Nothing
                                    set views = parameterObject.views
                                    if isValid(views) then
                                        for each view in views
                                            if isInView(view, ruleView) then
                                                set parameterObjectView = view
                                                exit for
                                            end if
                                        next
                                    end if
                                    if not isValid(parameterObjectView) then
                                        cvwObjectView.nestedTextFactor1 = 2.25
                                        set parameterObjectView = cvwObjectView.create(workWindow, ruleView, parameterObject, 0)
                                        parameterObjectView.close
                                    end if
                                    if isValid(parameterObjectView) then
                                        set relView = relViewExists(rel, parameterObjectView, expressionView)
                                        if not isValid(relView) then
                                            set relView = currentModelView.newRelationshipView(rel, parameterObjectView, expressionView)
                                        end if
                                    end if
                                end if
                            next
                        end if
                    next
                    for each expression in expressions
                        set expressionView = expression.views(1)
                        if isValid(expressionView) then
                            set rels = expression.getNeighbourRelationships(1, inputTo2RelType)
                            for each rel in rels
                                set parameterValue = rel.origin
                                if isParameterValueType(parameterValue) then
                                    set parameterValueView = Nothing
                                    set views = parameterValue.views
                                    if isValid(views) then
                                        for each view in views
                                            if isInView(view, ruleView) then
                                                set parameterValueView = view
                                                exit for
                                            end if
                                        next
                                    end if
                                    if not isValid(parameterValueView) then
                                        cvwObjectView.nestedTextFactor1 = 2.25
                                        set parameterValueView = cvwObjectView.create(workWindow, ruleView, parameterValue, 0)
                                        parameterValueView.close
                                    end if
                                    if isValid(parameterValueView) then
                                        set relView = relViewExists(rel, parameterValueView, expressionView)
                                        if not isValid(relView) then
                                            set relView = currentModelView.newRelationshipView(rel, parameterValueView, expressionView)
                                        end if
                                    end if
                                end if
                            next
                        end if
                    next
                    &#39; Find outputToRels from actions to parameter values
                        if isValid(actionView) then
                            set action = actionView.instance
                            set rels = action.getNeighbourRelationships(0, outputToType)
                            for each rel in rels
                                set parameterValue = rel.target
                                if isParameterValueType(parameterValue) then
                                    set parameterValueView = Nothing
                                    set views = parameterValue.views
                                    if isValid(views) then
                                        for each view in views
                                            if isInView(view, ruleView) then
                                                set parameterValueView = view
                                                exit for
                                            end if
                                        next
                                    end if
                                    if not isValid(parameterValueView) then
                                        &#39; Create view of parameterValue
                                        cvwObjectView.nestedTextFactor1 = 2.25
                                        set parameterValueView = cvwObjectView.create(workWindow, ruleView, parameterValue, 0)
                                        parameterValueView.close
                                    end if
                                    if isValid(parameterValueView) then
                                        set relView = relViewExists(rel, actionView, parameterValueView)
                                        if not isValid(relView) then
                                            set relView = currentModelView.newRelationshipView(rel, actionView, parameterValueView)
                                        end if
                                    end if
                                end if
                            next
                        end if
                end if
                set cvwObjectView = Nothing
            end if
        end if
        set populateLogicalRule = ruleView
    End Function

&#39;-----------------------------------------------------------
    Private Function populateExpression(workWindow, ruleObject, fromOpen)
        dim ruleView
        dim child, children
        dim expression, expressions, expressionView
        dim fromObj, fromObjView
        dim parameterObject, parameterObjectView
        dim parameterValue, parameterValueView
        dim rel, rels, relView, view, views
        dim part, parts, partView
        dim cvwObjectView
        dim textscale
        dim objGeo, size
        dim objHeight
        dim isInput

        set populateExpression = Nothing
        if not fromOpen then
            if isValid(workWindow) then
                set children = workWindow.children
                for each child in children
                    call currentModelView.deleteObjectView(child)
                next
            end if
        end if
        if isValid(workWindow) and isEnabled(ruleObject) then
            set ruleView = viewExists(ruleObject, workWindow)
            if isValid(ruleView) then
                if fromOpen then
                    textscale = ruleView.textscale
                    textscale = textscale / 1
                    ruleView.textScale = textScale
                end if
            else
                set ruleView = workWindow.newObjectView(ruleObject)
                textscale = ruleView.textscale
                textscale = textscale / 5
                ruleView.textScale = textScale
            end if
            if isValid(ruleView) then
                set cvwObjectView = new CVW_ObjectView
                cvwObjectView.heightRatio = ObjectAspectRatio
                if hasInstance(ruleView) then
                    &#39; Find expressions
                    set expressions = ruleObject.getNeighbourObjects(0, hasExpressionType, expressionType)
                    for each expression in expressions
                        set expressionView = viewExists(expression, ruleView)
                        if not isValid(expressionView) then
                            cvwObjectView.nestedTextFactor1 = 1.75
                            set expressionView = cvwObjectView.create(workWindow, ruleView, expression, 0)
                            expressionView.close
                        end if
                        exit for
                    next
                    &#39; Find inputToRels from parameter values
                    if isEnabled(expression) then
                        set expressionView = expression.views(1)
                        if isValid(expressionView) then
                            set rels = expression.getNeighbourRelationships(1, inputToRelType)
                            for each rel in rels
                                set parameterObject = rel.origin
                                if isParameterType(parameterObject) then
                                    set parameterObjectView = Nothing
                                    set views = parameterObject.views
                                    if isValid(views) then
                                        for each view in views
                                            if isInView(view, ruleView) then
                                                set parameterObjectView = view
                                                exit for
                                            end if
                                        next
                                    end if
                                    if not isValid(parameterObjectView) then
                                        &#39; Create view of parameterValue
                                        cvwObjectView.nestedTextFactor1 = 1.75
                                        set parameterObjectView = cvwObjectView.create(workWindow, ruleView, parameterObject, 0)
                                        parameterObjectView.close
                                    end if
                                    if isValid(parameterObjectView) then
                                        set relView = relViewExists(rel, parameterObjectView, expressionView)
                                        if not isValid(relView) then
                                            set relView = currentModelView.newRelationshipView(rel, parameterObjectView, expressionView)
                                        end if
                                    end if
                                end if
                            next
                        end if
                    end if
                    for each expression in expressions
                        set expressionView = expression.views(1)
                        if isValid(expressionView) then
                            set rels = expression.getNeighbourRelationships(1, inputTo2RelType)
                            for each rel in rels
                                set parameterValue = rel.origin
                                if isParameterValueType(parameterValue) then
                                    set parameterValueView = Nothing
                                    set views = parameterValue.views
                                    if isValid(views) then
                                        for each view in views
                                            if isInView(view, ruleView) then
                                                set parameterValueView = view
                                                exit for
                                            end if
                                        next
                                    end if
                                    if not isValid(parameterValueView) then
                                        cvwObjectView.nestedTextFactor1 = 2.25
                                        set parameterValueView = cvwObjectView.create(workWindow, ruleView, parameterValue, 0)
                                        parameterValueView.close
                                    end if
                                    if isValid(parameterValueView) then
                                        set relView = relViewExists(rel, parameterValueView, expressionView)
                                        if not isValid(relView) then
                                            set relView = currentModelView.newRelationshipView(rel, parameterValueView, expressionView)
                                        end if
                                    end if
                                end if
                            next
                        end if
                    next
                    &#39; Find outputToRels to parameter values
                    for each expression in expressions
                        set expressionView = expression.views(1)
                        if isValid(expressionView) then
                            set rels = expression.getNeighbourRelationships(0, outputToRelType)
                            for each rel in rels
                                set parameterObject = rel.target
                                if isParameterType(parameterObject) then
                                    set parameterObjectView = Nothing
                                    set views = parameterObject.views
                                    if isValid(views) then
                                        for each view in views
                                            if isInView(view, ruleView) then
                                                set parameterObjectView = view
                                                exit for
                                            end if
                                        next
                                    end if
                                    if not isValid(parameterObjectView) then
                                        &#39; Create view of parameterValue
                                        cvwObjectView.nestedTextFactor1 = 1.75
                                        set parameterObjectView = cvwObjectView.create(workWindow, ruleView, parameterObject, 0)
                                        parameterObjectView.close
                                    end if
                                    if isValid(parameterObjectView) then
                                        set relView = relViewExists(rel, expressionView, parameterObjectView)
                                        if not isValid(relView) then
                                            set relView = currentModelView.newRelationshipView(rel, expressionView, parameterObjectView)
                                        end if
                                    end if
                                end if
                            next
                        end if
                    next
                end if
                set cvwObjectView = Nothing
            end if
        end if
        set populateExpression = ruleView
    End Function

&#39;-----------------------------------------------------------
    Public Sub startConfigureCC(ccObj)
        dim model, modelObj, modelObject
        dim product, products
        dim parts, ccPart

        if not isEnabled(ccObj) then
            exit sub
        end if

        set model = ccObj.ownerModel
        set modelObj = metis.findInstance(model.uri)
        set parts = modelObj.parts
        &#39;set parts = contentModel.parts
        for each modelObj in parts
            if modelObj.type.uri = modelObjectType.uri then
                if modelObj.title = ccObj.title then
                    &#39; Model object is found - delete content
                    set products = modelObj.parts
                    for each product in products
                        call deletePartStructure(product)
                    next
                    set modelObject = modelObj
                    exit for
                end if
            end if
        next
        if not isEnabled(modelObject) then
            &#39; Create the model object
            set modelObject = contentModel.newObject(modelObjectType)
            modelObject.title = ccObj.title
        end if
        &#39; Start building the part structure
        set ccPart = modelObject.newPart(partType)
        ccPart.title = ccObj.title
        call configureCC(modelObject, ccPart, ccObj)
    End Sub

&#39;-----------------------------------------------------------
    Public Sub configureCC(modelObj, ccPart, ccObj)
        call configureFunctionMeans(ccObj)
        call configureTopCC(ccObj)
        call createPartStructure(modelObj, ccPart, ccObj)
    End Sub

&#39;-----------------------------------------------------------
    Private Sub createPartStructure(modelObject, ccPart, ccObj)
        dim csObj, ceObj, crObj
        dim csRels, ceRels, crRels, ccRels
        dim csRel, ceRel, crRel, ccRel
        dim part, obj, objects
        dim rel

        &#39; Find and create properties
        call createPartProperties(modelObject, ccPart, ccObj)
        &#39; Create part structure
        set csRels = ccObj.getNeighbourRelationships(0, hasCStype)
        for each csRel in csRels
            if includedInConfig(csRel) then
                set csObj = csRel.target
                set ceRels = csObj.getNeighbourRelationships(0, hasCEtype)
                for each ceRel in ceRels
                    if includedInConfig(ceRel) then
                        set ceObj = ceRel.target
                        if includedInConfig(ceObj) then
                            &#39; CE found - create and connect the new part
                            set part   = modelObject.newPart(partType)
                            if isEnabled(part) then
                                part.title = ceObj.title
                                set rel    = contentModel.newRelationship(memberType, ccPart, part)
                                set crRels = ceObj.getNeighbourRelationships(0, hasCRtype)
                                for each crRel in crRels
                                    if includedInConfig(crRel) then
                                        set crObj = crRel.target
                                        set ccRels = crObj.getNeighbourRelationships(0, usesCCtype)
                                        for each ccRel in ccRels
                                            if includedInConfig(ccRel) then
                                                set obj = ccRel.target
                                                call configureCC(modelObject, part, obj)
                                            end if
                                        next
                                    end if
                                next
                            end if
                        end if
                    end if
                next
            end if
        next
    End Sub

&#39;-----------------------------------------------------------
    Private Sub createPartProperties(modelObject, ccPart, ccObj)
        dim model, rel
        dim frObj, frObjects
        dim dsObj, dsObjects
        dim ppObj, ppObjects
        dim paramObj, paramObjects
        dim valueObj, valueObjects
        dim defObj, defObjects
        dim propName, propValue
        dim prop
        dim primary

        set model = modelObject.ownerModel
        &#39; Find FRs
        set ppObjects = ccObj.getNeighbourObjects(0, hasPpType, ppType)
        for each ppObj in ppObjects
            call createPartProps(ppObj, model, modelObject, ccPart)
        next
        &#39; Find FRs
        set frObjects = ccObj.getNeighbourObjects(0, explainsType, frType)
        for each frObj in frObjects
            if isEnabled(frObj) then
                &#39; Check if the FR is primary
                primary = frObj.getNamedValue(&#34;primary&#34;).getInteger
                if primary &#62; 0 then
                    &#39; Find the corresponding DSs
                    set dsObjects = frObj.getNeighbourObjects(0, solvesType, dsType)
                    for each dsObj in dsObjects
                        &#39; Check if DS is included in configuration
                        if includedInConfig(dsObj) then
                            call createPartProps(dsObj, model, modelObject, ccPart)
                        end if
                    next
                end if
            end if
        next
    End Sub

&#39;-----------------------------------------------------------
    Private Sub createPartProps(obj, model, modelObject, ccPart)
        dim valueObj, valueObjects
        dim paramObj, paramObjects
        dim defObj, defObjects
        dim propValue
        dim prop, rel

        &#39; Find parameters
        set paramObjects = obj.getNeighbourObjects(0, hasDpType, dpType)
        set valueObjects = obj.getNeighbourObjects(0, hasValueType, valueType)
        for each paramObj in paramObjects
            &#39; Design parameter
            propValue = &#34;&#34;
            for each valueObj in valueObjects
                set defObjects = valueObj.getNeighbourObjects(0, hasDefinitionType, parameterType)
                for each defObj in defObjects
                    if defObj.title = paramObj.title then
                        &#39; Parameter has been given a value
                        propValue = valueObj.getNamedStringValue(&#34;value&#34;)
                        exit for
                    end if
                next
            next
            &#39; For each parameter create a property
            set prop = modelObject.newPart(propertyType)
            prop.title = paramObj.title
            if Len(propValue) &#62; 0 then
                &#39; Set the value, if given
                call prop.setNamedStringValue(&#34;value&#34;, propValue)
            end if
            set rel = model.newRelationship(hasPropertyType, ccPart, prop)
        next
    End Sub

&#39;-----------------------------------------------------------
    Private Sub deletePartStructure(product)
        dim model
        dim part, parts
        dim prop, properties

        set model = product.ownerModel
        set parts = product.getNeighbourObjects(0, memberType, partType)
        for each part in parts
            call deletePartStructure(part)
        next
        set properties = product.getNeighbourObjects(0, hasPropertyType, propertyType)
        for each prop in properties
            call model.deleteObject(prop)
        next
        call model.deleteObject(product)
    End Sub

&#39;-----------------------------------------------------------
    Private Function includedInConfig(inst)
        dim ival

        on error resume next
        includedInConfig = true
        if not isEnabled(inst) then
            includedInConfig = false
        end if
        ival = inst.getNamedValue(RuleEvaluatedToProperty).getInteger
        if ival = 0 then
            includedInConfig = false
        end if

    End Function
&#39;-----------------------------------------------------------
    Public Sub configureTopCC(obj)
        dim rel, rels
        dim mode

        call transformRulesToScripts(obj)
        mode = 1
        call ccRuleEngine.executeRules(obj, mode)
        set rels = obj.getNeighbourRelationships(0, hasCStype)
        for each rel in rels
            call configureCS(rel, mode)
        next
    End Sub

    Private Sub configureCS(relship, mode)
        dim obj
        dim rel, rels

        call transformRulesToScripts(relship)
        call ccRuleEngine.executeRules(relship, mode)
        set obj = relship.target
        call transformRulesToScripts(obj)
        call ccRuleEngine.executeRules(obj, mode)
        set rels = obj.getNeighbourRelationships(0, hasCEtype)
        for each rel in rels
            call configureCE(rel, mode)
        next
    End Sub

    Private Sub configureCE(relship, mode)
        dim obj
        dim rel, rels

        call transformRulesToScripts(relship)
        call ccRuleEngine.executeRules(relship, mode)
        set obj = relship.target
        call transformRulesToScripts(obj)
        call ccRuleEngine.executeRules(obj, mode)
        set rels = obj.getNeighbourRelationships(0, hasCRtype)
        for each rel in rels
            call configureCR(rel, mode)
        next
    End Sub

    Private Sub configureCR(relship, mode)
        dim obj
        dim rel, rels

        call transformRulesToScripts(relship)
        call ccRuleEngine.executeRules(relship, mode)
        set obj = relship.target
        call transformRulesToScripts(obj)
        call ccRuleEngine.executeRules(obj, mode)
        set rels = obj.getNeighbourRelationships(0, usesCCtype)
        for each rel in rels
            call configureSubCC(rel, mode)
        next
    End Sub

    Private Sub configureSubCC(relship, mode)
        dim obj

        call transformRulesToScripts(relship)
        call ccRuleEngine.executeRules(relship, mode)
        &#39;set obj = relship.target
        &#39;call transformRulesToScripts(obj)
        &#39;call ccRuleEngine.executeRules(obj, mode)
    End Sub

&#39;-----------------------------------------------------------
    Public Sub configureFunctionMeans(obj1)
        dim obj, objects
        dim rels
        dim mode

        mode = 1
        set objects = obj1.getNeighbourObjects(0, explainsType, frType)
        for each obj in objects
            if isEnabled(obj) then
                ' Check if the FR is required by a DS, if so this is not top
                set rels = obj.getNeighbourRelationships(1, requiresType)
                if rels.count = 0 then
                    ' Top FR
                    call configureFrDsC(obj, mode)
                end if
            end if
        next
        set objects = obj1.getNeighbourObjects(0, explainsType, cType)
        for each obj in objects
            if isEnabled(obj) then
                call configureInstance(obj, mode)
            end if
        next
    End Sub

    Public Sub configureFrDsC(frObj, mode)
        dim obj, objects
        dim rel, rel2, rels, relships
        dim dsObj

        &#39; FR
        if isEnabled(frObj) then
            &#39; Configure FR
            call configureInstance(frObj, mode)
            &#39; Then look for DSs
            set relships = frObj.getNeighbourRelationships(0, solvesType)
            for each rel in relships
                 if isEnabled(rel) then
                    &#39; FR is solved by DS
                    call configureInstance(rel, mode)
                end if
            next
            &#39; Configure DS and C
            for each rel in relships
                 if isEnabled(rel) then
                    &#39; DS is found
                    set dsObj = rel.target
                    if isEnabled(dsObj) then
                        &#39; Find C
                        set objects = dsObj.getNeighbourObjects(0, constrainedType, cType)
                        for each obj in objects
                            &#39; DS is constrained by C
                            if isEnabled(obj) then
                                &#39; Configure C
                                call configureInstance(obj, mode)
                            end if
                        next
                        &#39; Configure DS
                        call configureInstance(dsObj, mode)
                    end if
                end if
            next
            &#39; Check for next levels of FrDsC
            for each rel in relships
                 if isEnabled(rel) then
                    &#39; DS is found
                    set dsObj = rel.target
                    if isEnabled(dsObj) then
                        set rels = dsObj.getNeighbourRelationships(0, requiresType)
                        for each rel2 in rels
                            if isEnabled(rel2) then
                                call configureInstance(rel2, mode)
                            end if
                        next
                        for each rel2 in rels
                            if isEnabled(rel2) then
                                call configureFrDsC(rel2.target, mode)
                            end if
                        next
                    end if
                end if
            next
        end if
    End Sub

&#39;-----------------------------------------------------------
    Private Sub configureInstance(inst, mode)
        call transformRulesToScripts(inst)
        call ccRuleEngine.executeRules(inst, mode)
    End Sub

&#39;-----------------------------------------------------------
    Public Sub transformRulesToScripts(parentInst)
        dim rule, rules
        dim intVal

        set rules = getRules(parentInst)
        if rules.count &#62; 0 then
            for each rule in rules
                if isEnabled(rule) then
                    call transformToScript(rule)
                end if
            next
        else
            set intVal = metis.newValue
            call intVal.setInteger(1)
            call parentInst.setNamedValue(RuleEvaluatedToProperty, intVal)
        end if
    End Sub

&#39;-----------------------------------------------------------
    Public Sub transformToScript(ruleObject)
        dim expression, expressions
        dim text1, text2, text3
        dim ruleKind

        if isEnabled(ruleObject) then
            ruleKind = ruleObject.getNamedStringValue(&#34;ruleKind&#34;)
            if ruleKind = &#34;Expression&#34; or ruleKind = &#34;Service&#34; then
                set expressions = ruleObject.getNeighbourObjects(0, hasExpressionType, expressionType)
                if expressions.count &#62; 0 then
                    set expression = expressions(1)
                    call transformExpressionToScript(expression)
                    &#39; Set complete script in rule object
                    text1 = expression.getNamedStringValue(&#34;ruleInitCode&#34;)
                    text2 = expression.getNamedStringValue(&#34;ruleCode&#34;)
                    text3 = expression.getNamedStringValue(&#34;rulePostCode&#34;)
                    call ruleObject.setNamedStringValue(&#34;ruleCode&#34;, text1 &#38; text2 &#38; text3)
                end if
            else
                call transformLogicalRuleToScript(ruleObject)
            end if
        end if
    End Sub

&#39;-----------------------------------------------------------
    Private Sub transformExpressionToScript(expression)
        dim expressions
        dim rel, rels
        dim inputs(), noInputs
        dim inputs2(), noInputs2
        dim outputs(), noOutputs
        dim initScript(), preScript(), mainScript(), postScript()
        dim s, i, j, lineNo
        dim text1, text2, text3

            &#39; Find input parameters
            set rels = expression.getNeighbourRelationships(1, inputToRelType)
            noInputs = rels.count
            i = 0
            if noInputs &#62; 0 then
                ReDim Preserve inputs(noInputs + 1)
                for each rel in rels
                    s = rel.getNamedStringValue(&#34;paramId&#34;)
                    if Len(s) &#62; 0 then
                        i = i + 1
                        inputs(i) = s
                    end if
                next
            end if
            &#39; Find input parameter values
            set rels = expression.getNeighbourRelationships(1, inputTo2RelType)
            noInputs2 = rels.count
            i = 0
            if rels.count &#62; 0 then
                ReDim Preserve inputs2(noInputs2 + 1)
                for each rel in rels
                    s = rel.getNamedStringValue(&#34;paramId&#34;)
                    if Len(s) &#62; 0 then
                        i = i + 1
                        inputs2(i) = s
                    end if
                next
            end if
            &#39; Find output parameters
            set rels = expression.getNeighbourRelationships(0, outputToRelType)
            noOutputs = rels.count
            i = 0
            if noOutputs &#62; 0 then
                ReDim Preserve outputs(noOutputs + 1)
                for each rel in rels
                    s = rel.getNamedStringValue(&#34;paramId&#34;)
                    if Len(s) &#62; 0 then
                        i = i + 1
                        outputs(i) = s
                    end if
                next
            end if
            &#39; Find condition parameter
            set rels = expression.getNeighbourRelationships(0, inputTo3Type)
            if rels.count &#62; 0 then
                noOutputs = noOutputs + rels.count
                ReDim Preserve outputs(noOutputs + 1)
                for each rel in rels
                    s = rel.getNamedStringValue(&#34;paramId&#34;)
                    if Len(s) &#62; 0 then
                        i = i + 1
                        outputs(i) = s
                    end if
                next
            end if
            &#39; Build InitCode script
            ReDim Preserve initScript(noInputs + noInputs2 + 10)
            initScript(1) = &#34;dim ccRuleEngine, contextInst&#34;
            s = &#34;dim &#34;
            for i = 1 to noInputs
                if Len(inputs(i)) &#62; 0 then
                    if i &#62; 1 then s = s &#38; &#34;, &#34;
                    s = s &#38; inputs(i)
                end if
            next
            for j = 1 to noInputs2
                if Len(inputs2(j)) &#62; 0 then
                    if i &#62; 1 then s = s &#38; &#34;, &#34;
                    i = i + j
                    s = s &#38; inputs2(j)
                end if
            next
            for j = 1 to noOutputs
                if Len(outputs(j)) &#62; 0 then
                    if i &#62; 1 then s = s &#38; &#34;, &#34;
                    i = i + j
                    s = s &#38; outputs(j)
                end if
            next
            if Len(s) &#60;= 4 then  s = &#34;&#34;
            initScript(2) = s
            initScript(3) = &#34;&#34;
            initScript(4) = &#34;set ccRuleEngine = new CC_RuleEngine&#34;
            initScript(5) = &#34;&#34;
            lineNo = 5
            for i = 1 to noInputs
                if Len(inputs(i)) &#62; 0 then
                    lineNo = lineNo + 1
                    initScript(lineNo) = inputs(i) &#38; &#34; = ccRuleEngine.getInputParameter(&#34; &#38; Chr(34) &#38; inputs(i) &#38; Chr(34) &#38; &#34;)&#34;
                end if
            next
            for i = 1 to noInputs2
                if Len(inputs2(i)) &#62; 0 then
                    lineNo = lineNo + 1
                    initScript(lineNo) = inputs2(i) &#38; &#34; = ccRuleEngine.getInputParameterValue(&#34; &#38; Chr(34) &#38; inputs2(i) &#38; Chr(34) &#38; &#34;)&#34;
                end if
            next
            initScript(lineNo + 1) = &#34;&#34;
            &#39; Build Code script
            ReDim Preserve preScript(7)
            preScript(1) = &#34;&#39;----------------------------------------------------------------------------&#34;
            preScript(2) = &#34;&#34;
            preScript(3) = &#34;&#39; Context parameters: ccRuleEngine, contextInst&#34;

            s = &#34;&#39; Input parameter(s):  &#34;
            for i = 1 to noInputs
                if Len(inputs(i)) &#62; 0 then
                    if i &#62; 1 then s = s &#38; &#34;, &#34;
                    s = s &#38; inputs(i)
                end if
            next
            for j = 1 to noInputs2
                if Len(inputs2(j)) &#62; 0 then
                    if i &#62; 1 then s = s &#38; &#34;, &#34;
                    i = i + j
                    s = s &#38; inputs2(j)
                end if
            next
            preScript(4) = s
            s = &#34;&#39; Output parameter(s): &#34;
            for i = 1 to noOutputs
                if Len(outputs(i)) &#62; 0 then
                    if i &#62; 1 then s = s &#38; &#34;, &#34;
                    s = s &#38; outputs(i)
                end if
            next
            preScript(5) = s
            preScript(6) = &#34;&#39;----------------------------------------------------------------------------&#34;

            &#39; Build PostCode script
            ReDim Preserve postScript(noOutputs + 10)
            lineNo = 1
            postScript(1) = &#34;&#34;
            postScript(2) = &#34;&#34;
            lineNo = 2
            for i = 1 to noOutputs
                if Len(outputs(i)) &#62; 0 then
                    lineNo = lineNo + 1
                    if outputs(i) = &#34;Condition&#34; then
                        postScript(lineNo) = &#34;call ccRuleEngine.setCondition(&#34; &#38; outputs(i) &#38; &#34;)&#34;
                    else
                        postScript(lineNo) = &#34;call ccRuleEngine.setOutputParameter(&#34; &#38; Chr(34) &#38; outputs(i) &#38; Chr(34) &#38; &#34;, &#34; &#38; outputs(i) &#38; &#34;)&#34;
                    end if
                end if
            next
            postScript(lineNo + 1) = &#34;&#34;
            postScript(lineNo + 2) = &#34;set ccRuleEngine = Nothing&#34;
            postScript(lineNo + 3) = &#34;&#34;
            postScript(lineNo + 4) = &#34;&#39; End&#34;

            i = 1
            text1 = &#34;&#34;
            do while not isEmpty(initScript(i))
                text1 = text1 &#38; initScript(i) &#38; vbCrLf
                i = i + 1
            loop
            call expression.setNamedStringValue(&#34;ruleInitCode&#34;, text1)
            i = 1
            text2 = &#34;&#34;
            do while not isEmpty(preScript(i))
                text2 = text2 &#38; preScript(i) &#38; vbCrLf
                i = i + 1
            loop
            call expression.setNamedStringValue(&#34;rulePreCode&#34;, text2)
            i = 1
            text3 = &#34;&#34;
            do while not isEmpty(postScript(i))
                text3 = text3 &#38; postScript(i) &#38; vbCrLf
                i = i + 1
            loop
            call expression.setNamedStringValue(&#34;rulePostCode&#34;, text3)

    End Sub

&#39;-----------------------------------------------------------
    Private Sub transformLogicalRuleToScript(ruleObject)
        dim lineNo
        dim action, actions, outputs, ifThens
        dim operator, operation
        dim condition
        dim paramType, paramObj, valueObj
        dim script(), text
        dim setParam
        dim i

        lineNo = 0
        &#39; Find the action
        set actions = ruleObject.getNeighbourObjects(0, hasActionType, actionType)
        if actions.count &#62; 0 then
            setParam = false
            set action = actions(1)
            operation = action.getNamedStringValue(&#34;operation&#34;)
            if operation = &#34;setParameterValue&#34; then
                setParam = true
            end if
            if Len(operation) &#62; 0 then
                ReDim Preserve script(lineNo + 5)
                lineNo = lineNo + 1
                script(lineNo) = &#34;end if&#34;
                lineNo = lineNo + 1
                if debug then
                    script(lineNo) = &#34;    call &#34; &#38; operation
                else
                    script(lineNo) = &#34;    call ccRuleEngine.&#34; &#38; operation
                end if
                set outputs = action.getNeighbourObjects(0, outputToType, anyObjectType)
                if outputs.count &#62; 0 then
                    set valueObj = outputs(1)
                    set paramObj = getCcParameterObj(valueObj)
                    if debug then
                        paramType = getCcParameterType(valueObj)
                        script(lineNo) = script(lineNo) &#38; &#34;(&#34; &#38; Chr(34) &#38; paramType &#38; &#34;, &#34; &#38; Chr(34) &#38; paramObj.title &#38; Chr(34) &#38; &#34;, &#34; &#38; Chr(34) &#38; valueObj.title &#38; Chr(34) &#38; &#34;) &#34;
                    else
                        script(lineNo) = script(lineNo) &#38; &#34;(&#34; &#38; Chr(34) &#38; paramObj.uri &#38; Chr(34) &#38; &#34;, &#34; &#38; Chr(34) &#38; valueObj.uri &#38; Chr(34) &#38; &#34;) &#34;
                    end if
                end if

                lineNo = lineNo + 1
                script(lineNo) = &#34;if condition then&#34;
                &#39; Find the conditions
                set ifThens = action.getNeighbourObjects(1, ifThenType, conditionType)
                if ifThens.count &#60;&#62; 0 then
                    set condition = ifThens(1)
                    text = &#34;&#34;
                    text = getCondition(ruleObject, condition, text, debug)
                    if Len(text) = 0 then exit sub
                end if
                if Len(text) &#62; 0 then
                    lineNo = lineNo + 1
                    script(lineNo) = &#34;condition = &#34; &#38; text &#38; vbCrLf
                end if
                text = &#34;set ccRuleEngine = new CC_RuleEngine&#34; &#38; vbCrLf
                for i = lineNo to 1 step -1
                    text = text &#38; script(i) &#38; vbCrLf
                next
                if setParam then
                    text = text &#38; &#34;call ccRuleEngine.includeInConfiguration&#34; &#38; vbCrLf
                end if
                text = text &#38; &#34;set ccRuleEngine = Nothing&#34; &#38; vbCrLf
                if Len(text) &#62; 0 then
                    if debug then
                        MsgBox text
                    else
                        call ruleObject.setNamedStringValue(&#34;ruleCode&#34;, text)
                    end if
                end if
            end if
        end if
    End Sub

&#39;-----------------------------------------------------------
    Private Function getCondition(ruleObject, condition, text, debug)
        dim model
        dim inputRel, inputRels
        dim rel, rels
        dim valueObj, paramObj
        dim paramType, operator
        dim conditionObj
        dim testCondition
        dim expression
        dim i, ival, intVal

        operator = condition.getNamedStringValue(&#34;operator&#34;)
        if operator = &#34;NOT&#34; then
            text = text &#38; &#34; NOT &#34;
        end if
        set inputRels = condition.getNeighbourRelationships(1, inputToType)
        set rels = condition.getNeighbourRelationships(1, inputTo3Type)
        operator = condition.getNamedStringValue(&#34;operator&#34;)
        for each rel in rels
            inputRels.addLast rel
        next
        if inputRels.count = 0 then
            if not (operator = &#34;TRUE&#34; or operator = &#34;FALSE&#34;) then
                MsgBox &#34;Syntax error: &#34; &#38; vbCrLf &#38; &#34;Illegal condition in rule: &#34; &#38; Chr(34) &#38; ruleObject.title &#38; Chr(34), vbExclamation
                getCondition = &#34;&#34;
            else
                getCondition = operator
            end if
        else
            i = 0
            for each inputRel in inputRels
                i = i + 1
                set valueObj = inputRel.origin
                if valueObj.type.uri = expressionType.uri then
                    set expression = valueObj
                    call transformExpressionToScript(expression)
                    &#39; Execute expression
                    testCondition = &#34;FALSE&#34;
                    set intVal = metis.newValue
                    call intVal.setInteger(0)
                    call expression.setNamedValue(ExprEvaluatedToProperty, intVal)
                    set model = expression.ownerModel
                    call model.runMethodOnInst(expressionMethod, expression)
                    ival = expression.getNamedValue(ExprEvaluatedToProperty).getInteger
                    if ival &#62; 0 then
                        testCondition = &#34;TRUE&#34;
                    end if
                    text = text &#38; &#34; &#34; &#38; testCondition
                    if i &#60; inputRels.count then
                        text = text &#38; &#34; &#34; &#38; operator &#38; &#34; &#34;
                    end if
                else
                    set paramObj = getCcParameterObj(valueObj)
                    if debug then
                        paramType = getCcParameterType(valueObj)
                        text = text &#38; &#34;(getParameterValue(&#34; &#38; Chr(34) &#38; paramType &#38; Chr(34) &#38; &#34;, &#34; &#38; Chr(34) &#38; paramObj.title &#38; Chr(34) &#38; &#34;) = &#34; &#38; Chr(34) &#38; valueObj.title &#38;  Chr(34) &#38; &#34;)&#34;
                    else
                        text = text &#38; &#34;(ccRuleEngine.getParameterValue(&#34; &#38; Chr(34) &#38; paramObj.uri &#38; Chr(34) &#38; &#34;) = ccRuleEngine.getValueOf(&#34; &#38; Chr(34) &#38; valueObj.uri &#38;  Chr(34) &#38; &#34;))&#34;
                    end if
                    if i &#60; inputRels.count then
                        text = text &#38; &#34; &#34; &#38; operator &#38; &#34; &#34;
                    end if
                end if
            next

            set inputRels = condition.getNeighbourRelationships(1, inputTo2Type)
            for each inputRel in inputRels
                set conditionObj = inputRel.origin
                text = text &#38; &#34; &#34; &#38; operator &#38; &#34; (&#34;
                text = getCondition(ruleObject, conditionObj, text, debug)
                text = text &#38; &#34;)&#34;
            next
            getCondition = text
        end if
    End Function

&#39;-----------------------------------------------------------
    Private Function getCcParameterObj(valueObj)
        dim paramType
        dim hasValueType
        dim hasVPVtype, hasCPVtype, hasFPVtype, hasDPVtype, hasPPVtype
        dim paramObj, paramRels

        set getCcParameterObj = Nothing

        set hasVPVtype = metis.findType(&#34;http://xml.chalmers.se/class/has_variant_parameter_value.kmd#has_variant_parameter_value&#34;)
        set hasCPVtype = metis.findType(&#34;http://xml.chalmers.se/class/has_constraint_parameter_value.kmd#has_constraint_parameter_value&#34;)
        set hasFPVtype = metis.findType(&#34;http://xml.chalmers.se/class/has_functional_requirement_parameter_value.kmd#has_functional_requirement_parameter_value&#34;)
        set hasDPVtype = metis.findType(&#34;http://xml.chalmers.se/class/has_design_parameter_value.kmd#has_design_parameter_value&#34;)
        set hasPPVtype = metis.findType(&#34;http://xml.chalmers.se/class/has_performance_parameter_value.kmd#has_performance_parameter_value&#34;)

        paramType = getCcParameterType(valueObj)
        select case paramType
        case &#34;VP&#34;   set hasValueType = hasVPVtype
        case &#34;CP&#34;   set hasValueType = hasCPVtype
        case &#34;FP&#34;   set hasValueType = hasFPVtype
        case &#34;DP&#34;   set hasValueType = hasDPVtype
        case &#34;PP&#34;   set hasValueType = hasPPVtype
        end select
        if isValid(hasValueType) then
            set paramRels = valueObj.getNeighbourRelationships(1, hasValueType)
            if paramRels.count &#62; 0 then
                set paramObj = paramRels(1).origin
                if isEnabled(paramObj) then
                    set getCcParameterObj = paramObj
                end if
            end if
        end if

    End Function

&#39;-----------------------------------------------------------
    Private Function getCcParameterType(valueObj)
        dim vType
        dim vpvType, cpvType, fpvType, dpvType, ppvType

        getCcParameterType = &#34;&#34;

        set cpvType      = metis.findType(&#34;http://xml.chalmers.se/class/constraint_parameter_value.kmd#constraint_parameter_value&#34;)
        set dpvType      = metis.findType(&#34;http://xml.chalmers.se/class/design_parameter_value.kmd#design_parameter_value&#34;)
        set fpvType      = metis.findType(&#34;http://xml.chalmers.se/class/functional_requirement_parameter_value.kmd#functional_requirement_parameter_value&#34;)
        set ppvType      = metis.findType(&#34;http://xml.chalmers.se/class/performance_parameter_value.kmd#performance_parameter_value&#34;)
        set vpvType      = metis.findType(&#34;http://xml.chalmers.se/class/variant_parameter_value.kmd#variant_parameter_value&#34;)

        set vType = valueObj.type
        if vType.inherits(vpvType) then
            getCcParameterType = &#34;VP&#34;
        elseif vType.inherits(cpvType) then
            getCcParameterType = &#34;CP&#34;
        elseif vType.inherits(fpvType) then
            getCcParameterType = &#34;FP&#34;
        elseif vType.inherits(dpvType) then
            getCcParameterType = &#34;DP&#34;
        elseif vType.inherits(ppvType) then
            getCcParameterType = &#34;PP&#34;
        end if
    End Function

&#39;-----------------------------------------------------------
    Private Function isParameterType(inst)
        dim instType

        isParameterType = false
        set instType = inst.type
        if inst.type.inherits(parameterType) then
            isParameterType = true
        end if
    End Function

&#39;-----------------------------------------------------------
    Private Function isParameterValueType(inst)
        dim instType

        isParameterValueType = false
        set instType = inst.type
        if inst.type.inherits(valueType) then
            isParameterValueType = true
        elseif inst.type.inherits(paramValueType) then
            isParameterValueType = true
        end if
    End Function

&#39;-----------------------------------------------------------
    Private Function contentModel           &#39;IMetisObject
        dim context

        &#39; Find ContentModel
        if isValid(currentWindow) then
            set contentModel = currentModel
            set context = new EKA_Context
            set context.currentModel        = currentModel
            set context.currentModelView    = currentModelView
            set context.currentInstance     = currentWindow.instance
            set context.currentInstanceView = currentWindow
            if isValid(context) then
                if isEnabled(context.contentModel) then
                    set contentModel = context.contentModel
                end if
            end if
            set context = Nothing
        end if
    End Function

&#39;-----------------------------------------------------------
    Private Sub Class_Initialize()
        &#39;dim inst

        set currentModel        = metis.currentModel
        set currentModelView    = currentModel.currentModelView
        set currentInstance     = currentModel.currentInstance
        set currentInstanceView = currentModelView.currentInstanceView
        set currentWindow       = findWorkWindowView(currentInstanceView)

        &#39; Types
        set buttonType       = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/action_objects.kmd#ObjType_CVW:Button_UUID&#34;)
        set hasContextType   = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/spec_relships.kmd#RelType_CVW:hasInstanceContext2_UUID&#34;)
        set hasInstanceContextType     = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/spec_relships.kmd#RelType_CVW:hasInstanceContext2_UUID&#34;)
        set actionType       = metis.findType(&#34;http://xml.chalmers.se/class/rule_action.kmd#action&#34;)
        set ccType           = metis.findType(&#34;http://xml.chalmers.se/class/configurable_component.kmd#configurable_component&#34;)
        set csType           = metis.findType(&#34;http://xml.chalmers.se/class/composition_set.kmd#composition_set&#34;)
        set ceType           = metis.findType(&#34;http://xml.chalmers.se/class/composition_element.kmd#composition_element&#34;)
        set crType           = metis.findType(&#34;http://xml.chalmers.se/class/composition_request.kmd#composition_request&#34;)
        set frType           = metis.findType(&#34;http://xml.chalmers.se/class/functional_requirement.kmd#functional_requirement&#34;)
        set dsType           = metis.findType(&#34;http://xml.chalmers.se/class/design_solution.kmd#design_solution&#34;)
        set cType            = metis.findType(&#34;http://xml.chalmers.se/class/constraint.kmd#constraint&#34;)
        set frType           = metis.findType(&#34;http://xml.chalmers.se/class/functional_requirement.kmd#functional_requirement&#34;)
        set cpType           = metis.findType(&#34;http://xml.chalmers.se/class/constraint_parameter.kmd#constraint_parameter&#34;)
        set dpType           = metis.findType(&#34;http://xml.chalmers.se/class/design_parameter.kmd#design_parameter&#34;)
        set fpType           = metis.findType(&#34;http://xml.chalmers.se/class/functional_requirement_parameter.kmd#functional_requirement_parameter&#34;)
        set ppType           = metis.findType(&#34;http://xml.chalmers.se/class/performance_parameter.kmd#performance_parameter&#34;)
        set vpType           = metis.findType(&#34;http://xml.chalmers.se/class/variant_parameter.kmd#variant_parameter&#34;)
        set hasDpType        = metis.findType(&#34;http://xml.chalmers.se/class/has_design_parameter.kmd#has_design_parameter&#34;)
        set hasPpType        = metis.findType(&#34;http://xml.chalmers.se/class/has_performance_parameter.kmd#has_performance_parameter&#34;)
        set paramValueType   = metis.findType(&#34;http://xml.chalmers.se/class/cc_value.kmd#CC_value&#34;)
        set cpValueType      = metis.findType(&#34;http://xml.chalmers.se/class/constraint_parameter_value.kmd#constraint_parameter_value&#34;)
        set dpValueType      = metis.findType(&#34;http://xml.chalmers.se/class/design_parameter_value.kmd#design_parameter_value&#34;)
        set fpValueType      = metis.findType(&#34;http://xml.chalmers.se/class/functional_requirement_parameter_value.kmd#functional_requirement_parameter_value&#34;)
        set ppValueType      = metis.findType(&#34;http://xml.chalmers.se/class/performance_parameter_value.kmd#performance_parameter_value&#34;)
        set vpValueType      = metis.findType(&#34;http://xml.chalmers.se/class/variant_parameter_value.kmd#variant_parameter_value&#34;)
        set explainsType     = metis.findType(&#34;http://xml.chalmers.se/class/is_explained_by.kmd#Is_explained_by&#34;)
        set solvesType       = metis.findType(&#34;http://xml.chalmers.se/class/is_solved_by.kmd#is_solved_by&#34;)
        set requiresType     = metis.findType(&#34;http://xml.chalmers.se/class/requires_function.kmd#requires_function&#34;)
        set constrainedType  = metis.findType(&#34;http://xml.chalmers.se/class/is_constrained_by.kmd#Is_constrained_by&#34;)
        set parameterType    = metis.findType(&#34;http://xml.chalmers.se/class/cc_parameter.kmd#CC_parameter&#34;)

        set conditionType    = metis.findType(&#34;http://xml.chalmers.se/class/rule_condition.kmd#condition&#34;)
        set expressionType   = metis.findType(&#34;http://xml.chalmers.se/class/rule_expression.kmd#expression&#34;)
        set inputToRelType   = metis.findType(&#34;http://xml.chalmers.se/class/rule_expression.kmd#input_to&#34;)
        set inputTo2RelType  = metis.findType(&#34;http://xml.chalmers.se/class/rule_expression.kmd#input_to_2&#34;)
        set outputToRelType  = metis.findType(&#34;http://xml.chalmers.se/class/rule_expression.kmd#output_to&#34;)
        set ruleType         = metis.findType(&#34;http://xml.chalmers.se/class/rule.kmd#rule&#34;)
        set inputToType      = metis.findType(&#34;http://xml.chalmers.se/class/rule_condition.kmd#input_to&#34;)
        set inputTo2Type     = metis.findType(&#34;http://xml.chalmers.se/class/rule_condition.kmd#input_to_2&#34;)
        set inputTo3Type     = metis.findType(&#34;http://xml.chalmers.se/class/rule_condition.kmd#input_to_3&#34;)
        set outputToType     = metis.findType(&#34;http://xml.chalmers.se/class/rule_action.kmd#has_output&#34;)
        set hasActionType    = metis.findType(&#34;http://xml.chalmers.se/class/rule.kmd#has_action&#34;)
        set hasConditionType = metis.findType(&#34;http://xml.chalmers.se/class/rule.kmd#has_condition&#34;)
        set hasExpressionType = metis.findType(&#34;http://xml.chalmers.se/class/rule.kmd#has_expression&#34;)
        set hasInputType     = metis.findType(&#34;http://xml.chalmers.se/class/rule.kmd#has_input&#34;)
        set hasOutputType    = metis.findType(&#34;http://xml.chalmers.se/class/rule.kmd#has_output&#34;)
        set hasRuleType      = metis.findType(&#34;http://xml.chalmers.se/class/rule.kmd#has_rule&#34;)
        set ifThenType       = metis.findType(&#34;http://xml.chalmers.se/class/rule.kmd#if_then&#34;)
        set isSubjectOfType  = metis.findType(&#34;http://xml.chalmers.se/class/rule.kmd#subject_of_rule&#34;)
        set anyObjectType    = metis.findType(&#34;metis:stdtypes#oid1&#34;)
        set hasCStype  = metis.findType(&#34;http://xml.chalmers.se/class/is_composed_using.kmd#is_composed_using&#34;)
        set hasCEtype  = metis.findType(&#34;http://xml.chalmers.se/class/has_composition_element.kmd#has_composition_element&#34;)
        set hasCRtype  = metis.findType(&#34;http://xml.chalmers.se/class/has_composition_request.kmd#has_composition_request&#34;)
        set usesCCtype = metis.findType(&#34;http://xml.chalmers.se/class/uses_configurable_component.kmd#uses_configurable_component&#34;)

        set partType         = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cppd/languages/productelement.kmd#ObjType_CPPD:ProductElement_UUID&#34;)
        set memberType       = metis.findType(&#34;http://xml.activeknowledgemodeling.com/eka/languages/eka_relships.kmd#RelType_EKA:Member_UUID&#34;)
        set modelObjectType  = metis.findType(&#34;http://xml.activeknowledgemodeling.com/eka/languages/eka_space.kmd#ObjType_EKA:Space_UUID&#34;)
        set propertyType     = metis.findType(&#34;http://xml.activeknowledgemodeling.com/eka/languages/eka_property.kmd#ObjType_EKA:Property_UUID&#34;)
        set hasPropertyType  = metis.findType(&#34;http://xml.activeknowledgemodeling.com/eka/languages/eka_relships.kmd#RelType_EKA:HasProperty_UUID&#34;)
        set valueType        = metis.findType(&#34;http://xml.activeknowledgemodeling.com/eka/languages/eka_value.kmd#ObjType_EKA:StringValue_UUID&#34;)
        set hasValueType     = metis.findType(&#34;http://xml.activeknowledgemodeling.com/eka/languages/eka_relships.kmd#RelType_EKA:HasValue_UUID&#34;)
        set hasDefinitionType = metis.findType(&#34;http://xml.activeknowledgemodeling.com/eka/languages/eka_relships.kmd#RelType_EKA:HasDefinition_UUID&#34;)

        &#39; Methods
        set ruleMethod        = metis.findMethod(&#34;http://xml.chalmers.se/methods/rule_methods.kmd#evaluateRule&#34;)
        set expressionMethod  = metis.findMethod(&#34;http://xml.chalmers.se/methods/rule_methods.kmd#evaluateExpression&#34;)

        &#39; Model
        &#39;set inst = metis.findInstance(&#34;http://xml.chalmers.se/metamodels/cvw_cc_actions_1.kmv#_002ask601qg2tl2ra0ce&#34;)
        set configModel  = currentInstance.ownerModel

        &#39; Variables
        set ccRuleEngine = new CC_RuleEngine

        ExprEvaluatedToProperty = &#34;expressionEvaluatedTo&#34;
        RuleEvaluatedToProperty = &#34;ruleEvaluatedTo&#34;
        ruleKind = &#34;Logical rule&#34;
        ObjectAspectRatio = 1.0
        debug = false

    End Sub

&#39;-----------------------------------------------------------
    Public Sub Class_Terminate()
        set ccRuleEngine = Nothing
    End Sub

End Class
</string>
  </valueset>
 </object>

 <object id="_002asls00rc18ond6ves">
  <valueset size="10" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="http://xml.activeknowledgemodeling.com/cvw/languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Function getParameterTitle</string>
   <string name="description"></string>
   <integer name="dbms-admin.commitFlag">0</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20070606 144517129</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="comments"></string>
   <string name="script">function getParameterTitle
    dim currentModel
    dim currentInstance
    dim parameterType
    dim rel, relships

    &#39; Initialization
    getParameterTitle       = &#34;&#34;
    set currentModel        = metis.currentModel
    set currentInstance     = currentModel.currentInstance
    set parameterType       = metis.findType(&#34;http://xml.chalmers.se/class/cc_parameter.kmd#CC_parameter&#34;)

    &#39; Main code
    if isEnabled(currentInstance) then
        set relships = currentInstance.neighbourRelationships
        if isValid(relships) then
            for each rel in relships
                if rel.target.uri = currentInstance.uri then
                    if rel.origin.type.inherits(parameterType) then
                        getParameterTitle = rel.origin.title
                    end if
                end if
            next
        end if
    end if
end function

function getParameterParentTitle
    dim currentModel
    dim currentInstance
    dim parameterType
    dim rel, rel2, relships
    dim parentObj, paramObj

    &#39; Initialization
    getParameterParentTitle = &#34;&#34;
    set currentModel        = metis.currentModel
    set currentInstance     = currentModel.currentInstance
    set parameterType       = metis.findType(&#34;http://xml.chalmers.se/class/cc_parameter.kmd#CC_parameter&#34;)

    &#39; Main code
    if isEnabled(currentInstance) then
        if currentInstance.type.inherits(parameterType) then
            getParameterParentTitle = getParameterParentName(currentInstance)
        else
            set relships = currentInstance.neighbourRelationships
            if isValid(relships) then
                for each rel in relships
                    if rel.target.uri = currentInstance.uri then
                        if rel.origin.type.inherits(parameterType) then
                            set paramObj = rel.origin
                            getParameterParentTitle = getParameterParentName(paramObj)
                        end if
                    end if
                next
            end if
        end if
    end if
end function

function getParameterParentName(paramObj)
    dim rel2, rels
    dim hasCpType, hasDpType, hasFpType, hasPpType, hasVpType

    getParameterParentName = &#34;&#34;
    set hasCpType           = metis.findType(&#34;http://xml.chalmers.se/class/has_constraint_parameter.kmd#has_constraint_parameter&#34;)
    set hasDpType           = metis.findType(&#34;http://xml.chalmers.se/class/has_design_parameter.kmd#has_design_parameter&#34;)
    set hasFpType           = metis.findType(&#34;http://xml.chalmers.se/class/has_functional_requirement_parameter.kmd#has_functional_requirement_parameter&#34;)
    set hasPpType           = metis.findType(&#34;http://xml.chalmers.se/class/has_performance_parameter.kmd#has_performance_parameter&#34;)
    set hasVpType           = metis.findType(&#34;http://xml.chalmers.se/class/has_variant_parameter.kmd#has_variant_parameter&#34;)

    set rels = paramObj.neighbourRelationships
    for each rel2 in rels
        if rel2.target.uri = paramObj.uri then
            select case rel2.type.uri
            case hasCpType.uri
                set parentObj = rel2.origin
            case hasDpType.uri
                set parentObj = rel2.origin
            case hasFpType.uri
                set parentObj = rel2.origin
            case hasPpType.uri
                set parentObj = rel2.origin
            case hasVpType.uri
                set parentObj = rel2.origin
            end select
            if isEnabled(parentObj) then
                getParameterParentName = parentObj.title
            end if
        end if
    next
end function
</string>
  </valueset>
 </object>

 <object id="_002asmt01e9ug3vdtq5q">
  <valueset size="10" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="http://xml.activeknowledgemodeling.com/cvw/languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Class CC_RuleEngine</string>
   <string name="description"></string>
   <integer name="dbms-admin.commitFlag">0</integer>
   <date-time name="dbms-admin.commitTime">00000000 000000000</date-time>
   <date-time name="dbms-admin.system-modifiedTime">20070615 133058932</date-time>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="comments"></string>
   <string name="script">option explicit

&#39;-----------------------------------------------------------
&#39;-----------------------------------------------------------
Class CC_RuleEngine

    &#39; Variant parameters
    Public Title                        &#39; String

    &#39; Context variables (public)
    Public currentModel
    Public currentModelView
    Public currentInstance
    Public currentInstanceView

    &#39; Types
    Private ruleType
    Private expressionType
    Private anyObjectType
    Private ccType
    Private inputToRelType
    Private inputTo2RelType
    Private outputToRelType
    Private isSubjectOfType
    Private useCCtype
    Private cpType
    Private dpType
    Private fpType
    Private ppType
    Private vpType
    Private cpValueType
    Private dpValueType
    Private fpValueType
    Private ppValueType
    Private vpValueType
    Private hasCpType
    Private hasDpType
    Private hasFpType
    Private hasPpType
    Private hasVpType
    Private hasCpValueType
    Private hasDpValueType
    Private hasFpValueType
    Private hasPpValueType
    Private hasVpValueType
    Private definitionType
    Private valueType
    Private hasDefinitionType
    Private hasValueType
    Private hasExpressionType

    Private ruleMethod
    Private RuleEngineProperty
    Private RuleInitCodeProperty
    Private RuleCodeProperty
    Private RulePostCodeProperty
    Private RuleEvaluatedToProperty
    Private ExprEvaluatedToProperty
    Private CcValueProperty
    Private EkaValueProperty
    Private contextInstance


&#39;-----------------------------------------------------------
    Public Sub includeInConfiguration
        dim myModel, inst
        dim intVal

        set myModel = metis.currentModel
        set inst = myModel.currentInstance

        &#39;MsgBox &#34;includeInConfiguration =&#62; &#34; &#38; inst.title
        set intVal = metis.newValue
        call intVal.setInteger(1)
        call inst.setNamedValue(RuleEvaluatedToProperty, intVal)
    End Sub

&#39;-----------------------------------------------------------
    Public Sub excludeFromConfiguration
        dim myModel, inst
        dim intVal

        set myModel = metis.currentModel
        set inst = myModel.currentInstance

        &#39;MsgBox &#34;excludeFromConfiguration =&#62; &#34; &#38; inst.title
        set intVal = metis.newValue
        call intVal.setInteger(0)
        call inst.setNamedValue(RuleEvaluatedToProperty, intVal)
    End Sub

&#39;-----------------------------------------------------------
    Public Function getInstanceOf(instUri)
        dim inst

        set getInstanceOf = Nothing
        if Len(instUri) &#62; 0 then
            set inst = metis.findInstance(instUri)
            if isEnabled(inst) then
                set getInstanceOf = inst
            end if
        end if
    End Function

&#39;-----------------------------------------------------------
    Public Function getValueOf(instUri)
        dim inst

        getValueOf = &#34;&#34;
        if Len(instUri) &#62; 0 then
            set inst = metis.findInstance(instUri)
            if isEnabled(inst) then
                on error resume next
                getValueOf = inst.getNamedStringValue(CcValueProperty)
            end if
        end if
    End Function

&#39;-----------------------------------------------------------
    Public Function getParameterValue(paramUri)
        dim myModel
        dim inst
        dim ccObj, paramObj
        dim value, values
        dim definition, definitions

        &#39; Initialization
        getParameterValue = &#34;&#34;
        set myModel     = metis.currentModel
        set inst        = myModel.currentInstance
        set paramObj    = metis.findInstance(paramUri)

        &#39;MsgBox &#34;getParameterValue  =&#62; &#34; &#38; inst.title
        &#39; Main code
        set ccObj = getCCobject(paramObj)
        if isEnabled(ccObj) then
            set values = ccObj.getNeighbourObjects(0, hasValueType, valueType)
            for each value in values
                set definitions = value.getNeighbourObjects(0, hasDefinitionType, anyObjectType)
                for each definition in definitions
                    if definition.uri = paramObj.uri then
                        getParameterValue = value.getNamedStringValue(EkaValueProperty)
                    end if
                next
            next
        end if
    End Function

&#39;-----------------------------------------------------------
    Public Sub setParameterValue(paramUri, valueUri)
        dim myModel, model
        dim inst
        dim ccObj, paramObj, valueObj
        dim value, values
        dim intVal
        dim definition, definitions
        dim paramValue, newValue
        dim rel
        dim done

        &#39; Initialization
        set myModel     = metis.currentModel
        set inst        = myModel.currentInstance
        set paramObj    = metis.findInstance(paramUri)
        set valueObj    = metis.findInstance(valueUri)
        newValue        = valueObj.getNamedStringValue(CcValueProperty)

        &#39; Main code
        set ccObj = getCCobject(paramObj)
        if isEnabled(ccObj) then
            &#39; MsgBox &#34;setParameterValue  =&#62; &#34; &#38; inst.title  &#38; vbCrLf &#38; &#34;ccObj = &#34; &#38; ccObj.title
            done = false
            set values = ccObj.getNeighbourObjects(0, hasValueType, valueType)
            for each value in values
                set definitions = value.getNeighbourObjects(0, hasDefinitionType, anyObjectType)
                for each definition in definitions
                    if definition.uri = paramObj.uri then
                        &#39; Existing value
                        paramValue = value.getNamedStringValue(EkaValueProperty)
                        if paramValue = newValue then
                            done = true
                            exit for
                        else
                            call value.setNamedStringValue(EkaValueProperty, newValue)
                            done = true
                            exit for
                        end if
                    end if
                next
                if done then exit for
            next
            if not done then
                set value = ccObj.newPart(valueType)
                if isEnabled(value) then
                    call value.setNamedStringValue(EkaValueProperty, newValue)
                    set model = ccObj.ownerModel
                    set rel = model.newRelationship(hasValueType, ccObj, value)
                    set rel = model.newRelationship(hasDefinitionType, value, paramObj)
                end if
            end if
        end if
    End Sub

&#39;-----------------------------------------------------------
    Public Function getInputParameter(strName)
        dim inst
        dim myModel
        dim expression, expressions
        dim ccObj, paramObj, paramObjects
        dim paramName
        dim rel, rels
        dim range, ranges
        dim val, sval, value, values
        dim definition, definitions
        dim rmin, rmax, s, text

        &#39; Initialization
        getInputParameter = 0
        set myModel = metis.currentModel
        set inst    = myModel.currentInstance
        if inst.type.uri = ruleType.uri then
            set expressions = inst.getNeighbourObjects(0, hasExpressionType, expressionType)
            if expressions.count &#62; 0 then
                set expression = expressions(1)
            end if
        else
            set expression = inst
        end if
        &#39; Main code
        if isEnabled(expression) then
            set rels = expression.getNeighbourRelationships(1, inputToRelType)
            for each rel in rels
                &#39; Check param name
                paramName = rel.getNamedStringValue(&#34;paramId&#34;)
                if paramName = strName then
                    &#39; Parameter object
                    set paramObj = rel.origin
                    set ccObj = getCCobject(paramObj)
                    if isEnabled(ccObj) then
                        set values = ccObj.getNeighbourObjects(0, hasValueType, valueType)
                        for each value in values
                            set definitions = value.getNeighbourObjects(0, hasDefinitionType, anyObjectType)
                            for each definition in definitions
                                if definition.uri = paramObj.uri then
                                    &#39; Value found, get the value
                                    s = value.getNamedStringValue(EkaValueProperty)
                                    if Len(s) &#62; 0 then
                                        if isNumeric(s) then
                                            val = CDbl(s)
                                            getInputParameter = val
                                        else
                                            getInputParameter = s
                                        end if
                                        exit function
                                    end if
                                    exit for
                                end if
                            next
                        next
                    else
                        &#39; This is a user input parameter
                        &#39;s = paramObj.getNamedStringValue(EkaValueProperty)
                        &#39;if Len(s) &#62; 0 then
                        &#39;    if isNumeric(s) then
                        &#39;        val = CDbl(s)
                        &#39;        getInputParameter = val
                        &#39;    else
                        &#39;        getInputParameter = s
                        &#39;    end if
                        &#39;    exit function
                        &#39;end if
                        &#39; No value given, ask for it
                        text = &#34;The parameter &#34; &#38; strName &#38; &#34; has no value!&#34; &#38; vbCrLf
                        &#39; But first check if a range has been defined
                        set ranges = paramObj.parts
                        if ranges.count &#62; 0 then
                            text = text &#38; &#34;The parameter value must be within the range (&#34;
                            for each range in ranges
                                rmin = range.getNamedStringValue(&#34;min&#34;)
                                text = text &#38; rmin &#38; &#34;, &#34;
                                rmax = range.getNamedStringValue(&#34;max&#34;)
                                text = text &#38; rmax
                            next
                            text = text &#38; &#34;)&#34; &#38; vbCrLf
                        end if
                        text = text &#38; vbCrLf &#38; &#34;Please enter the value:&#34;
                        sval = InputBox(text)
                        &#39;sval = &#34;&#34;
                        if Len(sval) &#62; 0 then
                            if isNumeric(sval) then
                                val = CDbl(sval)
                                if not isEmpty(rmin) then
                                    if rmin &#60;= val and val &#60;= rmax then
                                        call setParamValue(paramObj, sval)
                                    end if
                                else
                                    call setParamValue(paramObj, sval)
                                end if
                                getInputParameter = val
                            else
                                getInputParameter = sval
                            end if
                        end if
                    end if
                end if
            next
        end if
    End Function

&#39;-----------------------------------------------------------
    Public Function getInputParameterValue(strName)
        dim inst
        dim myModel
        dim expression, expressions
        dim ccObj, paramObj, paramObjects
        dim paramName, paramUri
        dim rel, rels, rels2
        dim range, ranges
        dim val, value, values
        dim definition, definitions
        dim rmin, rmax, s, text

        &#39; Initialization
        getInputParameterValue = 0
        set myModel = metis.currentModel
        set inst    = myModel.currentInstance
        if inst.type.uri = ruleType.uri then
            set expressions = inst.getNeighbourObjects(0, hasExpressionType, expressionType)
            if expressions.count &#62; 0 then
                set expression = expressions(1)
            end if
        else
            set expression = inst
        end if
        &#39; Main code
        if isEnabled(expression) then
            set rels  = expression.getNeighbourRelationships(1, inputTo2RelType)
            for each rel in rels
                &#39; Check param name
                paramName = rel.getNamedStringValue(&#34;paramId&#34;)
                if paramName = strName then
                    &#39; Parameter object
                    paramUri = rel.origin.uri
                    s = getValueOf(paramUri)
                    if Len(s) &#62; 0 then
                        if isNumeric(s) then
                            getInputParameterValue = CDbl(s)
                        else
                            getInputParameterValue = s
                        end if
                    end if
                    exit function
                end if
            next
        end if
    End Function

&#39;-----------------------------------------------------------
    Public Sub setOutputParameter(strName, newValue)
        dim myModel, model
        dim inst
        dim expression, expressions
        dim ccObj, paramObj, valueObj
        dim value, values
        dim definition, definitions
        dim paramValue
        dim paramName
        dim rel, rels
        dim done

        &#39; Initialization
        set myModel     = metis.currentModel
        set inst    = myModel.currentInstance
        if inst.type.uri = ruleType.uri then
            set expressions = inst.getNeighbourObjects(0, hasExpressionType, expressionType)
            if expressions.count &#62; 0 then
                set expression = expressions(1)
            end if
        end if
        &#39; Main code
        if isEnabled(expression) then
            set rels = expression.getNeighbourRelationships(0, outputToRelType)
            for each rel in rels
                &#39; Check param name
                paramName = rel.getNamedStringValue(&#34;paramId&#34;)
                if paramName = strName then
                    &#39; Get value of parameter
                    set paramObj = rel.target
                    call setParamValue(paramObj, newValue)
                end if
            next
        end if
    End Sub

&#39;-----------------------------------------------------------
    Public Sub setCondition(cond)
        dim myModel, inst
        dim intVal, ival

        set myModel = metis.currentModel
        set inst = myModel.currentInstance

        &#39;MsgBox &#34;includeInConfiguration =&#62; &#34; &#38; inst.title
        if cond then
            ival = 1
        else
            ival = 0
        end if
        set intVal = metis.newValue
        call intVal.setInteger(ival)
        call inst.setNamedValue(ExprEvaluatedToProperty, intVal)
    End Sub

&#39;-----------------------------------------------------------
    Private Sub setParamValue(paramObj, newValue)
        dim model
        dim ccObj, valueObj
        dim value, values
        dim definition, definitions
        dim paramValue
        dim paramName
        dim rel
        dim done

        &#39; Main code
        if isEnabled(paramObj) then
            set ccObj = getCCobject(paramObj)
            if isEnabled(ccObj) then
                done = false
                set values = ccObj.getNeighbourObjects(0, hasValueType, valueType)
                for each value in values
                    set definitions = value.getNeighbourObjects(0, hasDefinitionType, anyObjectType)
                    for each definition in definitions
                        if definition.uri = paramObj.uri then
                            &#39; There is an existing value - replace it with the new value
                            paramValue = value.getNamedStringValue(EkaValueProperty)
                            if paramValue = newValue then
                                done = true
                                exit for
                            else
                                call value.setNamedStringValue(EkaValueProperty, newValue)
                                done = true
                                exit for
                            end if
                        end if
                    next
                    if done then exit for
                next
                if not done then
                    set value = ccObj.newPart(valueType)
                    if isEnabled(value) then
                        call value.setNamedStringValue(EkaValueProperty, newValue)
                        set model = ccObj.ownerModel
                        set rel = model.newRelationship(hasValueType, ccObj, value)
                        set rel = model.newRelationship(hasDefinitionType, value, paramObj)
                    end if
                end if
            else
                call paramObj.setNamedStringValue(EkaValueProperty, newValue)
            end if
        end if
    End Sub

&#39;-----------------------------------------------------------
    Private Function getCCobject(inst)
        dim model
        dim part, parts
        dim typeUri
        dim paramObj
        dim hasValueType, hasParamType
        dim rel, rels, paramRels
        dim ccRule1

        set getCCobject = Nothing
        if inst.isRelationship then
            set inst = inst.origin
        end if
        if inst.type.uri = ccType.uri then
            set getCCobject = inst
        elseif inst.type.uri = ruleType.uri then
            set rels = inst.getNeighbourRelationships(1, isSubjectOfType)
            if rels.count &#62; 0 then
                set getCCobject = rels(1).origin
            else
                &#39; Find the relship that is the subject of the rule
                set ccRule1 = new CC_Rule
                set rel = ccRule.getSubjectOf(inst)
                set ccRule1 = Nothing
                if isEnabled(rel) then
                    set getCCobject = rel.origin
                end if
            end if
        else
            typeUri = inst.type.uri
            if typeUri = vpType.uri or typeUri = vpValueType.uri then
                set hasValueType = hasVpValueType
                set hasParamType = hasVpType
            elseif typeUri = fpType.uri or typeUri = fpValueType.uri then
                set hasValueType = hasFpValueType
                set hasParamType = hasFpType
            elseif typeUri = dpType.uri or typeUri = dpValueType.uri then
                set hasValueType = hasDpValueType
                set hasParamType = hasDpType
            elseif typeUri = cpType.uri or typeUri = cpValueType.uri then
                set hasValueType = hasCpValueType
                set hasParamType = hasCpType
            elseif typeUri = ppType.uri or typeUri = ppValueType.uri then
                set hasValueType = hasPpValueType
                set hasParamType = hasPpType
            end if
            if isValid(hasValueType) then
                set paramRels = inst.getNeighbourRelationships(1, hasValueType)
                if paramRels.count &#62; 0 then
                    set paramObj = paramRels(1).origin
                    set rels = paramObj.getNeighbourRelationships(1, hasParamType)
                    if rels.count &#62; 0 then
                        set getCCobject = rels(1).origin
                    end if
                else
                    set rels = inst.getNeighbourRelationships(1, hasParamType)
                    if rels.count &#62; 0 then
                        set getCCobject = rels(1).origin
                    end if
                end if
            end if
            &#39;set model = inst.ownerModel
            &#39;set parts = model.parts
            &#39;for each part in parts
            &#39;    if part.type.uri = ccType.uri then
            &#39;        set getCCobject = part
            &#39;        exit for
            &#39;    end if
            &#39;next
        end if
    End Function

&#39;-----------------------------------------------------------
    Public Sub executeRules(inst, mode)
        dim ccRule1
        dim rule, rules
        dim includeInConfig
        dim included
        dim test

        &#39; Initialize
        included = true
        test = 1
        &#39; Execute rules
        set includeInConfig = metis.newValue
        set ccRule1 = new CC_Rule
        set rules = ccRule1.getRules(inst)
        if rules.count &#62; 0 then
            call includeInConfig.setInteger(0)
        end if
        for each rule in rules
            test = executeRule(inst, rule, mode)
            if test = 0 then
                included = false
            end if
        next
        if included then
            call includeInConfig.setInteger(1)
        end if
        call inst.setNamedValue(RuleEvaluatedToProperty, includeInConfig)
        set ccRule1 = Nothing
    End Sub

&#39;-----------------------------------------------------------
    Public Function executeRule(context, ruleObject, mode)
        on error resume next

        dim model
        dim intVal
        dim prop
        dim rule, ruleEngine, ruleKind
        dim includeInConfig
        dim evaluatedTo
        dim text, text1, text2, text3
        dim expression, expressions
        dim isExpression

        &#39; Initialization
        executeRule = true
        set model = ruleObject.ownerModel
        ruleKind = ruleObject.getNamedStringValue(&#34;ruleKind&#34;)
        if mode = 1 then &#39; Configure
            if ruleKind = &#34;Service&#34; then
                exit function
            end if
        elseif mode = 2 then &#39; Execute service
            if not ruleKind = &#34;Service&#34; then
                exit function
            end if
        end if
        isExpression = false
        if ruleKind = &#34;Expression&#34; or ruleKind = &#34;Service&#34; then
            set expressions = ruleObject.getNeighbourObjects(0, hasExpressionType, expressionType)
            if expressions.count &#62; 0 then
                set expression = expressions(1)
                isExpression = true
            end if
        end if
        &#39; Rule execution
        set prop = ruleObject.type.getProperty(RuleEngineProperty)
        if isEnabled(prop) then
            ruleEngine = ruleObject.getNamedValue(RuleEngineProperty).getInteger
            select case ruleEngine
            case 0
                exit function
            case 1
                set includeInConfig = metis.newValue
                if isExpression then
                    call includeInConfig.setInteger(1)
                    call ruleObject.setNamedValue(RuleEvaluatedToProperty, includeInConfig)
                    text = &#34;set contextInst = ccRuleEngine.getInstanceOf(&#34; &#38; Chr(34) &#38; context.uri &#38; Chr(34) &#38; &#34;)&#34; &#38; vbCrLf
                    text1 = expression.getNamedValue(RuleInitCodeProperty).getString
                    text2 = expression.getNamedValue(RuleCodeProperty).getString
                    text3 = expression.getNamedValue(RulePostCodeProperty).getString
                    rule = text1 &#38; text &#38; text2 &#38; text3
                    if Len(rule) &#62; 0 then
                        call ruleObject.setNamedStringValue(RuleCodeProperty, rule)
                        call model.runMethodOnInst(ruleMethod, ruleObject)
                    end if
                else
                    rule = ruleObject.getNamedValue(RuleCodeProperty).getString
                    if Len(rule) &#62; 0 then
                        call includeInConfig.setInteger(0)
                        call ruleObject.setNamedValue(RuleEvaluatedToProperty, includeInConfig)
                        call model.runMethodOnInst(ruleMethod, ruleObject)
                        executeRule = ruleObject.getNamedValue(RuleEvaluatedToProperty).getInteger
                    else
                        call includeInConfig.setInteger(1)
                        call ruleObject.setNamedValue(RuleEvaluatedToProperty, includeInConfig)
                    end if
                end if
            end select
        end if
    End Function

&#39;-----------------------------------------------------------
    Private Sub Class_Initialize()

        set currentModel        = metis.currentModel
        set currentModelView    = currentModel.currentModelView
        set currentInstance     = currentModel.currentInstance
        set currentInstanceView = currentModelView.currentInstanceView

        &#39; Types
        set ccType            = metis.findType(&#34;http://xml.chalmers.se/class/configurable_component.kmd#configurable_component&#34;)
        set ruleType          = metis.findType(&#34;http://xml.chalmers.se/class/rule.kmd#rule&#34;)
        set expressionType    = metis.findType(&#34;http://xml.chalmers.se/class/rule_expression.kmd#expression&#34;)
        set inputToRelType    = metis.findType(&#34;http://xml.chalmers.se/class/rule_expression.kmd#input_to&#34;)
        set inputTo2RelType   = metis.findType(&#34;http://xml.chalmers.se/class/rule_expression.kmd#input_to_2&#34;)
        set outputToRelType   = metis.findType(&#34;http://xml.chalmers.se/class/rule_expression.kmd#output_to&#34;)
        set useCCtype         = metis.findType(&#34;http://xml.chalmers.se/class/uses_configurable_component.kmd#uses_configurable_component&#34;)
        set isSubjectOfType   = metis.findType(&#34;http://xml.chalmers.se/class/rule.kmd#subject_of_rule&#34;)
        set cpType            = metis.findType(&#34;http://xml.chalmers.se/class/constraint_parameter.kmd#constraint_parameter&#34;)
        set dpType            = metis.findType(&#34;http://xml.chalmers.se/class/design_parameter.kmd#design_parameter&#34;)
        set fpType            = metis.findType(&#34;http://xml.chalmers.se/class/functional_requirement_parameter.kmd#functional_requirement_parameter&#34;)
        set ppType            = metis.findType(&#34;http://xml.chalmers.se/class/performance_parameter.kmd#performance_parameter&#34;)
        set vpType            = metis.findType(&#34;http://xml.chalmers.se/class/variant_parameter.kmd#variant_parameter&#34;)
        set cpValueType       = metis.findType(&#34;http://xml.chalmers.se/class/constraint_parameter_value.kmd#constraint_parameter_value&#34;)
        set dpValueType       = metis.findType(&#34;http://xml.chalmers.se/class/design_parameter_value.kmd#design_parameter_value&#34;)
        set fpValueType       = metis.findType(&#34;http://xml.chalmers.se/class/functional_requirement_parameter_value.kmd#functional_requirement_parameter_value&#34;)
        set ppValueType       = metis.findType(&#34;http://xml.chalmers.se/class/performance_parameter_value.kmd#performance_parameter_value&#34;)
        set vpValueType       = metis.findType(&#34;http://xml.chalmers.se/class/variant_parameter_value.kmd#variant_parameter_value&#34;)
        set hasCpType         = metis.findType(&#34;http://xml.chalmers.se/class/has_constraint_parameter.kmd#has_constraint_parameter&#34;)
        set hasDpType         = metis.findType(&#34;http://xml.chalmers.se/class/has_design_parameter.kmd#has_design_parameter&#34;)
        set hasFpType         = metis.findType(&#34;http://xml.chalmers.se/class/has_functional_requirement_parameter.kmd#has_functional_requirement_parameter&#34;)
        set hasPpType         = metis.findType(&#34;http://xml.chalmers.se/class/has_performance_parameter.kmd#has_performance_parameter&#34;)
        set hasVpType         = metis.findType(&#34;http://xml.chalmers.se/class/has_variant_parameter.kmd#has_variant_parameter&#34;)
        set hasCpValueType    = metis.findType(&#34;http://xml.chalmers.se/class/has_constraint_parameter_value.kmd#has_constraint_parameter_value&#34;)
        set hasDpValueType    = metis.findType(&#34;http://xml.chalmers.se/class/has_design_parameter_value.kmd#has_design_parameter_value&#34;)
        set hasFpValueType    = metis.findType(&#34;http://xml.chalmers.se/class/has_functional_requirement_parameter_value.kmd#has_functional_requirement_parameter_value&#34;)
        set hasPpValueType    = metis.findType(&#34;http://xml.chalmers.se/class/has_performance_parameter_value.kmd#has_performance_parameter_value&#34;)
        set hasVpValueType    = metis.findType(&#34;http://xml.chalmers.se/class/has_variant_parameter_value.kmd#has_variant_parameter_value&#34;)
        set definitionType    = metis.findType(&#34;http://xml.activeknowledgemodeling.com/eka/languages/eka_relships.kmd#RelType_EKA:HasDefinition_UUID&#34;)
        set valueType         = metis.findType(&#34;http://xml.activeknowledgemodeling.com/eka/languages/eka_value.kmd#ObjType_EKA:StringValue_UUID&#34;)
        set hasDefinitionType = metis.findType(&#34;http://xml.activeknowledgemodeling.com/eka/languages/eka_relships.kmd#RelType_EKA:HasDefinition_UUID&#34;)
        set hasValueType      = metis.findType(&#34;http://xml.activeknowledgemodeling.com/eka/languages/eka_relships.kmd#RelType_EKA:HasValue_UUID&#34;)
        set hasExpressionType = metis.findType(&#34;http://xml.chalmers.se/class/rule.kmd#has_expression&#34;)
        set anyObjectType     = metis.findType(&#34;metis:stdtypes#oid1&#34;)

        &#39; Methods
        set ruleMethod   = metis.findMethod(&#34;http://xml.chalmers.se/methods/rule_methods.kmd#evaluateRule&#34;)

        &#39; Model

        &#39; Variables
        RuleEngineProperty      = &#34;ruleEngine&#34;
        RuleInitCodeProperty    = &#34;ruleInitCode&#34;
        RuleCodeProperty        = &#34;ruleCode&#34;
        RulePostCodeProperty    = &#34;rulePostCode&#34;
        RuleEvaluatedToProperty = &#34;ruleEvaluatedTo&#34;
        ExprEvaluatedToProperty = &#34;expressionEvaluatedTo&#34;
        CcValueProperty         = &#34;name&#34;
        EkaValueProperty        = &#34;value&#34;
    End Sub

&#39;-----------------------------------------------------------
    Public Sub Class_Terminate()
    End Sub

End Class
</string>
  </valueset>
 </object>

 <objectview id="_002aslb01so0qjtit8k4" xlink:role="object" xlink:title="Classes and Utilities" xlink:href="#_002aslb01so0qj8pu96q" state="open" behavior="nested" text-scale="1.68713" decomp-scale="0.125" left="-473.636" top="-349.215" width="715.767" height="512">
  <symbol-override state="open" xlink:role="symbol" xlink:title="Open Nested Object" xlink:href="metis:stdsyms#oid67" xlink:actuate="user">
  </symbol-override>
  <symbol-override state="closed" xlink:role="symbol" xlink:title="Closed Nested Object" xlink:href="metis:stdsyms#oid68" xlink:actuate="user">
  </symbol-override>
  <child-link xlink:role="objectview" xlink:title="Class CC_Rule" xlink:href="#_002aslb01spoqhquikls"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002aslb01spoqhditp0k"/>
  <child-link xlink:role="objectview" xlink:title="Function getParameterTitle" xlink:href="#_002asls00rc18opoa824"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002asls00rc18ontqgso"/>
  <child-link xlink:role="objectview" xlink:title="Class CC_RuleEngine" xlink:href="#_002asmt01e9ug3mi2qr2"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002asmt01e9ug3jqdh2t"/>
 </objectview>

 <relationshipview id="_002aslb01so0rr47dbi6" decomposition-flag="true">
  <origin-link xlink:role="modelview" xlink:title="Main" xlink:href="#oid1"/>
  <target-link xlink:role="objectview" xlink:title="Classes and Utilities" xlink:href="#_002aslb01so0qjtit8k4"/>
 </relationshipview>

 <relationshipview id="_002aslb01spoqhditp0k" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="Classes and Utilities" xlink:href="#_002aslb01so0qjtit8k4"/>
  <target-link xlink:role="objectview" xlink:title="Class CC_Rule" xlink:href="#_002aslb01spoqhquikls"/>
 </relationshipview>

 <objectview id="_002aslb01spoqhquikls" xlink:role="object" xlink:title="Class CC_Rule" xlink:href="#_002aslb01spoqh67dmsg" state="open" behavior="nested" text-scale="0.234795" decomp-scale="0.125" left="2253.09" top="1769.72" width="1280" height="384">
 </objectview>

 <relationshipview id="_002asls00rc18ontqgso" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="Classes and Utilities" xlink:href="#_002aslb01so0qjtit8k4"/>
  <target-link xlink:role="objectview" xlink:title="Function getParameterTitle" xlink:href="#_002asls00rc18opoa824"/>
 </relationshipview>

 <objectview id="_002asls00rc18opoa824" xlink:role="object" xlink:title="Function getParameterTitle" xlink:href="#_002asls00rc18ond6ves" state="open" behavior="nested" text-scale="0.234795" decomp-scale="0.125" left="2253.09" top="2793.72" width="1280" height="384">
 </objectview>

 <relationshipview id="_002asmt01e9ug3jqdh2t" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="Classes and Utilities" xlink:href="#_002aslb01so0qjtit8k4"/>
  <target-link xlink:role="objectview" xlink:title="Class CC_RuleEngine" xlink:href="#_002asmt01e9ug3mi2qr2"/>
 </relationshipview>

 <objectview id="_002asmt01e9ug3mi2qr2" xlink:role="object" xlink:title="Class CC_RuleEngine" xlink:href="#_002asmt01e9ug3vdtq5q" state="open" behavior="nested" text-scale="0.234795" decomp-scale="0.125" left="2253.09" top="2281.72" width="1280" height="384">
 </objectview>

 <modelview id="oid1" name="Main" title="Main" primary-flag="true" standalone-flag="true" zoom-level="1.68713" x="-122.802" y="-92.6454" seq="1" xlink:role="model" xlink:title="Standard Blank" xlink:href="#_002aslb01sme0q6niekc" behavior="nested" text-scale="1" decomp-scale="0" visible-in="browser">
  <child-link xlink:role="objectview" xlink:title="Classes and Utilities" xlink:href="#_002aslb01so0qjtit8k4"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002aslb01so0rr47dbi6"/>
 </modelview>


</metis>
