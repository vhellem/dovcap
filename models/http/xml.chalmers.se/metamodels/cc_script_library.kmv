<?xml version="1.0"?>
<?metis version="9.5"?>
<?metisxml version="1.2"?>
<!DOCTYPE metis PUBLIC "-//METIS/METIS XML 1.2//EN" "http://xml.metis.no/metis12.dtd">
<metis
 xmlns="http://www.metis.no/metis"
 xmlns:xlink="http://www.w3.org/1999/xlink"
 types="1"
 instances="23"
 instanceviews="45"
 nextoid="1">

 <model id="_002aslb01sme0q6niekc" name="Standard Blank" title="Standard Blank" desc="Blank Metis Modeling model" standalone-flag="true">
  <metamodel-links size="2">
   <metamodel-link xlink:role="metamodel" xlink:title="Modeling" xlink:href="http://xml.metis.no/xml/templates/blank/blank_metamodel.kmd#oid2" xlink:actuate="user"/>
   <metamodel-link xlink:role="metamodel" xlink:title="Workplace" xlink:href="http://xml.activeknowledgemodeling.com/cvw/templates/workplace_definition.kmd#MetaModel_CVW:Workplace_UUID" xlink:actuate="user"/>
  </metamodel-links>
  <valueset size="3" xlink:role="type" xlink:title="Container" xlink:href="metis:stdtypes#oid3" xlink:actuate="user">
   <string name="name"></string>
   <string name="description"></string>
   <string name="externalID"></string>
  </valueset>
  <part-link xlink:role="object" xlink:title="Classes and Utilities" xlink:href="#_002aslb01so0qj8pu96q"/>
  <bundle-rules>
   <bundle-rule>
    <origin-link xlink:role="model" xlink:title="Standard Blank" xlink:href="#_002aslb01sme0q6niekc" xlink:actuate="user"/>
    <target-link xlink:role="model" xlink:title="Standard Blank" xlink:href="#_002aslb01sme0q6niekc" xlink:actuate="user"/>
   </bundle-rule>
  </bundle-rules>
 </model>

 <object id="_002aslb01so0qj8pu96q">
  <valueset size="3" xlink:role="type" xlink:title="Container" xlink:href="metis:stdtypes#oid3" xlink:actuate="user">
   <string name="name">Classes and Utilities</string>
   <string name="description"></string>
   <string name="externalID"></string>
  </valueset>
  <part-link xlink:role="object" xlink:title="Class CC_Rule" xlink:href="#_002aslb01spoqh67dmsg"/>
  <part-link xlink:role="object" xlink:title="Function getParameterTitle" xlink:href="#_002asls00rc18ond6ves"/>
  <part-link xlink:role="object" xlink:title="Class CC_RuleEngine" xlink:href="#_002asmt01e9ug3vdtq5q"/>
  <part-link xlink:role="object" xlink:title="Class CC_InstanceType" xlink:href="#_002aso001eiilvsiv8mq"/>
  <part-link xlink:role="object" xlink:title="Class CC_Status" xlink:href="#_002aso401a4kb0fdgoef"/>
  <part-link xlink:role="object" xlink:title="Function getParameterStatusValue, getObjectStatusValue" xlink:href="#_002aso401i6upaple394"/>
  <part-link xlink:role="object" xlink:title="Function getCcObject" xlink:href="#_002aso60119pghvjcnu1"/>
  <part-link xlink:role="object" xlink:title="Function getCcParameterValue" xlink:href="#_002aso6011arpeo6pctt"/>
  <part-link xlink:role="object" xlink:title="Class CC_Globals" xlink:href="#_002asoe0199qp5dntu8p"/>
  <part-link xlink:role="object" xlink:title="Class CC_Configure" xlink:href="#_002asog01bb7crlgqs7i"/>
  <part-link xlink:role="object" xlink:title="Class CC_Project" xlink:href="#_002aspc00urdfvke2clc"/>
  <part-link xlink:role="object" xlink:title="Function getContextInstance" xlink:href="#_002aspu01dtujr219kb2"/>
  <part-link xlink:role="object" xlink:title="Function getReqParameterStatusValue, getRequirementStatusValue" xlink:href="#_002asqd01ejc84gj7htr"/>
  <part-link xlink:role="object" xlink:title="Function getCCstatusText" xlink:href="#_002asr8027atc8fq3com"/>
  <part-link xlink:role="object" xlink:title="Function getCcFamilyName" xlink:href="#_002asrc025mhb8l9nuie"/>
  <part-link xlink:role="object" xlink:title="Class CC_Family" xlink:href="#_002asre00pfovrhcq6ql"/>
  <part-link xlink:role="object" xlink:title="Sub editRoleParameters" xlink:href="#_002asrk01ihftadue4i9"/>
  <part-link xlink:role="object" xlink:title="Sub NewContent" xlink:href="#_002asrk027bf3nhgprmd"/>
  <part-link xlink:role="object" xlink:title="Sub SearchContent" xlink:href="#_002asrn00tk5n7chd85k"/>
  <part-link xlink:role="object" xlink:title="Sub setDebugOn, setDebugOff, isDebugOn" xlink:href="#_002ass3019ekr0j68boh"/>
  <part-link xlink:role="object" xlink:title="Sub ccSendMail" xlink:href="#_002assd00topmkil1i4t"/>
 </object>

 <object id="_002aslb01spoqh67dmsg">
  <valueset size="11" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="http://xml.activeknowledgemodeling.com/cvw/languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Class CC_Rule</string>
   <string name="description"></string>
   <integer name="textFitFlag">0</integer>
   <integer name="dbms-admin.commitFlag">0</integer>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="journalID"></string>
   <string name="comments"></string>
   <string name="script">option explicit


&#39;-----------------------------------------------------------
&#39;-----------------------------------------------------------
Class CC_Rule


    &#39; Variant parameters
    Public Title                        &#39; String

    &#39; Context variables (public)
    Public currentModel
    Public currentModelView
    Public currentInstance
    Public currentInstanceView
    Public ObjectAspectRatio
    Public contextModel
    Public ExpressionLayout

    &#39; Debug
    Public debug

    &#39; Types
    Private buttonType
    Private specContainerType
    Private hasInstanceContextType

    &#39; Methods

    &#39; Arguments
    Private currentWindow
    Private ccRuleEngine
    Private ruleKind
    Private ExprEvaluatedToProperty
    Private RuleEvaluatedToProperty
    
&#39;-----------------------------------------------------------
    Public Property Get ruleEngine
        set ruleEngine = ccRuleEngine
    End Property

&#39;-----------------------------------------------------------
    Public Sub execute(mode)
        dim ruleObject
        dim cvwTask

        if mode = &#34;Edit&#34; then
            set ruleObject = findRule()
            if not isEnabled(ruleObject) then
                &#39;MsgBox &#34;There is no rule connected!&#34;
                exit sub
            end if
        end if
        if isEnabled(ruleObject) then
            title = ruleObject.title
            if title = &#34;New rule&#34; then
                ruleKind = &#34;Logical rule&#34;
                set ruleObject = buildRule(ruleObject)
            elseif title = &#34;New expression&#34; then
                ruleKind = &#34;Expression&#34;
                set ruleObject = buildRule(ruleObject)
            elseif title = &#34;New service&#34; then
                ruleKind = &#34;Service&#34;
                set ruleObject = buildRule(ruleObject)
            else
                ruleKind = ruleObject.getNamedStringValue(&#34;ruleKind&#34;)
            end if
        end if
        if isEnabled(ruleObject) then
            call openRuleWindow(ruleObject)
        end if
    End Sub

&#39;-----------------------------------------------------------
    Public Function getRules(inst)
        dim rules, noRules

        set rules = Nothing
        if inst.type.uri = GLOBAL_Type_Rule.uri then
            set rules = metis.newInstanceList
            call rules.addLast(inst)
        elseif inst.isRelationship then
            set rules = metis.newInstanceList
            noRules = getRelationshipRules(inst, rules)
        elseif inst.isObject then
            set rules = inst.getNeighbourObjects(0, GLOBAL_Type_subjectOf, GLOBAL_Type_Rule)
        end if
        set getRules = rules
    End Function

&#39;-----------------------------------------------------------
    Private Function getRelationshipRules(relship, rules)
        dim ruleIds, ruleUri, ruleObject
        dim idArray
        dim i

        getRelationshipRules = 0
        if isEnabled(relship) then
            on error resume next
            ruleIds = relship.getNamedStringValue(&#34;ruleIds&#34;)
            if Len(ruleIds) &#62; 0 then
	            idArray = Split(ruleIds, &#34;;&#34;, -1, 1)
                i = 0
                ruleUri = &#34;&#34;
                do
                    on error resume next
                    ruleUri = idArray(i)
                    if Len(ruleUri) &#62; 0 then
                        if Left(ruleUri, 1) = &#34;#&#34; then
                            ruleUri = relship.url &#38; ruleUri
                        end if
                        set ruleObject = metis.findInstance(ruleUri)
                        if isEnabled(ruleObject) then
                            if not isValid(rules) then
                                set rules = metis.newInstanceList
                            end if
                            call rules.addLast(ruleObject)
                        end if
                    else
                        exit do
                    end if
                    i = i + 1
                    ruleUri = &#34;&#34;
                loop
            end if
        end if
        if isValid(rules) then
            getRelationshipRules = rules.count
        end if
    End Function

&#39;-----------------------------------------------------------
    Private Function findRule()
        dim rule, rules
        dim ruleObject, expressionObject, serviceObject
        dim model, modelObject
        dim cvwSelectDialog

        set findRule = Nothing
        if currentInstance.type.uri = GLOBAL_Type_Rule.uri then
            set findRule = currentInstance
            exit function
        end if
        set rules = getRules(currentInstance)
        if isValid(rules) then
            &#39; Get model object
            set model = contentModel()
            if isEnabled(model) then
                set modelObject = metis.findInstance(model.uri)
                &#39; Create the rule object
                set ruleObject = modelObject.newPart(GLOBAL_Type_Rule)
                if isEnabled(ruleObject) then
                    ruleObject.title = &#34;New rule&#34;
                    rules.addLast ruleObject
                end if
                &#39; Create the expression object
                set expressionObject = modelObject.newPart(GLOBAL_Type_Rule)
                if isEnabled(expressionObject) then
                    expressionObject.title = &#34;New expression&#34;
                    call expressionObject.setNamedStringValue(&#34;ruleKind&#34;, &#34;Expression&#34;)
                    rules.addLast expressionObject
                end if
                &#39; Create the service object
                set serviceObject = modelObject.newPart(GLOBAL_Type_Rule)
                if isEnabled(serviceObject) then
                    serviceObject.title = &#34;New service&#34;
                    call serviceObject.setNamedStringValue(&#34;ruleKind&#34;, &#34;Service&#34;)
                    rules.addLast serviceObject
                end if
            end if
            if rules.count = 0 then
                exit function
            else
                set cvwSelectDialog = new CVW_SelectDialog
                cvwSelectDialog.singleSelect = true
                cvwSelectDialog.title = &#34;Select dialog&#34;
                cvwSelectDialog.heading = &#34;Select rule&#34;
                set rules = cvwSelectDialog.show(rules)
                if isValid(rules) then
                    if rules.count = 1 then
                        set findRule = rules(1)
                    end if
                end if
                if isEnabled(findRule) then
                    if findRule.uri &#60;&#62; ruleObject.uri or rules.count = 0 then
                        model.deleteObject(ruleObject)
                    end if
                    if findRule.uri &#60;&#62; expressionObject.uri or rules.count = 0 then
                        model.deleteObject(expressionObject)
                    end if
                    if findRule.uri &#60;&#62; serviceObject.uri or rules.count = 0 then
                        model.deleteObject(serviceObject)
                    end if
                end if
            end if
        end if
    End Function

&#39;-----------------------------------------------------------
    Private Function buildRule(ruleObject)
        dim model, modelObject
        dim actionObject, conditionObject
        dim expressionObject, inputObject, outputObject
        dim ruleName
        dim hasRuleRel, subjectOfRel, partOfRel, ifThenRel
        dim ccObject, ccObjects
        dim ruleIds
        dim idArray
        dim hasSubject
        dim isLogical

        set buildRule = Nothing
        if not isEnabled(ruleObject) then
            exit function
        else
            &#39; Create rule object
            &#39; Get model object
            if ruleKind = &#34;Expression&#34; or ruleKind = &#34;Service&#34; then
                isLogical = false
            else
                isLogical = true
            end if
            set model = contentModel()
            if isEnabled(model) then
                set modelObject = metis.findInstance(model.uri)
                set ccObjects = model.findInstances(GLOBAL_Type_CC, &#34;&#34;, &#34;&#34;)
                if isValid(ccObjects) then
                    if ccObjects.count &#62; 0 then
                        set ccObject = ccObjects(1)
                    end if
                end if
                title = ruleObject.title
                if title = &#34;New rule&#34; then
                    ruleName = &#34;Rule[&#34; &#38; currentInstance.title &#38; &#34;]&#34;
                elseif title = &#34;New expression&#34; then
                    ruleName = &#34;Expression[&#34; &#38; currentInstance.title &#38; &#34;]&#34;
                elseif title = &#34;New service&#34; then
                    ruleName = &#34;Service[&#34; &#38; currentInstance.title &#38; &#34;]&#34;
                end if
                if Len(ruleName) &#62; 0 then
                    ruleName = InputBox(&#34;Enter rule name&#34;, &#34;Input dialog&#34;, ruleName)
                    if Len(ruleName) &#62; 0 then
                        ruleObject.title = ruleName
                    else
                        exit function
                    end if
                    &#39; Connect the relationships
                    if isEnabled(ccObject) then
                        set hasRuleRel = model.newRelationship(GLOBAL_Type_hasRule, ccObject, ruleObject)
                    end if
                    hasSubject = false
                    if currentInstance.isRelationship then
                        ruleIds = currentInstance.getNamedStringValue(&#34;ruleIds&#34;)
                        if currentInstance.url = ruleObject.url then
	                        idArray = Split(ruleObject.uri, &#34;#&#34;, -1, 1)
	                        if Len(ruleIds) &#62; 0 then
                                ruleIds = ruleIds &#38; &#34;;&#34;
                            end if
                            ruleIds = ruleIds &#38; Chr(35) &#38; idArray(1)
                        else
                            ruleIds = ruleObject.uri
                        end if
                        call currentInstance.setNamedStringValue(&#34;ruleIds&#34;, ruleIds)
                        hasSubject = true
                    else
                        set subjectOfRel = model.newRelationship(GLOBAL_Type_subjectOf, currentInstance, ruleObject)
                        if isEnabled(subjectOfRel) then hasSubject = true
                    end if
                    if hasSubject then
                        if isLogical then
                            &#39; Create condition and action objects
                            set conditionObject = modelObject.newPart(GLOBAL_Type_Condition)
                            set actionObject = modelObject.newPart(GLOBAL_Type_Action)
                            if isEnabled(conditionObject) and isEnabled(actionObject) then
                                &#39; Create relationships
                                set partOfRel = model.newRelationship(GLOBAL_Type_hasCondition, ruleObject, conditionObject)
                                set partOfRel = model.newRelationship(GLOBAL_Type_hasAction, ruleObject, actionObject)
                                set ifThenRel = model.newRelationship(GLOBAL_Type_ifThen, conditionObject, actionObject)
                            end if
                        else
                            &#39; Create expression
                            set expressionObject = modelObject.newPart(GLOBAL_Type_Expr)
                            if isEnabled(expressionObject) then
                                expressionObject.title = &#34;Expression&#34;
                                &#39; Create relationship
                                set partOfRel    = model.newRelationship(GLOBAL_Type_hasExpr, ruleObject, expressionObject)
                            end if
                        end if
                    end if
                end if
            end if
            if isEnabled(ruleObject) then
                set buildRule = ruleObject
            end if
        end if
   End Function

&#39;-----------------------------------------------------------
    Public Function getSubjectOf(rule)
        dim model
        dim rel, relships
        dim r, rules, noRules

        set getSubjectOf = Nothing

        set relships = rule.getNeighbourRelationships(1, GLOBAL_Type_subjectOf)
        if relships.count &#62; 0 then
            set getSubjectOf = relships(1).origin
        else
            set model = contentModel
            set relships = model.relationships
            for each rel in relships
                if isEnabled(rel) then
                    set rules = Nothing
                    noRules = getRelationshipRules(rel, rules)
                    if noRules &#62; 0 then
                        for each r in rules
                            if r.uri = rule.uri then
                                set getSubjectOf = rel
                                exit function
                            end if
                        next
                    end if
                end if
            next
        end if
    End Function

&#39;-----------------------------------------------------------
&#39;   Generate graphical view of the rule
&#39;-----------------------------------------------------------
    Private Sub openRuleWindow(ruleObject)
        dim cvwModel, cvwAction, cvwWorkarea
        dim actionName, actionObject, actionObjects
        dim workarea, workWindow, wObject
        dim rel, rels
        dim ruleView
        dim child, children
        dim textscale

        set cvwModel = getCVWmodel
        actionName = &#34;_Rules_&#34;
        set actionObjects = cvwModel.findInstances(buttonType, &#34;name&#34;, actionName)
        if isValid (actionObjects) then
            if actionObjects.count &#62; 0 then
                set actionObject = actionObjects(1)
                set cvwAction = new CVW_MenuAction
                set cvwAction.currentInstance = currentInstance
                set cvwAction.currentInstanceView = currentInstanceView
                set cvwAction.configObject = actionObject
                &#39;set cvwAction.contextInstance = ruleObject
                call cvwAction.build
                set cvwAction.contextModel = contentModel
                call cvwAction.execute
                set workarea = cvwAction.workarea
                if isValid(workarea) and isEnabled(ruleObject) then
                    set workWindow = workarea.WorkWindow
                    &#39; Get CVW_Workarea
                    set cvwWorkarea = new CVW_Workarea
                    set cvwWorkarea.WorkWindow = workWindow
                    &#39; Set context instance
                    set wObject = workWindow.instance
                    set rels = wObject.getNeighbourRelationships(0, hasInstanceContextType)
                    if rels.count &#62; 0 then
                        set rel = rels(1)
                        set rel.target = ruleObject
                    end if
                    set cvwWorkarea = Nothing
                    if ruleKind = &#34;Expression&#34; then
                        call populateExpression(workWindow, ruleObject, false)
                    elseif ruleKind = &#34;Service&#34; then
                        call populateExpression(workWindow, ruleObject, false)
                    else
                        call populateLogicalRule(workWindow, ruleObject, false)
                    end if
                end if
                set cvwAction = Nothing
            end if
        end if

    End Sub

&#39;-----------------------------------------------------------
    Public Function populateRule(workWindow, ruleObject, fromOpen)

        ruleKind = ruleObject.getNamedStringValue(&#34;ruleKind&#34;)
        if ruleKind = &#34;Expression&#34; then
            call populateExpression(workWindow, ruleObject, fromOpen)
        elseif ruleKind = &#34;Service&#34; then
            call populateExpression(workWindow, ruleObject, fromOpen)
        else
            call populateLogicalRule(workWindow, ruleObject, fromOpen)
        end if
    End Function

&#39;-----------------------------------------------------------
    Private Function populateLogicalRule(workWindow, ruleObject, fromOpen)
        dim ruleView
        dim child, children
        dim action, actions, actionView
        dim condition, conditions, conditionView
        dim expression, expressions, expressionView
        dim fromObj, fromObjView, toObj, toObjView
        dim parameterValue, parameterValueView
        dim parameterObject, parameterObjectView
        dim rel, rels, relView, view, views
        dim cvwObjectView
        dim textscale
        dim objGeo, size
        dim objHeight

        set populateLogicalRule = Nothing
        if not fromOpen then
            if isValid(workWindow) then
                set children = workWindow.children
                for each child in children
                    call currentModelView.deleteObjectView(child)
                next
            end if
        end if
        if isValid(workWindow) and isEnabled(ruleObject) then
            set ruleView = viewExists(ruleObject, workWindow)
            if isValid(ruleView) then
                if fromOpen then
                    textscale = ruleView.textscale
                    textscale = textscale / 1
                    ruleView.textScale = textScale
                end if
            else
                set ruleView = workWindow.newObjectView(ruleObject)
                textscale = ruleView.textscale
                textscale = textscale / 5
                ruleView.textScale = textScale
            end if
            if isValid(ruleView) then
                set cvwObjectView = new CVW_ObjectView
                cvwObjectView.heightRatio = ObjectAspectRatio
                if hasInstance(ruleView) then
                    &#39; Find actions
                    set actions = ruleObject.getNeighbourObjects(0, GLOBAL_Type_hasAction, GLOBAL_Type_Action)
                    for each action in actions
                        set actionView = viewExists(action, ruleView)
                        if not isValid(actionView) then
                            cvwObjectView.nestedTextFactor1 = 3
                            set actionView = cvwObjectView.create(workWindow, ruleView, action, 0)
                            actionView.close
                        end if
                    next
                    &#39; Find conditions
                    set conditions = ruleObject.getNeighbourObjects(0, GLOBAL_Type_hasCondition, GLOBAL_Type_Condition)
                    for each condition in conditions
                        set conditionView = viewExists(condition, ruleView)
                        if not isValid(conditionView) then
                            cvwObjectView.nestedTextFactor1 = 3
                            set conditionView = cvwObjectView.create(workWindow, ruleView, condition, 1)
                            conditionView.close
                        end if
                    next
                    &#39; Find expressions
                    set expressions = ruleObject.getNeighbourObjects(0, GLOBAL_Type_hasExpr, GLOBAL_Type_Expr)
                    for each expression in expressions
                        set expressionView = viewExists(expression, ruleView)
                        if not isValid(expressionView) then
                            cvwObjectView.nestedTextFactor1 = 1.75
                            set expressionView = cvwObjectView.create(workWindow, ruleView, expression, 0)
                            expressionView.close
                        end if
                        exit for
                    next
                    &#39; Find ifThenRels
                    for each action in actions
                        set actionView = action.views(1)
                        if isValid(actionView) then
                            set rels = action.getNeighbourRelationships(1, GLOBAL_Type_ifThen)
                            for each rel in rels
                                set condition = rel.origin
                                set conditionView = condition.views(1)
                                if isInView(conditionView, ruleView) then
                                    set relView = relViewExists(rel, conditionView, actionView)
                                    if not isValid(relView) then
                                        set relView = currentModelView.newRelationshipView(rel, conditionView, actionView)
                                    end if
                                end if
                            next
                        end if
                    next
                    &#39; Find inputToRels to conditions
                    for each condition in conditions
                        set conditionView = condition.views(1)
                        if isValid(conditionView) then
                            set rels = condition.getNeighbourRelationships(1, GLOBAL_Type_inputTo2)
                            if rels.count = 0 then
                                set rels = condition.getNeighbourRelationships(1, GLOBAL_Type_inputTo1)
                            end if
                            for each rel in rels
                                set fromObj = rel.origin
                                if fromObj.type.uri = GLOBAL_Type_Condition.uri then
                                    set fromObjView = fromObj.views(1)
                                    if isInView(fromObjView, ruleView) then
                                        set relView = relViewExists(rel, fromObjView, conditionView)
                                        if not isValid(relView) then
                                            set relView = currentModelView.newRelationshipView(rel, fromObjView, conditionView)
                                        end if
                                    end if
                                elseif fromObj.type.uri = GLOBAL_Type_VPV.uri then
                                end if
                            next
                        end if
                    next
                    &#39; Find inputToRels from expressions
                    for each expression in expressions
                        set expressionView = expression.views(1)
                        if isValid(expressionView) then
                            set rels = expression.getNeighbourRelationships(0, GLOBAL_Type_inputTo3)
                            for each rel in rels
                                set toObj = rel.target
                                if toObj.type.uri = GLOBAL_Type_Condition.uri then
                                    set toObjView = toObj.views(1)
                                    if isInView(toObjView, ruleView) then
                                        set relView = relViewExists(rel, expressionView, toObjView)
                                        if not isValid(relView) then
                                            set relView = currentModelView.newRelationshipView(rel, expressionView, toObjView)
                                        end if
                                    end if
                                elseif fromObj.type.uri = GLOBAL_Type_VPV.uri then
                                end if
                            next
                        end if
                    next
                    for each expression in expressions
                        set expressionView = expression.views(1)
                        if isValid(expressionView) then
                            set rels = expression.getNeighbourRelationships(0, GLOBAL_Type_inputTo3)
                            for each rel in rels
                                set toObj = rel.target
                                if toObj.type.uri = GLOBAL_Type_Condition.uri then
                                    set toObjView = toObj.views(1)
                                    if isInView(toObjView, ruleView) then
                                        set relView = relViewExists(rel, expressionView, toObjView)
                                        if not isValid(relView) then
                                            set relView = currentModelView.newRelationshipView(rel, expressionView, toObjView)
                                        end if
                                    end if
                                elseif fromObj.type.uri = GLOBAL_Type_VPV.uri then
                                end if
                            next
                        end if
                    next
                    &#39; Find inputToRels from parameter values to conditions
                    for each condition in conditions
                        set conditionView = condition.views(1)
                        if isValid(conditionView) then
                            set rels = condition.getNeighbourRelationships(1, GLOBAL_Type_inputTo1)
                            for each rel in rels
                                set parameterValue = rel.origin
                                if isParameterValueType(parameterValue) then
                                    set parameterValueView = Nothing
                                    set views = parameterValue.views
                                    if isValid(views) then
                                        for each view in views
                                            if isInView(view, ruleView) then
                                                set parameterValueView = view
                                                exit for
                                            end if
                                        next
                                    end if
                                    if not isValid(parameterValueView) then
                                        &#39; Create view of parameterValue
                                        cvwObjectView.nestedTextFactor1 = 2.25
                                        set parameterValueView = cvwObjectView.create(workWindow, ruleView, parameterValue, 0)
                                        parameterValueView.close
                                    end if
                                    if isValid(parameterValueView) then
                                        set relView = relViewExists(rel, parameterValueView, conditionView)
                                        if not isValid(relView) then
                                            set relView = currentModelView.newRelationshipView(rel, parameterValueView, conditionView)
                                        end if
                                    end if
                                end if
                            next
                        end if
                    next
                    &#39; Find inputToRels from parameter( value)s to expressions
                    for each expression in expressions
                        set expressionView = expression.views(1)
                        if isValid(expressionView) then
                            set rels = expression.getNeighbourRelationships(1, GLOBAL_Type_inputToExpr1)
                            for each rel in rels
                                set parameterObject = rel.origin
                                if isParameterType(parameterObject) then
                                    set parameterObjectView = Nothing
                                    set views = parameterObject.views
                                    if isValid(views) then
                                        for each view in views
                                            if isInView(view, ruleView) then
                                                set parameterObjectView = view
                                                exit for
                                            end if
                                        next
                                    end if
                                    if not isValid(parameterObjectView) then
                                        cvwObjectView.nestedTextFactor1 = 2.25
                                        set parameterObjectView = cvwObjectView.create(workWindow, ruleView, parameterObject, 0)
                                        parameterObjectView.close
                                    end if
                                    if isValid(parameterObjectView) then
                                        set relView = relViewExists(rel, parameterObjectView, expressionView)
                                        if not isValid(relView) then
                                            set relView = currentModelView.newRelationshipView(rel, parameterObjectView, expressionView)
                                        end if
                                    end if
                                end if
                            next
                        end if
                    next
                    for each expression in expressions
                        set expressionView = expression.views(1)
                        if isValid(expressionView) then
                            set rels = expression.getNeighbourRelationships(1, GLOBAL_Type_inputToExpr2)
                            for each rel in rels
                                set parameterValue = rel.origin
                                if isParameterValueType(parameterValue) then
                                    set parameterValueView = Nothing
                                    set views = parameterValue.views
                                    if isValid(views) then
                                        for each view in views
                                            if isInView(view, ruleView) then
                                                set parameterValueView = view
                                                exit for
                                            end if
                                        next
                                    end if
                                    if not isValid(parameterValueView) then
                                        cvwObjectView.nestedTextFactor1 = 2.25
                                        set parameterValueView = cvwObjectView.create(workWindow, ruleView, parameterValue, 0)
                                        parameterValueView.close
                                    end if
                                    if isValid(parameterValueView) then
                                        set relView = relViewExists(rel, parameterValueView, expressionView)
                                        if not isValid(relView) then
                                            set relView = currentModelView.newRelationshipView(rel, parameterValueView, expressionView)
                                        end if
                                    end if
                                end if
                            next
                        end if
                    next
                    &#39; Find outputToRels from actions to parameter values
                        if isValid(actionView) then
                            set action = actionView.instance
                            set rels = action.getNeighbourRelationships(0, GLOBAL_Type_outputTo)
                            for each rel in rels
                                set parameterValue = rel.target
                                if isParameterValueType(parameterValue) then
                                    set parameterValueView = Nothing
                                    set views = parameterValue.views
                                    if isValid(views) then
                                        for each view in views
                                            if isInView(view, ruleView) then
                                                set parameterValueView = view
                                                exit for
                                            end if
                                        next
                                    end if
                                    if not isValid(parameterValueView) then
                                        &#39; Create view of parameterValue
                                        cvwObjectView.nestedTextFactor1 = 2.25
                                        set parameterValueView = cvwObjectView.create(workWindow, ruleView, parameterValue, 0)
                                        parameterValueView.close
                                    end if
                                    if isValid(parameterValueView) then
                                        set relView = relViewExists(rel, actionView, parameterValueView)
                                        if not isValid(relView) then
                                            set relView = currentModelView.newRelationshipView(rel, actionView, parameterValueView)
                                        end if
                                    end if
                                end if
                            next
                        end if
                end if
                set cvwObjectView = Nothing
            end if
        end if
        set populateLogicalRule = ruleView
    End Function

&#39;-----------------------------------------------------------
    Private Function populateExpression(workWindow, ruleObject, fromOpen)
        dim ruleView
        dim child, children
        dim expression, expressions, expressionView
        dim expressionLayoutStrategy
        dim fromObj, fromObjView
        dim parameterObject, parameterObjectView
        dim parameterValue, parameterValueView
        dim rel, rels, relView, view, views
        dim part, parts, partView
        dim cvwObjectView
        dim textscale
        dim objGeo, size
        dim objHeight
        dim isInput
        dim noOutputs

        set populateExpression = Nothing
        noOutputs = 0
        if not fromOpen then
            if isValid(workWindow) then
                set children = workWindow.children
                for each child in children
                    call currentModelView.deleteObjectView(child)
                next
            end if
        end if
        if isValid(workWindow) and isEnabled(ruleObject) then
            set ruleView = viewExists(ruleObject, workWindow)
            if isValid(ruleView) then
                if fromOpen then
                    textscale = ruleView.textscale
                    textscale = textscale / 1
                    ruleView.textScale = textScale
                end if
            else
                set ruleView = workWindow.newObjectView(ruleObject)
                textscale = ruleView.textscale
                textscale = textscale / 5
                ruleView.textScale = textScale
            end if
            if isValid(ruleView) then
                set cvwObjectView = new CVW_ObjectView
                cvwObjectView.heightRatio = ObjectAspectRatio
                if hasInstance(ruleView) then
                    &#39; Find expressions
                    set expressions = ruleObject.getNeighbourObjects(0, GLOBAL_Type_hasExpr, GLOBAL_Type_Expr)
                    for each expression in expressions
                        set expressionView = viewExists(expression, ruleView)
                        if not isValid(expressionView) then
                            cvwObjectView.nestedTextFactor1 = 1.75
                            set expressionView = cvwObjectView.create(workWindow, ruleView, expression, 0)
                            expressionView.close
                        end if
                        exit for
                    next
                    &#39; Find inputToRels from parameter values
                    if isEnabled(expression) then
                        set expressionView = expression.views(1)
                        if isValid(expressionView) then
                            set rels = expression.getNeighbourRelationships(1, GLOBAL_Type_inputToExpr1)
                            for each rel in rels
                                set parameterObject = rel.origin
                                if isParameterType(parameterObject) then
                                    set parameterObjectView = Nothing
                                    set views = parameterObject.views
                                    if isValid(views) then
                                        for each view in views
                                            if isInView(view, ruleView) then
                                                set parameterObjectView = view
                                                exit for
                                            end if
                                        next
                                    end if
                                    if not isValid(parameterObjectView) then
                                        &#39; Create view of parameterValue
                                        cvwObjectView.nestedTextFactor1 = 1.75
                                        set parameterObjectView = cvwObjectView.create(workWindow, ruleView, parameterObject, 0)
                                        parameterObjectView.close
                                    end if
                                    if isValid(parameterObjectView) then
                                        set relView = relViewExists(rel, parameterObjectView, expressionView)
                                        if not isValid(relView) then
                                            set relView = currentModelView.newRelationshipView(rel, parameterObjectView, expressionView)
                                        end if
                                    end if
                                end if
                            next
                        end if
                    end if
                    for each expression in expressions
                        set expressionView = expression.views(1)
                        if isValid(expressionView) then
                            set rels = expression.getNeighbourRelationships(1, GLOBAL_Type_inputToExpr2)
                            for each rel in rels
                                set parameterValue = rel.origin
                                if isParameterValueType(parameterValue) then
                                    set parameterValueView = Nothing
                                    set views = parameterValue.views
                                    if isValid(views) then
                                        for each view in views
                                            if isInView(view, ruleView) then
                                                set parameterValueView = view
                                                exit for
                                            end if
                                        next
                                    end if
                                    if not isValid(parameterValueView) then
                                        cvwObjectView.nestedTextFactor1 = 2.25
                                        set parameterValueView = cvwObjectView.create(workWindow, ruleView, parameterValue, 0)
                                        parameterValueView.close
                                    end if
                                    if isValid(parameterValueView) then
                                        set relView = relViewExists(rel, parameterValueView, expressionView)
                                        if not isValid(relView) then
                                            set relView = currentModelView.newRelationshipView(rel, parameterValueView, expressionView)
                                        end if
                                    end if
                                end if
                            next
                        end if
                    next
                    &#39; Find outputToRels to parameter values
                    for each expression in expressions
                        set expressionView = expression.views(1)
                        if isValid(expressionView) then
                            set rels = expression.getNeighbourRelationships(0, GLOBAL_Type_outputFromExpr)
                            for each rel in rels
                                set parameterObject = rel.target
                                if isParameterType(parameterObject) then
                                    set parameterObjectView = Nothing
                                    set views = parameterObject.views
                                    if isValid(views) then
                                        for each view in views
                                            if isInView(view, ruleView) then
                                                set parameterObjectView = view
                                                exit for
                                            end if
                                        next
                                    end if
                                    if not isValid(parameterObjectView) then
                                        &#39; Create view of parameterValue
                                        cvwObjectView.nestedTextFactor1 = 1.75
                                        set parameterObjectView = cvwObjectView.create(workWindow, ruleView, parameterObject, 0)
                                        parameterObjectView.close
                                    end if
                                    if isValid(parameterObjectView) then
                                        set relView = relViewExists(rel, expressionView, parameterObjectView)
                                        if not isValid(relView) then
                                            set relView = currentModelView.newRelationshipView(rel, expressionView, parameterObjectView)
                                        end if
                                        noOutputs = noOutputs + 1
                                    end if
                                end if
                            next
                        end if
                    next
                end if
                if noOutputs &#62; 1 then
                    if Len(ExpressionLayout) &#62; 0 then
                        set expressionLayoutStrategy = metis.findLayoutStrategy(ExpressionLayout)
                        set ruleView.layoutStrategy  = expressionLayoutStrategy
                    end if
                end if
                set cvwObjectView = Nothing
            end if
        end if
        set populateExpression = ruleView
    End Function

&#39;-----------------------------------------------------------
&#39;   Transform rules to scripts
&#39;-----------------------------------------------------------
    Public Sub transformRulesToScripts(parentInst)
        dim rule, rules
        dim intVal

        set rules = getRules(parentInst)
        if rules.count &#62; 0 then
            for each rule in rules
                if isEnabled(rule) then
                    call transformToScript(rule)
                end if
            next
        else
            set intVal = metis.newValue
            call intVal.setInteger(1)
            call parentInst.setNamedValue(RuleEvaluatedToProperty, intVal)
        end if
    End Sub

&#39;-----------------------------------------------------------
    Public Sub transformToScript(ruleObject)
        dim expression, expressions
        dim text1, text2, text3, text4
        dim ruleKind

        if isEnabled(ruleObject) then
            ruleKind = ruleObject.getNamedStringValue(&#34;ruleKind&#34;)
            if ruleKind = &#34;Expression&#34; or ruleKind = &#34;Service&#34; then
                set expressions = ruleObject.getNeighbourObjects(0, GLOBAL_Type_hasExpr, GLOBAL_Type_Expr)
                if expressions.count &#62; 0 then
                    set expression = expressions(1)
                    call transformExpressionToScript(expression)
                    &#39; Set complete script in rule object
                    text1 = expression.getNamedStringValue(&#34;ruleInitCode&#34;)
                    text2 = expression.getNamedStringValue(&#34;ruleInitCode2&#34;)
                    text3 = expression.getNamedStringValue(&#34;ruleCode&#34;)
                    text4 = expression.getNamedStringValue(&#34;rulePostCode&#34;)
                    call ruleObject.setNamedStringValue(&#34;ruleCode&#34;, text1 &#38; text2 &#38; text3 &#38; text4)
                end if
            else
                call transformLogicalRuleToScript(ruleObject)
            end if
        end if
    End Sub

&#39;-----------------------------------------------------------
    Private Sub transformExpressionToScript(expression)
        dim expressions
        dim templateKind, templateArgument
        dim rel, rels
        dim inputs(), noInputs
        dim inputs2(), noInputs2
        dim outputs(), noOutputs
        dim initScript(), initScript2(), preScript(), mainScript(), postScript()
        dim s, i, j, lineNo
        dim text1, text2, text3

            &#39; Any template?
            templateKind     = expression.getNamedStringValue(&#34;templateKind&#34;)
            templateArgument = expression.getNamedStringValue(&#34;templateArgument&#34;)
            &#39; Find input parameters
            set rels = expression.getNeighbourRelationships(1, GLOBAL_Type_inputToExpr1)
            noInputs = rels.count
            i = 0
            if noInputs &#62; 0 then
                ReDim Preserve inputs(noInputs + 1)
                for each rel in rels
                    s = rel.getNamedStringValue(&#34;paramId&#34;)
                    if Len(s) &#62; 0 then
                        i = i + 1
                        inputs(i) = s
                    end if
                next
            end if
            &#39; Find input parameter values
            set rels = expression.getNeighbourRelationships(1, GLOBAL_Type_inputToExpr2)
            noInputs2 = rels.count
            i = 0
            if rels.count &#62; 0 then
                ReDim Preserve inputs2(noInputs2 + 1)
                for each rel in rels
                    s = rel.getNamedStringValue(&#34;paramId&#34;)
                    if Len(s) &#62; 0 then
                        i = i + 1
                        inputs2(i) = s
                    end if
                next
            end if
            &#39; Find output parameters
            set rels = expression.getNeighbourRelationships(0, GLOBAL_Type_outputFromExpr)
            noOutputs = rels.count
            i = 0
            if noOutputs &#62; 0 then
                ReDim Preserve outputs(noOutputs + 1)
                for each rel in rels
                    s = rel.getNamedStringValue(&#34;paramId&#34;)
                    if Len(s) &#62; 0 then
                        i = i + 1
                        outputs(i) = s
                    end if
                next
            end if
            &#39; Find condition parameter
            set rels = expression.getNeighbourRelationships(0, GLOBAL_Type_inputTo3)
            if rels.count &#62; 0 then
                noOutputs = noOutputs + rels.count
                ReDim Preserve outputs(noOutputs + 1)
                for each rel in rels
                    s = rel.getNamedStringValue(&#34;paramId&#34;)
                    if Len(s) &#62; 0 then
                        i = i + 1
                        outputs(i) = s
                    end if
                next
            end if
            &#39; Build InitCode script
            ReDim Preserve initScript(noInputs + noInputs2 + 15)
            initScript(1) = &#34;dim ccRuleEngine, currentRule, contextInst&#34;
            s = &#34;dim &#34;
            for i = 1 to noInputs
                if Len(inputs(i)) &#62; 0 then
                    if i &#62; 1 then s = s &#38; &#34;, &#34;
                    s = s &#38; inputs(i)
                end if
            next
            for j = 1 to noInputs2
                if Len(inputs2(j)) &#62; 0 then
                    if i &#62; 1 then s = s &#38; &#34;, &#34;
                    i = i + j
                    s = s &#38; inputs2(j)
                end if
            next
            for j = 1 to noOutputs
                if Len(outputs(j)) &#62; 0 then
                    if i &#62; 1 then s = s &#38; &#34;, &#34;
                    i = i + j
                    s = s &#38; outputs(j)
                end if
            next
            if Len(s) &#60;= 4 then  s = &#34;&#34;
            initScript(2) = s
            select case templateKind
                case &#34;Excel&#34;
                    initScript(3) = &#34;dim excel, filename&#34;
                    initScript(4) = &#34;&#34;
                    initScript(5) = &#34;set excel = new CVW_Excel&#34;
                    initScript(6) = &#34;filename = &#34; &#38; Chr(34) &#38; templateArgument &#38; Chr(34)
                    initScript(7) = &#34;if excel.open(filename, false) then&#34;
                    lineNo = 8
                case else
                    lineNo = 3
            end select
            initScript(lineNo) = &#34;  set ccRuleEngine = new CC_RuleEngine&#34;
            initScript(lineNo + 1) = &#34;&#34;
            ReDim Preserve initScript2(noInputs + noInputs2 + 5)
            lineNo = 0
            for i = 1 to noInputs
                if Len(inputs(i)) &#62; 0 then
                    lineNo = lineNo + 1
                    initScript2(lineNo) = &#34;  &#34; &#38; inputs(i) &#38; &#34; = ccRuleEngine.getInputParameter(contextInst, &#34; &#38; Chr(34) &#38; inputs(i) &#38; Chr(34) &#38; &#34;)&#34;
                end if
            next
            for i = 1 to noInputs2
                if Len(inputs2(i)) &#62; 0 then
                    lineNo = lineNo + 1
                    initScript2(lineNo) = &#34;  &#34; &#38; inputs2(i) &#38; &#34; = ccRuleEngine.getInputParameterValue(&#34; &#38; Chr(34) &#38; inputs2(i) &#38; Chr(34) &#38; &#34;)&#34;
                end if
            next
            initScript2(lineNo + 1) = &#34;&#34;
            &#39; Build Code script
            ReDim Preserve preScript(15)
            preScript(1) = &#34;&#39;----------------------------------------------------------------------------&#34;
            preScript(2) = &#34;&#34;
            preScript(3) = &#34;&#39; Context parameters: ccRuleEngine, currentRule, contextInst&#34;
            preScript(4) = &#34;&#34;
            select case templateKind
                case &#34;Excel&#34;
                    preScript(5) = &#34;Template parameters: excel, filename&#34;
                    preScript(6) = &#34;&#34;
                    lineNo = 7
                case else
                    lineNo = 5
            end select

            s = &#34;&#39; Input parameter(s):  &#34;
            for i = 1 to noInputs
                if Len(inputs(i)) &#62; 0 then
                    if i &#62; 1 then s = s &#38; &#34;, &#34;
                    s = s &#38; inputs(i)
                end if
            next
            for j = 1 to noInputs2
                if Len(inputs2(j)) &#62; 0 then
                    if i &#62; 1 then s = s &#38; &#34;, &#34;
                    i = i + j
                    s = s &#38; inputs2(j)
                end if
            next
            preScript(lineNo) = s
            s = &#34;&#39; Output parameter(s): &#34;
            for i = 1 to noOutputs
                if Len(outputs(i)) &#62; 0 then
                    if i &#62; 1 then s = s &#38; &#34;, &#34;
                    s = s &#38; outputs(i)
                end if
            next
            preScript(lineNo + 1) = s
            preScript(lineNo + 2) = &#34;&#39;----------------------------------------------------------------------------&#34;

            &#39; Build PostCode script
            ReDim Preserve postScript(noOutputs + 15)
            lineNo = 1
            postScript(1) = &#34;&#34;
            for i = 1 to noOutputs
                if Len(outputs(i)) &#62; 0 then
                    lineNo = lineNo + 1
                    if outputs(i) = &#34;Condition&#34; then
                        postScript(lineNo) = &#34;  call ccRuleEngine.setCondition(&#34; &#38; outputs(i) &#38; &#34;)&#34;
                    else
                        postScript(lineNo) = &#34;  retVal = ccRuleEngine.setOutputParameter(contextInst, currentRule, &#34; &#38; Chr(34) &#38; outputs(i) &#38; Chr(34) &#38; &#34;, &#34; &#38; outputs(i) &#38; &#34;)&#34;
                        lineNo = lineNo + 1
                        postScript(lineNo) = &#34;  call ccRuleEngine.setRuleStatus(contextInst, retVal)&#34;
                    end if
                end if
            next
            select case templateKind
                case &#34;Excel&#34;
                    postScript(lineNo + 1) = &#34;  call excel.close(false)&#34;
                    postScript(lineNo + 2) = &#34;end if&#34;
                    postScript(lineNo + 3) = &#34;set excel = Nothing&#34;
                    lineNo = lineNo + 3
            end select
            postScript(lineNo + 1) = &#34;set ccRuleEngine = Nothing&#34;
            postScript(lineNo + 2) = &#34;&#34;
            postScript(lineNo + 3) = &#34;&#39; End&#34;

            i = 1
            text1 = &#34;&#34;
            do while not isEmpty(initScript(i))
                text1 = text1 &#38; initScript(i) &#38; vbCrLf
                i = i + 1
            loop
            call expression.setNamedStringValue(&#34;ruleInitCode&#34;, text1)
            i = 1
            text1 = &#34;&#34;
            do while not isEmpty(initScript2(i))
                text1 = text1 &#38; initScript2(i) &#38; vbCrLf
                i = i + 1
            loop
            call expression.setNamedStringValue(&#34;ruleInitCode2&#34;, text1)
            i = 1
            text2 = &#34;&#34;
            do while not isEmpty(preScript(i))
                text2 = text2 &#38; preScript(i) &#38; vbCrLf
                i = i + 1
            loop
            call expression.setNamedStringValue(&#34;rulePreCode&#34;, text2)
            i = 1
            text3 = &#34;&#34;
            do while not isEmpty(postScript(i))
                text3 = text3 &#38; postScript(i) &#38; vbCrLf
                i = i + 1
            loop
            call expression.setNamedStringValue(&#34;rulePostCode&#34;, text3)

    End Sub

&#39;-----------------------------------------------------------
    Private Sub transformLogicalRuleToScript(ruleObject)
        dim lineNo
        dim action, actions, outputs, ifThens
        dim operator, operation
        dim condition
        dim paramType, paramObj, valueObj
        dim script(), text
        dim setParam
        dim i

        lineNo = 0
        &#39; Find the action
        set actions = ruleObject.getNeighbourObjects(0, GLOBAL_Type_hasAction, GLOBAL_Type_Action)
        if actions.count &#62; 0 then
            setParam = false
            set action = actions(1)
            operation = action.getNamedStringValue(&#34;operation&#34;)
            if operation = &#34;setParameterValue&#34; then
                setParam = true
            end if
            if Len(operation) &#62; 0 then
                ReDim Preserve script(lineNo + 5)
                lineNo = lineNo + 1
                script(lineNo) = &#34;end if&#34;
                lineNo = lineNo + 1
                if debug then
                    script(lineNo) = &#34;    call &#34; &#38; operation
                elseif operation = &#34;setParameterValue&#34; then
                    script(lineNo) = &#34;    call ccRuleEngine.setRuleStatus(contextInst, retVal)&#34;
                    lineNo = lineNo + 1
                    script(lineNo) = &#34;    retVal = ccRuleEngine.&#34; &#38; operation
                else
                    script(lineNo) = &#34;    call ccRuleEngine.&#34; &#38; operation
                end if
                set outputs = action.getNeighbourObjects(0, GLOBAL_Type_outputTo, GLOBAL_Type_AnyObject)
                if outputs.count &#62; 0 then
                    set valueObj = outputs(1)
                    set paramObj = getCcParameterObj(valueObj)
                    if debug then
                        paramType = getCcParameterType(valueObj)
                        script(lineNo) = script(lineNo) &#38; &#34;(&#34; &#38; Chr(34) &#38; paramType &#38; &#34;, &#34; &#38; Chr(34) &#38; paramObj.title &#38; Chr(34) &#38; &#34;, &#34; &#38; Chr(34) &#38; valueObj.title &#38; Chr(34) &#38; &#34;) &#34;
                    else
                        script(lineNo) = script(lineNo) &#38; &#34;(&#34; &#38; Chr(34) &#38; paramObj.uri &#38; Chr(34) &#38; &#34;, &#34; &#38; Chr(34) &#38; valueObj.uri &#38; Chr(34) &#38; &#34;) &#34;
                    end if
                end if

                lineNo = lineNo + 1
                script(lineNo) = &#34;if condition then&#34;
                &#39; Find the conditions
                set ifThens = action.getNeighbourObjects(1, GLOBAL_Type_ifThen, GLOBAL_Type_Condition)
                if ifThens.count &#60;&#62; 0 then
                    set condition = ifThens(1)
                    text = &#34;&#34;
                    text = getCondition(ruleObject, condition, text, debug)
                    if Len(text) = 0 then exit sub
                end if
                if Len(text) &#62; 0 then
                    lineNo = lineNo + 1
                    script(lineNo) = &#34;condition = &#34; &#38; text &#38; vbCrLf
                end if
                text = &#34;set ccRuleEngine = new CC_RuleEngine&#34; &#38; vbCrLf
                for i = lineNo to 1 step -1
                    text = text &#38; script(i) &#38; vbCrLf
                next
                if setParam then
                    text = text &#38; &#34;call ccRuleEngine.includeInConfiguration&#34; &#38; vbCrLf
                end if
                text = text &#38; &#34;set ccRuleEngine = Nothing&#34; &#38; vbCrLf
                if Len(text) &#62; 0 then
                    if debug then
                        MsgBox text
                    else
                        call ruleObject.setNamedStringValue(&#34;ruleCode&#34;, text)
                    end if
                end if
            end if
        end if
    End Sub

&#39;-----------------------------------------------------------
    Private Function getCondition(ruleObject, condition, text, debug)
        dim model
        dim inputRel, inputRels
        dim rel, rels
        dim valueObj, paramObj
        dim paramType, operator
        dim conditionObj
        dim testCondition
        dim expression
        dim i, ival, intVal

        operator = condition.getNamedStringValue(&#34;operator&#34;)
        if operator = &#34;NOT&#34; then
            text = text &#38; &#34; NOT &#34;
        end if
        set inputRels = condition.getNeighbourRelationships(1, GLOBAL_Type_inputTo1)
        set rels = condition.getNeighbourRelationships(1, GLOBAL_Type_inputTo3)
        operator = condition.getNamedStringValue(&#34;operator&#34;)
        for each rel in rels
            inputRels.addLast rel
        next
        if inputRels.count = 0 then
            if not (operator = &#34;TRUE&#34; or operator = &#34;FALSE&#34;) then
                MsgBox &#34;Syntax error: &#34; &#38; vbCrLf &#38; &#34;Illegal condition in rule: &#34; &#38; Chr(34) &#38; ruleObject.title &#38; Chr(34), vbExclamation
                getCondition = &#34;&#34;
            else
                getCondition = operator
            end if
        else
            i = 0
            for each inputRel in inputRels
                i = i + 1
                set valueObj = inputRel.origin
                if valueObj.type.uri = GLOBAL_Type_Expr.uri then
                    set expression = valueObj
                    call transformExpressionToScript(expression)
                    &#39; Execute expression
                    testCondition = &#34;FALSE&#34;
                    set intVal = metis.newValue
                    call intVal.setInteger(0)
                    call expression.setNamedValue(ExprEvaluatedToProperty, intVal)
                    set model = expression.ownerModel
                    call model.runMethodOnInst(GLOBAL_Method_ExprExecute, expression)
                    ival = expression.getNamedValue(ExprEvaluatedToProperty).getInteger
                    if ival &#62; 0 then
                        testCondition = &#34;TRUE&#34;
                    end if
                    text = text &#38; &#34; &#34; &#38; testCondition
                    if i &#60; inputRels.count then
                        text = text &#38; &#34; &#34; &#38; operator &#38; &#34; &#34;
                    end if
                else
                    set paramObj = getCcParameterObj(valueObj)
                    if debug then
                        paramType = getCcParameterType(valueObj)
                        text = text &#38; &#34;(getParameterValue(&#34; &#38; Chr(34) &#38; paramType &#38; Chr(34) &#38; &#34;, &#34; &#38; Chr(34) &#38; paramObj.title &#38; Chr(34) &#38; &#34;) = &#34; &#38; Chr(34) &#38; valueObj.title &#38;  Chr(34) &#38; &#34;)&#34;
                    else
                        text = text &#38; &#34;(ccRuleEngine.getParameterValue(&#34; &#38; Chr(34) &#38; paramObj.uri &#38; Chr(34) &#38; &#34;) = ccRuleEngine.getValueOf(&#34; &#38; Chr(34) &#38; valueObj.uri &#38;  Chr(34) &#38; &#34;))&#34;
                    end if
                    if i &#60; inputRels.count then
                        text = text &#38; &#34; &#34; &#38; operator &#38; &#34; &#34;
                    end if
                end if
            next

            set inputRels = condition.getNeighbourRelationships(1, GLOBAL_Type_inputTo2)
            for each inputRel in inputRels
                set conditionObj = inputRel.origin
                text = text &#38; &#34; &#34; &#38; operator &#38; &#34; (&#34;
                text = getCondition(ruleObject, conditionObj, text, debug)
                text = text &#38; &#34;)&#34;
            next
            getCondition = text
        end if
    End Function

&#39;-----------------------------------------------------------
&#39;-----------------------------------------------------------
    Private Function getCcParameterObj(valueObj)
        dim paramType
        dim hasValueType
        dim paramObj, paramRels

        set getCcParameterObj = Nothing

        paramType = getCcParameterType(valueObj)
        select case paramType
        case &#34;VP&#34;   set hasValueType = GLOBAL_Type_hasVPV
        case &#34;CP&#34;   set hasValueType = GLOBAL_Type_hasCPV
        case &#34;FP&#34;   set hasValueType = GLOBAL_Type_hasFPV
        case &#34;DP&#34;   set hasValueType = GLOBAL_Type_hasDPV
        case &#34;PP&#34;   set hasValueType = GLOBAL_Type_hasPPV
        case &#34;VAR&#34;  set hasValueType = Nothing
        end select
        if hasValueType is Nothing then
            set getCcParameterObj = valueObj
        elseif isValid(hasValueType) then
            set paramRels = valueObj.getNeighbourRelationships(1, hasValueType)
            if paramRels.count &#62; 0 then
                set paramObj = paramRels(1).origin
                if isEnabled(paramObj) then
                    set getCcParameterObj = paramObj
                end if
            end if
        end if

    End Function

&#39;-----------------------------------------------------------
    Private Function findDesignSolutions(ccObj)
        dim obj, objects, dsObjects
        dim frObj, frObjects
        dim primary

        &#39; Find DSs based on hasSolution
        set dsObjects = ccObj.getNeighbourObjects(0, GLOBAL_Type_hasDS, GLOBAL_Type_DS)
        if dsObjects.count &#62; 0 then
            set findDesignSolutions = dsObjects
            exit function
        end if

        &#39; Find DSs via FRs
        set dsObjects = metis.newInstanceList
        set frObjects = ccObj.getNeighbourObjects(0, GLOBAL_Type_explains, GLOBAL_Type_FR)
        for each frObj in frObjects
            if isEnabled(frObj) then
                &#39; Check if the FR is primary
                primary = frObj.getNamedValue(&#34;primary&#34;).getInteger
                if primary &#62; 0 then
                    &#39; Find the corresponding DSs
                    set objects = frObj.getNeighbourObjects(0, GLOBAL_Type_solves, GLOBAL_Type_DS)
                    for each obj in objects
                        dsObjects.addLast obj
                    next
                end if
            end if
        next
        if dsObjects.count &#62; 0 then
            set findDesignSolutions = dsObjects
        end if
    End Function

&#39;-----------------------------------------------------------
    Private Function getCcParameterType(valueObj)
        dim vType

        getCcParameterType = &#34;&#34;

        set vType = valueObj.type
        if vType.inherits(GLOBAL_Type_VPV) then
            getCcParameterType = &#34;VP&#34;
        elseif vType.inherits(GLOBAL_Type_CPV) then
            getCcParameterType = &#34;CP&#34;
        elseif vType.inherits(GLOBAL_Type_FPV) then
            getCcParameterType = &#34;FP&#34;
        elseif vType.inherits(GLOBAL_Type_DPV) then
            getCcParameterType = &#34;DP&#34;
        elseif vType.inherits(GLOBAL_Type_PPV) then
            getCcParameterType = &#34;PP&#34;
        elseif vType.inherits(GLOBAL_Type_VAR) then
            getCcParameterType = &#34;VAR&#34;
        end if
    End Function

&#39;-----------------------------------------------------------
    Private Function isParameterType(inst)
        dim instType

        isParameterType = false
        set instType = inst.type
        if inst.type.inherits(GLOBAL_Type_CCParam) then
            isParameterType = true
        end if
    End Function

&#39;-----------------------------------------------------------
    Private Function isParameterValueType(inst)
        dim instType

        isParameterValueType = false
        set instType = inst.type
        if inst.type.inherits(GLOBAL_Type_EkaValue) then
            isParameterValueType = true
        elseif inst.type.inherits(GLOBAL_Type_CCValue) then
            isParameterValueType = true
        end if
    End Function

&#39;-----------------------------------------------------------
    Private Function contentModel           &#39;IMetisObject
        dim context

        &#39; Find ContentModel
        if isValid(contextModel) then
            set contentModel = contextModel
            exit function
        end if
        if isValid(currentWindow) then
            set contentModel = currentModel
            set context = new EKA_Context
            set context.currentModel        = currentModel
            set context.currentModelView    = currentModelView
            set context.currentInstance     = currentWindow.instance
            set context.currentInstanceView = currentWindow
            if isValid(context) then
                if isEnabled(context.contentModel) then
                    set contextModel = context.contentModel
                    set contentModel = contextModel
                end if
            end if
            set context = Nothing
        end if
    End Function

&#39;-----------------------------------------------------------
    Private Sub Class_Initialize()
        dim ccGlobals

        set currentModel        = metis.currentModel
        set currentModelView    = currentModel.currentModelView
        set currentInstance     = currentModel.currentInstance
        set currentInstanceView = currentModelView.currentInstanceView
        set currentWindow       = findWorkWindowView(currentInstanceView)
        set contextModel        = Nothing

        &#39; Initialize global variables
        set ccGlobals = new CC_Globals
        set ccGlobals = Nothing

        &#39; Types
        set buttonType       = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/action_objects.kmd#ObjType_CVW:Button_UUID&#34;)
        set hasInstanceContextType = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/spec_relships.kmd#RelType_CVW:hasInstanceContext2_UUID&#34;)

        &#39; Variables
        set ccRuleEngine = new CC_RuleEngine

        ExpressionLayout = &#34;http://xml.activeknowledgemodeling.com/cvw/views/matrix_layouts.kmd#_002ash3011bccb0hs5tr&#34;
        ExprEvaluatedToProperty = &#34;expressionEvaluatedTo&#34;
        RuleEvaluatedToProperty = &#34;ruleEvaluatedTo&#34;
        ruleKind = &#34;Logical rule&#34;
        ObjectAspectRatio = 1.0
        debug = false

    End Sub

&#39;-----------------------------------------------------------
    Public Sub Class_Terminate()
        set ccRuleEngine = Nothing
    End Sub

End Class
</string>
  </valueset>
 </object>

 <object id="_002asls00rc18ond6ves">
  <valueset size="11" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="http://xml.activeknowledgemodeling.com/cvw/languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Function getParameterTitle</string>
   <string name="description"></string>
   <integer name="textFitFlag">0</integer>
   <integer name="dbms-admin.commitFlag">0</integer>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="journalID"></string>
   <string name="comments"></string>
   <string name="script">function getParameterTitle
    dim currentModel
    dim currentInstance
    dim parameterType
    dim rel, relships

    &#39; Initialization
    getParameterTitle       = &#34;&#34;
    set currentModel        = metis.currentModel
    set currentInstance     = currentModel.currentInstance
    set parameterType       = metis.findType(&#34;http://xml.chalmers.se/class/cc_parameter.kmd#CC_parameter&#34;)

    &#39; Main code
    if isEnabled(currentInstance) then
        set relships = currentInstance.neighbourRelationships
        if isValid(relships) then
            for each rel in relships
                if rel.target.uri = currentInstance.uri then
                    if rel.origin.type.inherits(parameterType) then
                        getParameterTitle = rel.origin.title
                    end if
                end if
            next
        end if
    end if
end function

function getParameterParentTitle
    dim currentModel
    dim currentInstance
    dim parameterType
    dim rel, rel2, relships
    dim parentObj, paramObj

    &#39; Initialization
    getParameterParentTitle = &#34;&#34;
    set currentModel        = metis.currentModel
    set currentInstance     = currentModel.currentInstance
    set parameterType       = metis.findType(&#34;http://xml.chalmers.se/class/cc_parameter.kmd#CC_parameter&#34;)

    &#39; Main code
    if isEnabled(currentInstance) then
        if currentInstance.type.inherits(parameterType) then
            getParameterParentTitle = getParameterParentName(currentInstance)
        else
            set relships = currentInstance.neighbourRelationships
            if isValid(relships) then
                for each rel in relships
                    if rel.target.uri = currentInstance.uri then
                        if rel.origin.type.inherits(parameterType) then
                            set paramObj = rel.origin
                            getParameterParentTitle = getParameterParentName(paramObj)
                        end if
                    end if
                next
            end if
        end if
    end if
end function

function getParameterParentName(paramObj)
    dim rel2, rels
    dim hasCpType, hasCprType, hasDpType, hasFpType, hasPpType, hasVpType

    getParameterParentName = &#34;&#34;
    set hasCpType           = metis.findType(&#34;http://xml.chalmers.se/class/has_constraint_parameter.kmd#has_constraint_parameter&#34;)
    set hasCprType          = metis.findType(&#34;http://xml.chalmers.se/class/has_constraint_parameter.kmd#has_constraint_parameter_range&#34;)
    set hasDpType           = metis.findType(&#34;http://xml.chalmers.se/class/has_design_parameter.kmd#has_design_parameter&#34;)
    set hasFpType           = metis.findType(&#34;http://xml.chalmers.se/class/has_functional_requirement_parameter.kmd#has_functional_requirement_parameter&#34;)
    set hasPpType           = metis.findType(&#34;http://xml.chalmers.se/class/has_performance_parameter.kmd#has_performance_parameter&#34;)
    set hasVpType           = metis.findType(&#34;http://xml.chalmers.se/class/has_variant_parameter.kmd#has_variant_parameter&#34;)

    set rels = paramObj.neighbourRelationships
    for each rel2 in rels
        if rel2.target.uri = paramObj.uri then
            select case rel2.type.uri
            case hasCpType.uri
                set parentObj = rel2.origin
            case hasCprType.uri
                set parentObj = rel2.origin
            case hasDpType.uri
                set parentObj = rel2.origin
            case hasFpType.uri
                set parentObj = rel2.origin
            case hasPpType.uri
                set parentObj = rel2.origin
            case hasVpType.uri
                set parentObj = rel2.origin
            end select
            if isEnabled(parentObj) then
                getParameterParentName = parentObj.title
            end if
        end if
    next
end function
</string>
  </valueset>
 </object>

 <object id="_002asmt01e9ug3vdtq5q">
  <valueset size="11" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="http://xml.activeknowledgemodeling.com/cvw/languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Class CC_RuleEngine</string>
   <string name="description"></string>
   <integer name="textFitFlag">0</integer>
   <integer name="dbms-admin.commitFlag">0</integer>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="journalID"></string>
   <string name="comments"></string>
   <string name="script">option explicit

&#39;-----------------------------------------------------------
&#39;-----------------------------------------------------------
Class CC_RuleEngine

    &#39; Variant parameters
    Public Title                        &#39; String
    
    Public MODE_CONFIGURE
    Public MODE_EXECUTE

    &#39; Context variables (public)
    Public currentModel
    Public currentModelView
    Public currentInstance
    Public currentInstanceView

    &#39; Context variables (private)
    Private RuleEngineProperty
    Private RuleInitCodeProperty
    Private RuleInitCode2Property
    Private RuleCodeProperty
    Private RulePostCodeProperty
    Private RuleEvaluatedToProperty
    Private ExprEvaluatedToProperty
    Private CcValueProperty
    Private EkaValueProperty
    Private contextInstance


&#39;-----------------------------------------------------------
    Public Sub includeInConfiguration
        dim myModel, inst
        dim intVal

        set myModel = metis.currentModel
        set inst = myModel.currentInstance

        &#39;MsgBox &#34;includeInConfiguration =&#62; &#34; &#38; inst.title
        set intVal = metis.newValue
        call intVal.setInteger(1)
        call inst.setNamedValue(RuleEvaluatedToProperty, intVal)
    End Sub

&#39;-----------------------------------------------------------
    Public Sub excludeFromConfiguration
        dim myModel, inst
        dim intVal

        set myModel = metis.currentModel
        set inst = myModel.currentInstance

        &#39;MsgBox &#34;excludeFromConfiguration =&#62; &#34; &#38; inst.title
        set intVal = metis.newValue
        call intVal.setInteger(0)
        call inst.setNamedValue(RuleEvaluatedToProperty, intVal)
    End Sub

&#39;-----------------------------------------------------------
    Public Function getInstanceOf(instUri)
        dim inst

        set getInstanceOf = Nothing
        if Len(instUri) &#62; 0 then
            set inst = metis.findInstance(instUri)
            if isEnabled(inst) then
                set getInstanceOf = inst
            end if
        end if
    End Function

&#39;-----------------------------------------------------------
    Public Function getValueOf(instUri)
        dim inst

        getValueOf = &#34;&#34;
        if Len(instUri) &#62; 0 then
            set inst = metis.findInstance(instUri)
            if isEnabled(inst) then
                on error resume next
                getValueOf = inst.getNamedStringValue(CcValueProperty)
            end if
        end if
    End Function

&#39;-----------------------------------------------------------
    Public Function getParameterValue(paramUri)
        dim myModel
        dim inst
        dim ccObj, paramObj
        dim value, values
        dim definition, definitions

        &#39; Initialization
        getParameterValue = &#34;&#34;
        set myModel     = metis.currentModel
        set inst        = myModel.currentInstance
        set paramObj    = metis.findInstance(paramUri)

        &#39;MsgBox &#34;getParameterValue  =&#62; &#34; &#38; inst.title
        &#39; Main code
        set ccObj = getCCobject(paramObj)
        if isEnabled(ccObj) then
            set values = ccObj.getNeighbourObjects(0, GLOBAL_Type_EkaHasValue, GLOBAL_Type_EkaValue)
            for each value in values
                set definitions = value.getNeighbourObjects(0, GLOBAL_Type_EkaHasDefinition, GLOBAL_Type_AnyObject)
                for each definition in definitions
                    if definition.uri = paramObj.uri then
                        getParameterValue = value.getNamedStringValue(EkaValueProperty)
                    end if
                next
            next
        end if
    End Function

&#39;-----------------------------------------------------------
    Public Function setParameterValue(paramUri, valueUri)
        dim myModel, model
        dim inst
        dim ccObj, paramObj, valueObj
        dim value, values
        dim intVal
        dim definition, definitions
        dim paramValue, newValue
        dim rel
        dim done, changed

        &#39; Initialization
        changed = false

        set myModel     = metis.currentModel
        set inst        = myModel.currentInstance
        set paramObj    = metis.findInstance(paramUri)
        set valueObj    = metis.findInstance(valueUri)
        newValue        = valueObj.getNamedStringValue(CcValueProperty)

        &#39; Main code
        set ccObj = getCCobject(paramObj)
        if isEnabled(ccObj) then
            done = false
            &#39; MsgBox &#34;setParameterValue  =&#62; &#34; &#38; inst.title  &#38; vbCrLf &#38; &#34;ccObj = &#34; &#38; ccObj.title
            set values = ccObj.getNeighbourObjects(0, GLOBAL_Type_EkaHasValue, GLOBAL_Type_EkaValue)
            for each value in values
                set definitions = value.getNeighbourObjects(0, GLOBAL_Type_EkaHasDefinition, GLOBAL_Type_AnyObject)
                for each definition in definitions
                    if definition.uri = paramObj.uri then
                        &#39; Existing value
                        paramValue = value.getNamedStringValue(EkaValueProperty)
                        if paramValue = newValue then
                            done = true
                            exit for
                        else
                            call value.setNamedStringValue(EkaValueProperty, newValue)
                            done = true
                            changed = true
                            exit for
                        end if
                    end if
                next
                if done then exit for
            next
            if not done then
                set value = ccObj.newPart(GLOBAL_Type_EkaValue)
                if isEnabled(value) then
                    call value.setNamedStringValue(EkaValueProperty, newValue)
                    set model = ccObj.ownerModel
                    set rel = model.newRelationship(GLOBAL_Type_EkaHasValue, ccObj, value)
                    set rel = model.newRelationship(GLOBAL_Type_EkaHasDefinition, value, paramObj)
                end if
            end if
        end if
        setParameterValue = changed
    End Function

&#39;-----------------------------------------------------------
    Public Function getInputParameter(contextInst, strName)
        dim inst
        dim myModel
        dim expression, expressions
        dim ccObj, paramObj, paramObjects
        dim paramName
        dim prop, props
        dim rel, rels
        dim range, ranges
        dim val, sval, value, values
        dim definition, definitions
        dim rmin, rmax, s, text

        &#39; Initialization
        getInputParameter = Empty
        set myModel = metis.currentModel
        set inst    = myModel.currentInstance
        if inst.type.uri = GLOBAL_Type_Rule.uri then
            set expressions = inst.getNeighbourObjects(0, GLOBAL_Type_hasExpr, GLOBAL_Type_Expr)
            if expressions.count &#62; 0 then
                set expression = expressions(1)
            end if
        else
            set expression = inst
        end if
        &#39; Main code
        if isEnabled(expression) then
            set rels = expression.getNeighbourRelationships(1, GLOBAL_Type_inputToExpr1)
            for each rel in rels
                &#39; Check param name
                paramName = rel.getNamedStringValue(&#34;paramId&#34;)
                if paramName = strName then
                    &#39; Parameter object
                    set paramObj = rel.origin
                    if isEnabled(contextInst) then
                        if contextInst.type.inherits(GLOBAL_Type_CCInstance) then
                            set ccObj = contextInst
                        end if
                    end if
                    if not isEnabled(ccObj) then
                        set ccObj = getCCobject(paramObj)
                    end if
                    if isEnabled(ccObj) then
                        if ccObj.type.inherits(GLOBAL_Type_CCInstance) then
                            set ekaInst = new EKA_Instance
                            set props = ccObj.getNeighbourObjects(0, GLOBAL_Type_EkaHasProperty, GLOBAL_Type_EkaProperty)
                            for each prop in props
                                if prop.title = paramObj.title then
                                    dim numVal
                                    call ekaInst.getNominalParamValue(prop, numVal)
                                    if not isEmpty(numVal) then
                                        getInputParameter = numVal
                                    end if
                                    exit function
                                end if
                            next
                        else
                            set values = ccObj.getNeighbourObjects(0, GLOBAL_Type_EkaHasValue, GLOBAL_Type_EkaValue)
                            for each value in values
                                set definitions = value.getNeighbourObjects(0, GLOBAL_Type_EkaHasDefinition, GLOBAL_Type_AnyObject)
                                for each definition in definitions
                                    if definition.uri = paramObj.uri then
                                        &#39; Value found, get the value
                                        s = value.getNamedStringValue(EkaValueProperty)
                                        if Len(s) &#62; 0 then
                                            if isNumeric(s) then
                                                val = CDbl(s)
                                                getInputParameter = val
                                            else
                                                getInputParameter = s
                                            end if
                                            exit function
                                        end if
                                        exit for
                                    end if
                                next
                            next
                        end if
                    elseif paramObj.type.inherits(GLOBAL_Type_CCParameter) then
                        &#39; This is a user input parameter
                        sval = paramObj.getNamedStringValue(&#34;inputvalue&#34;)    &#39; OBS
                        if Len(sval) &#62; 0 then
                            if isNumeric(sval) then
                                val = CDbl(sval)
                                getInputParameter = val
                            else
                                getInputParameter = sval
                            end if
                            call paramObj.setNamedStringValue(EkaValueProperty, sval)
                            exit function
                        end if
                        &#39; No value given, ask for it
                        text = &#34;The parameter &#34; &#38; strName &#38; &#34; has no value!&#34; &#38; vbCrLf
                        &#39; But first check if a range has been defined
                        set ranges = paramObj.parts
                        if ranges.count &#62; 0 then
                            text = text &#38; &#34;The parameter value must be within the range (&#34;
                            for each range in ranges
                                rmin = range.getNamedStringValue(&#34;min&#34;)
                                text = text &#38; rmin &#38; &#34;, &#34;
                                rmax = range.getNamedStringValue(&#34;max&#34;)
                                text = text &#38; rmax
                            next
                            text = text &#38; &#34;)&#34; &#38; vbCrLf
                        end if
                        text = text &#38; vbCrLf &#38; &#34;Please enter the value:&#34;
                        sval = InputBox(text)
                        &#39;sval = &#34;&#34;
                        if Len(sval) &#62; 0 then
                            if isNumeric(sval) then
                                val = CDbl(sval)
                                if not isEmpty(rmin) then
                                    if rmin &#60;= val and val &#60;= rmax then
                                        call setParamValue(contextInst, paramObj, sval)
                                    end if
                                else
                                    call setParamValue(contextInst, paramObj, sval)
                                end if
                                getInputParameter = val
                            else
                                getInputParameter = sval
                            end if
                        end if
                   end if
                end if
            next
        end if
    End Function

&#39;-----------------------------------------------------------
    Public Function getInputParameterValue(strName)
        dim inst
        dim myModel
        dim expression, expressions
        dim ccObj, paramObj, paramObjects
        dim paramName, paramUri
        dim rel, rels, rels2
        dim range, ranges
        dim val, value, values
        dim definition, definitions
        dim rmin, rmax, s, text

        &#39; Initialization
        getInputParameterValue = Empty
        set myModel = metis.currentModel
        set inst    = myModel.currentInstance
        if inst.type.uri = GLOBAL_Type_Rule.uri then
            set expressions = inst.getNeighbourObjects(0, GLOBAL_Type_hasExpr, GLOBAL_Type_Expr)
            if expressions.count &#62; 0 then
                set expression = expressions(1)
            end if
        else
            set expression = inst
        end if
        &#39; Main code
        if isEnabled(expression) then
            set rels  = expression.getNeighbourRelationships(1, GLOBAL_Type_inputToExpr2)
            for each rel in rels
                &#39; Check param name
                paramName = rel.getNamedStringValue(&#34;paramId&#34;)
                if paramName = strName then
                    &#39; Parameter object
                    paramUri = rel.origin.uri
                    s = getValueOf(paramUri)
                    if Len(s) &#62; 0 then
                        if isNumeric(s) then
                            getInputParameterValue = CDbl(s)
                        else
                            getInputParameterValue = s
                        end if
                    end if
                    exit function
                end if
            next
        end if
    End Function

&#39;-----------------------------------------------------------
    Public Function setOutputParameter(contextInst, currentRule, strName, newValue)
        dim model
        dim expression, expressions
        dim ccObj, paramObj, valueObj
        dim value, values
        dim definition, definitions
        dim paramValue
        dim paramName
        dim rel, rels

        &#39; Initialization
        setOutputParameter = false
        if isEnabled(currentRule) then
            set expressions = currentRule.getNeighbourObjects(0, GLOBAL_Type_hasExpr, GLOBAL_Type_Expr)
            if expressions.count &#62; 0 then
                set expression = expressions(1)
            end if
        end if
        &#39; Main code
        if isEnabled(expression) then
            set rels = expression.getNeighbourRelationships(0, GLOBAL_Type_outputFromExpr)
            for each rel in rels
                &#39; Check param name
                paramName = rel.getNamedStringValue(&#34;paramId&#34;)
                if paramName = strName then
                    &#39; Get value of parameter
                    set paramObj = rel.target
                    setOutputParameter = setParamValue(contextInst, paramObj, newValue)
                    exit for
                end if
            next
        end if
    End Function

&#39;-----------------------------------------------------------
    Public Sub setCondition(cond)
        dim myModel, inst
        dim intVal, ival

        set myModel = metis.currentModel
        set inst = myModel.currentInstance

        &#39;MsgBox &#34;includeInConfiguration =&#62; &#34; &#38; inst.title
        if cond then
            ival = 1
        else
            ival = 0
        end if
        set intVal = metis.newValue
        call intVal.setInteger(ival)
        call inst.setNamedValue(ExprEvaluatedToProperty, intVal)
    End Sub

&#39;-----------------------------------------------------------
    Public Sub setRuleStatus(ccObj, status)    &#39; Boolean
        dim intVal
        on error resume next

        set intVal = metis.newValue
        if status then
            if ccObj.getNamedValue(&#34;ruleStatus&#34;).getInteger = 0 then
                call intVal.setInteger(1)
                call ccObj.setNamedValue(&#34;ruleStatus&#34;, intVal)
            end if
        end if
    End Sub

&#39;-----------------------------------------------------------
    Public Sub clearRuleStatus(ccObj)    &#39; Boolean
        dim intVal
        on error resume next

        set intVal = metis.newValue
        call intVal.setInteger(0)
        call ccObj.setNamedValue(&#34;ruleStatus&#34;, intVal)
    End Sub

&#39;-----------------------------------------------------------
    Private Function setParamValue(contextInst, paramObj, newValue)
        dim model, inst
        dim ccObj, valueObj
        dim value, values
        dim prop, props
        dim definition, definitions
        dim paramValue
        dim paramName
        dim rel
        dim ekaInst
        dim done
        dim changed

        changed = false
        &#39; Main code
        if isEnabled(paramObj) then
            if isEnabled(contextInst) then
                if contextInst.type.inherits(GLOBAL_Type_CCInstance) then
                    set ccObj = contextInst
                end if
            end if
            if not isEnabled(ccObj) then
                set ccObj = getCCobject(paramObj)
            end if
            if isEnabled(ccObj) then
                done = false
                if ccObj.type.inherits(GLOBAL_Type_CCInstance) then
                    set ekaInst = new EKA_Instance
                    set props = ccObj.getNeighbourObjects(0, GLOBAL_Type_EkaHasProperty, GLOBAL_Type_EkaProperty)
                    for each prop in props
                        if prop.title = paramObj.title then
                            dim numVal
                            dim hasNomVal

                            hasNomVal = ekaInst.getNominalParamValue(prop, numVal)
                            if not hasNomVal then
                                call ekaInst.setNominalParamValue(prop, newValue)
                                changed = true
                            elseif CStr(numVal) &#60;&#62; CStr(newValue) then
                                call ekaInst.setNominalParamValue(prop, newValue)
                                changed = true
                            end if
                            done = true
                            exit for
                        end if
                    next
                else
                    set values = ccObj.getNeighbourObjects(0, GLOBAL_Type_EkaHasValue, GLOBAL_Type_EkaValue)
                    for each value in values
                        set definitions = value.getNeighbourObjects(0, GLOBAL_Type_EkaHasDefinition, GLOBAL_Type_AnyObject)
                        for each definition in definitions
                            if definition.uri = paramObj.uri then
                                &#39; There is an existing value - replace it with the new value
                                paramValue = value.getNamedStringValue(EkaValueProperty)
                                if isNumeric(paramValue) then
                                    if CStr(paramValue) = CStr(newValue) then
                                        done = true
                                        exit for
                                    end if
                                elseif paramValue = newValue then
                                    done = true
                                    exit for
                                end if
                                if not done then
                                    call value.setNamedStringValue(EkaValueProperty, newValue)
                                    done = true
                                    changed = true
                                    exit for
                                end if
                            end if
                        next
                        if done then exit for
                    next
                end if
                if not done then
                    set model = metis.currentModel
                    set inst  = model.currentInstance
                    set value = ccObj.newPart(GLOBAL_Type_EkaValue)
                    set metis.currentModel = model
                    set metis.currentModel.currentInstance = inst
                    if isEnabled(value) then
                        call value.setNamedStringValue(EkaValueProperty, newValue)
                        set model = ccObj.ownerModel
                        set rel = model.newRelationship(GLOBAL_Type_EkaHasValue, ccObj, value)
                        set rel = model.newRelationship(GLOBAL_Type_EkaHasDefinition, value, paramObj)
                        changed = true
                    end if
                end if
            else
                call paramObj.setNamedStringValue(EkaValueProperty, newValue)
            end if
        end if
        setParamValue = changed
    End Function

&#39;-----------------------------------------------------------
    Private Function getCCobject(inst)
        dim model
        dim part, parts
        dim typeUri
        dim paramObj
        dim hasValueType, hasParamType
        dim rel, rels, paramRels
        dim ccRule1

        set getCCobject = Nothing
        if inst.isRelationship then
            set inst = inst.origin
        end if
        if inst.type.uri = GLOBAL_Type_CC.uri then
            set getCCobject = inst
        elseif inst.type.uri = GLOBAL_Type_Rule.uri then
            set rels = inst.getNeighbourRelationships(1, GLOBAL_Type_subjectOf)
            if rels.count &#62; 0 then
                set getCCobject = rels(1).origin
            else
                &#39; Find the relship that is the subject of the rule
                set ccRule1 = new CC_Rule
                set rel = ccRule.getSubjectOf(inst)
                set ccRule1 = Nothing
                if isEnabled(rel) then
                    set getCCobject = rel.origin
                end if
            end if
        else
            typeUri = inst.type.uri
            if typeUri = GLOBAL_Type_VP.uri or typeUri = GLOBAL_Type_VPV.uri then
                set hasValueType = GLOBAL_Type_hasVPV
                set hasParamType = GLOBAL_Type_hasVP
            elseif typeUri = GLOBAL_Type_FP.uri or typeUri = GLOBAL_Type_FPV.uri then
                set hasValueType = GLOBAL_Type_hasFPV
                set hasParamType = GLOBAL_Type_hasFP
            elseif typeUri = GLOBAL_Type_DP.uri or typeUri = GLOBAL_Type_DPV.uri then
                set hasValueType = GLOBAL_Type_hasDPV
                set hasParamType = GLOBAL_Type_hasDP
            elseif typeUri = GLOBAL_Type_CP.uri or typeUri = GLOBAL_Type_CPV.uri then
                set hasValueType = GLOBAL_Type_hasCPV
                set hasParamType = GLOBAL_Type_hasCP
            elseif typeUri = GLOBAL_Type_CPR.uri or typeUri = GLOBAL_Type_CPV.uri then
                set hasValueType = GLOBAL_Type_hasCPV
                set hasParamType = GLOBAL_Type_hasCPR
            elseif typeUri = GLOBAL_Type_PP.uri or typeUri = GLOBAL_Type_PPV.uri then
                set hasValueType = GLOBAL_Type_hasPPV
                set hasParamType = GLOBAL_Type_hasPP
            end if
            if isValid(hasValueType) then
                set paramRels = inst.getNeighbourRelationships(1, hasValueType)
                if paramRels.count &#62; 0 then
                    set paramObj = paramRels(1).origin
                    set rels = paramObj.getNeighbourRelationships(1, hasParamType)
                    if rels.count &#62; 0 then
                        set getCCobject = rels(1).origin
                    end if
                else
                    set rels = inst.getNeighbourRelationships(1, hasParamType)
                    if rels.count &#62; 0 then
                        set getCCobject = rels(1).origin
                    end if
                end if
            elseif isValid(hasParamType) then
                set rels = inst.getNeighbourRelationships(1, hasParamType)
                if rels.count &#62; 0 then
                    set getCCobject = rels(1).origin
                end if
            end if
        end if
    End Function

&#39;-----------------------------------------------------------
    Public Sub evaluateRuleInputs(inst1)
        dim expression, expressions
        dim rel, rels
        dim ccObj
        dim paramObj, paramUri
        dim value, values
        dim definition, definitions
        dim s

        evaluateRuleInputs = true
        set inst = inst1
        if inst.type.uri = GLOBAL_Type_Rule.uri then
            set expressions = inst.getNeighbourObjects(0, GLOBAL_Type_hasExpr, GLOBAL_Type_Expr)
            if expressions.count &#62; 0 then
                set expression = expressions(1)
            end if
        else
            set expression = inst
        end if
        if isEnabled(expression) then
            &#39; Check input parameter values
            set rels = expression.getNeighbourRelationships(1, GLOBAL_Type_inputToExpr1)
            for each rel in rels
                &#39; Parameter object
                set paramObj = rel.origin
                set ccObj = getCCobject(paramObj)
                if isEnabled(ccObj) then
                    set values = ccObj.getNeighbourObjects(0, GLOBAL_Type_EkaHasValue, GLOBAL_Type_EkaValue)
                    for each value in values
                        set definitions = value.getNeighbourObjects(0, GLOBAL_Type_EkaHasDefinition, GLOBAL_Type_AnyObject)
                        for each definition in definitions
                            if definition.uri = paramObj.uri then
                                &#39; Value found, get the value
                                s = value.getNamedStringValue(EkaValueProperty)
                                if Len(s) = 0 or s = &#34;Undefined&#34; then
                                    evaluateRuleInputs = false
                                end if
                            end if
                        next
                    next
                end if
            next
        end if
    End Sub

&#39;-----------------------------------------------------------
    Public Function isCalculatingRule(rule)
        dim ruleKind
        dim expression, expressions
        dim action, actions
        dim operation
        dim rel
        
        isCalculatingRule = false
        ruleKind = rule.getNamedStringValue(&#34;ruleKind&#34;)
        if ruleKind = &#34;Expression&#34; or ruleKind = &#34;Service&#34; then
            set expressions = rule.getNeighbourObjects(0, GLOBAL_Type_hasExpr, GLOBAL_Type_Expr)
            if expressions.count &#62; 0 then
                set expression = expressions(1)
            end if
            set rels = expression.getNeighbourRelationships(0, GLOBAL_Type_outputFromExpr)
            if rels.count &#62; 0 then
                isCalculatingRule = true
                exit function
            end if
        else
            set actions = rule.getNeighbourObjects(0, GLOBAL_Type_hasAction, GLOBAL_Type_Action)
            if actions.count &#62; 0 then
                set action = actions(1)
                operation = action.getNamedStringValue(&#34;operation&#34;)
                if operation = &#34;setParameterValue&#34; then
                    isCalculatingRule = true
                    exit function
                end if
            end if
        end if
    End Function

&#39;-----------------------------------------------------------
    Public Function isExcelRule(rule, excelFile)
        dim ruleKind
        dim expression, expressions
        dim templateKind

        isExcelRule = false
        ruleKind = rule.getNamedStringValue(&#34;ruleKind&#34;)
        if ruleKind = &#34;Expression&#34; or ruleKind = &#34;Service&#34; then
            set expressions = rule.getNeighbourObjects(0, GLOBAL_Type_hasExpr, GLOBAL_Type_Expr)
            if expressions.count &#62; 0 then
                set expression = expressions(1)
                &#39; Get template kind
                templateKind = expression.getNamedStringValue(&#34;templateKind&#34;)
                if templateKind = &#34;Excel&#34; then
                    excelFile = expression.getNamedStringValue(&#34;templateArgument&#34;)
                    isExcelRule = true
                end if
                exit function
            end if
        end if
    End Function

&#39;-----------------------------------------------------------
    Public Function executeRules(inst1, mode)
        dim inst
        dim ccRule1
        dim rule, rules
        dim includeInConfig
        dim included
        dim test

        &#39; Initialize
        set inst = inst1
        included = true
        test = 1
        call clearRuleStatus(inst)
        &#39; Execute rules
        set includeInConfig = metis.newValue
        set ccRule1 = new CC_Rule
        set rules = ccRule1.getRules(inst)
        if rules.count &#62; 0 then
            call includeInConfig.setInteger(0)
        end if
        for each rule in rules
            on error resume next
&#39;stop
            test = executeRule(inst, rule, mode)
            if test = 0 then
                included = false
                &#39; MsgBox &#34;Rule execution failed: &#34; &#38; rule.title
            end if
        next
        if included then
            call includeInConfig.setInteger(1)
        end if
        call inst.setNamedValue(RuleEvaluatedToProperty, includeInConfig)
        executeRules = inst.getNamedValue(&#34;ruleStatus&#34;).getInteger
        set ccRule1 = Nothing
    End Function

&#39;-----------------------------------------------------------
    Public Function executeRule(inst1, ruleObject, mode)
        on error resume next

        dim context
        dim model
        dim intVal
        dim prop
        dim rule, ruleEngine, ruleKind
        dim includeInConfig
        dim evaluatedTo
        dim text, text1, text2, text3, text4
        dim expression, expressions
        dim isExpression

        &#39; Initialization
        set context = inst1
        executeRule = 0
        set model = ruleObject.ownerModel
        ruleKind = ruleObject.getNamedStringValue(&#34;ruleKind&#34;)
        if mode = MODE_CONFIGURE then &#39; Configure
            if ruleKind = &#34;Service&#34; then
                executeRule = 1
                exit function
            end if
        elseif mode = MODE_EXECUTE then &#39; Execute service
            if not ruleKind = &#34;Service&#34; then
                executeRule = 1
                exit function
            end if
        end if
        isExpression = false
        if ruleKind = &#34;Expression&#34; or ruleKind = &#34;Service&#34; then
            set expressions = ruleObject.getNeighbourObjects(0, GLOBAL_Type_hasExpr, GLOBAL_Type_Expr)
            if expressions.count &#62; 0 then
                set expression = expressions(1)
                isExpression = true
            end if
        end if
        &#39; Rule execution
        set prop = ruleObject.type.getProperty(RuleEngineProperty)
        if isEnabled(prop) then
            ruleEngine = ruleObject.getNamedValue(RuleEngineProperty).getInteger
            select case ruleEngine
            case 0
                executeRule = 1
                exit function
            case 1
                set includeInConfig = metis.newValue
                if isExpression then
                    if not evaluateRuleInputs(expression) then
                    end if
                    call includeInConfig.setInteger(1)
                    call ruleObject.setNamedValue(RuleEvaluatedToProperty, includeInConfig)
                    text = &#34;set contextInst = ccRuleEngine.getInstanceOf(&#34; &#38; Chr(34) &#38; context.uri &#38; Chr(34) &#38; &#34;)&#34; &#38; vbCrLf
                    text = text &#38; &#34;set currentRule = ccRuleEngine.getInstanceOf(&#34; &#38; Chr(34) &#38; ruleObject.uri &#38; Chr(34) &#38; &#34;)&#34; &#38; vbCrLf
                    text1 = expression.getNamedValue(RuleInitCodeProperty).getString
                    text2 = expression.getNamedValue(RuleInitCode2Property).getString
                    text3 = expression.getNamedValue(RuleCodeProperty).getString
                    text4 = expression.getNamedValue(RulePostCodeProperty).getString
                    rule = text1 &#38; text &#38; text2 &#38; text3 &#38; text4
                    if Len(rule) &#62; 0 then
                        call ruleObject.setNamedStringValue(RuleCodeProperty, rule)
                        call model.runMethodOnInst(GLOBAL_Method_RuleExecute, ruleObject)
                        executeRule = 1
                    end if
                else
                    rule = ruleObject.getNamedValue(RuleCodeProperty).getString
                    if Len(rule) &#62; 0 then
                        text = &#34;set contextInst = ccRuleEngine.getInstanceOf(&#34; &#38; Chr(34) &#38; context.uri &#38; Chr(34) &#38; &#34;)&#34; &#38; vbCrLf
                        text = text &#38; &#34;set currentRule = ccRuleEngine.getInstanceOf(&#34; &#38; Chr(34) &#38; ruleObject.uri &#38; Chr(34) &#38; &#34;)&#34; &#38; vbCrLf
                        rule = text &#38; rule
                        call includeInConfig.setInteger(0)
                        call ruleObject.setNamedValue(RuleEvaluatedToProperty, includeInConfig)
                        call model.runMethodOnInst(GLOBAL_Method_RuleExecute, ruleObject)
                        executeRule = ruleObject.getNamedValue(RuleEvaluatedToProperty).getInteger
                    else
                        call includeInConfig.setInteger(1)
                        call ruleObject.setNamedValue(RuleEvaluatedToProperty, includeInConfig)
                        executeRule = 1
                    end if
                end if
            end select
        end if
    End Function

&#39;-----------------------------------------------------------
    Private Sub Class_Initialize()
        dim ccGlobals

        &#39; Initialize global variables
        set ccGlobals = new CC_Globals
        &#39; Initialize local variables
        set currentModel        = metis.currentModel
        set currentModelView    = currentModel.currentModelView
        set currentInstance     = currentModel.currentInstance
        set currentInstanceView = currentModelView.currentInstanceView

        &#39; Modes
        MODE_CONFIGURE = 1
        MODE_EXECUTE   = 2

        &#39; Variables
        RuleEngineProperty      = &#34;ruleEngine&#34;
        RuleInitCodeProperty    = &#34;ruleInitCode&#34;
        RuleInitCode2Property   = &#34;ruleInitCode2&#34;
        RuleCodeProperty        = &#34;ruleCode&#34;
        RulePostCodeProperty    = &#34;rulePostCode&#34;
        RuleEvaluatedToProperty = &#34;ruleEvaluatedTo&#34;
        ExprEvaluatedToProperty = &#34;expressionEvaluatedTo&#34;
        CcValueProperty         = &#34;name&#34;
        EkaValueProperty        = &#34;value&#34;
    End Sub

&#39;-----------------------------------------------------------
    Public Sub Class_Terminate()
    End Sub

End Class
</string>
  </valueset>
 </object>

 <object id="_002aso001eiilvsiv8mq">
  <valueset size="11" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="http://xml.activeknowledgemodeling.com/cvw/languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Class CC_InstanceType</string>
   <string name="description"></string>
   <integer name="textFitFlag">0</integer>
   <integer name="dbms-admin.commitFlag">0</integer>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="journalID"></string>
   <string name="comments"></string>
   <string name="script">option explicit

&#39;-----------------------------------------------------------
&#39;-----------------------------------------------------------
Class CC_InstanceType

    Public Title
    Public ConfigurableComponent            &#39; IMetisObject
    Public productType                      &#39; IMetisType
    Public productInstType                  &#39; IMetisType
    Public typeModel                        &#39; IMetisModel
    Public instanceModel                    &#39; IMetisModel
    Public parentFamily                     &#39; IMetisObject
    Public parameterRule                    &#39; String

    &#39; Properties
    Private RuleEvaluatedToProperty
    Private IsSubcomponentProperty
    Private parameterNames(10)

&#39;-----------------------------------------------------------
    Public Function findInstances(projectObject, instTypeName)
        dim instModel, instTypeModel
        dim instanceModel, instanceType
        dim inst, instances
        dim rel
        dim i, removed

        set findInstances = Nothing
        if not isEnabled(projectObject) then
            exit function
        end if
        if isValid(typeModel) then
            set instTypeModel = typeModel
        else
            set instTypeModel = findInstanceTypeModel(projectObject)
        end if
        if isValid(instanceModel) then
            set instModel = instanceModel
        else
            set instModel = findInstanceModel(projectObject, instTypeName)
        end if
        if isEnabled(instTypeModel) and isEnabled(instModel) then
            set instanceType  = findInstanceType(instTypeName, instTypeModel)
            if isEnabled(instanceType) then
                set instances = instModel.parts
                i = 1
                for each inst in instances
                    removed = false
                    if not inst.type.inherits(instanceType.type) then
                        instances.removeAt(i)
                        removed = true
                    else
                        i = i + 1
                    end if
                next
                if instances.count &#62; 0 then set findInstances = instances
            end if
        end if
    End Function

&#39;-----------------------------------------------------------
    Public Function findInstances2(projectObject, instanceType)
        dim instModel, instTypeModel
        dim instType, instTypes
        dim inst, instances
        dim family, families
        dim rel
        dim i, removed, found

        set findInstances2 = Nothing
        if isValid(typeModel) then
            set instTypeModel = typeModel
        else
            set instTypeModel = findInstanceTypeModel(projectObject)
        end if
        if isValid(instanceModel) then
            set instModel = instanceModel
        else
            set instModel = findInstanceModel(projectObject, instTypeName)
        end if
        if isEnabled(instTypeModel) and isEnabled(instModel) then
            if isEnabled(instanceType) then
                set instances = instModel.parts
                i = 1
                for each inst in instances
                    removed = false
                    found = false
                    if inst.type.inherits(productInstType) then
                        &#39; Search by EkaIs
                        set instTypes = inst.getNeighbourObjects(0, GLOBAL_Type_EkaIs, GLOBAL_Type_AnyObject)
                        for each instType in instTypes
                            if instType.uri = instanceType.uri then
                                found = true
                                exit for
                            end if
                        next
                    end if
                    if not found then
                        instances.removeAt(i)
                    else
                        i = i + 1
                    end if
                next
                if instances.count &#62; 0 then
                    if isEnabled(parentFamily) then
                        i = 1
                        for each inst in instances
                            set families = inst.getNeighbourObjects(1, GLOBAL_Type_EkaHasPart, GLOBAL_Type_CcFamily)
                            for each family in families
                                if family.uri = parentFamily.uri then
                                    found = true
                                    exit for
                                end if
                            next
                            if not found then
                                instances.removeAt(i)
                            else
                                i = i + 1
                            end if
                        next
                    end if
                end if
                if instances.count &#62; 0 then set findInstances2 = instances
            end if
        end if
    End Function

&#39;-----------------------------------------------------------
    Public Function newInstance(projectObject, ccObject, varObject, instanceType, instName, searchMode, createViewProperties)
        dim contentModel, instTypeModel
        dim instModel
        dim inst, viewInst
        dim reqType, dsType
        dim subCC, subCCs
        dim varObj, usedVariants
        dim symbol, symbols
        dim rel
        dim ccConfig

        set newInstance = Nothing
        if not isEnabled(projectObject) then
            exit function
        end if
        if isValid(typeModel) then
            set instTypeModel = typeModel
        else
            set instTypeModel = findInstanceTypeModel(projectObject)
        end if
        if isValid(instanceModel) then
            set instModel = instanceModel
        else
            set instModel = findInstanceModel(projectObject, instName)
        end if
        set contentModel = instModel.ownerModel   &#39; instTypeModel.ownerModel
        if isEnabled(instTypeModel) and isEnabled(instModel) then
            if isEnabled(instanceType) then
                set inst = findInstance(instanceType, instName)
                if isEnabled(inst) then
                    set newInstance = inst
                else
                    set ccConfig = new CC_Configure
                    set inst = instModel.newPart(productInstType)
                    if isEnabled(inst) then
                        inst.title = instName
                        if true then
                            on error resume next
                            set rel = contentModel.newRelationship(GLOBAL_Type_EkaIs, inst, instanceType)
                        end if
                        select case productType.uri
                            case GLOBAL_Type_DS.uri
                                &#39; searchMode = 1:    Design parameters
                                &#39; searchMode = 2:    Performance parameters
                                &#39; searchMode = 3:    Design AND performance parameters
                                call copySolutionProperties(instanceType, inst, instModel, searchMode)
                                &#39; Copy from sub CCs
                                set subCCs = ccConfig.getIncludedSubComponents(ccObject)
                                for each subCC in subCCs
                                    &#39; Find chosen variant
                                    set usedVariants = varObject.getNeighbourObjects(0, GLOBAL_Type_usesVAR2, GLOBAL_Type_VAR)
                                    for each varObj in usedVariants
                                        if varObj.url = subCC.url then
                                            call ccConfig.setVariantParameters(subCC, varObj)
                                            call ccConfig.configureVariant(subCC)
                                            set dsType = ccConfig.getDesignSolution(subCC)
                                            call copySolutionProperties(dsType, inst, instModel, searchMode)
                                            exit for
                                        end if
                                    next
                                next
                            case GLOBAL_Type_CO.uri
                                &#39; Copy from current CC
                                &#39; searchMode = 1:    Constraint (discrete) parameters
                                &#39; searchMode = 2:    Constraint (range) parameters
                                &#39; searchMode = 3:    All constraint parameters
                                call copyConstraintProperties(instanceType, inst, instModel, searchMode)
                                &#39; Copy from sub CCs
                                set subCCs = ccConfig.getIncludedSubComponents(ccObject)
                                for each subCC in subCCs
                                    &#39; Find chosen variant
                                    set usedVariants = varObject.getNeighbourObjects(0, GLOBAL_Type_usesVAR2, GLOBAL_Type_VAR)
                                    for each varObj in usedVariants
                                        if varObj.url = subCC.url then
                                            call ccConfig.setVariantParameters(subCC, varObj)
                                            call ccConfig.configureVariant(subCC)
                                            set reqType = ccConfig.getRequirementType(subCC, varObj)
                                            call copyConstraintProperties(reqType, inst, instModel, searchMode)
                                            exit for
                                        end if
                                    next
                                next
                            case else
                                call copyProperties(instanceType, inst, instModel, true)
                        end select
                        if isEnabled(parentFamily) then
                            set rel = contentModel.newRelationship(GLOBAL_Type_EkaHasPart, parentFamily, inst)
                        end if
                        set newInstance = inst
                        &#39; If symbol is connected to type then connect symbol to new instance
                        set symbols = instanceType.getNeighbourObjects(0, GLOBAL_Type_EkaHasSymbol, GLOBAL_Type_EkaSymbol)
                        if symbols.count &#62; 0 then
                            set symbol = symbols(1)
                            set rel    = contentModel.newRelationship(GLOBAL_Type_EkaHasIcon, inst, symbol)
                        end if
                        if createViewProperties then
                            &#39; Create/update viewInstance
                            call updateViewInstance(ccObject, inst, Nothing, instModel, 1)
                        end if
                    end if
                    set ccConfig = Nothing
                end if
            end if
        end if
    End Function

&#39;-----------------------------------------------------------
    Public Sub copyProperties(fromObj, toObj, instModel, noValues)
        dim contentModel
        dim fromProp, fromProperties
        dim toProp, toProperties
        dim fromParam, fromParams
        dim toParam
        dim enumVal, enumVals
        dim enumProp
        dim constrained, constrains
        dim propExists
        dim rel

        set contentModel = fromObj.ownerModel
        set fromProperties = fromObj.getNeighbourObjects(0, GLOBAL_Type_EkaHasProperty, GLOBAL_Type_EkaProperty)
        set toProperties   = toObj.getNeighbourObjects(0, GLOBAL_Type_EkaHasProperty, GLOBAL_Type_EkaProperty)
        for each fromProp in fromProperties
            &#39; Check if property already exists in toObj
            propExists = false
            for each toProp in toProperties
                if toProp.title = fromProp.title then
                    propExists = true
                    exit for
                end if
            next
            if not propExists then
                call copyProp(fromProp, toObj, instModel, noValues)
            end if
        next
    End Sub

&#39;-----------------------------------------------------------
    Private Sub copySolutionProperties(fromObj, toObj, instModel, searchMode)
        dim contentModel
        dim fromProp, fromProperties
        dim toProp, toProperties
        dim propList1, propList2
        dim minProp, maxProp, enumProp
        dim constrained, constrains
        dim enumVal, enumVals
        dim propExists
        dim rel
        dim i

        set contentModel = fromObj.ownerModel
        for i = 1 to 2
          if i = 1 then
            set fromProperties = fromObj.getNeighbourObjects(0, GLOBAL_Type_hasDP, GLOBAL_Type_DP)
          elseif i = 2 then
            set fromProperties = fromObj.getNeighbourObjects(0, GLOBAL_Type_hasPP, GLOBAL_Type_PP)
          end if
          set toProperties   = toObj.getNeighbourObjects(0, GLOBAL_Type_EkaHasProperty, GLOBAL_Type_EkaProperty)
          for each fromProp in fromProperties
            if i = 1 and searchMode = 2 then exit for
            if i = 2 and searchMode = 1 then exit for
            &#39; Check if property already exists in toObj
            propExists = false
            for each toProp in toProperties
                if toProp.name = fromProp.name then
                    propExists = true
                    exit for
                end if
            next
            if not propExists then
                &#39; Create the property
                set toProp = instModel.newPart(GLOBAL_Type_EkaProperty)
                call toProp.setNamedValue(&#34;name&#34;, fromProp.getNamedValue(&#34;name&#34;))
                set rel = contentModel.newRelationship(GLOBAL_Type_EkaHasProperty, toObj, toProp)
                &#39; Set the unit value
                call toProp.setNamedValue(&#34;unit&#34;, fromProp.getNamedValue(&#34;unit&#34;))
                &#39; Check for constrains
                set constrains = fromProp.getNeighbourObjects(1, GLOBAL_Type_constrains, GLOBAL_Type_AnyObject)
                for each constrained in constrains
                    set rel = contentModel.newRelationship(GLOBAL_Type_constrains, constrained, toProp)
                next
                &#39; Check for enums
                set enumVals = fromProp.getNeighbourObjects(0, GLOBAL_Type_hasDPV, GLOBAL_Type_DPV)
                for each enumVal in enumVals
                    set enumProp = instModel.newPart(GLOBAL_Type_EkaProperty)
                    call enumProp.setNamedValue(&#34;value&#34;, enumVal.getNamedValue(&#34;value&#34;))
                    set rel = contentModel.newRelationship(GLOBAL_Type_EkaHasAllowedValue, toProp, enumProp)
                next
            end if
          next
        next
    End Sub

&#39;-----------------------------------------------------------
    Private Sub copyConstraintProperties(fromObj, toObj, instModel, searchMode)
        dim contentModel
        dim fromProp, fromProperties
        dim toProp, toProperties
        dim minProp, maxProp, enumProp
        dim nomProp, tolProp
        dim enumVal, enumVals
        dim propExists, min_max
        dim rel

        set contentModel = fromObj.ownerModel
        if searchMode &#62; 1 then
          set fromProperties = fromObj.getNeighbourObjects(0, GLOBAL_Type_hasCPR, GLOBAL_Type_CPR)
          set toProperties   = toObj.getNeighbourObjects(0, GLOBAL_Type_EkaHasProperty, GLOBAL_Type_EkaProperty)
          for each fromProp in fromProperties
            &#39; Check if property already exists in toObj
            propExists = false
            for each toProp in toProperties
                if toProp.name = fromProp.name then
                    propExists = true
                    exit for
                end if
            next
            if not propExists then
                &#39; Create the property
                set toProp = instModel.newPart(GLOBAL_Type_EkaProperty)
                call toProp.setNamedValue(&#34;name&#34;, fromProp.getNamedValue(&#34;name&#34;))
                set rel = contentModel.newRelationship(GLOBAL_Type_EkaHasProperty, toObj, toProp)
                &#39; Set the decimals value
                call toProp.setNamedValue(&#34;comments&#34;, fromProp.getNamedValue(&#34;decimals&#34;))
                &#39; Set the unit value
                call toProp.setNamedValue(&#34;unit&#34;, fromProp.getNamedValue(&#34;unit&#34;))
                &#39; Get min_max option
                min_max = fromProp.getNamedValue(&#34;min_max&#34;).getInteger
                select case min_max
                    case 0
                        set minProp = instModel.newPart(GLOBAL_Type_EkaProperty)
                        call minProp.setNamedStringValue(&#34;name&#34;, &#34;Minimum&#34;)
                        set rel = contentModel.newRelationship(GLOBAL_Type_EkaHasParameter, toProp, minProp)
                    case 1
                        set maxProp = instModel.newPart(GLOBAL_Type_EkaProperty)
                        call maxProp.setNamedStringValue(&#34;name&#34;, &#34;Maximum&#34;)
                        set rel = contentModel.newRelationship(GLOBAL_Type_EkaHasParameter, toProp, maxProp)
                    case 2
                        set minProp = instModel.newPart(GLOBAL_Type_EkaProperty)
                        call minProp.setNamedStringValue(&#34;name&#34;, &#34;Minimum&#34;)
                        set rel = contentModel.newRelationship(GLOBAL_Type_EkaHasParameter, toProp, minProp)
                        set maxProp = instModel.newPart(GLOBAL_Type_EkaProperty)
                        call maxProp.setNamedStringValue(&#34;name&#34;, &#34;Maximum&#34;)
                        set rel = contentModel.newRelationship(GLOBAL_Type_EkaHasParameter, toProp, maxProp)
                    case 3
                        set nomProp = instModel.newPart(GLOBAL_Type_EkaProperty)
                        call nomProp.setNamedStringValue(&#34;name&#34;, &#34;Nominal&#34;)
                        set rel = contentModel.newRelationship(GLOBAL_Type_EkaHasParameter, toProp, nomProp)
                    case 4
                        set nomProp = instModel.newPart(GLOBAL_Type_EkaProperty)
                        call nomProp.setNamedStringValue(&#34;name&#34;, &#34;Nominal&#34;)
                        set rel = contentModel.newRelationship(GLOBAL_Type_EkaHasParameter, toProp, nomProp)
                        set tolProp = instModel.newPart(GLOBAL_Type_EkaProperty)
                        call tolProp.setNamedStringValue(&#34;name&#34;, &#34;Tolerance&#34;)
                        set rel = contentModel.newRelationship(GLOBAL_Type_EkaHasParameter, toProp, tolProp)
                    case 5
                        set minProp = instModel.newPart(GLOBAL_Type_EkaProperty)
                        call minProp.setNamedStringValue(&#34;name&#34;, &#34;Minimum&#34;)
                        set rel = contentModel.newRelationship(GLOBAL_Type_EkaHasParameter, toProp, minProp)
                        set maxProp = instModel.newPart(GLOBAL_Type_EkaProperty)
                        call maxProp.setNamedStringValue(&#34;name&#34;, &#34;Maximum&#34;)
                        set rel = contentModel.newRelationship(GLOBAL_Type_EkaHasParameter, toProp, maxProp)
                        set nomProp = instModel.newPart(GLOBAL_Type_EkaProperty)
                        call nomProp.setNamedStringValue(&#34;name&#34;, &#34;Nominal&#34;)
                        set rel = contentModel.newRelationship(GLOBAL_Type_EkaHasParameter, toProp, nomProp)
                        set tolProp = instModel.newPart(GLOBAL_Type_EkaProperty)
                        call tolProp.setNamedStringValue(&#34;name&#34;, &#34;Tolerance&#34;)
                        set rel = contentModel.newRelationship(GLOBAL_Type_EkaHasParameter, toProp, tolProp)
                end select
            end if
          next
        end if
        if searchMode &#60;&#62; 2 then
          set fromProperties = fromObj.getNeighbourObjects(0, GLOBAL_Type_hasCP, GLOBAL_Type_CP)
          set toProperties   = toObj.getNeighbourObjects(0, GLOBAL_Type_EkaHasProperty, GLOBAL_Type_EkaProperty)
          for each fromProp in fromProperties
            &#39; Check if property already exists in toObj
            propExists = false
            for each toProp in toProperties
                if toProp.name = fromProp.name then
                    propExists = true
                    exit for
                end if
            next
            if not propExists then
                &#39; Create the property
                set toProp = instModel.newPart(GLOBAL_Type_EkaProperty)
                call toProp.setNamedValue(&#34;name&#34;, fromProp.getNamedValue(&#34;name&#34;))
                set rel = contentModel.newRelationship(GLOBAL_Type_EkaHasProperty, toObj, toProp)
                &#39; Check for enums
                set enumVals = fromProp.getNeighbourObjects(0, GLOBAL_Type_hasCPV, GLOBAL_Type_CPV)
                for each enumVal in enumVals
                    set enumProp = instModel.newPart(GLOBAL_Type_EkaProperty)
                    call enumProp.setNamedValue(&#34;value&#34;, enumVal.getNamedValue(&#34;name&#34;))
                    set rel = contentModel.newRelationship(GLOBAL_Type_EkaHasAllowedValue, toProp, enumProp)
                next
            end if
          next
        end if
    End Sub

&#39;-----------------------------------------------------------
    Private Function copyProp(fromProp, toObj, instModel, noValues)
        dim contentModel
        dim toProp
        dim rel
        dim toParam, fromParam, fromParams
        dim constrained, constrains
        dim enumVal, enumVals
        dim enumProp

        set contentModel = toObj.ownerModel
        set toProp = instModel.newPart(GLOBAL_Type_EkaProperty)
        call toProp.setNamedStringValue(&#34;name&#34;, fromProp.title)
        call toProp.setNamedStringValue(&#34;unit&#34;, fromProp.getNamedStringValue(&#34;unit&#34;))
        call toProp.setNamedStringValue(&#34;comments&#34;, fromProp.getNamedStringValue(&#34;comments&#34;))
        if not noValues then
            call toProp.setNamedStringValue(&#34;value&#34;, fromProp.getNamedStringValue(&#34;value&#34;))
        end if
        set rel = contentModel.newRelationship(GLOBAL_Type_EkaHasProperty, toObj, toProp)
        set fromParams = fromProp.getNeighbourObjects(0, GLOBAL_Type_EkaHasParameter, GLOBAL_Type_EkaProperty)
        for each fromParam in fromParams
            &#39; Set parameter values
            set toParam = instModel.newPart(GLOBAL_Type_EkaProperty)
            call toParam.setNamedStringValue(&#34;name&#34;, fromParam.title)
            call toParam.setNamedStringValue(&#34;unit&#34;, fromParam.getNamedStringValue(&#34;unit&#34;))
            if not noValues then
                call toParam.setNamedStringValue(&#34;value&#34;, fromParam.getNamedStringValue(&#34;value&#34;))
            end if
            set rel = contentModel.newRelationship(GLOBAL_Type_EkaHasParameter, toProp, toParam)
        next
        &#39; Check for constrains
        set constrains = fromProp.getNeighbourObjects(1, GLOBAL_Type_constrains, GLOBAL_Type_AnyObject)
        for each constrained in constrains
            set rel = contentModel.newRelationship(GLOBAL_Type_constrains, constrained, toProp)
        next
        &#39; Check for enums
        set enumVals = fromProp.getNeighbourObjects(0, GLOBAL_Type_EkaHasAllowedValue, GLOBAL_Type_EkaProperty)
        for each enumVal in enumVals
            set enumProp = instModel.newPart(GLOBAL_Type_EkaProperty)
            call enumProp.setNamedValue(&#34;value&#34;, enumVal.getNamedValue(&#34;value&#34;))
            set rel = contentModel.newRelationship(GLOBAL_Type_EkaHasAllowedValue, toProp, enumProp)
        next
        set copyProp = toProp
    End Function

&#39;-----------------------------------------------------------
    Public Function calculateReqProperties(inst)
        dim instModel
        dim rel, rels
        dim reqType, instType
        dim ccRuleEngine
        dim rule, rules

        set instModel = inst.parent
        set rels = inst.getNeighbourRelationships(0, GLOBAL_Type_EkaIs)
        if rels.count &#62; 0 then set reqType = rels(1).target
        if isValid(reqType) then
            set rels = reqType.getNeighbourRelationships(0, GLOBAL_Type_EkaIs)
            if rels.count &#62; 0 then set instType = rels(1).target

            &#39; Get rules on instType
            set ccRuleEngine = new CC_RuleEngine
            set rules = instType.getNeighbourObjects(0, GLOBAL_Type_invokes, GLOBAL_Type_Rule)
            if rules.count &#62; 0 then
                dim ruleStatus
                for each rule in rules
                    if ccRuleEngine.isCalculatingRule(rule) then
                        dim found

                        found = false
                        set rels = currentInst.getNeighbourRelationships(0, GLOBAL_Type_invokes)
                        for each rel in rels
                            if rel.target.uri = rule.uri then
                                found = true
                                exit for
                            end if
                        next
                        if not found then
                            dim model1
                            &#39; Connect invokeRel from currentInst to rule
                            set model1 = currentInst.ownerModel
                            set rel = model1.newRelationship(GLOBAL_Type_invokes, currentInst, rule)
                        end if
                    end if
                next
                ruleStatus = true
                for i = 1 to 10
                    call ccRuleEngine.clearRuleStatus(currentInst)
                    for each rule in rules
                        call ccRuleEngine.executeRule(currentInst, rule, ccRuleEngine.MODE_EXECUTE)
                        ruleStatus = currentInst.getNamedValue(&#34;ruleStatus&#34;).getInteger
                    next
                    if ruleStatus = false then exit for
                next
            end if
            set ccRuleEngine = Nothing
        end if
    End Function

&#39;-----------------------------------------------------------
    Private Sub addLackingParameters(prop)
        dim instModel, contentModel
        dim param, params
        dim newProp
        dim rel
        dim nomFound, tolFound, minFound, maxFound

        nomFound = false
        tolFound = false
        minFound = false
        maxFound = false
        set params = prop.getNeighbourObjects(0, GLOBAL_Type_EkaHasParameter, GLOBAL_Type_EkaProperty)
        for each param in params
            if param.title = &#34;Nominal&#34; then nomFound = true
            if param.title = &#34;Tolerance&#34; then tolFound = true
            if param.title = &#34;Minimum&#34; then minFound = true
            if param.title = &#34;Maximum&#34; then maxFound = true
        next
        set contentModel = prop.ownerModel
        set instModel = prop.parent
        if not minFound then
            set newProp = instModel.newPart(GLOBAL_Type_EkaProperty)
            call newProp.setNamedStringValue(&#34;name&#34;, &#34;Minimum&#34;)
            set rel = contentModel.newRelationship(GLOBAL_Type_EkaHasParameter, prop, newProp)
        end if
        if not maxFound then
            set newProp = instModel.newPart(GLOBAL_Type_EkaProperty)
            call newProp.setNamedStringValue(&#34;name&#34;, &#34;Maximum&#34;)
            set rel = contentModel.newRelationship(GLOBAL_Type_EkaHasParameter, prop, newProp)
        end if
        if not nomFound then
            set newProp = instModel.newPart(GLOBAL_Type_EkaProperty)
            call newProp.setNamedStringValue(&#34;name&#34;, &#34;Nominal&#34;)
            set rel = contentModel.newRelationship(GLOBAL_Type_EkaHasParameter, prop, newProp)
        end if
        if not tolFound then
            set newProp = instModel.newPart(GLOBAL_Type_EkaProperty)
            call newProp.setNamedStringValue(&#34;name&#34;, &#34;Tolerance&#34;)
            set rel = contentModel.newRelationship(GLOBAL_Type_EkaHasParameter, prop, newProp)
        end if
    End Sub

&#39;-----------------------------------------------------------
    Public Sub aggregateValues(ccObj, aggregate, aggrType, projectObject)
        dim prop, properties
        dim param, params, outParams
        dim member, members
        dim memberProp, memberProps
        dim rule, rules
        dim expression, expressions
        dim model
        dim rel
        dim ekaInst
        dim minVal0, maxVal0, nomVal0, tolVal0
        dim minVal1, maxVal1, nomVal1, tolVal1
        dim i, found

        &#39; Clear previous values
        set properties = aggregate.getNeighbourObjects(0, GLOBAL_Type_EkaHasProperty, GLOBAL_Type_EkaProperty)
        for each prop in properties
            set params = prop.getNeighbourObjects(0, GLOBAL_Type_EkaHasParameter, GLOBAL_Type_EkaProperty)
            for each param in params
                set model = param.ownerModel
                call model.deleteObject(param)
            next
            set model = prop.ownerModel
            call model.deleteObject(prop)
        next
        &#39; Handle role specific parameters
        if Len(parameterRule) &#62; 0 then
            &#39;Find the specified parameters
            set rules = ccObj.getNeighbourObjects(0, GLOBAL_Type_invokes, GLOBAL_Type_Rule)
            for each rule in rules
                if rule.title = parameterRule then
                    &#39; Find expression object
                    set expressions = rule.getNeighbourObjects(0, GLOBAL_Type_hasExpr, GLOBAL_Type_Expr)
                    for each expression in expressions
                        set params = expression.getNeighbourObjects(1, GLOBAL_Type_inputToExpr1,GLOBAL_Type_CCParam)
                        set outParams = expression.getNeighbourObjects(0, GLOBAL_Type_outputFromExpr,GLOBAL_Type_CCParam)
                        for each param in outParams
                            call params.addLast(param)
                        next
                        exit for
                    next
                end if
            next
        end if
        &#39; Connect to aggrType
        set model = aggregate.ownerModel
        set rel = model.newRelationship(GLOBAL_Type_EkaIs, aggregate, aggrType)
        &#39; Build property list of aggregate properties
        set properties = aggrType.getNeighbourObjects(0, GLOBAL_Type_EkaHasProperty, GLOBAL_Type_EkaProperty)
        i = 1
        for each prop in properties
            if isValid(params) then
                found = false
                for each param in params
                    if param.title = prop.title then
                        found = true
                        exit for
                    end if
                next
                if found then
                    i = i + 1
                else
                    properties.removeAt(i)
                end if
            end if
        next
        &#39; Create new properties to store the aggregated values
        for each prop in properties
            dim aggrProp

            set aggrProp = copyProp(prop, aggregate, projectObject, true)
            call addLackingParameters(aggrProp)
        next
        &#39; Prepare aggregation
        set properties = aggregate.getNeighbourObjects(0, GLOBAL_Type_EkaHasProperty, GLOBAL_Type_EkaProperty)
        set members    = aggregate.getNeighbourObjects(0, GLOBAL_Type_EkaHasPart, GLOBAL_Type_CCObject)
        &#39; Do the aggregation
        set ekaInst = new EKA_Instance
        for each prop in properties
            if not ekaInst.getNumericParamValue(prop, &#34;Minimum&#34;, minVal0) then minVal0 = Empty
            if not ekaInst.getNumericParamValue(prop, &#34;Maximum&#34;, maxVal0) then maxVal0 = Empty
            if not ekaInst.getNumericParamValue(prop, &#34;Nominal&#34;, nomVal0) then nomVal0 = Empty
            if not ekaInst.getNumericParamValue(prop, &#34;Tolerance&#34;, nomVal0) then tolVal0 = Empty
            for each member in members
                set memberProps = member.getNeighbourObjects(0, GLOBAL_Type_EkaHasProperty, GLOBAL_Type_EkaProperty)
                for each memberProp in memberProps
                    if memberProp.title = prop.title then
                        minVal1 = Empty
                        maxVal1 = Empty
                        nomVal1 = Empty
                        tolVal1 = Empty
                        &#39; Get the values
                        if ekaInst.getNumericParamValue(memberProp, &#34;Minimum&#34;, minVal1) then
                            if isEmpty(minVal0) then minVal0 = minVal1
                            if minVal1 &#60; minVal0 then minVal0 = minVal1
                        end if
                        if ekaInst.getNumericParamValue(memberProp, &#34;Maximum&#34;, maxVal1) then
                            if isEmpty(maxVal0) then maxVal0 = maxVal1
                            if maxVal1 &#62; maxVal0 then maxVal0 = maxVal1
                        end if
                        if ekaInst.getNumericParamValue(memberProp, &#34;Nominal&#34;, nomVal1) then
                            tolVal1 = 0
                            minVal1 = nomVal1
                            maxVal1 = nomVal1
                            if ekaInst.getNumericParamValue(memberProp, &#34;Tolerance&#34;, tolVal1) then
                                minVal1 = nomVal1 * (1 - tolVal1/100)
                                maxVal1 = nomVal1 * (1 + tolVal1/100)
                            end if
                        end if
                        if isEmpty(minVal0) then minVal0 = minVal1
                        if isEmpty(maxVal0) then maxVal0 = maxVal1
                        if minVal1 &#60; minVal0 then minVal0 = minVal1
                        if maxVal1 &#62; maxVal0 then maxVal0 = maxVal1
                        if tolVal1 &#62; tolVal0 then tolVal0 = tolVal1
                        exit for
                    end if
                next
            next
            if not (isEmpty(minVal0) and isEmpty(maxVal0)) then
                if isEmpty(minVal0) then
                    nomVal0 = Empty
                elseif isEmpty(maxVal0) then
                    nomVal0 = Empty
                else
                    nomVal0 = (minVal0 + maxVal0) / 2
                    &#39;tolVal0 = (maxVal0 - minVal0) / 2
                    &#39;tolVal0 = 100 * tolVal0 / nomVal0
                end if
                call ekaInst.setNumericParamValue(prop, &#34;Minimum&#34;, minVal0)
                call ekaInst.setNumericParamValue(prop, &#34;Maximum&#34;, maxVal0)
                call ekaInst.setNumericParamValue(prop, &#34;Nominal&#34;, nomVal0)
                call ekaInst.setNumericParamValue(prop, &#34;Tolerance&#34;, Empty)
            end if
        next
        call updateViewInstance(ccObj, aggregate, Nothing, projectObject, 1)
    End Sub

&#39;-----------------------------------------------------------
    Private Sub aggregateNumericPropertyValue(aggrProp, memberProp)
        dim i

        set ekaInst = new EKA_Instance
        for i = 1 to 4
            sval0 = ekaInst.getParameterValue(aggrProp, parameterNames(i))
            sval1 = ekaInst.getParameterValue(memberProp, parameterNames(i))
            if isNumeric(sval0) then numVal0 = CDbl(sval0)
            if isNumeric(sval1) then numVal1 = CDbl(sval1)
            numVal0 = numVal0 + numVal1
            call ekaInst.setParameterValue(memberProp, parameterNames(i), CStr(numVal0))
        next

    End Sub

&#39;-----------------------------------------------------------
    Public Function updateViewInstance(ccObject, inst, subInst, instModel, delOption)
        dim contentModel
        dim prop, props
        dim param, params, outParams
        dim vp, viewProp, viewProps
        dim unit, value, minVal, maxVal
        dim rel
        dim subInstance, subInstances
        dim rule, rules
        dim expression, expressions
        dim found, refresh

        if parameterRule = &#34;Refresh&#34; then refresh = true
        set contentModel = inst.ownerModel
        if not isEnabled(subInst) then
            set props = inst.getNeighbourObjects(0, GLOBAL_Type_EkaHasProperty, GLOBAL_Type_EkaProperty)
        else
            set props = subInst.getNeighbourObjects(0, GLOBAL_Type_EkaHasProperty, GLOBAL_Type_EkaProperty)
        end if

        if not refresh and Len(parameterRule) &#62; 0 then
            &#39;Find the role specific parameters
            set rules = ccObject.getNeighbourObjects(0, GLOBAL_Type_invokes, GLOBAL_Type_Rule)
            for each rule in rules
                if rule.title = parameterRule then
                    &#39; Find expression object
                    set expressions = rule.getNeighbourObjects(0, GLOBAL_Type_hasExpr, GLOBAL_Type_Expr)
                    for each expression in expressions
                        set params = expression.getNeighbourObjects(1, GLOBAL_Type_inputToExpr1,GLOBAL_Type_CCParam)
                        set outParams = expression.getNeighbourObjects(0, GLOBAL_Type_outputFromExpr,GLOBAL_Type_CCParam)
                        for each param in outParams
                            call params.addLast(param)
                        next
                        exit for
                    next
                end if
            next
        end if

        i = 1
        for each prop in props
            if isValid(params) then
                found = false
                for each param in params
                    if param.title = prop.title then
                        found = true
                        exit for
                    end if
                next
                if found then
                    i = i + 1
                else
                    props.removeAt(i)
                end if
            end if
        next

        if delOption &#62; 0 then
            &#39; Remove old ViewProperties
            set viewProps = inst.getNeighbourObjects(0, GLOBAL_Type_CCHasProperty, GLOBAL_Type_CCProperty)
            for each viewProp in viewProps
                call contentModel.deleteObject(viewProp)
            next
        end if

        for each prop in props
            &#39; Find ViewProperty if it exists
            set viewProp = Nothing
            set viewProps = inst.getNeighbourObjects(0, GLOBAL_Type_CCHasProperty, GLOBAL_Type_CCProperty)
            for each vp in viewProps
                if vp.title = prop.title then
                    set viewProp = vp
                    exit for
                end if
            next
            if not refresh and not isEnabled(viewProp) then
                &#39; Create ViewProperty
                set viewProp = instModel.newPart(GLOBAL_Type_CCProperty)
                viewProp.title = prop.title
                set rel = contentModel.newRelationship(GLOBAL_Type_CCHasProperty, inst, viewProp)
            end if
&#39;stop

            if isEnabled(viewProp) then
                dim decimals

                &#39; Set decimals
                decimals = getDecimals(prop)
                if Len(decimals) = 0 then decimals = 3
                &#39; Set unit
                unit = prop.getNamedStringValue(&#34;unit&#34;)
                if Len(unit) &#62; 0 then call viewProp.setNamedStringValue(&#34;unit&#34;, unit)
                &#39; Set value
                value = prop.getNamedStringValue(&#34;value&#34;)
                if Len(value) &#62; 0 then call viewProp.setNamedStringValue(&#34;min&#34;, value)
                &#39; Set min and max values
                set params = prop.getNeighbourObjects(0, GLOBAL_Type_EkaHasParameter, GLOBAL_Type_EkaProperty)
                for each param in params
                    if param.title = &#34;Minimum&#34; then
                        minVal = param.getNamedStringValue(&#34;value&#34;)
                        if Len(minVal) &#62; 0 then
                            if isNumeric(minVal) then
                                minVal = FormatNumber(minVal, decimals)
                                call viewProp.setNamedStringValue(&#34;min&#34;, minVal)
                            end if
                        else
                            call viewProp.setNamedStringValue(&#34;min&#34;, &#34;&#34;)
                        end if
                    elseif param.title = &#34;Maximum&#34; then
                        maxVal = param.getNamedStringValue(&#34;value&#34;)
                        if Len(maxVal) &#62; 0 then
                            if isNumeric(maxVal) then
                                maxVal = FormatNumber(maxVal, decimals)
                                call viewProp.setNamedStringValue(&#34;max&#34;, maxVal)
                            end if
                        else
                            call viewProp.setNamedStringValue(&#34;max&#34;, &#34;&#34;)
                        end if
                    elseif param.title = &#34;Nominal&#34; then
                        maxVal = param.getNamedStringValue(&#34;value&#34;)
                        if Len(maxVal) &#62; 0 then
                            if isNumeric(maxVal) then
                                maxVal = FormatNumber(maxVal, decimals)
                                call viewProp.setNamedStringValue(&#34;nominal&#34;, maxVal)
                            end if
                        else
                            call viewProp.setNamedStringValue(&#34;nominal&#34;, &#34;&#34;)
                        end if
                    elseif param.title = &#34;Tolerance&#34; then
                        maxVal = param.getNamedStringValue(&#34;value&#34;)
                        if Len(maxVal) &#62; 0 then
                            if isNumeric(maxVal) then
                                maxVal = FormatNumber(maxVal, 0)
                                call viewProp.setNamedStringValue(&#34;tolerance&#34;, maxVal)
                            end if
                        else
                            call viewProp.setNamedStringValue(&#34;tolerance&#34;, &#34;&#34;)
                        end if
                    end if
                next
            end if
        next
        &#39; Handle subInstances
        set subInstances = inst.getNeighbourObjects(0, GLOBAL_Type_EkaHasMember, inst.type)
        for each subInstance in subInstances
            call updateViewInstance(inst, subInstance, instModel, delOption)
        next

    End Function

&#39;-----------------------------------------------------------
    Private Function getDecimals(prop)
        dim decimals

        getDecimals = 3
        decimals = prop.getNamedStringValue(&#34;comments&#34;)
        if Len(decimals) &#62; 0 then
            if isNumeric(decimals) then
                getDecimals = CInt(decimals)
            end if
        end if
    End Function

&#39;-----------------------------------------------------------
    Public Function findInstance(instType, instName)
        dim inst, instances

        set findInstance = Nothing
        if isEnabled(instType) then
            set instances = instType.getNeighbourObjects(1, GLOBAL_Type_EkaIs, productType)
            for each inst in instances
                if inst.title = instName then
                    set findInstance = inst
                    exit for
                end if
            next
        end if

    End Function

&#39;-----------------------------------------------------------
    Public Function findInstanceType(instTypeName, instTypeModel)
        dim instanceTypeName
        dim part, parts

        set findInstanceType = Nothing
        if isEnabled(instTypeModel) then
            &#39;Find type definition
            set parts = instTypeModel.parts
            for each part in parts
                if part.type.inherits(productType) then
                    if part.title = instTypeName then
                        &#39; Type definition is found
                        set findInstanceType = part
                        exit for
                    end if
                end if
            next
        end if
    End Function

&#39;-----------------------------------------------------------
    Public Function findInstanceModel(projectObject, instTypeName)
        dim spaceObj
        dim modelObj, models
        dim instanceTypeName

        set findInstanceModel = Nothing

        if isEnabled(projectObject) then
            instanceTypeName = projectObject.title &#38; &#34;:&#34; &#38; instTypeName
            set spaceObj = findInstanceTypeModel(projectObject)
            if isEnabled(spaceObj) then
                &#39; Component type model was found
                &#39; Try to find corresponding instance type model
                set models = spaceObj.parts
                for each modelObj in models
                    if modelObj.title = instanceTypeName then
                        &#39; Instance type model exists
                        set findInstanceModel = modelObj
                        exit function
                    end if
                next
                &#39; Instance type model does not exist, create a new one
                set modelObj = spaceObj.newPart(GLOBAL_Type_EkaSpace)
                modelObj.title = instanceTypeName
                set findInstanceModel = modelObj
                exit function
            end if
        end if

    End Function

&#39;-----------------------------------------------------------
    Public Function findInstanceTypeModel(projectObject)
        dim contentModel
        dim spaceObj, spaces

        set findInstanceTypeModel = Nothing
        if isEnabled(projectObject) then
            set contentModel = projectObject.ownerModel
            set spaces = contentModel.parts
            &#39; Find component type model
            for each spaceObj in spaces
                if spaceObj.type.uri = GLOBAL_Type_EkaSpace.uri then
                    if spaceObj.title = projectObject.title then
                        set findInstanceTypeModel = spaceObj
                        exit function
                    end if
                end if
            next
        end if
    End Function

&#39;-----------------------------------------------------------
    Private Sub Class_Initialize()
        dim ccGlobals

        &#39; Initialize global variables
        set ccGlobals = new CC_Globals
        set ccGlobals = Nothing
        parameterRule = &#34;&#34;
        &#39; Initialize local variables
        set productType      = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cppd/languages/productelement.kmd#ObjType_CPPD:ProductElement_UUID&#34;)
        set productInstType  = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cppd/languages/productelement.kmd#ObjType_CPPD:ProductElement_UUID&#34;)
        &#39; Properties
        RuleEvaluatedToProperty = &#34;ruleEvaluatedTo&#34;
        IsSubcomponentProperty  = &#34;isSubcomponent&#34;
        
        parameterNames(1) = &#34;value&#34;
        parameterNames(2) = &#34;Minimum&#34;
        parameterNames(3) = &#34;Maximum&#34;
        parameterNames(4) = &#34;Nominal&#34;
        parameterNames(5) = &#34;Tolerance&#34;

    End Sub

End Class
</string>
  </valueset>
 </object>

 <object id="_002aso401a4kb0fdgoef">
  <valueset size="11" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="http://xml.activeknowledgemodeling.com/cvw/languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Class CC_Status</string>
   <string name="description"></string>
   <integer name="textFitFlag">0</integer>
   <integer name="dbms-admin.commitFlag">0</integer>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="journalID"></string>
   <string name="comments"></string>
   <string name="script">option explicit


&#39;-----------------------------------------------------------
&#39;-----------------------------------------------------------
Class CC_Status


    &#39; Variant parameters
    Public Title                        &#39; String

    Private status                      &#39; -1 = Undefined,
                                        &#39;  0 = Requirements missing
                                        &#39;  1 = Solution missing
                                        &#39;  2 = Solution partially fulfilled
                                        &#39;  3 = Solution fulfilled
    Public explanation                                        

&#39;-----------------------------------------------------------
    Public Function getObjectStatus(subject)
        dim stat
        dim noParams, noUndefined, noReqMissing
        dim noSolMissing, noSolPartial, noSolFilled
        dim includedInConfig, includedProp
        dim parameter, parameters
        dim value, values
        dim paramObj, paramStatus
        dim rel, rels
        dim req, reqs

        stat = -1
        noParams     = 0
        noUndefined  = 0
        noReqMissing = 0
        noSolMissing = 0
        noSolPartial = 0
        noSolFilled  = 0

        &#39; First check object status
        if isEnabled(subject) then
            if true then
                on error resume next
                set includedProp = subject.type.getProperty(&#34;ruleEvaluatedTo&#34;)
            end if
            if isValid(includedProp) then
                includedInConfig = subject.getNamedValue(&#34;ruleEvaluatedTo&#34;).getInteger
                if includedInConfig = 0 then
                    getObjectStatus = 1
                    exit function
                end if
            end if
            &#39; Find the parameters
            set rels = subject.neighbourRelationships
            for each rel in rels
                if rel.origin.uri = subject.uri then
                    set paramObj = rel.target
                    if paramObj.type.inherits(GLOBAL_Type_CCParam) then
                        noParams = noParams + 1
                        paramStatus = paramObj.getNamedValue(&#34;status&#34;).getInteger
                        select case paramStatus
                            case -1     noUndefined  = noUndefined + 1
                            case  0     noReqMissing = noReqMissing + 1
                            case  1     noSolMissing = noSolMissing + 1
                            case  2     noSolPartial = noSolPartial + 1
                            case  3     noSolFilled  = noSolFilled + 1
                        end select
                    end if
                end if
            next
        end if

        if noUndefined = noParams then
            if noParams &#62; 0 then
                stat = 0
            else
                stat = -1
            end if
        elseif noReqMissing &#62; 0 then
            stat = 0
        elseif noSolMissing &#62; 0 then
            stat = 1
        elseif noSolFilled = noParams then
            stat = 3
        else
            stat = 2
        end if

        getObjectStatus = stat

    End Function

&#39;-----------------------------------------------------------
    Public Function getParameterStatus(parameter, hasParameterType)
        dim rel, parentRels
        dim parentObj
        dim paramVal
        dim req, reqs
        dim paramIsValid

        &#39; Get parameter parent
        getParameterStatus = -1
        set parentRels = parameter.getNeighbourRelationships(1, hasParameterType)
        if parentRels.count = 0 then &#39; added HDJ Aug 29
			exit function
        end if
        paramIsValid = -1
        set parentObj = parentRels(1).origin
        set paramVal = getParameterValue(parentObj, parameter)
        &#39; Check if parameter is constrained
        set reqs = parameter.getNeighbourObjects(1, GLOBAL_Type_constrains, GLOBAL_Type_CPR)
        if reqs.count &#62; 0 then
            if isEnabled(paramVal) then
                for each req in reqs
                    if paramIsValid then
                        paramIsValid = checkParameterValue(paramVal, req)
                    end if
                next
                getParameterStatus = paramIsValid
            else
                if not isEnabled(paramVal) then
                    getParameterStatus = 1
                elseif Len(paramVal.title) &#62; 0 then
                    getParameterStatus = 1
                end if
            end if
        else
            getParameterStatus = 0
        end if
    End Function

&#39;-----------------------------------------------------------
    Private Function getParameterValue(obj, parameter)
        dim value, values
        dim def, defs
        dim paramVal
        
        set getParameterValue = Nothing
		if not isValid(obj) then &#39; added HDJ Aug 29
			exit function
        end if
        set values = obj.getNeighbourObjects(0, GLOBAL_Type_EkaHasValue, GLOBAL_Type_EkaValue)
        for each value in values
            set defs = value.getNeighbourObjects(0, GLOBAL_Type_EkaHasDefinition, GLOBAL_Type_CCParam)
            if defs.count &#62; 0 then
                for each def in defs
                    if def.uri = parameter.uri then
                        paramVal = value.getNamedStringValue(&#34;value&#34;)
                        if Len(paramVal) &#62; 0 then
                            set getParameterValue = value
                            exit function
                        end if
                        exit for
                    end if
                next
            elseif value.title = parameter.title then
                paramVal = value.getNamedStringValue(&#34;value&#34;)
                if Len(paramVal) &#62; 0 then
                    set getParameterValue = value
                    exit function
                end if
            end if
        next
    End Function

&#39;-----------------------------------------------------------
    Private Function checkParameterValue(paramValue, reqParam)
        dim minVal, maxVal, nomVal, tolVal
        dim reqValMin, reqValMax, reqValNom, reqValTol
        dim paramVal
        dim sval, fval

        on error resume next
        checkParameterValue = 3
        if isEnabled(reqParam) then
            sval = paramValue.title
            if sval = &#34;Undefined&#34; then
                checkParameterValue = 0
                exit function
            elseif Len(sval) = 0 then
                checkParameterValue = 0
                exit function
            end if
            if isNumeric(sval) then
                fval = CDbl(sval)
                minVal = reqParam.getNamedStringValue(&#34;minimum&#34;)
                if Len(minVal) &#62; 0 then
                    if isNumeric(minVal) then
                        reqValMin = CDbl(minVal)
                    end if
                end if
                maxVal = reqParam.getNamedStringValue(&#34;maximum&#34;)
                if Len(maxVal) &#62; 0 then
                    if isNumeric(maxVal) then
                        reqValMax = CDbl(maxVal)
                    end if
                end if
                nomVal = reqParam.getNamedStringValue(&#34;nominal&#34;)
                if Len(nomVal) &#62; 0 then
                    if isNumeric(nomVal) then
                        reqValNom = CDbl(nomVal)
                    end if
                    tolVal = reqParam.getNamedStringValue(&#34;tolerance&#34;)
                    if Len(tolVal) &#62; 0 then
                        if isNumeric(tolVal) then
                            reqValTol = CDbl(tolVal) * (reqValNom / 100)
                            reqValMin = reqValNom - reqValTol
                            reqValMax = reqValNom + reqValTol
                        end if
                    end if
                end if
                if isEmpty(reqValMin) and isEmpty(reqValMax) then
                    checkParameterValue = -1
                elseif isEmpty(reqValMin) then
                    if fval &#60;= reqValMax then
                        checkParameterValue = 3
                    else
                        checkParameterValue = 1
                    end if
                elseif isEmpty(reqValMax) then
                    if fval &#62;= reqValMin then
                        checkParameterValue = 3
                    else
                        checkParameterValue = 1
                    end if
                elseif reqValMin &#60;= fval and fval &#60;= reqValMax then
                    checkParameterValue = 3
                elseif fval &#60; reqValMin or fval &#62; reqValMax then
                    checkParameterValue = 1
                else
                    checkParameterValue = 2
                end if
            end if
        end if
    End Function

&#39;-----------------------------------------------------------
    Public Function calculateStatus(dsObj)
        dim status
        dim coStatus, dpStatus, ppStatus

        status = -1 &#39; Undefined

        &#39; Get constraint parameter status, -1 = Undefined, 2 = Partially given, 3 = All given
        set objects = dsObj.getNeighbourObjects(0, GLOBAL_Type_constrainedBy, GLOBAL_Type_CO)
        if objects.count &#62; 0 then
            coStatus = getParameterStatus(dsObj, coObjects, GLOBAL_Type_hasCPR, GLOBAL_Type_CPR)
            if coStatus &#62; 0 and coStatus &#60; 3 then
                status = 0
            elseif coStatus = 3 then
                status = 1
            end if
        end if
        &#39; Get design parameter status, -1 = Undefined, 2 = Partially given, 3 = All given
        set dsObjects = metis.newInstanceList
        dsObjects.addLast dsObj
        dpStatus = getParameterStatus(dsObj, dsObjects, GLOBAL_Type_hasDP, GLOBAL_Type_DP)
        &#39; Get performance parameter status, -1 = Undefined, 2 = Partially given, 3 = All given
        ppStatus = getParameterStatus(dsObj, dsObjects, GLOBAL_Type_hasPP, GLOBAL_Type_PP)

        if dpStatus &#60; 3 or ppStatus &#60; 3 then
            status = 2
        elseif dpStatus = 3 and ppStatus = 3 then
            status = 3
        end if

        calculateStatus = status
    End Function

&#39;-----------------------------------------------------------
    Public Function getRequirementStatus(currentObj, familyObj)
        dim prop, properties
        dim typeProp, typeProps
        dim reqType, reqTypes
        dim ival
        dim status, propStatus
        dim noProps, noTrue, noFalse, noPartly, noUndefined

        &#39; Current object is a CC requirement or CC instance
        &#39; The reqType object is a CC requirement or CC instance

        noProps = 0
        noTrue  = 0
        noFalse = 0
        noPartly = 0
        noUndefined = 0

        &#39; Get the properties
        set properties = currentObj.getNeighbourObjects(0, GLOBAL_Type_CCHasProperty, GLOBAL_Type_CCProperty)
        if isEnabled(familyObj) then
            dim i, found
            set typeProps  = familyObj.getNeighbourObjects(0, GLOBAL_Type_CCHasProperty, GLOBAL_Type_CCProperty)
            &#39; Remove properties without type definition
            i = 1
            for each prop in properties
                found = false
                for each typeProp in typeProps
                    if typeProp.title = prop.title then
                        found = true
                        exit for
                    end if
                next
                if not found then
                    properties.removeAt(i)
                else
                    i = i + 1
                end if
            next
            for each prop in properties
                for each typeProp in typeProps
                    if typeProp.title = prop.title then
                        explanation = &#34;&#34;
                        propStatus = isAllowedValue(prop, typeProp, explanation)
                        if propStatus = -1 then noUndefined = noUndefined + 1
                        if propStatus = 0  then noFalse = noFalse + 1
                        if propStatus = 1  then noPartly = noPartly + 1
                        if propStatus = 2  then noTrue = noTrue + 1
                    end if
                next
            next
        else
            &#39; Find reqType
            set reqTypes = currentObj.getNeighbourObjects(0, GLOBAL_Type_EkaIs, GLOBAL_Type_AnyObject)
            for each reqType in reqTypes
                set typeProps  = reqType.getNeighbourObjects(0, GLOBAL_Type_CCHasProperty, GLOBAL_Type_CCProperty) 
                for each prop in properties
                    for each typeProp in typeProps
                        if typeProp.title = prop.title then
                            explanation = &#34;&#34;
                            propStatus = isAllowedValue(prop, typeProp, explanation)
                            if propStatus = -1 then noUndefined = noUndefined + 1
                            if propStatus = 0  then noFalse = noFalse + 1
                            if propStatus = 1  then noPartly = noPartly + 1
                            if propStatus = 2  then noTrue = noTrue + 1
                        end if
                    next
                next
            next
        end if
        noProps = properties.count
        noProps = noProps - noUndefined
        if noProps = 0 then
            status = -1
        elseif noTrue = noProps then
            status = 3
        elseif noFalse = noProps then
            status = 1
        else
            status = 2
        end if
        getRequirementStatus = status

    End Function

&#39;-----------------------------------------------------------
    Public Function getViewPropertyStatus(prop, familyObj)
        dim parentRels
        dim parentObj
        dim propName
        dim reqParam, reqParams
        dim reqType, reqTypes
        dim param, params
        dim constrains
        dim status

        status = -1
        getViewPropertyStatus = status

        if not isEnabled(prop) then
            exit function
        end if

        &#39; Get property parent
        set parentRels = prop.getNeighbourRelationships(1, GLOBAL_Type_CCHasProperty)
        if parentRels.count = 0 then
			exit function
        end if
        set parentObj = parentRels(1).origin
        propName = prop.title
        &#39; Check if specification
        if parentObj.type.inherits(GLOBAL_Type_Specification) then
            &#39; Find params
            set params = parentObj.getNeighbourObjects(0, GLOBAL_Type_EkaHasProperty, GLOBAL_Type_EkaProperty)
            for each param in params
                if param.title = propName then
                    &#39; Check for constrains
                    set constrains = param.getNeighbourObjects(1, GLOBAL_Type_constrains, GLOBAL_Type_AnyObject)
                    for each reqParam in constrains
                        getViewPropertyStatus = isAllowedValue(param, reqParam, explanation)
                        exit function
                    next
                end if
            next
        else
            if isEnabled(familyObj) then
                set reqParams = familyObj.getNeighbourObjects(0, GLOBAL_Type_CCHasProperty, GLOBAL_Type_CCProperty)
                for each reqParam in reqParams
                    if reqParam.title = propName then
                        explanation = &#34;&#34;
                        getViewPropertyStatus = isAllowedValue(prop, reqParam, explanation)
                        exit function
                    end if
                next
            else
                &#39; Find reqType
                set reqTypes = parentObj.getNeighbourObjects(0, GLOBAL_Type_EkaIs, GLOBAL_Type_AnyObject)
                for each reqType in reqTypes
                    set reqParams = reqType.getNeighbourObjects(0, GLOBAL_Type_CCHasProperty, GLOBAL_Type_CCProperty)
                    for each reqParam in reqParams
                        if reqParam.title = propName then
                            explanation = &#34;&#34;
                            getViewPropertyStatus = isAllowedValue(prop, reqParam, explanation)
                            exit function
                        end if
                    next
                next
            end if
        end if
        getViewPropertyStatus = status

    End Function

&#39;-----------------------------------------------------------
    Private Function isAllowedValue(prop, typeProp, explanation)     &#39; -1 = Undefined,  0 = Not within range,    1 = Partly within range,    2 = Within range
        dim propValue, propMinValue, propMaxValue, propNomValue, propTolValue
        dim typePropValue, typePropMinValue, typePropMaxValue, typePropNomValue, typePropTolValue
        dim smin, smax, snom, stol
        dim isAllowed1, isAllowed2

        isAllowedValue = -1

        propValue = prop.getNamedStringValue(&#34;value&#34;)
        typePropValue = typeProp.getNamedStringValue(&#34;value&#34;)

        if Len(propValue) &#62; 0 then
            if Len(typePropValue) &#62; 0 then
                if propValue = typePropValue then
                    isAllowedValue = 2
                else
                    isAllowedValue = 0
                end if
                exit function
            end if
        end if

        if Len(propValue) = 0 then
            on error resume next
            smin = prop.getNamedStringValue(&#34;min&#34;)
            smax = prop.getNamedStringValue(&#34;max&#34;)
            snom = prop.getNamedStringValue(&#34;nominal&#34;)
            stol = prop.getNamedStringValue(&#34;tolerance&#34;)

            if Len(smin) &#62; 0 then
                if isNumeric(smin) then
                    propMinValue = CDbl(smin)
                end if
            else
                propMinValue = -99999
            end if
            if Len(smax) &#62; 0 then
                if isNumeric(smax) then
                    propMaxValue = CDbl(smax)
                end if
            else
                propMaxValue = -99999
            end if
            if Len(snom) &#62; 0 then
                if isNumeric(snom) then
                    propNomValue = CDbl(snom)
                    if Len(stol) &#62; 0 then
                        if isNumeric(stol) then
                            propTolValue = CDbl(stol)
                            propTolValue = propTolValue * propNomValue / 100
                            propMinValue = propNomValue - propTolValue
                            propMaxValue = propNomValue + propTolValue
                        end if
                    &#39;else
                    &#39;    propMinValue = propNomValue
                    &#39;    propMaxValue = propNomValue
                    end if
                end if
            end if
        end if

        if Len(typePropValue) = 0 then
            smin = typeProp.getNamedStringValue(&#34;min&#34;)
            smax = typeProp.getNamedStringValue(&#34;max&#34;)
            snom = typeProp.getNamedStringValue(&#34;nominal&#34;)
            stol = typeProp.getNamedStringValue(&#34;tolerance&#34;)
            if Len(smin) = 0 and Len(smax) = 0 and Len(snom) = 0 then
                isAllowedValue = -1
                explanation = &#34;&#34;
                exit function
            end if
            if Len(smin) &#62; 0 then
                if isNumeric(smin) then
                    typePropMinValue = CDbl(smin)
                end if
            else
                typePropMinValue = -99999
            end if
            if Len(smax) &#62; 0 then
                if isNumeric(smax) then
                    typePropMaxValue = CDbl(smax)
                end if
            else
                typePropMaxValue = -99999
            end if
            if Len(snom) &#62; 0 then
                if isNumeric(snom) then
                    typePropNomValue = CDbl(snom)
                    if Len(stol) &#62; 0 then
                        if isNumeric(stol) then
                            typePropTolValue = CDbl(stol)
                            typePropTolValue = typePropTolValue * typePropNomValue / 100
                            typePropMaxValue = typePropNomValue - typePropTolValue
                            typePropMaxValue = typePropNomValue + typePropTolValue
                        end if
                    &#39;else
                    &#39;    typePropMinValue = typePropNomValue
                    &#39;    typePropMaxValue = typePropNomValue
                    end if
                end if
            end if
        end if

        isAllowedValue = 0
        if propMinValue = -99999 and propMaxValue = -99999 then
            isAllowed1 = 5    &#39; Target
            isAllowed2 = 5    &#39; Target
        elseif propMinValue = -99999 then
            isAllowed1 = -9    &#39; Undefined
            if typePropMinValue &#60;&#62; -99999 then
                isAllowed1 = -1
            end if
        elseif typePropMinValue = -99999 then
            isAllowed1 = 0
            if typePropMaxValue &#60;&#62; -99999 then
                if propMinValue &#62; typePropMaxValue then
                    isAllowed1 = 2  &#39; Too high
                end if
            end if
        elseif propMinValue = typePropMinValue then
            isAllowed1 = 0      &#39; Exact
        elseif propMinValue &#62; typePropMinValue then
            isAllowed1 = 1      &#39; Higher
            if typePropMaxValue &#60;&#62; -99999 then
                if propMinValue &#62; typePropMaxValue then
                    isAllowed1 = 2  &#39; Too high
                    if typePropMinValue = -99999 then
                        explanation = &#34;Specified range: ... - &#34; &#38; typePropMaxValue
                    else
                        explanation = &#34;Specified range: &#34; &#38; typePropMinValue &#38; &#34; - &#34; &#38; typePropMaxValue
                    end if
                end if
            end if
        else
            isAllowed1 = -1     &#39; Too low
        end if
        if propMinValue = -99999 and propMaxValue = -99999 then
            isAllowed1 = 5    &#39; Target
            isAllowed2 = 5    &#39; Target
        elseif propMaxValue = -99999 then
            isAllowed2 = -9
        elseif typePropMaxValue = -99999 then
            isAllowed2 = 0
            if typePropMinValue &#60;&#62; -99999 then
                if propMaxValue &#60; typePropMinValue then
                    isAllowed2 = -2     &#39; Too low
                end if
            end if
        elseif propMaxValue = typePropMaxValue then
            isAllowed2 = 0      &#39; Exact
        elseif propMaxValue &#60; typePropMaxValue then
            isAllowed2 = -1      &#39; Lower
            if typePropMinValue &#60;&#62; -99999 then
                if propMaxValue &#60; typePropMinValue then
                    isAllowed2 = -2     &#39; Too low
                    if typePropMaxValue = -99999 then
                        explanation = &#34;Specified range: &#34; &#38; typePropMinValue &#38; &#34; - ...&#34;
                    else
                        explanation = &#34;Specified range: &#34; &#38; typePropMinValue &#38; &#34; - &#34; &#38; typePropMaxValue
                    end if
                end if
            end if
        else
            isAllowed2 = 1      &#39; Too high
        end if
        if propMaxValue &#60;&#62; -99999 and propMaxValue &#60; propMinValue then
            isAllowed1 = 2
            isAllowed2 = -2
        end if

        &#39; Calculate allowedValue and explanation
        if typePropMinValue = -99999 then
            explanation = &#34;Specified range: &#34; &#38; &#34;...  -  &#34; &#38; typePropMaxValue
        elseif typePropMaxValue = -99999 then
            explanation = &#34;Specified range: &#34; &#38; typePropMinValue &#38; &#34;  -  ...&#34;
        else
            explanation = &#34;Specified range: &#34; &#38; typePropMinValue &#38; &#34;  -  &#34; &#38; typePropMaxValue
        end if

        if isAllowed1 = 5 and isAllowed2 = 5 then
            if isEmpty(propNomValue) then
                isAllowedValue = -1
                explanation = &#34;&#34;
                exit function
            elseif typePropMinValue &#60;&#62; -99999 and typePropMaxValue &#60;&#62; -99999 then
                if propNomValue &#62;= typePropMinValue and propNomValue &#60;= typePropMaxValue then
                    isAllowedValue = 2
                    exit function
                end if
            elseif typePropMinValue &#60;&#62; -99999  then
                if propNomValue &#62;= typePropMinValue then
                    isAllowedValue = 2
                    exit function
                end if
            elseif typePropMaxValue &#60;&#62; -99999 then
                if propNomValue &#60;= typePropMaxValue then
                    isAllowedValue = 2
                    exit function
                end if
            end if
        end if
        if isAllowed1 = -9 and isAllowed2 = -9 then
            isAllowedValue = -1
        elseif isAllowed1 = 2 and isAllowed2 = -2 then
            isAllowedValue = 0
            explanation = &#34;Specified range: Illegal specification&#34;
            exit function
        end if
        if isAllowed1 = -9 and isAllowed2 = -1 then
            isAllowedValue = 1
            explanation = &#34;Specified range: ... - &#34; &#38; typePropMaxValue
            exit function
        end if
        dim testMode
        testMode = 2
        if testMode = 1 then
            if isAllowed1 = -9 and isAllowed2 = -2 then isAllowedValue = 0      &#39; Undefined and Too low
            if isAllowed1 = -9 and isAllowed2 = -1 then isAllowedValue = 1      &#39; Undefined and Lower
            if isAllowed1 = -9 and isAllowed2 =  0 then isAllowedValue = 2      &#39; Undefined and Exact
            if isAllowed1 =  1 and isAllowed2 =  0 then isAllowedValue = 2      &#39; Higher and Exact
            if isAllowed1 =  0 and isAllowed2 = -9 then isAllowedValue = 2      &#39; Exact and Undefined
            if isAllowed1 =  0 and isAllowed2 = -1 then isAllowedValue = 2      &#39; Exact and Lower
            if isAllowed1 =  0 and isAllowed2 =  0 then isAllowedValue = 2      &#39; Exact and Exact
            if isAllowed1 =  0 and isAllowed2 =  1 then isAllowedValue = 2      &#39; Exact and Higher
            if isAllowed1 = -1 and isAllowed2 =  0 then isAllowedValue = 2      &#39; Lower and Exact
            if isAllowed1 = -1 and isAllowed2 =  1 then isAllowedValue = 2      &#39; Lower and Higher
            if isAllowedValue = 2 then
                &#39;explanation = &#34;&#34;
                exit function
            end if

            if isAllowed1 =  2 and isAllowed2 = -9 then isAllowedValue = 0      &#39; Too high and Undefined
            if isAllowed1 =  2 and isAllowed2 = -2 then isAllowedValue = 0      &#39; Too high and Too low
            if isAllowed1 =  2 and isAllowed2 = -1 then isAllowedValue = 0      &#39; Too high and Lower
            if isAllowed1 =  2 and isAllowed2 =  0 then isAllowedValue = 0      &#39; Too high and Exact
            if isAllowed1 =  2 and isAllowed2 =  1 then isAllowedValue = 0      &#39; Too high and Higher
            if isAllowed1 =  1 and isAllowed2 =  1 then isAllowedValue = 1      &#39; Higher and Higher
            if isAllowed1 =  1 and isAllowed2 = -1 then isAllowedValue = 1      &#39; Higher and Lower
            if isAllowed1 =  1 and isAllowed2 = -9 then isAllowedValue = 1      &#39; Higher and Undefined
            if isAllowed1 = -1 and isAllowed2 = -9 then isAllowedValue = 1      &#39; Lower and Undefined
            if isAllowed1 = -1 and isAllowed2 = -1 then isAllowedValue = 1      &#39; Lower and Lower

        elseif testMode = 2 then
            if isAllowed1 = -9 and isAllowed2 = -2 then isAllowedValue = 0      &#39; Undefined and Too low
            if isAllowed1 = -9 and isAllowed2 = -1 then isAllowedValue = 1      &#39; Undefined and Lower
            if isAllowed1 = -9 and isAllowed2 =  0 then isAllowedValue = 2      &#39; Undefined and Exact
            if isAllowed1 =  1 and isAllowed2 =  0 then isAllowedValue = 2      &#39; Higher and Exact
            if isAllowed1 =  0 and isAllowed2 = -9 then isAllowedValue = 2      &#39; Exact and Undefined
            if isAllowed1 =  0 and isAllowed2 = -1 then isAllowedValue = 2      &#39; Exact and Lower
            if isAllowed1 =  0 and isAllowed2 =  0 then isAllowedValue = 2      &#39; Exact and Exact
            if isAllowed1 =  0 and isAllowed2 =  1 then isAllowedValue = 1      &#39; Exact and Higher
            if isAllowed1 = -1 and isAllowed2 =  0 then isAllowedValue = 1      &#39; Lower and Exact
            if isAllowed1 = -1 and isAllowed2 =  1 then isAllowedValue = 0      &#39; Lower and Higher
            if isAllowedValue = 2 then
                &#39;explanation = &#34;&#34;
                exit function
            end if

            if isAllowed1 =  2 and isAllowed2 = -9 then isAllowedValue = 0      &#39; Too high and Undefined
            if isAllowed1 =  2 and isAllowed2 = -2 then isAllowedValue = 0      &#39; Too high and Too low
            if isAllowed1 =  2 and isAllowed2 = -1 then isAllowedValue = 0      &#39; Too high and Lower
            if isAllowed1 =  2 and isAllowed2 =  0 then isAllowedValue = 0      &#39; Too high and Exact
            if isAllowed1 =  2 and isAllowed2 =  1 then isAllowedValue = 0      &#39; Too high and Higher
            if isAllowed1 =  1 and isAllowed2 =  1 then isAllowedValue = 1      &#39; Higher and Higher
            if isAllowed1 =  1 and isAllowed2 = -1 then isAllowedValue = 2      &#39; Higher and Lower
            if isAllowed1 =  1 and isAllowed2 = -9 then isAllowedValue = 2      &#39; Higher and Undefined
            if isAllowed1 = -1 and isAllowed2 = -9 then isAllowedValue = 0      &#39; Lower and Undefined
            if isAllowed1 = -1 and isAllowed2 = -1 then isAllowedValue = 1      &#39; Lower and Lower
        end if
    End Function

&#39;-----------------------------------------------------------
    Private Sub Class_Initialize()
        dim ccGlobals

        &#39; Initialize global variables
        set ccGlobals = new CC_Globals

    End Sub

&#39;-----------------------------------------------------------
    Public Sub Class_Terminate()
    End Sub

End Class
</string>
  </valueset>
 </object>

 <object id="_002aso401i6upaple394">
  <valueset size="11" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="http://xml.activeknowledgemodeling.com/cvw/languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Function getParameterStatusValue, getObjectStatusValue</string>
   <string name="description"></string>
   <integer name="textFitFlag">0</integer>
   <integer name="dbms-admin.commitFlag">0</integer>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="journalID"></string>
   <string name="comments"></string>
   <string name="script">option explicit

Function getParameterStatusValue

    dim status
    dim ccGlobals, ccStatus
    dim currentModel, currentInstance
    dim instType
    dim hasParamType
    dim intVal

    getParameterStatusValue = -1

    set ccGlobals = new CC_Globals

    set currentModel = metis.currentModel
    set currentInstance = currentModel.currentInstance

&#39;stop
    if isEnabled(currentInstance) then
        set instType = currentInstance.type
        select case instType.uri
            case GLOBAL_Type_VP.uri             set hasParamType = GLOBAL_Type_hasVP
            case GLOBAL_Type_DP.uri             set hasParamType = GLOBAL_Type_hasDP
            case GLOBAL_Type_PP.uri             set hasParamType = GLOBAL_Type_hasPP
            case GLOBAL_Type_CP.uri             set hasParamType = GLOBAL_Type_hasCP
            case GLOBAL_Type_CPR.uri            set hasParamType = GLOBAL_Type_hasCPR
            case GLOBAL_Type_FP.uri             set hasParamType = GLOBAL_Type_hasFP
            case GLOBAL_Type_EkaProperty.uri    set harParamType = GLOBAL_Type_EkaHasProperty
        end select

        if isValid(hasParamType) then
            set ccStatus = new CC_Status
            getParameterStatusValue = ccStatus.getParameterStatus(currentInstance, hasParamType)
            set ccStatus = Nothing
        end if
    end if

End Function

Function getObjectStatusValue

    dim currentModel, currentInstance
    dim ccGlobals, ccStatus

    set ccGlobals = new CC_Globals

    set currentModel = metis.currentModel
    set currentInstance = currentModel.currentInstance

    set ccStatus = new CC_Status
    getObjectStatusValue = ccStatus.getObjectStatus(currentInstance)

End Function



</string>
  </valueset>
 </object>

 <object id="_002aso60119pghvjcnu1">
  <valueset size="11" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="http://xml.activeknowledgemodeling.com/cvw/languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Function getCcObject</string>
   <string name="description"></string>
   <integer name="textFitFlag">0</integer>
   <integer name="dbms-admin.commitFlag">0</integer>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="journalID"></string>
   <string name="comments"></string>
   <string name="script">    Function getCcObject(inst, instView)
        dim instType
        dim actionType, hasContentModelType, hasInstanceContext2Type
        dim parentView
        dim view, views
        dim workarea, workareas
        dim wObject, workWindow
        dim indx
        dim instContext, instContexts, context
        dim connector, connectors
        dim contentModel
        dim part, parts
        dim rel

        set getCcObject = Nothing

        set actionType          = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/action_objects.kmd#ObjType_CVW:Button_UUID&#34;)
        set hasContentModelType = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/spec_relships.kmd#RelType_CVW:hasModelContext2_UUID&#34;)
        set hasInstanceContext2Type = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/spec_relships.kmd#RelType_CVW:hasInstanceContext2_UUID&#34;)

        set instType = inst.type
        if instType.inherits(actionType) then
            set workWindow = getWorkWindowView(inst, instView)
            &#39; Find configurable component
            if isValid(workWindow) then
                set wObject = workWindow.instance
                set instContexts = wObject.getNeighbourRelationships(0, hasInstanceContext2Type)
                if instContexts.count &#62; 0 then
                    set rel = instContexts(1)
                    if isEnabled(rel) then
                        set instContext = rel.target
                        if instContext.type.inherits(GLOBAL_Type_CC) then
                            set getCcObject = instContext
                        else
                            set contentModel = instContext.ownerModel
                        end if
                    end if
                else
                    set connectors = wObject.getNeighbourObjects(0, hasContentModelType, GLOBAL_Type_AnyObject)
                    if connectors.count &#62; 0 then
                        set connector = connectors(1)
                        set contentModel = getModelFromConnector(connector)
                    end if
                end if
            else
                &#39; Ask for model
                modelContext = &#34;SubModel&#34;
                modelViewName = &#34;ContentModel&#34;
                set connector = findInstModel2(modelContext, modelViewName)
                if isValid(connector) then
                    set contentModel = getModelFromConnector(connector)
                end if
            end if
            if isValid(contentModel) then
                set parts = contentModel.parts
                for each part in parts
                    if part.type.inherits(GLOBAL_Type_CC) then
                        set getCcObject = part
                        exit for
                    end if
                next
            end if
        end if
    End Function
</string>
  </valueset>
 </object>

 <object id="_002aso6011arpeo6pctt">
  <valueset size="11" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="http://xml.activeknowledgemodeling.com/cvw/languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Function getCcParameterValue</string>
   <string name="description"></string>
   <integer name="textFitFlag">0</integer>
   <integer name="dbms-admin.commitFlag">0</integer>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="journalID"></string>
   <string name="comments"></string>
   <string name="script">    Function getCcParameterValue(obj, paramName)
        dim valueType, hasValueType, hasDefinitionType
        dim defObj, valObj, valObjects
        dim rel, defRels

        set valueType         = metis.findType(&#34;http://xml.activeknowledgemodeling.com/eka/languages/eka_value.kmd#ObjType_EKA:StringValue_UUID&#34;)
        set hasValueType      = metis.findType(&#34;http://xml.activeknowledgemodeling.com/eka/languages/eka_relships.kmd#RelType_EKA:HasValue_UUID&#34;)
        set hasDefinitionType = metis.findType(&#34;http://xml.activeknowledgemodeling.com/eka/languages/eka_relships.kmd#RelType_EKA:HasDefinition_UUID&#34;)

        getCcParameterValue = &#34;&#34;
        set valObjects = obj.getNeighbourObjects(0, hasValueType, valueType)
        for each valObj in valObjects
            set defRels = valObj.getNeighbourRelationships(0, hasDefinitionType)
            for each rel in defRels
                set defObj = rel.target
                if defObj.title = paramName then
                    getCcParameterValue = valObj.getNamedStringValue(&#34;value&#34;)
                    exit function
                end if
            next
        next
    End Function
</string>
  </valueset>
 </object>

 <object id="_002asoe0199qp5dntu8p">
  <valueset size="11" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="http://xml.activeknowledgemodeling.com/cvw/languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Class CC_Globals</string>
   <string name="description"></string>
   <integer name="textFitFlag">0</integer>
   <integer name="dbms-admin.commitFlag">0</integer>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="journalID"></string>
   <string name="comments"></string>
   <string name="script">option explicit


&#39;-----------------------------------------------------------
&#39;-----------------------------------------------------------
Class CC_Globals


    Private Sub Class_Initialize()
        dim ekaGlobals

        if not isEmpty(ccGlobalsInitialized) then exit Sub

        set ekaGlobals = new EKA_Globals
        
        &#39; Base types
        set GLOBAL_Type_CCFamily   = metis.findType(&#34;http://xml.chalmers.se/class/cc_family.kmd#CC_family&#34;)
        set GLOBAL_Type_CCObject   = metis.findType(&#34;http://xml.chalmers.se/class/cc_object.kmd#CC_object&#34;)
        set GLOBAL_Type_CCInstance = metis.findType(&#34;http://xml.chalmers.se/class/cc_instance.kmd#CC_instance&#34;)
        set GLOBAL_Type_CCProperty = metis.findType(&#34;http://xml.chalmers.se/class/cc_property.kmd#CC_property&#34;)
        set GLOBAL_Type_CCParameter = metis.findType(&#34;http://xml.chalmers.se/class/cc_parameter.kmd#parameter&#34;)
        set GLOBAL_Type_CCParam    = metis.findType(&#34;http://xml.chalmers.se/class/cc_parameter.kmd#CC_parameter&#34;)
        set GLOBAL_Type_CCValue    = metis.findType(&#34;http://xml.chalmers.se/class/cc_value.kmd#CC_value&#34;)
        set GLOBAL_Type_CCHasProperty = metis.findType(&#34;http://xml.chalmers.se/class/cc_has_property.kmd#CC_has_property&#34;)
        &#39; Component structure types
        set GLOBAL_Type_CC     = metis.findType(&#34;http://xml.chalmers.se/class/configurable_component.kmd#configurable_component&#34;)
        set GLOBAL_Type_CS     = metis.findType(&#34;http://xml.chalmers.se/class/composition_set.kmd#composition_set&#34;)
        set GLOBAL_Type_CE     = metis.findType(&#34;http://xml.chalmers.se/class/composition_element.kmd#composition_element&#34;)
        set GLOBAL_Type_CR     = metis.findType(&#34;http://xml.chalmers.se/class/composition_request.kmd#composition_request&#34;)
        set GLOBAL_Type_hasCS  = metis.findType(&#34;http://xml.chalmers.se/class/is_composed_using.kmd#is_composed_using&#34;)
        set GLOBAL_Type_hasCE  = metis.findType(&#34;http://xml.chalmers.se/class/has_composition_element.kmd#has_composition_element&#34;)
        set GLOBAL_Type_hasCR  = metis.findType(&#34;http://xml.chalmers.se/class/has_composition_request.kmd#has_composition_request&#34;)
        set GLOBAL_Type_usesCC = metis.findType(&#34;http://xml.chalmers.se/class/uses_configurable_component.kmd#uses_configurable_component&#34;)
        &#39; Design rationale types
        set GLOBAL_Type_CO     = metis.findType(&#34;http://xml.chalmers.se/class/constraint.kmd#constraint&#34;)
        set GLOBAL_Type_DS     = metis.findType(&#34;http://xml.chalmers.se/class/design_solution.kmd#design_solution&#34;)
        set GLOBAL_Type_FR     = metis.findType(&#34;http://xml.chalmers.se/class/functional_requirement.kmd#functional_requirement&#34;)
        set GLOBAL_Type_explains      = metis.findType(&#34;http://xml.chalmers.se/class/is_explained_by.kmd#Is_explained_by&#34;)
        set GLOBAL_Type_hasDS         = metis.findType(&#34;http://xml.chalmers.se/class/has_design_solution.kmd#has_design_solution&#34;)
        set GLOBAL_Type_solves        = metis.findType(&#34;http://xml.chalmers.se/class/is_solved_by.kmd#is_solved_by&#34;)
        set GLOBAL_Type_requires      = metis.findType(&#34;http://xml.chalmers.se/class/requires_function.kmd#requires_function&#34;)
        set GLOBAL_Type_constrainedBy = metis.findType(&#34;http://xml.chalmers.se/class/is_constrained_by.kmd#Is_constrained_by&#34;)
        &#39; Parameter types
        set GLOBAL_Type_CP     = metis.findType(&#34;http://xml.chalmers.se/class/constraint_parameter.kmd#constraint_parameter&#34;)
        set GLOBAL_Type_CPR    = metis.findType(&#34;http://xml.chalmers.se/class/constraint_parameter.kmd#constraint_parameter_range&#34;)
        set GLOBAL_Type_DP     = metis.findType(&#34;http://xml.chalmers.se/class/design_parameter.kmd#design_parameter&#34;)
        set GLOBAL_Type_FP     = metis.findType(&#34;http://xml.chalmers.se/class/functional_requirement_parameter.kmd#functional_requirement_parameter&#34;)
        set GLOBAL_Type_PP     = metis.findType(&#34;http://xml.chalmers.se/class/performance_parameter.kmd#performance_parameter&#34;)
        set GLOBAL_Type_VP     = metis.findType(&#34;http://xml.chalmers.se/class/variant_parameter.kmd#variant_parameter&#34;)
        set GLOBAL_Type_VAR    = metis.findType(&#34;http://xml.chalmers.se/class/variant_value.kmd#variant_value&#34;)
        set GLOBAL_Type_hasCP  = metis.findType(&#34;http://xml.chalmers.se/class/has_constraint_parameter.kmd#has_constraint_parameter&#34;)
        set GLOBAL_Type_hasCPR = metis.findType(&#34;http://xml.chalmers.se/class/has_constraint_parameter.kmd#has_constraint_parameter_range&#34;)
        set GLOBAL_Type_hasDP  = metis.findType(&#34;http://xml.chalmers.se/class/has_design_parameter.kmd#has_design_parameter&#34;)
        set GLOBAL_Type_hasFP  = metis.findType(&#34;http://xml.chalmers.se/class/has_functional_requirement_parameter.kmd#has_functional_requirement_parameter&#34;)
        set GLOBAL_Type_hasPP  = metis.findType(&#34;http://xml.chalmers.se/class/has_performance_parameter.kmd#has_performance_parameter&#34;)
        set GLOBAL_Type_hasVP  = metis.findType(&#34;http://xml.chalmers.se/class/has_variant_parameter.kmd#has_variant_parameter&#34;)
        set GLOBAL_Type_constrains = metis.findType(&#34;http://xml.chalmers.se/class/constrains_parameter.kmd#constrains_parameter&#34;)
        &#39; Parameter value types
        set GLOBAL_Type_CPV    = metis.findType(&#34;http://xml.chalmers.se/class/constraint_parameter_value.kmd#constraint_parameter_value&#34;)
        set GLOBAL_Type_DPV    = metis.findType(&#34;http://xml.chalmers.se/class/design_parameter_value.kmd#design_parameter_value&#34;)
        set GLOBAL_Type_FPV    = metis.findType(&#34;http://xml.chalmers.se/class/functional_requirement_parameter_value.kmd#functional_requirement_parameter_value&#34;)
        set GLOBAL_Type_PPV    = metis.findType(&#34;http://xml.chalmers.se/class/performance_parameter_value.kmd#performance_parameter_value&#34;)
        set GLOBAL_Type_VPV    = metis.findType(&#34;http://xml.chalmers.se/class/variant_parameter_value.kmd#variant_parameter_value&#34;)
        set GLOBAL_Type_hasCPV = metis.findType(&#34;http://xml.chalmers.se/class/has_constraint_parameter_value.kmd#has_constraint_parameter_value&#34;)
        set GLOBAL_Type_hasDPV = metis.findType(&#34;http://xml.chalmers.se/class/has_design_parameter_value.kmd#has_design_parameter_value&#34;)
        set GLOBAL_Type_hasFPV = metis.findType(&#34;http://xml.chalmers.se/class/has_functional_requirement_parameter_value.kmd#has_functional_requirement_parameter_value&#34;)
        set GLOBAL_Type_hasPPV = metis.findType(&#34;http://xml.chalmers.se/class/has_performance_parameter_value.kmd#has_performance_parameter_value&#34;)
        set GLOBAL_Type_hasVPV = metis.findType(&#34;http://xml.chalmers.se/class/has_variant_parameter_value.kmd#has_variant_parameter_value&#34;)
        set GLOBAL_Type_hasVAR = metis.findType(&#34;http://xml.chalmers.se/class/has_variant_value.kmd#has_variant_value&#34;)
        set GLOBAL_Type_inclPV = metis.findType(&#34;http://xml.chalmers.se/class/includes_parameter_value.kmd#includes_parameter_value&#34;)
        set GLOBAL_Type_usesVAR  = metis.findType(&#34;http://xml.chalmers.se/class/uses_variant.kmd#uses_variant&#34;)
        set GLOBAL_Type_usesVAR2 = metis.findType(&#34;http://xml.chalmers.se/class/uses_variant.kmd#uses_variant2&#34;)
        set GLOBAL_Type_hasDef   = metis.findType(&#34;http://xml.chalmers.se/class/has_definition.kmd#has_definition&#34;)
        &#39; Rule types
        set GLOBAL_Type_Rule      = metis.findType(&#34;http://xml.chalmers.se/class/rule.kmd#rule&#34;)
        set GLOBAL_Type_Expr      = metis.findType(&#34;http://xml.chalmers.se/class/rule_expression.kmd#expression&#34;)
        set GLOBAL_Type_Action    = metis.findType(&#34;http://xml.chalmers.se/class/rule_action.kmd#action&#34;)
        set GLOBAL_Type_Condition = metis.findType(&#34;http://xml.chalmers.se/class/rule_condition.kmd#condition&#34;)
        set GLOBAL_Type_inputTo1  = metis.findType(&#34;http://xml.chalmers.se/class/rule_condition.kmd#input_to&#34;)
        set GLOBAL_Type_inputTo2  = metis.findType(&#34;http://xml.chalmers.se/class/rule_condition.kmd#input_to_2&#34;)
        set GLOBAL_Type_inputTo3  = metis.findType(&#34;http://xml.chalmers.se/class/rule_condition.kmd#input_to_3&#34;)
        set GLOBAL_Type_outputTo  = metis.findType(&#34;http://xml.chalmers.se/class/rule_action.kmd#has_output&#34;)
        set GLOBAL_Type_inputToExpr1   = metis.findType(&#34;http://xml.chalmers.se/class/rule_expression.kmd#input_to&#34;)
        set GLOBAL_Type_inputToExpr2   = metis.findType(&#34;http://xml.chalmers.se/class/rule_expression.kmd#input_to_2&#34;)
        set GLOBAL_Type_outputFromExpr = metis.findType(&#34;http://xml.chalmers.se/class/rule_expression.kmd#output_to&#34;)
        set GLOBAL_Type_subjectOf = metis.findType(&#34;http://xml.chalmers.se/class/rule.kmd#subject_of_rule&#34;)
        set GLOBAL_Type_hasRule   = metis.findType(&#34;http://xml.chalmers.se/class/rule.kmd#has_rule&#34;)
        set GLOBAL_Type_hasExpr   = metis.findType(&#34;http://xml.chalmers.se/class/rule.kmd#has_expression&#34;)
        set GLOBAL_Type_ifThen    = metis.findType(&#34;http://xml.chalmers.se/class/rule.kmd#if_then&#34;)
        set GLOBAL_Type_hasAction = metis.findType(&#34;http://xml.chalmers.se/class/rule.kmd#has_action&#34;)
        set GLOBAL_Type_hasCondition   = metis.findType(&#34;http://xml.chalmers.se/class/rule.kmd#has_condition&#34;)
        set GLOBAL_Type_invokes        = metis.findType(&#34;http://xml.chalmers.se/class/rule.kmd#invokes_rule&#34;)
        set GLOBAL_Type_hasRuleContext = metis.findType(&#34;http://xml.chalmers.se/class/rule.kmd#has_rule_context&#34;)

        &#39; Configuration types
        set GLOBAL_Type_Product       = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cppd/languages/productelement.kmd#ObjType_CPPD:ProductElement_UUID&#34;)
        set GLOBAL_Type_Part          = metis.findType(&#34;http://xml.chalmers.se/class/cc_product.kmd#CC_product&#34;)
        set GLOBAL_Type_Requirement   = metis.findType(&#34;http://xml.chalmers.se/class/cc_requirement.kmd#CC_requirement&#34;)
        set GLOBAL_Type_Specification = metis.findType(&#34;http://xml.chalmers.se/class/cc_specification.kmd#CC_specification&#34;)

        &#39; Model type(s)
        set GLOBAL_Type_CcModel     = GLOBAL_Type_EkaSpace
        set GLOBAL_Type_CcProject   = GLOBAL_Type_EkaProject
        set GLOBAL_CC_CurrentFamily = Nothing
        set GLOBAL_CC_CurrentComponentFamily = Nothing
        GLOBAL_CC_Debug = false

        &#39; Methods
        set GLOBAL_Method_RuleExecute = metis.findMethod(&#34;http://xml.chalmers.se/methods/rule_methods.kmd#evaluateRule&#34;)
        set GLOBAL_Method_ExprExecute = metis.findMethod(&#34;http://xml.chalmers.se/methods/rule_methods.kmd#evaluateExpression&#34;)

        ccGlobalsInitialized = true

    End Sub
    
End Class

</string>
  </valueset>
 </object>

 <object id="_002asog01bb7crlgqs7i">
  <valueset size="11" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="http://xml.activeknowledgemodeling.com/cvw/languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Class CC_Configure</string>
   <string name="description"></string>
   <integer name="textFitFlag">0</integer>
   <integer name="dbms-admin.commitFlag">0</integer>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="journalID"></string>
   <string name="comments"></string>
   <string name="script">option explicit


&#39;-----------------------------------------------------------
&#39;-----------------------------------------------------------
Class CC_Configure

    &#39; Types
    Public productType

    &#39; Modes
    Public MODE_REQUIREMENT_TYPE
    Public MODE_SPECIFICATION_TYPE
    Public MODE_PART_TYPE

    &#39; Properties
    Private RuleEvaluatedToProperty
    Private IsSubcomponentProperty

    &#39; Class references
    Private ccRule
    Private ccRuleEngine

&#39;-----------------------------------------------------------
&#39;   Variant parameter code
&#39;-----------------------------------------------------------
    Public Sub setVariantParameters(ccObject, variantObject)
        dim parentObj
        dim value, values
        dim rel, rels
        dim param, hasParam
        dim val1, vals
        dim obj, objects
        dim newValue
        dim found

        &#39; Find the used parameters
        set parentObj = ccObject.parent
        set values = variantObject.getNeighbourObjects(0, GLOBAL_Type_inclPV, GLOBAL_Type_CCValue)
        for each value in values
            &#39; Find the corresponding parameter
            set rels = value.neighbourRelationships
            for each rel in rels
                if rel.target.uri = value.uri then
                    if rel.origin.type.inherits(GLOBAL_Type_CCParam) then
                        set param = rel.origin
                        set hasParam = rel
                        exit for
                    end if
                end if
            next
            if isEnabled(param) then
                set vals = param.getNeighbourObjects(1, GLOBAL_Type_EkaHasDefinition, GLOBAL_Type_EkaValue)
                for each val1 in vals
                    found = false
                    set objects = val1.getNeighbourObjects(1, GLOBAL_Type_EkaHasValue, GLOBAL_Type_EkaElement)
                    for each obj in objects
                        if obj.uri = ccObject.uri then
                            found = true
                            &#39; An old value exists, modify it
                            call val1.setNamedValue(&#34;value&#34;, value.getNamedValue(&#34;name&#34;))
                            exit for
                        end if
                    next
                    if not found then
                        &#39; Create a new value
                        set newValue = parentObj.newPart(GLOBAL_Type_EkaValue)
                        newValue.title = param.title
                        call newValue.setNamedStringValue(&#34;value&#34;, value.getNamedStringValue(&#34;name&#34;))
                        set rel = newValue.ownerModel.newRelationship(GLOBAL_Type_EkaHasValue, ccObject, newValue)
                    end if
                next
                if vals.count = 0 then
                    &#39; Create a new value
                    set newValue = parentObj.newPart(GLOBAL_Type_EkaValue)
                    newValue.title = param.title
                    call newValue.setNamedStringValue(&#34;value&#34;, value.getNamedStringValue(&#34;name&#34;))
                    set rel = newValue.ownerModel.newRelationship(GLOBAL_Type_EkaHasValue, ccObject, newValue)
                    set rel = newValue.ownerModel.newRelationship(GLOBAL_Type_EkaHasDefinition, newValue, param)
                end if
            end if
        next
    End Sub

&#39;-----------------------------------------------------------
&#39;   Configuration code
&#39;-----------------------------------------------------------
    Public Sub startConfigureCC(ccObject, variantName, projectObject)
        dim changed
        dim i

        changed = true
        for i = 1 to 10
            changed = startConfigureCC1(ccObject, variantName, projectObject, false)
            if not changed then exit for
        next
    End Sub

&#39;-----------------------------------------------------------
    Public Sub startConfigurePartStructure(ccObject, variantName, projectObject)
        call startConfigureCC1(ccObject, variantName, projectObject, true)
    End Sub

&#39;-----------------------------------------------------------
    Private Function startConfigureCC1(ccObject, variantName, projectObject, buildPartStructure)
        dim modelObj, modelObject
        dim recursive
        dim dsObjects
        dim product, products
        dim part, parts, ccPart
        dim partType
        dim changed, changed1, changed2, changed3

        if not isEnabled(ccObject) then
            exit function
        end if
        if buildPartStructure then
            recursive = false               &#39; Dette er nok ikke helt korrekt  !!!!!
        else
            recursive = true
        end if
        &#39; Do the configuration
        changed = false
        changed1 = configureFunctionMeans(ccObject)
        &#39;changed2 = configureDesignSolution(ccObject)
        changed3 = configureComposition(ccObject, recursive)
        if changed1 or changed2 or changed3 then changed = true

        &#39; Get name of configured variant
        if Len(variantName) = 0 then
            set dsObjects = findDesignSolutions(ccObject, true)
            if dsObjects.count = 1 then variantName = dsObjects(1).title
            if Len(variantName) = 0 then variantName = ccObject.title
        end if

        if not buildPartStructure then
            startConfigureCC1 = changed
            exit function
        end if

        &#39; Build the part structure
        if isObject(productType) then
            if isValid(productType) then
                set partType = productType
            end if
        end if
        if not isEnabled(partType) then
            set partType = getMetisInstanceType(MODE_PART_TYPE)
        end if
        if isEnabled(projectObject) then
            &#39; Find and delete part if it already exists
            set parts = projectObject.parts
            for each part in parts
                if part.type.inherits(partType) then
                    if part.title = variantName then
                        &#39; Delete old structure
                        call deletePartStructure(part, partType)
                        exit for
                    end if
                end if
            next
            set ccPart = projectObject.newPart(partType)
            ccPart.title = variantName
            call createPartStructure(projectObject, partType, ccPart, ccObject, true)
        end if
        startConfigureCC1 = changed
    End Function

&#39;-----------------------------------------------------------
    Public Sub configureCC(projectObject, ccPart, obj1, recursive)
        dim ccObj, obj
        dim partType

        set ccObj = obj1
        if isObject(productType) then
            if isValid(productType) then
                set partType = productType
            end if
        end if
        if not isEnabled(partType) then
            set partType = getMetisInstanceType(MODE_PART_TYPE)
        end if
        call configureFunctionMeans(ccObj)
        &#39;call configureDesignSolution(ccObj)
        call configureComposition(ccObj, false)
        call createPartStructure(projectObject, partType, ccPart, ccObj, recursive)
    End Sub

&#39;-----------------------------------------------------------
    Public Sub configureVariant(obj1)
        dim obj, obj2

        set obj2 = obj1
        call configureFunctionMeans(obj2)
        &#39;call configureDesignSolution(ccObj)
        call configureComposition(obj2, false)
    End Sub

&#39;-----------------------------------------------------------
    Public Sub configureVariant2(obj1)
        dim model
        dim ccObj, ccObjects
        dim varObject, obj
        dim varObj, usedVariants
        dim rel, rels

        set varObject = obj1
        set usedVariants = varObject.getNeighbourObjects(0, GLOBAL_Type_usesVAR2, GLOBAL_Type_VAR)
        for each varObj in usedVariants
            set ccObjects = varObj.getNeighbourObjects(1, GLOBAL_Type_hasVAR, GLOBAL_Type_CCObject)
            if ccObjects.count &#62; 0 then
                set ccObj = ccObjects(1)
                set rels = ccObj.getNeighbourRelationships(0, GLOBAL_Type_usesVAR)
                if rels.count &#62; 0 then
                    set rel = rels(1)
                    set rel.target = varObj
                else
                    set model = ccObj.ownerModel
                    set rel = model.newRelationship(GLOBAL_Type_usesVAR, ccObj, varObj)
                end if
                call setVariantParameters(ccObj, varObj)
                call configureVariant(ccObj)
            end if
        next

    End Sub

&#39;-----------------------------------------------------------
    Public Sub configureRequirementTypes(projectObject, obj1)
        dim ccObj, obj

        set ccObj = obj1
        call configureFunctionMeans(ccObj)
        call buildRequirementTypes(ccObj, projectObject)
    End Sub

&#39;-----------------------------------------------------------
    Public Function configureSpecificationTypes(projectObject, obj1)
        dim ccObj
        dim typeMode

        set ccObj = obj1
        typeMode = MODE_SPECIFICATION_TYPE
        set configureSpecificationTypes = buildInstanceTypes(ccObj, projectObject, typeMode)
    End Function

&#39;-----------------------------------------------------------
    Public Function buildPartTypes(obj1, projectObject)
        dim ccObj
        dim typeMode

        set ccObj = obj1
        typeMode = MODE_PART_TYPE
        set buildPartTypes = buildInstanceTypes(ccObj, projectObject, typeMode)
    End Function

&#39;-----------------------------------------------------------
    Private Function includedInConfig(inst)
        dim ival

        on error resume next
        includedInConfig = true
        if not isEnabled(inst) then
            includedInConfig = false
        end if
        ival = inst.getNamedValue(RuleEvaluatedToProperty).getInteger
        if not isEmpty(ival) then
            if ival = 0 then
                includedInConfig = false
            end if
        end if

    End Function

&#39;-----------------------------------------------------------
&#39;-----------------------------------------------------------
    Public Function getDesignSolution(obj1)
        dim ccObj
        dim designSolutions

        set getDesignSolution = Nothing
        set ccObj = obj1
        &#39; Find DS
        set designSolutions = getDesignSolutions(ccObj)
        if designSolutions.count &#62; 1 then
            set cvwSelectDialog = new CVW_SelectDialog
            cvwSelectDialog.singleSelect = true
            cvwSelectDialog.title = &#34;Select design solution&#34;
            cvwSelectDialog.heading = &#34;Select design solution&#34;
            set designSolutions = cvwSelectDialog.show(designSolutions)
        end if
        if designSolutions.count = 1 then
            set getDesignSolution = designSolutions(1)
        end if
    End Function

&#39;-----------------------------------------------------------
    Public Function getDesignSolutions(obj1)
        dim ccObj

        set ccObj = obj1
        &#39; Find DS
        set getDesignSolutions = findDesignSolutions(ccObj, true)
    End Function

&#39;-----------------------------------------------------------
    Public Function configureDesignSolution(obj1) &#39; Configures within one CC
        dim ccObj, dsObj, objects
        dim rels
        dim changed, changed1

        set ccObj = obj1
        changed = false
        &#39; Find DS
        set objects = findDesignSolutions(ccObj, true)
        for each dsObj in objects
            if isEnabled(dsObj) and includedInConfig(dsObj) then
                &#39; Configure DS
                changed1 = configureInstance(dsObj, ccRuleEngine.MODE_CONFIGURE)
                if changed1 then changed = true
            end if
        next
        configureDesignSolution = changed
    End Function

&#39;-----------------------------------------------------------
&#39;-----------------------------------------------------------
    Public Function configureFunctionMeans(obj1) &#39; Configures within one CC
        dim ccObj, obj, objects
        dim rels
        dim changed, changed1

        set ccObj = obj1
        changed = false
        &#39; Find top FR&#39;s
        set objects = ccObj.getNeighbourObjects(0, GLOBAL_Type_explains, GLOBAL_Type_FR)
        for each obj in objects
            if isEnabled(obj) then
                &#39; Check if the FR is required by a DS, if so this is not top
                set rels = obj.getNeighbourRelationships(1, GLOBAL_Type_requires)
                if rels.count = 0 then
                    &#39; Top FR
                    changed1 = configureFrDsC(obj)
                    if changed1 then changed = true
                end if
            end if
        next
        &#39; Find top C&#39;s
        set objects = ccObj.getNeighbourObjects(0, GLOBAL_Type_explains, GLOBAL_Type_CO)
        for each obj in objects
            if isEnabled(obj) then
                changed1 = configureInstance(obj, ccRuleEngine.MODE_CONFIGURE)
                if changed1 then changed = true
            end if
        next
        configureFunctionMeans = changed
    End Function

    Public Function configureFrDsC(obj1)
        dim frObj
        dim obj, objects
        dim rel, rel2, rels, relships
        dim dsObj
        dim changed, changed1

        changed = false
        &#39; FR
        set frObj = obj1
        if isEnabled(frObj) then
            &#39; Configure FR
            changed = configureInstance(frObj, ccRuleEngine.MODE_CONFIGURE)
            &#39; Then look for DSs
            set relships = frObj.getNeighbourRelationships(0, GLOBAL_Type_solves)
            for each rel in relships
                 if isEnabled(rel) then
                    &#39; FR is solved by DS
                    changed1 = configureInstance(rel, ccRuleEngine.MODE_CONFIGURE)
                    if changed1 then changed = true
                end if
            next
            &#39; Configure DS and C
            for each rel in relships
                 if isEnabled(rel) then
                    &#39; DS is found
                    set dsObj = rel.target
                    if isEnabled(dsObj) then
                        &#39; Find C
                        set objects = dsObj.getNeighbourObjects(0, GLOBAL_Type_constrainedBy, GLOBAL_Type_CO)
                        for each obj in objects
                            &#39; DS is constrained by C
                            if isEnabled(obj) then
                                &#39; Configure C
                                changed1 = configureInstance(obj, ccRuleEngine.MODE_CONFIGURE)
                                if changed1 then changed = true
                            end if
                        next
                        &#39; Configure DS
                        changed1 = configureInstance(dsObj, ccRuleEngine.MODE_CONFIGURE)
                        if changed1 then changed = true
                    end if
                end if
            next
            &#39; Check for next levels of FrDsC
            for each rel in relships
                 if isEnabled(rel) then
                    &#39; DS is found
                    set dsObj = rel.target
                    if isEnabled(dsObj) then
                        set rels = dsObj.getNeighbourRelationships(0, GLOBAL_Type_requires)
                        for each rel2 in rels
                            if isEnabled(rel2) then
                                changed1 = configureInstance(rel2, ccRuleEngine.MODE_CONFIGURE)
                                if changed1 then changed = true
                            end if
                        next
                        for each rel2 in rels
                            if isEnabled(rel2) then
                                changed1 = configureFrDsC(rel2.target)
                                if changed1 then changed = true
                            end if
                        next
                    end if
                end if
            next
        end if
        configureFrDsC = changed
    End Function

&#39;-----------------------------------------------------------
&#39;-----------------------------------------------------------
    Public Function configureComposition(obj1, recursive)
        dim ccObj
        dim rel, rels
        dim changed, changed1

        set ccObj = obj1
        call ccRule.transformRulesToScripts(ccObj)
        changed = ccRuleEngine.executeRules(ccObj, ccRuleEngine.MODE_CONFIGURE)
        set rels = ccObj.getNeighbourRelationships(0, GLOBAL_Type_hasCS)
        for each rel in rels
            changed1 = configureCS(rel, recursive)
            if changed1 then changed = true
        next
        configureComposition = changed
    End Function

    Private Function configureCS(rel1, recursive)
        dim obj
        dim relship
        dim rel, rels
        dim changed, changed1

        set relship = rel1
        call ccRule.transformRulesToScripts(relship)
        changed = ccRuleEngine.executeRules(relship, ccRuleEngine.MODE_CONFIGURE)
        set obj = relship.target
        call ccRule.transformRulesToScripts(obj)
        changed = ccRuleEngine.executeRules(obj, ccRuleEngine.MODE_CONFIGURE)
        set rels = obj.getNeighbourRelationships(0, GLOBAL_Type_hasCE)
        for each rel in rels
            changed1 = configureCE(rel, recursive)
            if changed1 then changed = true
        next
        configureCS = changed
    End Function

    Private Function configureCE(rel1, recursive)
        dim obj
        dim relship
        dim rel, rels
        dim changed, changed1

        set relship = rel1
        call ccRule.transformRulesToScripts(relship)
        changed = ccRuleEngine.executeRules(relship, ccRuleEngine.MODE_CONFIGURE)
        set obj = relship.target
        call ccRule.transformRulesToScripts(obj)
        changed = ccRuleEngine.executeRules(obj, ccRuleEngine.MODE_CONFIGURE)
        set rels = obj.getNeighbourRelationships(0, GLOBAL_Type_hasCR)
        for each rel in rels
            changed1 = configureCR(rel, recursive)
            if changed1 then changed = true
        next
        configureCE = changed
    End Function

    Private Function configureCR(rel1, recursive)
        dim obj
        dim relship
        dim rel, rels
        dim changed, changed1

        set relship = rel1
        call ccRule.transformRulesToScripts(relship)
        changed = ccRuleEngine.executeRules(relship, ccRuleEngine.MODE_CONFIGURE)
        set obj = relship.target
        call ccRule.transformRulesToScripts(obj)
        changed = ccRuleEngine.executeRules(obj, ccRuleEngine.MODE_CONFIGURE)
        set rels = obj.getNeighbourRelationships(0, GLOBAL_Type_usesCC)
        for each rel in rels
            changed1 = configureConfComp(rel, recursive)
            if changed1 then changed = true
        next
        configureCR = changed
    End Function

    Private Function configureConfComp(rel1, recursive)
        dim ccObj1
        dim relship
        dim changed, changed1, changed2, changed3

        set relship = rel1
        call ccRule.transformRulesToScripts(relship)
        changed = ccRuleEngine.executeRules(relship, ccRuleEngine.MODE_CONFIGURE)
        if (recursive) then
            set ccObj1 = relship.target
            changed3 = configureFunctionMeans(ccObj1)
            &#39;changed2 = configureDesignSolution(ccObj1)
            changed1 = configureComposition(ccObj1, recursive)
            if changed1 or changed2 or changed3 then changed = true
        end if
        configureConfComp = changed
    End Function

&#39;-----------------------------------------------------------
    Private Function configureInstance(inst1, mode)
        on error resume next
        dim inst

        configureInstance = false
        set inst = inst1
        call ccRule.transformRulesToScripts(inst)
        configureInstance = ccRuleEngine.executeRules(inst, mode)
    End Function

&#39;-----------------------------------------------------------
&#39;   Find instance types
&#39;-----------------------------------------------------------
    Public Function getInstanceTypes(obj1, typeMode)
        dim ccObj
        dim obj, objs, objects
        dim pObj, dsObj
        dim mType
        dim instList

        set ccObj = obj1
        set getInstanceTypes = Nothing
        if not isEnabled(ccObj) then
            exit function
        end if
        set instList = metis.newInstanceList
        set objects = findDesignSolutions(ccObj, true)
        for each dsObj in objects
            if isEnabled(dsObj) and includedInConfig(dsObj) then
                &#39; Then look for the Definition type
                set mType = getMetisInstanceType(typeMode)
                set objs = dsObj.getNeighbourObjects(1, GLOBAL_Type_EkaIs, mType)
                if objs.count = 0 then
                    &#39; No product types found found
                else
                    for each pObj in objs
                        if isEnabled(pObj) and includedInConfig(pObj) then
                            call instList.addLast(pObj)
                        end if
                    next
                end if
            end if
        next
        set getInstanceTypes = instList
    End Function

&#39;-----------------------------------------------------------
    Public Function getInstanceType(obj1, projectObject, typeMode)
        dim ccObj
        dim instTypes
        dim cvwSelectDialog

        set getInstanceType = Nothing
        set ccObj = obj1
        set instTypes = ccConfig.getInstanceTypes(ccObj, typeMode)
        if instTypes.count = 0 then
            set instTypes =  ccConfig.buildInstanceTypes(ccObj, projectObject, typeMode)
        end if
        if instTypes.count &#62; 1 then
            set cvwSelectDialog = new CVW_SelectDialog
            cvwSelectDialog.singleSelect = true
            cvwSelectDialog.title = &#34;Select product type&#34;
            cvwSelectDialog.heading = &#34;Select product type&#34;
            set instTypes = cvwSelectDialog.show(instTypes)
        end if
        if instTypes.count = 1 then
            set getInstanceType = instTypes(1)
        end if
    End Function

&#39;-----------------------------------------------------------
    Public Function getRequirementTypes(obj1)
        dim ccObj
        dim obj, objs, objects
        dim cObj, dsObj
        dim instList

        set ccObj = obj1
        set getRequirementTypes = Nothing
        if not isEnabled(ccObj) then
            exit function
        end if
        set instList = metis.newInstanceList
        set objects = findDesignSolutions(ccObj, true)
        for each dsObj in objects
            if isEnabled(dsObj) and includedInConfig(dsObj) then
                &#39; Then look for the Constraints (non-functional requirements)
                set objs = dsObj.getNeighbourObjects(0, GLOBAL_Type_constrainedBy, GLOBAL_Type_CO)
                if objs.count = 0 then
                    &#39; No constraints found
                else
                    for each cObj in objs
                        if isEnabled(cObj) and includedInConfig(cObj) then
                            call instList.addLast(cObj)
                        end if
                    next
                end if
            end if
        next
        set getRequirementTypes = instList
    End Function

&#39;-----------------------------------------------------------
    Public Function getRequirementType(obj1, projectObject)
        dim ccObj
        dim reqTypes
        dim cvwSelectDialog

        set getRequirementType = Nothing
        set ccObj = obj1
        set reqTypes = getRequirementTypes(ccObj)
        if reqTypes.count = 0 then
            set reqTypes =  buildRequirementTypes(ccObj, projectObject)
        end if
        if reqTypes.count &#62; 1 then
            set cvwSelectDialog = new CVW_SelectDialog
            cvwSelectDialog.singleSelect = true
            cvwSelectDialog.title = &#34;Select requirement type&#34;
            cvwSelectDialog.heading = &#34;Select requirement type&#34;
            set reqTypes = cvwSelectDialog.show(reqTypes)
        end if
        if reqTypes.count = 1 then
            set getRequirementType = reqTypes(1)
        end if
    End Function

&#39;-----------------------------------------------------------
&#39;   Build instance types
&#39;-----------------------------------------------------------
    Public Function buildRequirementTypes(obj1, projectObject)
        dim ccObj
        dim obj, objs, objects
        dim cObj, dsObj
        dim typeMode
        dim typName
        dim instList
        dim reqType

        set ccObj = obj1
        set buildRequirementTypes = Nothing
        if not isEnabled(ccObj) then
            exit function
        end if
        if not isEnabled(projectObject) then
            exit function
        end if
        set instList = metis.newInstanceList
        &#39; Find the non-functional requirements that applies to the CC
        &#39; First find the DS&#39;s
        set objects = findDesignSolutions(ccObj, true)
        for each dsObj in objects
            if isEnabled(dsObj) and includedInConfig(dsObj) then
                &#39; Then look for the Constraints (non-functional requirements)
                set objs = dsObj.getNeighbourObjects(0, GLOBAL_Type_constrainedBy, GLOBAL_Type_CO)
                if objs.count = 0 then
                    &#39; No constraints found
                else
                    typeMode = MODE_REQUIREMENT_TYPE
                    for each cObj in objs
                        if isEnabled(cObj) and includedInConfig(cObj) then
                            typName = &#34;Requirements&#34;
                            &#39;typName = InputBox(&#34;Enter requirement type name&#34;, &#34;Input dialog&#34;, typName)
                            set reqType = buildType(projectObject, typName, cObj, typeMode)
                            call instList.addLast(reqType)
                        end if
                    next
                end if
            end if
        next
        if instList.count &#62; 0 then
            set buildRequirementTypes = instList
        end if
        set instList = Nothing
    End Function

&#39;-----------------------------------------------------------
    Public Function buildInstanceTypes(obj1, projectObject, typeMode)
        dim ccObj
        dim dsObj, dsObjects
        dim typeModel, typName
        dim instType
        dim instList

        set ccObj = obj1
        set buildInstanceTypes = Nothing
        if not isEnabled(ccObj) then
            exit function
        end if
        if not isEnabled(projectObject) then
            exit function
        end if
        set instList = metis.newInstanceList
        &#39; Find the relevant Design solutions
        set dsObjects = findDesignSolutions(ccObj, true)
        for each dsObj in dsObjects
            if isEnabled(dsObj) and includedInConfig(dsObj) then
                typName = dsObj.title
                &#39;typName = InputBox(&#34;Enter type name&#34;, &#34;Input dialog&#34;, typName)
                set instType = buildType(projectObject, typName, dsObj, typeMode)
                call instList.addLast(instType)
            end if
        next
        if instList.count &#62; 0 then
            set buildInstanceTypes = instList
        end if
        set instList = Nothing
    End Function

&#39;-----------------------------------------------------------
    Private Function buildType(projectObject, tName, obj1, typeMode)
        dim model
        dim mType
        dim ccType, ccObj
        dim part, parts
        dim defRel, partRel

        set ccObj = obj1
        set mType = getMetisInstanceType(typeMode)
        &#39; Find out if type already exists
        set parts = projectObject.parts
        for each part in parts
            if part.type.inherits(mType) then
                if part.title = tName then
                    set ccType = part
                    exit for
                end if
            end if
        next
        if not isEnabled(ccType) then
            &#39; Create the type
            set ccType = projectObject.newPart(mType)
            if Len(tName) &#62; 0 then
                ccType.title = tName
            else
                ccType.title = ccObj.title
            end if
            &#39; Relate type to its parent
            set model = ccType.ownerModel
            set partRel = model.newRelationship(GLOBAL_Type_EkaHasPart, projectObject, ccType)
            &#39; Relate type to its definition
            set defRel = model.newRelationship(GLOBAL_Type_hasDef, ccType, ccObj)

        end if
        &#39; Then build the property structure
        call createTypeProperties(projectObject, ccType, ccObj, typeMode)
        set buildType = ccType

    End Function

&#39;-----------------------------------------------------------
    Private Function getMetisInstanceType(typeMode)

        set getMetisInstanceType = Nothing
        select case typeMode
            case MODE_REQUIREMENT_TYPE       set getMetisInstanceType = GLOBAL_Type_Requirement
            case MODE_SPECIFICATION_TYPE     set getMetisInstanceType = GLOBAL_Type_Specification
            case MODE_PART_TYPE              set getMetisInstanceType = GLOBAL_Type_Part
        end select
    End Function

&#39;-----------------------------------------------------------
    Private Sub createTypeProperties(projectObject, ccType, obj1, typeMode)
        dim model
        dim ccObj
        dim valueObj, valueObjects
        dim paramObj, paramObjects
        dim pObj, paramObjects2
        dim defObj, defObjects
        dim propObjects
        dim propValue, propUnit
        dim prop, rel
        dim hasParameterType1, hasParameterType2
        dim parameterType1, parameterType2
        dim propFound, paramFound
        dim minMax
        dim hasRange, hasRange1, hasRange2

        set ccObj = obj1
        if not (isEnabled(projectObject) and isEnabled(ccType) and isEnabled(ccObj)) then
            exit sub
        end if
        set model = projectObject.ownerModel
        hasRange  = false
        hasRange1 = false
        hasRange2 = false
        select case typeMode
            case Mode_Requirement_Type
                set hasParameterType1 = GLOBAL_Type_hasCP
                set parameterType1 = GLOBAL_Type_CP
                set hasParameterType2 = GLOBAL_Type_hasCPR
                set parameterType2 = GLOBAL_Type_CPR
                hasRange = true
            case Mode_Specification_Type
                set hasParameterType1 = GLOBAL_Type_hasDP
                set parameterType1 = GLOBAL_Type_DP
                set hasParameterType2 = GLOBAL_Type_hasPP
                set parameterType2 = GLOBAL_Type_PP
            case Mode_Part_Type
                set hasParameterType1 = GLOBAL_Type_hasDP
                set parameterType1 = GLOBAL_Type_DP
                set hasParameterType2 = GLOBAL_Type_hasPP
                set parameterType2 = GLOBAL_Type_PP
        end select

        &#39; Find properties if they already exists
        set propObjects = ccType.getNeighbourObjects(0, GLOBAL_Type_EkaHasProperty, GLOBAL_Type_EkaProperty)
        &#39; Find parameters
        set paramObjects  = ccObj.getNeighbourObjects(0, hasParameterType1, parameterType1)
        set paramObjects2 = ccObj.getNeighbourObjects(0, hasParameterType2, parameterType2)
        for each pObj in paramObjects2
            if isEnabled(pObj) then
                paramObjects.addLast pObj
            end if
        next
        set valueObjects = ccObj.getNeighbourObjects(0, GLOBAL_Type_EkaHasValue, GLOBAL_Type_EkaValue)
        for each paramObj in paramObjects
            &#39; The parameter
            propValue = &#34;&#34;
            propUnit = &#34;&#34;
            minMax = &#34;&#34;
            hasRange2 = false
            if Len(propUnit) = 0 then
                on error resume next
                propUnit = paramObj.getNamedStringValue(&#34;unit&#34;)
            end if
            if Len(minMax) = 0 and hasRange then
                on error resume next
                minMax = paramObj.getNamedStringValue(&#34;min_max&#34;)
                if minMax = &#34;Min and Max&#34; then
                    hasRange2 = true
                end if
            end if
            for each valueObj in valueObjects
                set defObjects = valueObj.getNeighbourObjects(0, GLOBAL_Type_EkaHasDefinition, GLOBAL_Type_CCParam)
                for each defObj in defObjects
                    if defObj.title = paramObj.title then
                        &#39; Parameter has been given a value
                        propValue = valueObj.getNamedStringValue(&#34;value&#34;)
                        exit for
                    end if
                next
            next
            &#39; For each parameter create a property, if it does not already exist
            propFound = false
            for each prop in propObjects
                if prop.title = paramObj.title then propFound = true
            next
            if not propFound then
                set prop = projectObject.newPart(GLOBAL_Type_EkaProperty)
                prop.title = paramObj.title
                set rel = model.newRelationship(GLOBAL_Type_EkaHasProperty, ccType, prop)
            end if
            &#39; Set the value, if given
            if Len(propValue) &#62; 0 then
                call prop.setNamedStringValue(&#34;value&#34;, propValue)
            end if
            if Len(propUnit) &#62; 0 then
                call prop.setNamedStringValue(&#34;unit&#34;, propUnit)
            end if
            if paramObj.type.inherits(parameterType1) and hasRange1 then
                call addRange(projectObject, prop)
            elseif paramObj.type.inherits(parameterType2) and hasRange2 then
                call addRange(projectObject, prop)
            end if
        next
        &#39; Delete old properties that are not being used anymore
        set propObjects = ccType.getNeighbourObjects(0, GLOBAL_Type_EkaHasProperty, GLOBAL_Type_EkaProperty)
        for each prop in propObjects
            paramFound = false
            for each paramObj in paramObjects
                if prop.title = paramObj.title then
                    paramFound = true
                    exit for
                end if
            next
            if not paramFound then
                call model.deleteObject(prop)
            end if
        next
    End Sub

&#39;-----------------------------------------------------------
    Private Function addRange(projectObject, prop)
        dim values
        dim value
        dim rel
        dim propUnit

        propUnit = prop.getNamedStringValue(&#34;unit&#34;)
        set values = prop.getNeighbourObjects(0, GLOBAL_Type_EkaHasParameter, GLOBAL_Type_EkaProperty)
        if values.count = 0 then
            set value = projectObject.newPart(GLOBAL_Type_EkaProperty)
            value.title = &#34;Minimum&#34;
            set rel = projectObject.ownerModel.newRelationship(GLOBAL_Type_EkaHasParameter, prop, value)
            set value = projectObject.newPart(GLOBAL_Type_EkaProperty)
            value.title = &#34;Maximum&#34;
            set rel = projectObject.ownerModel.newRelationship(GLOBAL_Type_EkaHasParameter, prop, value)
        else
            for each value in values
                if value.title = &#34;Minimum&#34; then
                    minFound = true
                elseif value.title = &#34;Maximum&#34; then
                    maxFound = true
                end if
            next
            if not minFound then
                set value = projectObject.newPart(GLOBAL_Type_EkaProperty)
                value.title = &#34;Minimum&#34;
                call prop.setNamedStringValue(&#34;unit&#34;, propUnit)
                set rel = projectObject.ownerModel.newRelationship(GLOBAL_Type_EkaHasParameter, prop, value)
            end if
            if not maxFound then
                set value = projectObject.newPart(GLOBAL_Type_EkaProperty)
                value.title = &#34;Maximum&#34;
                call prop.setNamedStringValue(&#34;unit&#34;, propUnit)
                set rel = projectObject.ownerModel.newRelationship(GLOBAL_Type_EkaHasParameter, prop, value)
            end if
        end if
    End Function

&#39;-----------------------------------------------------------
&#39;   Build part structure
&#39;-----------------------------------------------------------
    Private Sub createPartStructure(projectObject, partType, ccPart, obj1, recursive)
        dim projectModel
        dim ccObj, csObj, ceObj, crObj
        dim csRels, ceRels, crRels, ccRels
        dim csRel, ceRel, crRel, ccRel
        dim dsObjects, dsTitle
        dim part, obj, objects
        dim symbol, symbols
        dim varObject, varObjects
        dim rel

        set ccObj = obj1
        set projectModel = metis.load(projectObject.url)

        &#39; The product has already been created
        &#39; Check for symbol, connect as icon if there is one
        set symbols = ccObj.getNeighbourObjects(0, GLOBAL_Type_EkaHasSymbol, GLOBAL_Type_EkaSymbol)
        if symbols.count &#62; 0 then
            set symbol = symbols(1)
            set rel    = projectModel.newRelationship(GLOBAL_Type_EkaHasIcon, ccPart, symbol)
        end if

        &#39; Find and create properties
        call createPartProperties(projectObject, ccPart, ccObj)
        &#39; Product corresponding to the CC has been created, including its properties
        &#39; Continue with structure?
        if not recursive then
            exit sub
        end if

        &#39; Create part structure
        set csRels = obj1.getNeighbourRelationships(0, GLOBAL_Type_hasCS)
        for each csRel in csRels
            if includedInConfig(csRel) then
                set csObj = csRel.target
                set ceRels = csObj.getNeighbourRelationships(0, GLOBAL_Type_hasCE)
                for each ceRel in ceRels
                    if includedInConfig(ceRel) then
                        set ceObj = ceRel.target
                        if includedInConfig(ceObj) then
                            &#39; CE found - create and connect the new part
                            set part   = projectObject.newPart(partType)
                            if isEnabled(part) then
                                part.title = ceObj.title
                                set rel    = projectModel.newRelationship(GLOBAL_Type_EkaHasMember, ccPart, part)
                                set crRels = ceObj.getNeighbourRelationships(0, GLOBAL_Type_hasCR)
                                for each crRel in crRels
                                    if includedInConfig(crRel) then
                                        set crObj = crRel.target
                                        set ccRels = crObj.getNeighbourRelationships(0, GLOBAL_Type_usesCC)
                                        for each ccRel in ccRels
                                            if includedInConfig(ccRel) then
                                                set obj = ccRel.target
                                                call configureCC(projectObject, part, obj, true)
                                                &#39; Find chosen design solution
                                                set dsObjects = findDesignSolutions(obj, true)
                                                if dsObjects.count = 1 then dsTitle = dsObjects(1).title
                                                if Len(dsTitle) &#62; 0 then
                                                    part.description = dsTitle
                                                end if
                                            end if
                                        next
                                    end if
                                next
                            end if
                        end if
                    end if
                next
            end if
        next
    End Sub

&#39;-----------------------------------------------------------
    Private Sub createPartProperties(projectObject, ccPart, obj1)
        dim model
        dim ccObj
        dim dsObj, dsObjects

        set ccObj = obj1
        set model = projectObject.ownerModel
        &#39; Find DSs
        set dsObjects = findDesignSolutions(ccObj, true)
        for each dsObj in dsObjects
            if isEnabled(dsObj) then
                &#39; Check if DS is included in configuration
                if includedInConfig(dsObj) then
                    call createPartProps(dsObj, model, projectObject, ccPart)
                else
                    &#39; What do we do if DS is not part of the configuration??
                end if
            end if
        next
    End Sub

&#39;-----------------------------------------------------------
    Private Sub createPartProps(obj1, model, projectObject, ccPart)
        dim pObj
        dim valueObj, valueObjects
        dim paramObj, paramObjects
        dim defObj, defObjects
        dim ppObj, ppObjects
        dim propValue, propUnit
        dim prop, rel

        set pObj = obj1
        &#39; Find parameters
        set paramObjects = pObj.getNeighbourObjects(0, GLOBAL_Type_hasDP, GLOBAL_Type_DP)
        set ppObjects    = pObj.getNeighbourObjects(0, GLOBAL_Type_hasPP, GLOBAL_Type_PP)
        for each ppObj in ppObjects
            if isEnabled(ppObj) then
                paramObjects.addLast ppObj
            end if
        next
        set valueObjects = pObj.getNeighbourObjects(0, GLOBAL_Type_EkaHasValue, GLOBAL_Type_EkaValue)
        for each paramObj in paramObjects
            &#39; Design parameter
            propValue = &#34;&#34;
            propUnit = paramObj.getNamedStringValue(&#34;unit&#34;)
            for each valueObj in valueObjects
                set defObjects = valueObj.getNeighbourObjects(0, GLOBAL_Type_EkaHasDefinition, GLOBAL_Type_CCParam)
                for each defObj in defObjects
                    if defObj.title = paramObj.title then
                        &#39; Parameter has been given a value
                        propValue = valueObj.getNamedStringValue(&#34;value&#34;)
                        exit for
                    end if
                next
            next
            &#39; For each parameter create a property
            set prop = projectObject.newPart(GLOBAL_Type_EkaProperty)
            prop.title = paramObj.title
            &#39; Set the value, if given
            if Len(propValue) &#62; 0 then
                call prop.setNamedStringValue(&#34;value&#34;, propValue)
            end if
            if Len(propUnit) &#62; 0 then
                call prop.setNamedStringValue(&#34;unit&#34;, propUnit)
            end if
            set rel = model.newRelationship(GLOBAL_Type_EkaHasProperty, ccPart, prop)
        next
    End Sub

&#39;-----------------------------------------------------------
    Private Sub deletePartStructure(product, partType)
        dim model
        dim part, parts
        dim prop, properties

        set model = product.ownerModel
        set parts = product.getNeighbourObjects(0, GLOBAL_Type_EkaHasMember, partType)
        for each part in parts
            call deletePartStructure(part, partType)
        next
        set properties = product.getNeighbourObjects(0, GLOBAL_Type_EkaHasProperty, GLOBAL_Type_EkaProperty)
        for each prop in properties
            call model.deleteObject(prop)
        next
        call model.deleteObject(product)
    End Sub

&#39;-----------------------------------------------------------
    Public Sub buildConstraintsView(obj1, varObject, parentView, workWindow, symbol1, symbol2)
        dim model
        dim obj, objs, objects
        dim obj2, obj2s
        dim cObj, dsObj
        dim ccObj, csObj, ceObj, crObj
        dim csRels, ceRels, crRels, ccRels
        dim csRel, ceRel, crRel, ccRel
        dim typeMode
        dim typName
        dim inst, instObjects
        dim req, reqObjects
        dim reqType, reqTypes
        dim parentObj, parentVar
        dim objView
        dim cvwObjectView
        dim varObj, usedVariants
        dim rel
        dim textscale
        dim isTop
        dim i, found

        set ccObj = obj1
        if not isEnabled(ccObj) then
            exit sub
        end if
        if parentView.uri = workWindow.uri then
            isTop = true
        else
            isTop = false
            set parentObj = parentView.instance
        end if
        if isEnabled(parentObj) then
            set model = parentObj.ownerModel
        end if
        &#39; Find the non-functional requirements that applies to the CC
        &#39; First find the DS&#39;s
        set objects = findDesignSolutions(ccObj, true)
        for each dsObj in objects
            if isEnabled(dsObj) and includedInConfig(dsObj) then
                &#39; Then look for the Constraints (non-functional requirements)
                set objs = dsObj.getNeighbourObjects(0, GLOBAL_Type_constrainedBy, GLOBAL_Type_CO)
                if objs.count = 0 then
                    &#39; No constraints found
                else
                    typeMode = MODE_REQUIREMENT_TYPE
                    for each reqType in objs
                        if isEnabled(reqType) and includedInConfig(reqType) then
                            &#39; Find the requirement types
                            set reqObjects = reqType.getNeighbourObjects(1, GLOBAL_Type_EkaIs, GLOBAL_Type_Requirement)
                            i = 1
                            for each req in reqObjects
                                set parentVar = req.parent
                                if parentVar.uri &#60;&#62; varObject.uri then
                                    call reqObjects.removeAt(i)
                                else
                                    i = i + 1
                                end if
                            next
                            for each req in reqObjects
                                set instObjects = req.getNeighbourObjects(1, GLOBAL_Type_EkaIs, GLOBAL_Type_CCInstance)
                                for each inst in instObjects
                                    if not isTop then
                                        set obj2s = parentObj.getNeighbourObjects(0, GLOBAL_Type_EkaHasMember, GLOBAL_Type_CCInstance)
                                        found = false
                                        for each obj2 in obj2s
                                            if obj2.uri = inst.uri then found = true
                                        next
                                        if not found then
                                            set rel = model.newRelationship(GLOBAL_Type_EkaHasMember, parentObj, inst)
                                        end if
                                    end if
                                    &#39; Create object view
                                    set cvwObjectView = new CVW_ObjectView
                                    cvwObjectView.treeTextFactor = -1
                                    cvwObjectView.nestedTextFactor1 = -1
                                    cvwObjectView.nestedTextFactor2 = -1
                                    cvwObjectView.heightRatio = -1
                                    set objView = cvwObjectView.create(workWindow, parentView, inst, 0)
                                    if isTop and Len(symbol1) &#62; 0 then
                                        objView.openSymbol   = symbol1
                                        objView.closedSymbol = symbol1
                                    end if
                                    if not isTop and Len(symbol2) &#62; 0 then
                                        objView.openSymbol   = symbol2
                                        objView.closedSymbol = symbol2
                                        textscale = 0.25
                                        objView.textScale = textScale
                                    end if
                                    &#39; Then follow CS-CE structure to locate &#39;sub&#39; components
                                    set csRels = ccObj.getNeighbourRelationships(0, GLOBAL_Type_hasCS)
                                    for each csRel in csRels
                                        if includedInConfig(csRel) then
                                            set csObj = csRel.target
                                            set ceRels = csObj.getNeighbourRelationships(0, GLOBAL_Type_hasCE)
                                            for each ceRel in ceRels
                                                if includedInConfig(ceRel) then
                                                    set ceObj = ceRel.target
                                                    if includedInConfig(ceObj) then
                                                        set crRels = ceObj.getNeighbourRelationships(0, GLOBAL_Type_hasCR)
                                                        for each crRel in crRels
                                                            if includedInConfig(crRel) then
                                                                set crObj = crRel.target
                                                                set ccRels = crObj.getNeighbourRelationships(0, GLOBAL_Type_usesCC)
                                                                for each ccRel in ccRels
                                                                    if includedInConfig(ccRel) then
                                                                        set obj = ccRel.target
                                                                        &#39; Find chosen variant, if possible
                                                                        set usedVariants = varObject.getNeighbourObjects(0, GLOBAL_Type_usesVAR2, GLOBAL_Type_VAR)
                                                                        for each varObj in usedVariants
                                                                            if varObj.url = obj.url then
                                                                                call buildConstraintsView(obj, varObj, objView, workWindow, symbol1, symbol2)
                                                                                exit for
                                                                            end if
                                                                        next
                                                                    end if
                                                                next
                                                            end if
                                                        next
                                                    end if
                                                end if
                                            next
                                        end if
                                    next
                                next
                            next
                        end if
                    next
                end if
            end if
        next
        if isTop then
            if isValid(objView) then
                call objView.doLayout
            end if
        end if
    End Sub

&#39;-----------------------------------------------------------
    Public Function getIncludedSubComponents(ccObj)
        dim csRel, csRels
        dim ceRel, ceRels
        dim crRel, crRels
        dim ccRel, ccRels
        dim obj, csObj, ceObj, crObj
        dim ival
        dim ccList

        set getIncludedSubComponents = Nothing
        set ccList = metis.newInstanceList
        &#39; Follow CS-CE structure to locate &#39;sub&#39; components
        set csRels = ccObj.getNeighbourRelationships(0, GLOBAL_Type_hasCS)
        for each csRel in csRels
            if includedInConfig(csRel) then
                set csObj = csRel.target
                set ceRels = csObj.getNeighbourRelationships(0, GLOBAL_Type_hasCE)
                for each ceRel in ceRels
                    if includedInConfig(ceRel) then
                        set ceObj = ceRel.target
                        if includedInConfig(ceObj) then
                            set crRels = ceObj.getNeighbourRelationships(0, GLOBAL_Type_hasCR)
                            for each crRel in crRels
                                if includedInConfig(crRel) then
                                    set crObj = crRel.target
                                    set ccRels = crObj.getNeighbourRelationships(0, GLOBAL_Type_usesCC)
                                    for each ccRel in ccRels
                                        if includedInConfig(ccRel) then
                                            set obj = ccRel.target
                                            &#39;Check if sub-component
                                            ival = obj.getNamedValue(IsSubcomponentProperty).getInteger
                                            if ival &#62; 0 then
                                                call ccList.addLast(obj)
                                            end if
                                        end if
                                    next
                                end if
                            next
                        end if
                    end if
                next
            end if
        next
        set getIncludedSubComponents = ccList
    End Function

&#39;-----------------------------------------------------------
&#39;-----------------------------------------------------------
    Private Function findDesignSolutions(obj1, inConfig)
        dim ccObj
        dim obj, objects
        dim dsObj, dsObjects
        dim primary

        set ccObj = obj1
        set findDesignSolutions = metis.newInstanceList
        set dsObjects = ccObj.getNeighbourObjects(0, GLOBAL_Type_hasDS, GLOBAL_Type_DS)
        for each dsObj in dsObjects
            if not inConfig or includedInConfig(dsObj) then
                call findDesignSolutions.addLast(dsObj)
            end if
        next
        if findDesignSolutions.count &#62; 0 then
            exit function
        end if

        &#39; DS not found directly - try via FR
        &#39; Find primary FR&#39;s
        set objects = ccObj.getNeighbourObjects(0, GLOBAL_Type_explains, GLOBAL_Type_FR)
        for each obj in objects
            if isEnabled(obj) then
                primary = obj.getNamedValue(&#34;primary&#34;).getInteger
                if primary = 1 then
                    &#39; Top FR - find DSs
                    set dsObjects = obj.getNeighbourObjects(0, GLOBAL_Type_solves, GLOBAL_Type_DS)
                    if not isValid(findDesignSolutions) then
                        set findDesignSolutions = dsObjects
                    else
                        for each dsObj in dsObjects
                            if not inConfig or includedInConfig(dsObj) then
                                call findDesignSolutions.addLast(dsObj)
                            end if
                        next
                    end if
                end if
            end if
        next
    End Function

&#39;-----------------------------------------------------------
    Private Function getTypeModel(obj1, typeMode)
        dim projectName
        dim ccModel
        dim ccObj
        dim modelObject, newObject
        dim projects
        dim part, parts
        dim cvwSelectDialog

        set getTypeModel = Nothing
        set ccObj = obj1

        &#39; Create the project object
        set ccModel = ccObj.ownerModel
        if not isValid(projects) then
            set projects = metis.newInstanceList
            set parts = ccModel.parts
            for each part in parts
                if part.type.inherits(GLOBAL_Type_Model) then
                    projects.addLast part
                end if
            next
        end if
        set newObject = ccModel.newObject(GLOBAL_Type_Model)
        if isEnabled(newObject) then
            newObject.title = &#34;New project&#34;
            projects.addLast newObject
        end if
        if projects.count = 0 then
            exit function
        else
            set cvwSelectDialog = new CVW_SelectDialog
            cvwSelectDialog.singleSelect = true
            cvwSelectDialog.title = &#34;Select project&#34;
            cvwSelectDialog.heading = &#34;Select project&#34;
            set projects = cvwSelectDialog.show(projects)
            if isValid(projects) then
                if projects.count = 1 then
                    set modelObject = projects(1)
                    if modelObject.title = &#34;New project&#34; then
                        projectName = ccObj.title
                        projectName = InputBox(&#34;Enter project name&#34;, &#34;Input dialog&#34;, projectName)
                        if Len(projectName) &#62; 0 then
                            modelObject.title = projectName
                        else
                            exit function
                        end if
                    end if
                    set getTypeModel = modelObject
                end if
                if modelObject.uri &#60;&#62; newObject.uri or projects.count = 0 then
                    ccModel.deleteObject(newObject)
                end if
            end if
        end if
    End Function

&#39;-----------------------------------------------------------
    Private Sub Class_Initialize()
        dim ccGlobals

        &#39; Initialize global variables
        set ccGlobals = new CC_Globals
        set ccGlobals = Nothing
        &#39; Initialize rule class
        set ccRule       = new CC_Rule
        set ccRuleEngine = new CC_RuleEngine

        &#39; Properties
        RuleEvaluatedToProperty = &#34;ruleEvaluatedTo&#34;
        IsSubcomponentProperty  = &#34;isSubcomponent&#34;

        &#39; Modes
        MODE_REQUIREMENT_TYPE    = 1
        MODE_SPECIFICATION_TYPE  = 2
        MODE_PART_TYPE           = 4
        
    End Sub

&#39;-----------------------------------------------------------
    Public Sub Class_Terminate()
    End Sub

End Class
</string>
  </valueset>
 </object>

 <object id="_002aspc00urdfvke2clc">
  <valueset size="11" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="http://xml.activeknowledgemodeling.com/cvw/languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Class CC_Project</string>
   <string name="description"></string>
   <integer name="textFitFlag">0</integer>
   <integer name="dbms-admin.commitFlag">0</integer>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="journalID"></string>
   <string name="comments"></string>
   <string name="script">option explicit

&#39;-----------------------------------------------------------
&#39;-----------------------------------------------------------
Class CC_Project

    &#39; Variant parameters
    Public Title                        &#39; String
    Public ModelContext                 &#39; String: CurrentModel | SubModel
    Public ModelViewTitle               &#39; Name of modelview that contains the project model
    Public DialogTitle
    Public DialogHeading
    Public NoNewProject

    &#39; Context variables (public)
    Public ProjectModel

    &#39; Context variables (private)
    Private projectObject               &#39; IMetisInstance
    Private parentObject                &#39; IMetisInstance


&#39;-----------------------------------------------------------
    Public Function create(projectId)
        dim container

        set create = Nothing
        if isEnabled(ProjectModel) then
            set container = ProjectModel.parts(1)
            if isEnabled(container) then
                set create = container.newPart(GLOBAL_Type_CcProject)
                if isEnabled(create) then
                    create.title = projectId
                end if
            end if
        end if
    End Function

&#39;-----------------------------------------------------------
    Public Function find(projectId)
        dim container
        dim part, parts

        set find = Nothing
        if isEnabled(ProjectModel) then
            set container = ProjectModel.parts(1)
            if isEnabled(container) then
                set parts = container.parts
                for each part in parts
                    if part.type.inherits(GLOBAL_Type_CcProject) then
                        if part.title = projectId then
                            set find = part
                            exit for
                        end if
                    end if
                next
            end if
        end if
    End Function

&#39;-----------------------------------------------------------
    Public Function list()
        dim container
        dim part, parts

        set list = metis.newInstanceList
        if isEnabled(ProjectModel) then
            set container = ProjectModel.parts(1)
            if isEnabled(container) then
                set parts = container.parts
                for each part in parts
                    if part.type.inherits(GLOBAL_Type_CcProject) then
                        call list.addLast(part)
                    end if
                next
            end if
        end if
    End Function

&#39;-----------------------------------------------------------
    Public Function selectProject1()
        dim connector
        dim projects

        set selectProject1 = Nothing
        if not isEnabled(ProjectModel) then
            &#39; Find project model (submodel)
            set connector = findInstModel2(ModelContext, ModelViewTitle)
            if isValid(connector) then
                set ProjectModel = getModelFromConnector(connector)
            end if
        end if
        if isEnabled(ProjectModel) then
            set projects = ProjectModel.parts
            if projects.count &#62; 0 then
                set selectProject1 = projects(1)
            else
                set selectProject1 = selectProject
            end if
        end if

    End Function
&#39;-----------------------------------------------------------
    Public Function selectProject()
        dim container
        dim connector
        dim part, parts
        dim project, projects
        dim newProject, projectName
        dim cvwSelectDialog

        set selectProject = Nothing
        if not isEnabled(ProjectModel) then
            &#39; Find project model (submodel)
            set connector = findInstModel2(ModelContext, ModelViewTitle)
            if isValid(connector) then
                set ProjectModel = getModelFromConnector(connector)
            end if
        elseif ProjectModel.isConnectorType then
            set ProjectModel = getModelFromConnector(ProjectModel)
        end if
        if isEnabled(ProjectModel) then
            set projects = ProjectModel.parts
            if not NoNewProject then
                set newProject = ProjectModel.newObject(GLOBAL_Type_CcProject)
            end if
            if isEnabled(newProject) then
                newProject.title = &#34;New project&#34;
                projects.addLast newProject
            end if
            if projects.count = 0 then
                exit function
            else
                if not NoNewProject or projects.count &#62; 1 then
                    set cvwSelectDialog = new CVW_SelectDialog
                    cvwSelectDialog.singleSelect = true
                    cvwSelectDialog.title = DialogTitle
                    cvwSelectDialog.heading = DialogHeading
                    set projects = cvwSelectDialog.show(projects)
                end if
                if isValid(projects) then
                    if projects.count = 1 then
                        set project = projects(1)
                        if project.title = &#34;New project&#34; then
                            projectName = &#34;New project&#34;
                            projectName = InputBox(&#34;Enter project name&#34;, &#34;Input dialog&#34;, projectName)
                            if Len(projectName) &#62; 0 then
                                project.title = projectName
                            else
                                exit function
                            end if
                        end if
                        set selectProject = project
                    end if
                    if not isValid(project) then
                        ProjectModel.deleteObject(newProject)
                    elseif isValid(newProject) then
                        if project.uri &#60;&#62; newProject.uri or projects.count = 0 then
                            ProjectModel.deleteObject(newProject)
                        end if
                    end if
                end if
            end if
        end if
    End Function

&#39;-----------------------------------------------------------
    Public Sub addToProject(projectObj, contentObj)
        if isEnabled(projectObj) then
            set contentObj.parent = projectObj
        end if
    End Sub

&#39;-----------------------------------------------------------
    Private Sub Class_Initialize()
        dim ccGlobals

        &#39; Initialize global variables
        set ccGlobals = new CC_Globals
        set ccGlobals = Nothing
        &#39; Further initialization
        set ProjectModel = Nothing
        ModelContext   = &#34;SubModel&#34;
        ModelViewTitle = &#34;ProjectModel&#34;
        DialogTitle    = &#34;Select project&#34;
        DialogHeading  = &#34;Select project&#34;
        NoNewProject   = false
    End Sub

&#39;-----------------------------------------------------------
    Public Sub Class_Terminate()
    End Sub

End Class
</string>
  </valueset>
 </object>

 <object id="_002aspu01dtujr219kb2">
  <valueset size="11" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="http://xml.activeknowledgemodeling.com/cvw/languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Function getContextInstance</string>
   <string name="description"></string>
   <integer name="textFitFlag">0</integer>
   <integer name="dbms-admin.commitFlag">0</integer>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="journalID"></string>
   <string name="comments"></string>
   <string name="script">    Function getContextInstance(inst, instView)
        dim instType
        dim hasInstanceContext2Type
        dim wObject, workWindow
        dim instContext, instContexts, context
        dim rel

        set getContextInstance = Nothing

        set actionType          = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/action_objects.kmd#ObjType_CVW:Button_UUID&#34;)
        set hasInstanceContext2Type = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/spec_relships.kmd#RelType_CVW:hasInstanceContext2_UUID&#34;)

        set instType = inst.type
        if instType.inherits(actionType) then
            set workWindow = getWorkWindowView(inst, instView)
            &#39; Find configurable component
            if isValid(workWindow) then
                set wObject = workWindow.instance
                set instContexts = wObject.getNeighbourRelationships(0, hasInstanceContext2Type)
                if instContexts.count &#62; 0 then
                    set rel = instContexts(1)
                    if isEnabled(rel) then
                        set getContextInstance = rel.target
                    end if
                end if
            end if
        end if
    End Function
</string>
  </valueset>
 </object>

 <object id="_002asqd01ejc84gj7htr">
  <valueset size="11" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="http://xml.activeknowledgemodeling.com/cvw/languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Function getReqParameterStatusValue, getRequirementStatusValue</string>
   <string name="description"></string>
   <integer name="textFitFlag">0</integer>
   <integer name="dbms-admin.commitFlag">0</integer>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="journalID"></string>
   <string name="comments"></string>
   <string name="script">option explicit

Function getReqParameterStatusValue

    dim status
    dim ccGlobals, ccStatus
    dim currentModel, currentInstance
    dim instType
    dim hasParamType
    dim intVal

    getReqParameterStatusValue = -1

    set ccGlobals = new CC_Globals

    set currentModel = metis.currentModel
    set currentInstance = currentModel.currentInstance

    if not isEnabled(currentInstance) then
        exit function
    end if

&#39;stop

    set ccStatus = new CC_Status
    getReqParameterStatusValue = ccStatus.getViewPropertyStatus(currentInstance, GLOBAL_CC_CurrentComponentFamily)
    set ccStatus  = Nothing
    set ccGlobals = Nothing

End Function

Function getReqParameterStatusExplanation

    dim status
    dim ccGlobals, ccStatus
    dim currentModel, currentInstance
    dim instType
    dim hasParamType
    dim intVal

    getReqParameterStatusExplanation = &#34;&#34;

    set ccGlobals = new CC_Globals

    set currentModel = metis.currentModel
    set currentInstance = currentModel.currentInstance

    if not isEnabled(currentInstance) then
        exit function
    end if

&#39;stop

    set ccStatus = new CC_Status
    call ccStatus.getViewPropertyStatus(currentInstance, GLOBAL_CC_CurrentComponentFamily)
    getReqParameterStatusExplanation = ccStatus.explanation
    set ccStatus  = Nothing
    set ccGlobals = Nothing

End Function

Function getRequirementStatusValue

    dim currentModel, currentInstance
    dim ccGlobals, ccStatus
    dim reqType, reqTypes

    set ccGlobals = new CC_Globals

    set currentModel = metis.currentModel
    set currentInstance = currentModel.currentInstance

    if not isEnabled(currentInstance) then
        exit function
    end if

    set ccStatus = new CC_Status
    getRequirementStatusValue = ccStatus.getRequirementStatus(currentInstance, GLOBAL_CC_CurrentComponentFamily)
    set ccStatus  = Nothing
    set ccGlobals = Nothing

End Function

Function getCClineColor(isProperty)
    dim status

    getCClineColor = &#34;white&#34;
    if isProperty then
        status = getReqParameterStatusValue
    else
        status = getRequirementStatusValue
    end if
    if status &#62; -1 then
        getCClineColor = &#34;black&#34;
    end if
    if status &#62; -1 then
        getCClineColor = &#34;black&#34;
    end if
End Function



</string>
  </valueset>
 </object>

 <object id="_002asr8027atc8fq3com">
  <valueset size="11" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="http://xml.activeknowledgemodeling.com/cvw/languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Function getCCstatusText</string>
   <string name="description"></string>
   <integer name="textFitFlag">0</integer>
   <integer name="dbms-admin.commitFlag">0</integer>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="journalID"></string>
   <string name="comments"></string>
   <string name="script">option explicit

Function getCCstatusText
    dim model, inst
    dim instType
    dim status
    dim ccGlobals

    set model = metis.currentModel
    set inst  = model.currentInstance

    getCCstatusText = &#34;&#34;
    set ccGlobals = new CC_Globals

    if not isEnabled(inst) then
        exit function
    end if
    
    set instType = inst.type
    if instType.inherits(GLOBAL_Type_CCProperty) then
        status = inst.getNamedValue(&#34;status&#34;).getInteger
        select case status
            case 0  getCCstatusText = &#34;Not_OK&#34;
            case 1  getCCstatusText = &#34;Check&#34;
            case 2  getCCstatusText = &#34;OK&#34;
        end select
    elseif instType.inherits(GLOBAL_Type_Specification) then
        status = inst.getNamedValue(&#34;status&#34;).getInteger
        select case status
            case 0  getCCstatusText = &#34;Not_OK&#34;
            case 1  getCCstatusText = &#34;Not_OK&#34;
            case 2  getCCstatusText = &#34;Check&#34;
            case 3  getCCstatusText = &#34;OK&#34;
        end select
    end if
    set ccGlobals = Nothing
    
End Function
</string>
  </valueset>
 </object>

 <object id="_002asrc025mhb8l9nuie">
  <valueset size="11" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="http://xml.activeknowledgemodeling.com/cvw/languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Function getCcFamilyName</string>
   <string name="description"></string>
   <integer name="textFitFlag">0</integer>
   <integer name="dbms-admin.commitFlag">0</integer>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="journalID"></string>
   <string name="comments"></string>
   <string name="script">option explicit

Public Function getCcFamilyName

    dim model, inst, parent, parentType
    dim families
    dim ccGlobals

    set ccGlobals = new CC_Globals
    set model = metis.currentModel
    set inst  = model.currentInstance
    set parent = inst.parent
    set parentType = parent.type

    set families = inst.getNeighbourObjects(1, GLOBAL_Type_EkaHasPart, GLOBAL_Type_CcFamily)
    if families.count &#62; 0 then
        getCcFamilyName = families(1).title
    elseif parentType.inherits(GLOBAL_Type_EkaProject) then
        getCcFamilyName = parent.title
    elseif parentType.inherits(GLOBAL_Type_VAR) then
        getCcFamilyName = getReferencedValue(&#34;name&#34;, 0, GLOBAL_Type_EkaIs, GLOBAL_Type_Requirement)
    else
        getCcFamilyName = &#34;&#34;
    end if
End Function
</string>
  </valueset>
 </object>

 <object id="_002asre00pfovrhcq6ql">
  <valueset size="11" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="http://xml.activeknowledgemodeling.com/cvw/languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Class CC_Family</string>
   <string name="description"></string>
   <integer name="textFitFlag">0</integer>
   <integer name="dbms-admin.commitFlag">0</integer>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="journalID"></string>
   <string name="comments"></string>
   <string name="script">option explicit

&#39;-----------------------------------------------------------
&#39;-----------------------------------------------------------
Class CC_Family

    &#39; Variant parameters
    Public Title                        &#39; String
    Public DialogTitle
    Public DialogHeading

    &#39; Context variables (public)
    Public ProjectObject

&#39;-----------------------------------------------------------
    Public Function create(familyId)
        dim container

        set create = Nothing
        if isEnabled(ProjectObject) then
            set container = ProjectObject.parts(1)
            if isEnabled(container) then
                set create = container.newPart(GLOBAL_Type_CcFamily)
                if isEnabled(create) then
                    create.title = familyId
                end if
            end if
        else
            MsgBox &#34;Family is not created - requires project to be defined!&#34;
        end if
    End Function

&#39;-----------------------------------------------------------
    Public Function find(familyId)
        dim container
        dim part, parts

        set find = Nothing
        if isEnabled(ProjectObject) then
            set container = ProjectObject.parts(1)
            if isEnabled(container) then
                set parts = container.parts
                for each part in parts
                    if part.type.inherits(GLOBAL_Type_CcFamily) then
                        if part.title = projectId then
                            set find = part
                            exit for
                        end if
                    end if
                next
            end if
        else
            MsgBox &#34;No project given - the search is not performed!&#34;
        end if
    End Function

&#39;-----------------------------------------------------------
    Public Function list()
        dim part, parts

        set list = metis.newInstanceList
        if isEnabled(ProjectObject) then
            set parts = ProjectObject.parts
            for each part in parts
                if part.type.inherits(GLOBAL_Type_CcFamily) then
                    call list.addLast(part)
                end if
            next
        end if
    End Function

&#39;-----------------------------------------------------------
    Public Function selectFamily()
        dim part, parts
        dim family, families
        dim newFamily, familyName
        dim cvwSelectDialog

        set selectFamily = Nothing
        if isEnabled(ProjectObject) then
            set families = list
            set newFamily = ProjectObject.newPart(GLOBAL_Type_CcFamily)
            if isEnabled(newFamily) then
                newFamily.title = &#34;New family&#34;
                families.addLast newFamily
            end if
            if families.count = 0 then
                exit function
            else
                set cvwSelectDialog = new CVW_SelectDialog
                cvwSelectDialog.singleSelect = true
                cvwSelectDialog.title = DialogTitle
                cvwSelectDialog.heading = DialogHeading
                set families = cvwSelectDialog.show(families)
                if isValid(families) then
                    if families.count = 1 then
                        set family = families(1)
                        if family.title = &#34;New family&#34; then
                            familyName = &#34;New family&#34;
                            familyName = InputBox(&#34;Enter family name&#34;, &#34;Input dialog&#34;, familyName)
                            if Len(familyName) &#62; 0 then
                                family.title = familyName
                            else
                                exit function
                            end if
                        end if
                        set selectFamily = family
                    end if
                    if not isValid(family) then
                        ProjectObject.ownerModel.deleteObject(newFamily)
                    else
                        if family.uri &#60;&#62; newFamily.uri or families.count = 0 then
                            ProjectObject.ownerModel.deleteObject(newFamily)
                        end if
                    end if
                end if
            end if
        end if
    End Function

&#39;-----------------------------------------------------------
    Private Sub Class_Initialize()
        dim ccGlobals

        &#39; Initialize global variables
        set ccGlobals = new CC_Globals
        set ccGlobals = Nothing
        &#39; Further initialization
        set ProjectObject = Nothing
        DialogTitle   = &#34;Select family&#34;
        DialogHeading = &#34;Select family&#34;
    End Sub

&#39;-----------------------------------------------------------
    Public Sub Class_Terminate()
    End Sub

End Class
</string>
  </valueset>
 </object>

 <object id="_002asrk01ihftadue4i9">
  <valueset size="11" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="http://xml.activeknowledgemodeling.com/cvw/languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Sub editRoleParameters</string>
   <string name="description"></string>
   <integer name="textFitFlag">0</integer>
   <integer name="dbms-admin.commitFlag">0</integer>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="journalID"></string>
   <string name="comments"></string>
   <string name="script">option explicit

Public Sub editRoleParameters(model, ccObj, inst, roleName, method)
    dim rule, rules
    dim expression, expressions
    dim param, params
    dim prop, props
    dim roleRule
    dim argName
    dim i

    if not isValid(model)   then exit sub
    if not isEnabled(ccObj) then exit sub
    if not isEnabled(inst)  then exit sub
    if not isValid(method)  then exit sub

    if Len(roleName) = 0 then
        call model.runMethodOnInst(method, inst)
        exit sub
    end if

    roleRule = &#34;Parameters(&#34; &#38; roleName &#38; &#34;)&#34;
    &#39;Find the role specific parameters
    set rules = contextInst.getNeighbourObjects(0, GLOBAL_Type_invokes, GLOBAL_Type_Rule)
    for each rule in rules
        if rule.title = roleRule then
            &#39; Find expression object
            set expressions = rule.getNeighbourObjects(0, GLOBAL_Type_hasExpr, GLOBAL_Type_Expr)
            for each expression in expressions
                exit for
            next
            if isEnabled(currentInst) and isEnabled(expression) then
                i = 0
                &#39; Find the input parameters and process them
                set params = expression.getNeighbourObjects(1, GLOBAL_Type_inputToExpr1,GLOBAL_Type_CCParam)
                set props  = currentInst.getNeighbourObjects(0, GLOBAL_Type_EkaHasProperty, GLOBAL_Type_EkaProperty)
                for each prop in props
                    for each param in params
                        if param.title = prop.title then
                            &#39; Then what??
                            i = i + 1
                            argName = &#34;PropertyObject&#34; &#38; CStr(i)
                            call method.setArgument1(argName, prop.uri)
                            exit for
                        end if
                    next
                next
                set paramRels = expression.getNeighbourRelationships(0, GLOBAL_Type_outputFromExpr)
                set params = expression.getNeighbourObjects(0, GLOBAL_Type_outputFromExpr,GLOBAL_Type_CCParam)
                set props  = currentInst.getNeighbourObjects(0, GLOBAL_Type_EkaHasProperty, GLOBAL_Type_EkaProperty)
                for each prop in props
                    dim paramRel, paramRels

                    for each paramRel in paramRels
                        set param = paramRel.target
                        if param.title = prop.title then
                            dim param1, params1
                            dim isReadOnly
                            
                            isReadOnly = paramRel.getNamedStringValue(&#34;paramId&#34;) = &#34;isReadOnly&#34;
                            if not isReadOnly then
                                &#39; Clear property value
                                set params1 = prop.getNeighbourObjects(0, GLOBAL_Type_EkaHasParameter, GLOBAL_Type_EkaProperty)
                                for each param1 in params1
                                    call param1.setNamedStringValue(&#34;value&#34;, &#34;&#34;)
                                next
                                call prop.setNamedStringValue(&#34;value&#34;, &#34;&#34;)
                            end if
                            exit for
                        end if
                    next
                next
                call model.runMethodOnInst(method, currentInst)
            end if
        end if
    next
End Sub
</string>
  </valueset>
 </object>

 <object id="_002asrk027bf3nhgprmd">
  <valueset size="11" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="http://xml.activeknowledgemodeling.com/cvw/languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Sub NewContent</string>
   <string name="description"></string>
   <integer name="textFitFlag">0</integer>
   <integer name="dbms-admin.commitFlag">0</integer>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="journalID"></string>
   <string name="comments"></string>
   <string name="script">option explicit

Public Sub newCCcontent(ccObj, roleName, typeOption, familyOption, projectOption)
    dim ccConfig, ccGlobals, ccInstanceType, ccFamily, ccProject, cvwSelectDialog, cvwWorkarea
    dim currentModel, currentModelView, currentObj
    dim hasContextType, hasViewStrategyType
    dim workWindow, wObject
    dim varObject, projectObject, parentVar
    dim instances, objects
    dim instName, newInst
    dim rel, rels
    dim child, children
    dim ccReq, ccReqs, reqType
    dim viewStrategyModel
    dim i

    set hasContextType      = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/spec_relships.kmd#RelType_CVW:hasInstanceContext2_UUID&#34;)
    set hasViewStrategyType = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/spec_relships.kmd#RelType_CVW:hasViewStrategy2_UUID&#34;)

    &#39;stop

    set ccGlobals       = new CC_Globals
    set ccInstanceType  = new CC_InstanceType
    set cvwSelectDialog = new CVW_SelectDialog

    set currentModel = metis.currentModel
    set currentModelView = currentModel.currentModelView

    GLOBAL_CC_CurrentRole = roleName

    &#39; Find instance context (variant object)
    set currentObj = Nothing
    set workWindow = getWorkareaView(getCVWmodel, &#34;Workplace&#34;)
    set wObject = workWindow.instance
    set objects = wObject.getNeighbourObjects(0, hasContextType, GLOBAL_Type_AnyObject)
    if objects.count &#62; 0 then set varObject = objects(1)
    if isEnabled(varObject) then
        set rels = ccObj.getNeighbourRelationships(0, GLOBAL_Type_usesVAR)
        if rels.count &#62; 0 then
            set rel = rels(1)
            set rel.target = varObject
        end if
    else
        set currentObj = ccObj
    end if

    &#39;stop
    if projectOption = 0 then
        set projectObject = varObject
    else
        &#39; Find current project
        if isEnabled(GLOBAL_CC_CurrentProject) then
            set projectObject = GLOBAL_CC_CurrentProject
        else
            set ccProject = new CC_Project
            set projectObject = ccProject.selectProject
            set GLOBAL_CC_CurrentProject = projectObject
        end if
    end if

    if familyOption &#62; 0 then
        if not isEnabled(GLOBAL_CC_CurrentFamily) then
            set ccFamily = new CC_Family
            set ccFamily.ProjectObject = projectObject
            set GLOBAL_CC_CurrentFamily = ccFamily.selectFamily
            set ccFamily = Nothing
        end if
    else
        set GLOBAL_CC_CurrentFamily = Nothing
    end if

    &#39; Configure
    set currentObj = ccObj
    set ccConfig = new CC_Configure
    call ccConfig.setVariantParameters(currentObj, varObject)
    call ccConfig.configureVariant(currentObj)

    if isEnabled(projectObject) then

        &#39; Find Constraint
        set reqType = ccConfig.getRequirementType(currentObj, varObject)
        if isEnabled(reqType) then
            if typeOption = 1 then
                &#39; Create CC requirement
                set ccInstanceType = new CC_InstanceType
                set ccInstanceType.typeModel = currentObj.parent
                set ccInstanceType.instanceModel = varObject
                set ccInstanceType.productType = GLOBAL_Type_CO
                set ccInstanceType.productInstType = GLOBAL_Type_Requirement
                ccInstanceType.parameterRule = &#34;Parameters(&#34; &#38; roleName &#38; &#34;)&#34;
                instName = InputBox(&#34;Enter identifier&#34;)
                set newInst = ccInstanceType.newInstance(varObject, currentObj, varObject, reqType, instName, 3, true)
            else
                &#39; Find CC requirements by following the Is relationship
                set ccReqs = reqType.getNeighbourObjects(1, GLOBAL_Type_EkaIs, GLOBAL_Type_Requirement)
                i = 1
                for each ccReq in ccReqs
                    set parentVar = ccReq.parent
                    if parentVar.uri &#60;&#62; varObject.uri then
                        call ccReqs.removeAt(i)
                    else
                        i = i + 1
                    end if
                next
                if ccReqs.count &#62; 1 then
                    cvwSelectDialog.singleSelect = true
                    cvwSelectDialog.title = &#34;Select requirement&#34;
                    cvwSelectDialog.heading = &#34;Select requirement&#34;
                    set ccReqs = cvwSelectDialog.show(ccReqs)
                end if
                if ccReqs.count = 1 then
                    if typeOption = 1 then
                        set instances = ccReqs
                    end if
                end if
            end if
        end if

        if typeOption = 2 then
            if ccReqs.count = 0 then
                MsgBox &#34;This functions requires a requirement type to be specified!&#34; &#38; vbCrLf &#38; &#34;No requirement type was found!&#34;
            elseif ccReqs.count = 1 then
                set ccInstanceType = new CC_InstanceType
                set ccInstanceType.typeModel = currentObj.parent
                set ccInstanceType.instanceModel = GLOBAL_CC_CurrentProject
                set ccInstanceType.productType = GLOBAL_Type_Requirement
                set ccInstanceType.productInstType = GLOBAL_Type_CCInstance
                set ccInstanceType.parentFamily = GLOBAL_CC_CurrentFamily
                ccInstanceType.parameterRule = &#34;Parameters(&#34; &#38; roleName &#38; &#34;)&#34;
                &#39; Ask for identifiers
                instName = InputBox(&#34;Enter identifier&#34;)
                if Len(instName) &#62; 0 then
                    set newInst = ccInstanceType.newInstance(varObject, currentObj, varObject, ccReqs(1), instName, 3, true)
                end if
            end if
        end if

        if isEnabled(newInst) then
            &#39; Find view strategy model
            set rels = wObject.getNeighbourRelationships(0, hasViewStrategyType)
            if rels.count &#62; 0 then
                set viewStrategyModel = rels(1).target
            end if
            &#39; Remove content
            set children = workWindow.children
            for each child in children
                call currentModelView.deleteObjectView(child)
            next
            &#39; Populate with new instance
            set instances = metis.newInstanceList
            instances.addLast newInst
            set cvwWorkarea = new CVW_Workarea
            set cvwWorkarea.WorkWindow = workWindow
            cvwWorkarea.ViewStrategyModel = viewStrategyModel.uri
            call cvwWorkarea.populate(instances, -1)
            set children = workWindow.children
            for each child in children
                child.open
            next
        end if
    end if
End Sub
</string>
  </valueset>
 </object>

 <object id="_002asrn00tk5n7chd85k">
  <valueset size="11" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="http://xml.activeknowledgemodeling.com/cvw/languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Sub SearchContent</string>
   <string name="description"></string>
   <integer name="textFitFlag">0</integer>
   <integer name="dbms-admin.commitFlag">0</integer>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="journalID"></string>
   <string name="comments"></string>
   <string name="script">option explicit

Public Sub SearchContent(ccObj, roleName, typeOption, familyOption, aggregateOption, projectOption)
    dim ccConfig, ccGlobals, ccInstanceType, ccProject, cvwSelectDialog, cvwWorkarea
    dim currentModel, currentModelView, currentObj
    dim hasContextType, hasViewStrategyType
    dim workWindow, wObject
    dim varObject, projectObject, parentVar
    dim instances, objects
    dim rel, rels
    dim child, children
    dim ccReq, ccReqs, reqType
    dim viewStrategyModel
    dim i

    set hasContextType      = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/spec_relships.kmd#RelType_CVW:hasInstanceContext2_UUID&#34;)
    set hasViewStrategyType = metis.findType(&#34;http://xml.activeknowledgemodeling.com/cvw/languages/spec_relships.kmd#RelType_CVW:hasViewStrategy2_UUID&#34;)

    &#39;stop

    set ccGlobals       = new CC_Globals
    set ccInstanceType  = new CC_InstanceType
    set cvwSelectDialog = new CVW_SelectDialog

    set currentModel = metis.currentModel
    set currentModelView = currentModel.currentModelView

    GLOBAL_CC_CurrentRole = roleName

    &#39; Find instance context (variant object)
    set currentObj = Nothing
    set workWindow = getWorkareaView(getCVWmodel, &#34;Workplace&#34;)
    set wObject = workWindow.instance
    set objects = wObject.getNeighbourObjects(0, hasContextType, GLOBAL_Type_AnyObject)
    if objects.count &#62; 0 then set varObject = objects(1)
    if isEnabled(varObject) then
        set rels = ccObj.getNeighbourRelationships(0, GLOBAL_Type_usesVAR)
        if rels.count &#62; 0 then
            set rel = rels(1)
            set rel.target = varObject
        end if
    else
        set currentObj = ccObj
    end if

    if projectOption = 0 then
        set  projectObject = varObject
    else
        &#39; Find current project
        if isEnabled(GLOBAL_CC_CurrentProject) then
            set projectObject = GLOBAL_CC_CurrentProject
        else
            set ccProject = new CC_Project
            set projectObject = ccProject.selectProject
            set GLOBAL_CC_CurrentProject = projectObject
        end if
    end if

    if familyOption &#62; 0 then
        if not isEnabled(GLOBAL_CC_CurrentFamily) then
            set ccFamily = new CC_Family
            set ccFamily.ProjectObject = projectObject
            set GLOBAL_CC_CurrentFamily = ccFamily.selectFamily
            set ccFamily = Nothing
        end if
    else
        set GLOBAL_CC_CurrentFamily = Nothing
    end if

    &#39; Configure
    set currentObj = ccObj
    set ccConfig = new CC_Configure
    call ccConfig.setVariantParameters(currentObj, varObject)
    call ccConfig.configureVariant(currentObj)

    if typeOption &#62; 0 then
        &#39; Find Constraints
        set reqType = ccConfig.getRequirementType(currentObj, varObject)
        if isEnabled(reqType) then
            &#39; Find CC requirements by following the Is relationship
            set ccReqs = reqType.getNeighbourObjects(1, GLOBAL_Type_EkaIs, GLOBAL_Type_Requirement)
            i = 1
            for each ccReq in ccReqs
                set parentVar = ccReq.parent
                if parentVar.uri &#60;&#62; varObject.uri then
                    call ccReqs.removeAt(i)
                else
                    i = i + 1
                end if
            next
            if ccReqs.count &#62; 1 then
                cvwSelectDialog.singleSelect = true
                cvwSelectDialog.title = &#34;Select requirement&#34;
                cvwSelectDialog.heading = &#34;Select requirement&#34;
                set ccReqs = cvwSelectDialog.show(ccReqs)
            end if
            if ccReqs.count = 1 then
                if typeOption = 1 then
                    set instances = ccReqs
                end if
            end if
        end if
        &#39; Find next level instances
        if aggregateOption &#62; 0 then
            if isEnabled(GLOBAL_CC_CurrentFamily) then
                set instances = metis.newInstanceList
                call instances.addLast(GLOBAL_CC_CurrentFamily)
            end if
        elseif typeOption &#62; 1 then
            set ccInstanceType.typeModel = ccObj.parent
            set ccInstanceType.instanceModel = GLOBAL_CC_CurrentProject
            set ccInstanceType.productType = GLOBAL_Type_Requirement
            set ccInstanceType.productInstType = GLOBAL_Type_CCInstance
            set ccInstanceType.parentFamily = GLOBAL_CC_CurrentFamily
            set instances = ccInstanceType.findInstances2(Nothing, ccReqs(1))
        end if
        &#39; Find the final content and prepare views
        if instances.count &#62; 1 then
            cvwSelectDialog.singleSelect = true
            cvwSelectDialog.title   = &#34;Select requirement&#34;
            cvwSelectDialog.heading = &#34;Select requirement&#34;
            set instances = cvwSelectDialog.show(instances)
        end if

        if instances.count &#62; 0 then
            &#39; Create view instances
            ccInstanceType.parameterRule = &#34;Parameters(&#34; &#38; roleName &#38; &#34;)&#34;
            call ccInstanceType.updateViewInstance(currentObj, instances(1), Nothing, projectObject, 1)
            &#39; Find view strategy model
            set rels = wObject.getNeighbourRelationships(0, hasViewStrategyType)
            if rels.count &#62; 0 then
                set viewStrategyModel = rels(1).target
            end if
            &#39; Remove content
            set children = workWindow.children
            for each child in children
                call currentModelView.deleteObjectView(child)
            next
            &#39; Populate with new content
            set cvwWorkarea = new CVW_Workarea
            set cvwWorkarea.WorkWindow = workWindow
            cvwWorkarea.ViewStrategyModel = viewStrategyModel.uri
            call cvwWorkarea.populate(instances, -1)
            set children = workWindow.children
            for each child in children
                child.open
            next
        end if
    end if
End Sub
</string>
  </valueset>
 </object>

 <object id="_002ass3019ekr0j68boh">
  <valueset size="11" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="http://xml.activeknowledgemodeling.com/cvw/languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Sub setDebugOn, setDebugOff, isDebugOn</string>
   <string name="description"></string>
   <integer name="textFitFlag">0</integer>
   <integer name="dbms-admin.commitFlag">0</integer>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="journalID"></string>
   <string name="comments"></string>
   <string name="script">option explicit

Public Sub setDebugOn
    GLOBAL_CC_Debug = true
End Sub

Public Sub setDebugOff
    GLOBAL_CC_Debug = false
End Sub

Public Function isDebugOn
    isDebugOn = GLOBAL_CC_Debug 
End Function
</string>
  </valueset>
 </object>

 <object id="_002assd00topmkil1i4t">
  <valueset size="11" xlink:role="type" xlink:title="VBScript Code (CVW)" xlink:href="http://xml.activeknowledgemodeling.com/cvw/languages/script_types.kmd#ObjType_AKM:VBScriptCode_UUID" xlink:actuate="user">
   <string name="externalID"></string>
   <string name="name">Sub ccSendMail</string>
   <string name="description"></string>
   <integer name="textFitFlag">0</integer>
   <integer name="dbms-admin.commitFlag">0</integer>
   <integer name="dbms-admin.system-uploaded">0</integer>
   <string name="parentId"></string>
   <string name="journalID"></string>
   <string name="comments"></string>
   <string name="script">Sub ccSendMail(mailAddress, subject, body)
       Dim objOutlook
       Dim objMsg

        Const olMailItem = 0

        &#39;Create Outlook
            Set objOutlook = CreateObject(&#34;Outlook.application&#34;)
            Set objMsg =  objOutlook.CreateItem(olMailItem)

            objMsg.To = mailAddress &#39; your reminder notification address
            objMsg.Subject = subject
            objMsg.Body = body
            objMsg.Display

        &#39;Clean up
            set objOutlook = Nothing
            set objMsg = Nothing
End Sub
</string>
  </valueset>
 </object>

 <objectview id="_002aslb01so0qjtit8k4" xlink:role="object" xlink:title="Classes and Utilities" xlink:href="#_002aslb01so0qj8pu96q" state="open" behavior="nested" text-scale="1.68713" decomp-scale="0.125" left="-512" top="-368" width="715.767" height="512">
  <symbol-override state="open" xlink:role="symbol" xlink:title="Open Nested Object" xlink:href="metis:stdsyms#oid67" xlink:actuate="user">
  </symbol-override>
  <symbol-override state="closed" xlink:role="symbol" xlink:title="Closed Nested Object" xlink:href="metis:stdsyms#oid68" xlink:actuate="user">
  </symbol-override>
  <child-link xlink:role="objectview" xlink:title="Class CC_Rule" xlink:href="#_002aslb01spoqhquikls"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002aslb01spoqhditp0k"/>
  <child-link xlink:role="objectview" xlink:title="Function getParameterTitle" xlink:href="#_002asls00rc18opoa824"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002asls00rc18ontqgso"/>
  <child-link xlink:role="objectview" xlink:title="Class CC_RuleEngine" xlink:href="#_002asmt01e9ug3mi2qr2"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002asmt01e9ug3jqdh2t"/>
  <child-link xlink:role="objectview" xlink:title="Class CC_InstanceType" xlink:href="#_002aso001eiilv0rn2h0"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002aso001eiilvg4mcgl"/>
  <child-link xlink:role="objectview" xlink:title="Class CC_Status" xlink:href="#_002aso401a4kb0l7flsb"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002aso401a4kb033h1bu"/>
  <child-link xlink:role="objectview" xlink:title="Function getParameterStatusValue, getObjectStatusValue" xlink:href="#_002aso401i6upa9u22an"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002aso401i6upavfq2mt"/>
  <child-link xlink:role="objectview" xlink:title="Function getCcObject" xlink:href="#_002aso60119pghihimts"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002aso60119pghvvrpip"/>
  <child-link xlink:role="objectview" xlink:title="Function getCcParameterValue" xlink:href="#_002aso6011arpekiilbv"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002aso6011arpe095a6t"/>
  <child-link xlink:role="objectview" xlink:title="Class CC_Globals" xlink:href="#_002asoe0199qp5dfcrlg"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002asoe0199qp5j4tm2p"/>
  <child-link xlink:role="objectview" xlink:title="Class CC_Configure" xlink:href="#_002asog01bb7crn92oem"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002asog01bb7crectusj"/>
  <child-link xlink:role="objectview" xlink:title="Class CC_Project" xlink:href="#_002aspc00urdfvssdnlt"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002aspc00urdfvicv8ek"/>
  <child-link xlink:role="objectview" xlink:title="Function getContextInstance" xlink:href="#_002aspu01dtujri19qpj"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002aspu01dtujrbv5j4g"/>
  <child-link xlink:role="objectview" xlink:title="Function getReqParameterStatusValue, getRequirementStatusValue" xlink:href="#_002asqd01ejc849jjeku"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002asqd01ejc8odumsnn"/>
  <child-link xlink:role="objectview" xlink:title="Function getCCstatusText" xlink:href="#_002asr8027atc8p1u46j"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002asr8027atc8m8qat1"/>
  <child-link xlink:role="objectview" xlink:title="Function getCcFamilyName" xlink:href="#_002asrc025mhb8vsjhoo"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002asrc025mhbi2tmi67"/>
  <child-link xlink:role="objectview" xlink:title="Class CC_Family" xlink:href="#_002asre00pfovrf5v2j0"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002asre00pfovrvmfs60"/>
  <child-link xlink:role="objectview" xlink:title="Sub editRoleParameters" xlink:href="#_002asrk01ihftarekeb9"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002asrk01ihftk7jpc4f"/>
  <child-link xlink:role="objectview" xlink:title="Sub NewContent" xlink:href="#_002asrk027bf3ntn3ovr"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002asrk027bf3na6p8a1"/>
  <child-link xlink:role="objectview" xlink:title="Sub SearchContent" xlink:href="#_002asrn00tk5n7l8fqot"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002asrn00tk5n7dm3t6i"/>
  <child-link xlink:role="objectview" xlink:title="Sub setDebugOn, setDebugOff, isDebugOn" xlink:href="#_002ass3019ekr045mfvo"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002ass3019ekrkb4fkn3"/>
  <child-link xlink:role="objectview" xlink:title="Sub ccSendMail" xlink:href="#_002assd00topmk16fcrp"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002assd00topmkb5cp5a"/>
 </objectview>

 <relationshipview id="_002aslb01so0rr47dbi6" decomposition-flag="true">
  <origin-link xlink:role="modelview" xlink:title="Main" xlink:href="#oid1"/>
  <target-link xlink:role="objectview" xlink:title="Classes and Utilities" xlink:href="#_002aslb01so0qjtit8k4"/>
 </relationshipview>

 <relationshipview id="_002aslb01spoqhditp0k" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="Classes and Utilities" xlink:href="#_002aslb01so0qjtit8k4"/>
  <target-link xlink:role="objectview" xlink:title="Class CC_Rule" xlink:href="#_002aslb01spoqhquikls"/>
 </relationshipview>

 <objectview id="_002aslb01spoqhquikls" xlink:role="object" xlink:title="Class CC_Rule" xlink:href="#_002aslb01spoqh67dmsg" state="open" behavior="nested" text-scale="0.234795" decomp-scale="0.125" left="3712" top="2816" width="1280" height="384">
 </objectview>

 <relationshipview id="_002asls00rc18ontqgso" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="Classes and Utilities" xlink:href="#_002aslb01so0qjtit8k4"/>
  <target-link xlink:role="objectview" xlink:title="Function getParameterTitle" xlink:href="#_002asls00rc18opoa824"/>
 </relationshipview>

 <objectview id="_002asls00rc18opoa824" xlink:role="object" xlink:title="Function getParameterTitle" xlink:href="#_002asls00rc18ond6ves" state="open" behavior="nested" text-scale="0.234795" decomp-scale="0.125" left="512" top="896" width="1280" height="384">
 </objectview>

 <relationshipview id="_002asmt01e9ug3jqdh2t" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="Classes and Utilities" xlink:href="#_002aslb01so0qjtit8k4"/>
  <target-link xlink:role="objectview" xlink:title="Class CC_RuleEngine" xlink:href="#_002asmt01e9ug3mi2qr2"/>
 </relationshipview>

 <objectview id="_002asmt01e9ug3mi2qr2" xlink:role="object" xlink:title="Class CC_RuleEngine" xlink:href="#_002asmt01e9ug3vdtq5q" state="open" behavior="nested" text-scale="0.234795" decomp-scale="0.125" left="3712" top="3200" width="1280" height="384">
 </objectview>

 <objectview id="_002aso001eiilv0rn2h0" xlink:role="object" xlink:title="Class CC_InstanceType" xlink:href="#_002aso001eiilvsiv8mq" state="open" behavior="nested" text-scale="0.234795" decomp-scale="0.125" left="3712" top="2048" width="1280" height="384">
 </objectview>

 <relationshipview id="_002aso001eiilvg4mcgl" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="Classes and Utilities" xlink:href="#_002aslb01so0qjtit8k4"/>
  <target-link xlink:role="objectview" xlink:title="Class CC_InstanceType" xlink:href="#_002aso001eiilv0rn2h0"/>
 </relationshipview>

 <relationshipview id="_002aso401a4kb033h1bu" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="Classes and Utilities" xlink:href="#_002aslb01so0qjtit8k4"/>
  <target-link xlink:role="objectview" xlink:title="Class CC_Status" xlink:href="#_002aso401a4kb0l7flsb"/>
 </relationshipview>

 <objectview id="_002aso401a4kb0l7flsb" xlink:role="object" xlink:title="Class CC_Status" xlink:href="#_002aso401a4kb0fdgoef" state="open" behavior="nested" text-scale="0.234795" decomp-scale="0.125" left="3712" top="3584" width="1280" height="384">
 </objectview>

 <objectview id="_002aso401i6upa9u22an" xlink:role="object" xlink:title="Function getParameterStatusValue, getObjectStatusValue" xlink:href="#_002aso401i6upaple394" state="open" behavior="nested" text-scale="0.234795" decomp-scale="0.125" left="512" top="1664" width="1280" height="384">
 </objectview>

 <relationshipview id="_002aso401i6upavfq2mt" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="Classes and Utilities" xlink:href="#_002aslb01so0qjtit8k4"/>
  <target-link xlink:role="objectview" xlink:title="Function getParameterStatusValue, getObjectStatusValue" xlink:href="#_002aso401i6upa9u22an"/>
 </relationshipview>

 <objectview id="_002aso60119pghihimts" xlink:role="object" xlink:title="Function getCcObject" xlink:href="#_002aso60119pghvjcnu1" state="open" behavior="nested" text-scale="0.234795" decomp-scale="0.125" left="512" top="2432" width="1280" height="384">
 </objectview>

 <relationshipview id="_002aso60119pghvvrpip" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="Classes and Utilities" xlink:href="#_002aslb01so0qjtit8k4"/>
  <target-link xlink:role="objectview" xlink:title="Function getCcObject" xlink:href="#_002aso60119pghihimts"/>
 </relationshipview>

 <relationshipview id="_002aso6011arpe095a6t" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="Classes and Utilities" xlink:href="#_002aslb01so0qjtit8k4"/>
  <target-link xlink:role="objectview" xlink:title="Function getCcParameterValue" xlink:href="#_002aso6011arpekiilbv"/>
 </relationshipview>

 <objectview id="_002aso6011arpekiilbv" xlink:role="object" xlink:title="Function getCcParameterValue" xlink:href="#_002aso6011arpeo6pctt" state="open" behavior="nested" text-scale="0.234795" decomp-scale="0.125" left="512" top="2816" width="1280" height="384">
 </objectview>

 <objectview id="_002asoe0199qp5dfcrlg" xlink:role="object" xlink:title="Class CC_Globals" xlink:href="#_002asoe0199qp5dntu8p" state="open" behavior="nested" text-scale="0.234795" decomp-scale="0.125" left="3712" top="1664" width="1280" height="384">
 </objectview>

 <relationshipview id="_002asoe0199qp5j4tm2p" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="Classes and Utilities" xlink:href="#_002aslb01so0qjtit8k4"/>
  <target-link xlink:role="objectview" xlink:title="Class CC_Globals" xlink:href="#_002asoe0199qp5dfcrlg"/>
 </relationshipview>

 <relationshipview id="_002asog01bb7crectusj" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="Classes and Utilities" xlink:href="#_002aslb01so0qjtit8k4"/>
  <target-link xlink:role="objectview" xlink:title="Class CC_Configure" xlink:href="#_002asog01bb7crn92oem"/>
 </relationshipview>

 <objectview id="_002asog01bb7crn92oem" xlink:role="object" xlink:title="Class CC_Configure" xlink:href="#_002asog01bb7crlgqs7i" state="open" behavior="nested" text-scale="0.234795" decomp-scale="0.125" left="3712" top="896" width="1280" height="384">
 </objectview>

 <relationshipview id="_002aspc00urdfvicv8ek" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="Classes and Utilities" xlink:href="#_002aslb01so0qjtit8k4"/>
  <target-link xlink:role="objectview" xlink:title="Class CC_Project" xlink:href="#_002aspc00urdfvssdnlt"/>
 </relationshipview>

 <objectview id="_002aspc00urdfvssdnlt" xlink:role="object" xlink:title="Class CC_Project" xlink:href="#_002aspc00urdfvke2clc" state="open" behavior="nested" text-scale="0.234795" decomp-scale="0.125" left="3712" top="2432" width="1280" height="384">
 </objectview>

 <relationshipview id="_002aspu01dtujrbv5j4g" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="Classes and Utilities" xlink:href="#_002aslb01so0qjtit8k4"/>
  <target-link xlink:role="objectview" xlink:title="Function getContextInstance" xlink:href="#_002aspu01dtujri19qpj"/>
 </relationshipview>

 <objectview id="_002aspu01dtujri19qpj" xlink:role="object" xlink:title="Function getContextInstance" xlink:href="#_002aspu01dtujr219kb2" state="open" behavior="nested" text-scale="0.234795" decomp-scale="0.125" left="512" top="2048" width="1280" height="384">
 </objectview>

 <objectview id="_002asqd01ejc849jjeku" xlink:role="object" xlink:title="Function getReqParameterStatusValue, getRequirementStatusValue" xlink:href="#_002asqd01ejc84gj7htr" state="open" behavior="nested" text-scale="0.234795" decomp-scale="0.125" left="512" top="1280" width="1280" height="384">
 </objectview>

 <relationshipview id="_002asqd01ejc8odumsnn" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="Classes and Utilities" xlink:href="#_002aslb01so0qjtit8k4"/>
  <target-link xlink:role="objectview" xlink:title="Function getReqParameterStatusValue, getRequirementStatusValue" xlink:href="#_002asqd01ejc849jjeku"/>
 </relationshipview>

 <relationshipview id="_002asr8027atc8m8qat1" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="Classes and Utilities" xlink:href="#_002aslb01so0qjtit8k4"/>
  <target-link xlink:role="objectview" xlink:title="Function getCCstatusText" xlink:href="#_002asr8027atc8p1u46j"/>
 </relationshipview>

 <objectview id="_002asr8027atc8p1u46j" xlink:role="object" xlink:title="Function getCCstatusText" xlink:href="#_002asr8027atc8fq3com" state="open" behavior="nested" text-scale="0.234795" decomp-scale="0.125" left="512" top="3200" width="1280" height="384">
 </objectview>

 <objectview id="_002asrc025mhb8vsjhoo" xlink:role="object" xlink:title="Function getCcFamilyName" xlink:href="#_002asrc025mhb8l9nuie" state="open" behavior="nested" text-scale="0.234795" decomp-scale="0.125" left="512" top="3584" width="1280" height="384">
 </objectview>

 <relationshipview id="_002asrc025mhbi2tmi67" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="Classes and Utilities" xlink:href="#_002aslb01so0qjtit8k4"/>
  <target-link xlink:role="objectview" xlink:title="Function getCcFamilyName" xlink:href="#_002asrc025mhb8vsjhoo"/>
 </relationshipview>

 <objectview id="_002asre00pfovrf5v2j0" xlink:role="object" xlink:title="Class CC_Family" xlink:href="#_002asre00pfovrhcq6ql" state="open" behavior="nested" text-scale="0.234795" decomp-scale="0.125" left="3712" top="1280" width="1280" height="384">
 </objectview>

 <relationshipview id="_002asre00pfovrvmfs60" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="Classes and Utilities" xlink:href="#_002aslb01so0qjtit8k4"/>
  <target-link xlink:role="objectview" xlink:title="Class CC_Family" xlink:href="#_002asre00pfovrf5v2j0"/>
 </relationshipview>

 <objectview id="_002asrk01ihftarekeb9" xlink:role="object" xlink:title="Sub editRoleParameters" xlink:href="#_002asrk01ihftadue4i9" state="open" behavior="nested" text-scale="0.234795" decomp-scale="0.125" left="1792" top="896" width="1280" height="384">
 </objectview>

 <relationshipview id="_002asrk01ihftk7jpc4f" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="Classes and Utilities" xlink:href="#_002aslb01so0qjtit8k4"/>
  <target-link xlink:role="objectview" xlink:title="Sub editRoleParameters" xlink:href="#_002asrk01ihftarekeb9"/>
 </relationshipview>

 <relationshipview id="_002asrk027bf3na6p8a1" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="Classes and Utilities" xlink:href="#_002aslb01so0qjtit8k4"/>
  <target-link xlink:role="objectview" xlink:title="Sub NewContent" xlink:href="#_002asrk027bf3ntn3ovr"/>
 </relationshipview>

 <objectview id="_002asrk027bf3ntn3ovr" xlink:role="object" xlink:title="Sub NewContent" xlink:href="#_002asrk027bf3nhgprmd" state="open" behavior="nested" text-scale="0.234795" decomp-scale="0.125" left="1792" top="1280" width="1280" height="384">
 </objectview>

 <relationshipview id="_002asrn00tk5n7dm3t6i" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="Classes and Utilities" xlink:href="#_002aslb01so0qjtit8k4"/>
  <target-link xlink:role="objectview" xlink:title="Sub SearchContent" xlink:href="#_002asrn00tk5n7l8fqot"/>
 </relationshipview>

 <objectview id="_002asrn00tk5n7l8fqot" xlink:role="object" xlink:title="Sub SearchContent" xlink:href="#_002asrn00tk5n7chd85k" state="open" behavior="nested" text-scale="0.234795" decomp-scale="0.125" left="1792" top="1664" width="1280" height="384">
 </objectview>

 <objectview id="_002ass3019ekr045mfvo" xlink:role="object" xlink:title="Sub setDebugOn, setDebugOff, isDebugOn" xlink:href="#_002ass3019ekr0j68boh" state="open" behavior="nested" text-scale="0.234795" decomp-scale="0.125" left="1792" top="2048" width="1280" height="384">
 </objectview>

 <relationshipview id="_002ass3019ekrkb4fkn3" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="Classes and Utilities" xlink:href="#_002aslb01so0qjtit8k4"/>
  <target-link xlink:role="objectview" xlink:title="Sub setDebugOn, setDebugOff, isDebugOn" xlink:href="#_002ass3019ekr045mfvo"/>
 </relationshipview>

 <objectview id="_002assd00topmk16fcrp" xlink:role="object" xlink:title="Sub ccSendMail" xlink:href="#_002assd00topmkil1i4t" state="open" behavior="nested" text-scale="0.234795" decomp-scale="0.125" left="1792" top="2432" width="1280" height="384">
 </objectview>

 <relationshipview id="_002assd00topmkb5cp5a" decomposition-flag="true">
  <origin-link xlink:role="objectview" xlink:title="Classes and Utilities" xlink:href="#_002aslb01so0qjtit8k4"/>
  <target-link xlink:role="objectview" xlink:title="Sub ccSendMail" xlink:href="#_002assd00topmk16fcrp"/>
 </relationshipview>

 <modelview id="oid1" name="Main" title="Main" primary-flag="true" standalone-flag="true" zoom-level="1.67597" x="-154.116" y="-112" seq="1" xlink:role="model" xlink:title="Standard Blank" xlink:href="#_002aslb01sme0q6niekc" behavior="nested" text-scale="1" decomp-scale="0" visible-in="browser">
  <child-link xlink:role="objectview" xlink:title="Classes and Utilities" xlink:href="#_002aslb01so0qjtit8k4"/>
  <child-link xlink:role="relationshipview" xlink:href="#_002aslb01so0rr47dbi6"/>
 </modelview>


</metis>
