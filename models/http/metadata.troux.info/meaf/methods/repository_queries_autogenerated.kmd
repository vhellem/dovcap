<?xml version="1.0"?>
<?metis version="5.0"?>
<?metisxml version="1.2"?>
<!DOCTYPE metis PUBLIC "-//METIS/METIS XML 1.2//EN" "http://xml.metis.no/metis12.dtd">

<metis
 xmlns="http://www.metis.no/metis"
 xmlns:xlink="http://www.w3.org/1999/xlink"
>

 <cpp-method id="QueryMachineOverdeployed_software_provides_is_provided_by_resource" name="QueryMachineOverdeployed_software_provides_is_provided_by_resource" title="provides Resource" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Deployed Software provides Resource"
    )
    and component.type="Resource"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Deployed Software provides Resource" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryDeployed_InstanceOverdeployed_software_provides_is_provided_by_resource" name="QueryDeployed_InstanceOverdeployed_software_provides_is_provided_by_resource" title="is provided by Deployed Software" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Deployed Software provides Resource"
    )
    and component.type="Deployed Software"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Deployed Software provides Resource" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryInformationNeedOverchange_component_addresses_is_addressed_by_information_need" name="QueryInformationNeedOverchange_component_addresses_is_addressed_by_information_need" title="addresses Information Need" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Change Component addresses Information Need"
    )
    and component.type="Information Need"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Change Component addresses Information Need" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryInitiative_DomainOverchange_component_addresses_is_addressed_by_information_need" name="QueryInitiative_DomainOverchange_component_addresses_is_addressed_by_information_need" title="is addressed by Change Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Change Component addresses Information Need"
    )
    and component.type="Change Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Change Component addresses Information Need" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryITRequirementOverchange_component_addresses_is_addressed_by_requirement" name="QueryITRequirementOverchange_component_addresses_is_addressed_by_requirement" title="addresses Requirement" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Change Component addresses Requirement"
    )
    and component.type="Requirement"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Change Component addresses Requirement" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryInitiative_DomainOverchange_component_addresses_is_addressed_by_requirement" name="QueryInitiative_DomainOverchange_component_addresses_is_addressed_by_requirement" title="is addressed by Change Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Change Component addresses Requirement"
    )
    and component.type="Change Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Change Component addresses Requirement" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="Queryanalysis_componentOverchange_component_supports_is_supported_by_analysis_component" name="Queryanalysis_componentOverchange_component_supports_is_supported_by_analysis_component" title="supports Analysis Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Change Component supports Analysis Component"
    )
    and component.type="Analysis Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Change Component supports Analysis Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryInitiative_DomainOverchange_component_supports_is_supported_by_analysis_component" name="QueryInitiative_DomainOverchange_component_supports_is_supported_by_analysis_component" title="is supported by Change Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Change Component supports Analysis Component"
    )
    and component.type="Change Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Change Component supports Analysis Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryApplication_DomainOveranalysis_component_affects_is_affected_by_application_component" name="QueryApplication_DomainOveranalysis_component_affects_is_affected_by_application_component" title="affects Application Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Analysis Component affects Application Component"
    )
    and component.type="Application Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Analysis Component affects Application Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="Queryanalysis_componentOveranalysis_component_affects_is_affected_by_application_component" name="Queryanalysis_componentOveranalysis_component_affects_is_affected_by_application_component" title="is affected by Analysis Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Analysis Component affects Application Component"
    )
    and component.type="Analysis Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Analysis Component affects Application Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryInfrastructure_DomainOveranalysis_component_affects_is_affected_by_infrastructure_component" name="QueryInfrastructure_DomainOveranalysis_component_affects_is_affected_by_infrastructure_component" title="affects Infrastructure Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Analysis Component affects Infrastructure Component"
    )
    and component.type="Infrastructure Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Analysis Component affects Infrastructure Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="Queryanalysis_componentOveranalysis_component_affects_is_affected_by_infrastructure_component" name="Queryanalysis_componentOveranalysis_component_affects_is_affected_by_infrastructure_component" title="is affected by Analysis Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Analysis Component affects Infrastructure Component"
    )
    and component.type="Analysis Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Analysis Component affects Infrastructure Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryOrganization_DomainOverchange_component_affects_is_affected_by_organization_component" name="QueryOrganization_DomainOverchange_component_affects_is_affected_by_organization_component" title="affects Organization Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Change Component affects Organization Component"
    )
    and component.type="Organization Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Change Component affects Organization Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryInitiative_DomainOverchange_component_affects_is_affected_by_organization_component" name="QueryInitiative_DomainOverchange_component_affects_is_affected_by_organization_component" title="is affected by Change Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Change Component affects Organization Component"
    )
    and component.type="Change Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Change Component affects Organization Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryOrganization_DomainOverplan_affects_is_affected_by_organization_component" name="QueryOrganization_DomainOverplan_affects_is_affected_by_organization_component" title="affects Organization Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Plan affects Organization Component"
    )
    and component.type="Organization Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Plan affects Organization Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryTransitionPlanItemOverplan_affects_is_affected_by_organization_component" name="QueryTransitionPlanItemOverplan_affects_is_affected_by_organization_component" title="is affected by Plan" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Plan affects Organization Component"
    )
    and component.type="Plan"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Plan affects Organization Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryMachineOverplan_affects_is_affected_by_resource" name="QueryMachineOverplan_affects_is_affected_by_resource" title="affects Resource" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Plan affects Resource"
    )
    and component.type="Resource"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Plan affects Resource" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryTransitionPlanItemOverplan_affects_is_affected_by_resource" name="QueryTransitionPlanItemOverplan_affects_is_affected_by_resource" title="is affected by Plan" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Plan affects Resource"
    )
    and component.type="Plan"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Plan affects Resource" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="Queryknowledge_componentOverplan_affects_is_affected_by_knowledge_component" name="Queryknowledge_componentOverplan_affects_is_affected_by_knowledge_component" title="affects Knowledge Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Plan affects Knowledge Component"
    )
    and component.type="Knowledge Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Plan affects Knowledge Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryTransitionPlanItemOverplan_affects_is_affected_by_knowledge_component" name="QueryTransitionPlanItemOverplan_affects_is_affected_by_knowledge_component" title="is affected by Plan" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Plan affects Knowledge Component"
    )
    and component.type="Plan"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Plan affects Knowledge Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryProcess_DomainOverchange_component_affects_is_affected_by_process_component" name="QueryProcess_DomainOverchange_component_affects_is_affected_by_process_component" title="affects Process Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Change Component affects Process Component"
    )
    and component.type="Process Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Change Component affects Process Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryInitiative_DomainOverchange_component_affects_is_affected_by_process_component" name="QueryInitiative_DomainOverchange_component_affects_is_affected_by_process_component" title="is affected by Change Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Change Component affects Process Component"
    )
    and component.type="Change Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Change Component affects Process Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="Queryit_architecture_componentOverchange_component_affects_is_affected_by_it_architecture_component" name="Queryit_architecture_componentOverchange_component_affects_is_affected_by_it_architecture_component" title="affects IT Architecture Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Change Component affects IT Architecture Component"
    )
    and component.type="IT Architecture Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Change Component affects IT Architecture Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryInitiative_DomainOverchange_component_affects_is_affected_by_it_architecture_component" name="QueryInitiative_DomainOverchange_component_affects_is_affected_by_it_architecture_component" title="is affected by Change Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Change Component affects IT Architecture Component"
    )
    and component.type="Change Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Change Component affects IT Architecture Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="Queryit_architecture_componentOverplan_affects_is_affected_by_it_architecture_component" name="Queryit_architecture_componentOverplan_affects_is_affected_by_it_architecture_component" title="affects IT Architecture Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Plan affects IT Architecture Component"
    )
    and component.type="IT Architecture Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Plan affects IT Architecture Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryTransitionPlanItemOverplan_affects_is_affected_by_it_architecture_component" name="QueryTransitionPlanItemOverplan_affects_is_affected_by_it_architecture_component" title="is affected by Plan" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Plan affects IT Architecture Component"
    )
    and component.type="Plan"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Plan affects IT Architecture Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryApplication_DomainOverchange_component_affects_is_affected_by_application_component" name="QueryApplication_DomainOverchange_component_affects_is_affected_by_application_component" title="affects Application Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Change Component affects Application Component"
    )
    and component.type="Application Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Change Component affects Application Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryInitiative_DomainOverchange_component_affects_is_affected_by_application_component" name="QueryInitiative_DomainOverchange_component_affects_is_affected_by_application_component" title="is affected by Change Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Change Component affects Application Component"
    )
    and component.type="Change Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Change Component affects Application Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryInfrastructure_DomainOverchange_component_affects_is_affected_by_infrastructure_component" name="QueryInfrastructure_DomainOverchange_component_affects_is_affected_by_infrastructure_component" title="affects Infrastructure Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Change Component affects Infrastructure Component"
    )
    and component.type="Infrastructure Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Change Component affects Infrastructure Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryInitiative_DomainOverchange_component_affects_is_affected_by_infrastructure_component" name="QueryInitiative_DomainOverchange_component_affects_is_affected_by_infrastructure_component" title="is affected by Change Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Change Component affects Infrastructure Component"
    )
    and component.type="Change Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Change Component affects Infrastructure Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryGeneric_ComponentOverbusiness_process_has_control_is_control_for_generic_component" name="QueryGeneric_ComponentOverbusiness_process_has_control_is_control_for_generic_component" title="has control Basic Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Business Process has control Basic Component"
    )
    and component.type="Basic Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Business Process has control Basic Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryWorkflowProcessOverbusiness_process_has_control_is_control_for_generic_component" name="QueryWorkflowProcessOverbusiness_process_has_control_is_control_for_generic_component" title="is control for Business Process" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Business Process has control Basic Component"
    )
    and component.type="Business Process"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Business Process has control Basic Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryApplication_DomainOverplan_affects_is_affected_by_application_component" name="QueryApplication_DomainOverplan_affects_is_affected_by_application_component" title="affects Application Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Plan affects Application Component"
    )
    and component.type="Application Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Plan affects Application Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryTransitionPlanItemOverplan_affects_is_affected_by_application_component" name="QueryTransitionPlanItemOverplan_affects_is_affected_by_application_component" title="is affected by Plan" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Plan affects Application Component"
    )
    and component.type="Plan"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Plan affects Application Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryInfrastructure_DomainOverplan_affects_is_affected_by_infrastructure_component" name="QueryInfrastructure_DomainOverplan_affects_is_affected_by_infrastructure_component" title="affects Infrastructure Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Plan affects Infrastructure Component"
    )
    and component.type="Infrastructure Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Plan affects Infrastructure Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryTransitionPlanItemOverplan_affects_is_affected_by_infrastructure_component" name="QueryTransitionPlanItemOverplan_affects_is_affected_by_infrastructure_component" title="is affected by Plan" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Plan affects Infrastructure Component"
    )
    and component.type="Plan"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Plan affects Infrastructure Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryLocationTypeOverplan_affects_is_affected_by_logical_location" name="QueryLocationTypeOverplan_affects_is_affected_by_logical_location" title="affects Logical Location" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Plan affects Logical Location"
    )
    and component.type="Logical Location"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Plan affects Logical Location" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryTransitionPlanItemOverplan_affects_is_affected_by_logical_location" name="QueryTransitionPlanItemOverplan_affects_is_affected_by_logical_location" title="is affected by Plan" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Plan affects Logical Location"
    )
    and component.type="Plan"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Plan affects Logical Location" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryLocationTypeOverchange_component_affects_is_affected_by_logical_location" name="QueryLocationTypeOverchange_component_affects_is_affected_by_logical_location" title="affects Logical Location" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Change Component affects Logical Location"
    )
    and component.type="Logical Location"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Change Component affects Logical Location" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryInitiative_DomainOverchange_component_affects_is_affected_by_logical_location" name="QueryInitiative_DomainOverchange_component_affects_is_affected_by_logical_location" title="is affected by Change Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Change Component affects Logical Location"
    )
    and component.type="Change Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Change Component affects Logical Location" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryApplication_DomainOverpolicy_component_affects_is_affected_by_application_component" name="QueryApplication_DomainOverpolicy_component_affects_is_affected_by_application_component" title="affects Application Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Policy Component affects Application Component"
    )
    and component.type="Application Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Policy Component affects Application Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryPolicy_DomainOverpolicy_component_affects_is_affected_by_application_component" name="QueryPolicy_DomainOverpolicy_component_affects_is_affected_by_application_component" title="is affected by Policy Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Policy Component affects Application Component"
    )
    and component.type="Policy Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Policy Component affects Application Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryActionOverpolicy_component_affects_is_affected_by_function" name="QueryActionOverpolicy_component_affects_is_affected_by_function" title="affects Function" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Policy Component affects Function"
    )
    and component.type="Function"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Policy Component affects Function" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryPolicy_DomainOverpolicy_component_affects_is_affected_by_function" name="QueryPolicy_DomainOverpolicy_component_affects_is_affected_by_function" title="is affected by Policy Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Policy Component affects Function"
    )
    and component.type="Policy Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Policy Component affects Function" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryActionOverstrategy_component_affects_is_affected_by_function" name="QueryActionOverstrategy_component_affects_is_affected_by_function" title="affects Function" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Strategy Component affects Function"
    )
    and component.type="Function"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Strategy Component affects Function" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="Querystrategy_componentOverstrategy_component_affects_is_affected_by_function" name="Querystrategy_componentOverstrategy_component_affects_is_affected_by_function" title="is affected by Strategy Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Strategy Component affects Function"
    )
    and component.type="Strategy Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Strategy Component affects Function" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryOrganization_DomainOveranalysis_component_affects_is_affected_by_organization_component" name="QueryOrganization_DomainOveranalysis_component_affects_is_affected_by_organization_component" title="affects Organization Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Analysis Component affects Organization Component"
    )
    and component.type="Organization Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Analysis Component affects Organization Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="Queryanalysis_componentOveranalysis_component_affects_is_affected_by_organization_component" name="Queryanalysis_componentOveranalysis_component_affects_is_affected_by_organization_component" title="is affected by Analysis Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Analysis Component affects Organization Component"
    )
    and component.type="Analysis Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Analysis Component affects Organization Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryPhysicalDatastoreOverinfrastructure_component_deploys_is_deployed_in_datastore" name="QueryPhysicalDatastoreOverinfrastructure_component_deploys_is_deployed_in_datastore" title="deploys Datastore" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Infrastructure Component deploys Datastore"
    )
    and component.type="Datastore"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Infrastructure Component deploys Datastore" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryInfrastructure_DomainOverinfrastructure_component_deploys_is_deployed_in_datastore" name="QueryInfrastructure_DomainOverinfrastructure_component_deploys_is_deployed_in_datastore" title="is deployed in Infrastructure Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Infrastructure Component deploys Datastore"
    )
    and component.type="Infrastructure Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Infrastructure Component deploys Datastore" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryPersonOverproject_allocates_is_allocated_to_percentage_person" name="QueryPersonOverproject_allocates_is_allocated_to_percentage_person" title="allocates Person" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Project allocates Person"
    )
    and component.type="Person"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Project allocates Person" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryProjectOverproject_allocates_is_allocated_to_percentage_person" name="QueryProjectOverproject_allocates_is_allocated_to_percentage_person" title="is allocated to Project" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Project allocates Person"
    )
    and component.type="Project"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Project allocates Person" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryPersonOvertask_allocates_is_allocated_to_percentage_person" name="QueryPersonOvertask_allocates_is_allocated_to_percentage_person" title="allocates Person" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Task allocates Person"
    )
    and component.type="Person"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Task allocates Person" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryGenericTaskOvertask_allocates_is_allocated_to_percentage_person" name="QueryGenericTaskOvertask_allocates_is_allocated_to_percentage_person" title="is allocated to Task" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Task allocates Person"
    )
    and component.type="Task"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Task allocates Person" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryManpowerOverproject_allocates_is_allocated_to_percentage_manpower" name="QueryManpowerOverproject_allocates_is_allocated_to_percentage_manpower" title="allocates Manpower" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Project allocates Manpower"
    )
    and component.type="Manpower"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Project allocates Manpower" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryProjectOverproject_allocates_is_allocated_to_percentage_manpower" name="QueryProjectOverproject_allocates_is_allocated_to_percentage_manpower" title="is allocated to Project" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Project allocates Manpower"
    )
    and component.type="Project"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Project allocates Manpower" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryManpowerOvertask_allocates_is_allocated_to_percentage_manpower" name="QueryManpowerOvertask_allocates_is_allocated_to_percentage_manpower" title="allocates Manpower" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="task allocates Manpower"
    )
    and component.type="Manpower"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="task allocates Manpower" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryGenericTaskOvertask_allocates_is_allocated_to_percentage_manpower" name="QueryGenericTaskOvertask_allocates_is_allocated_to_percentage_manpower" title="is allocated to task" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="task allocates Manpower"
    )
    and component.type="task"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="task allocates Manpower" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryITProductOverit_architecture_element_allows_is_allowed_as_it_product" name="QueryITProductOverit_architecture_element_allows_is_allowed_as_it_product" title="allows IT Product" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="IT Architecture Element allows IT Product"
    )
    and component.type="IT Product"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="IT Architecture Element allows IT Product" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryArchitectureTemplateElementOverit_architecture_element_allows_is_allowed_as_it_product" name="QueryArchitectureTemplateElementOverit_architecture_element_allows_is_allowed_as_it_product" title="is allowed as IT Architecture Element" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="IT Architecture Element allows IT Product"
    )
    and component.type="IT Architecture Element"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="IT Architecture Element allows IT Product" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryPhysicalDatastoreOverit_architecture_element_allows_is_allowed_as_datastore" name="QueryPhysicalDatastoreOverit_architecture_element_allows_is_allowed_as_datastore" title="allows Datastore" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="IT Architecture Element allows Datastore"
    )
    and component.type="Datastore"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="IT Architecture Element allows Datastore" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryArchitectureTemplateElementOverit_architecture_element_allows_is_allowed_as_datastore" name="QueryArchitectureTemplateElementOverit_architecture_element_allows_is_allowed_as_datastore" title="is allowed as IT Architecture Element" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="IT Architecture Element allows Datastore"
    )
    and component.type="IT Architecture Element"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="IT Architecture Element allows Datastore" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryStandardOverit_architecture_element_allows_is_allowed_as_standard" name="QueryStandardOverit_architecture_element_allows_is_allowed_as_standard" title="allows Standard" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="IT Architecture Element allows Standard"
    )
    and component.type="Standard"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="IT Architecture Element allows Standard" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryArchitectureTemplateElementOverit_architecture_element_allows_is_allowed_as_standard" name="QueryArchitectureTemplateElementOverit_architecture_element_allows_is_allowed_as_standard" title="is allowed as IT Architecture Element" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="IT Architecture Element allows Standard"
    )
    and component.type="IT Architecture Element"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="IT Architecture Element allows Standard" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryApplication_DomainOverstrategy_component_applies_to_has_application_component" name="QueryApplication_DomainOverstrategy_component_applies_to_has_application_component" title="applies to Application Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Strategy Component applies to Application Component"
    )
    and component.type="Application Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Strategy Component applies to Application Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="Querystrategy_componentOverstrategy_component_applies_to_has_application_component" name="Querystrategy_componentOverstrategy_component_applies_to_has_application_component" title="has Strategy Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Strategy Component applies to Application Component"
    )
    and component.type="Strategy Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Strategy Component applies to Application Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryInfrastructure_DomainOverstrategy_component_applies_to_has_infrastructure_component" name="QueryInfrastructure_DomainOverstrategy_component_applies_to_has_infrastructure_component" title="applies to Infrastructure Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Strategy Component applies to Infrastructure Component"
    )
    and component.type="Infrastructure Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Strategy Component applies to Infrastructure Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="Querystrategy_componentOverstrategy_component_applies_to_has_infrastructure_component" name="Querystrategy_componentOverstrategy_component_applies_to_has_infrastructure_component" title="has Strategy Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Strategy Component applies to Infrastructure Component"
    )
    and component.type="Strategy Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Strategy Component applies to Infrastructure Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryOrganization_DomainOverstrategy_component_applies_to_has_organization_component" name="QueryOrganization_DomainOverstrategy_component_applies_to_has_organization_component" title="applies to Organization Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Strategy Component applies to Organization Component"
    )
    and component.type="Organization Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Strategy Component applies to Organization Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="Querystrategy_componentOverstrategy_component_applies_to_has_organization_component" name="Querystrategy_componentOverstrategy_component_applies_to_has_organization_component" title="has Strategy Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Strategy Component applies to Organization Component"
    )
    and component.type="Strategy Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Strategy Component applies to Organization Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryApplication_DomainOverrequirement_applies_to_has_application_component" name="QueryApplication_DomainOverrequirement_applies_to_has_application_component" title="applies to Application Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Requirement applies to Application Component"
    )
    and component.type="Application Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Requirement applies to Application Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryITRequirementOverrequirement_applies_to_has_application_component" name="QueryITRequirementOverrequirement_applies_to_has_application_component" title="has Requirement" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Requirement applies to Application Component"
    )
    and component.type="Requirement"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Requirement applies to Application Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryInfrastructure_DomainOverrequirement_applies_to_has_infrastructure_component" name="QueryInfrastructure_DomainOverrequirement_applies_to_has_infrastructure_component" title="applies to Infrastructure Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Requirement applies to Infrastructure Component"
    )
    and component.type="Infrastructure Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Requirement applies to Infrastructure Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryITRequirementOverrequirement_applies_to_has_infrastructure_component" name="QueryITRequirementOverrequirement_applies_to_has_infrastructure_component" title="has Requirement" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Requirement applies to Infrastructure Component"
    )
    and component.type="Requirement"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Requirement applies to Infrastructure Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryProcess_DomainOverrequirement_applies_to_has_process_component" name="QueryProcess_DomainOverrequirement_applies_to_has_process_component" title="applies to Process Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Requirement applies to Process Component"
    )
    and component.type="Process Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Requirement applies to Process Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryITRequirementOverrequirement_applies_to_has_process_component" name="QueryITRequirementOverrequirement_applies_to_has_process_component" title="has Requirement" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Requirement applies to Process Component"
    )
    and component.type="Requirement"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Requirement applies to Process Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryApplication_DomainOverpolicy_component_governs_is_governed_by_application_component" name="QueryApplication_DomainOverpolicy_component_governs_is_governed_by_application_component" title="governs Application Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Policy Component governs Application Component"
    )
    and component.type="Application Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Policy Component governs Application Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryPolicy_DomainOverpolicy_component_governs_is_governed_by_application_component" name="QueryPolicy_DomainOverpolicy_component_governs_is_governed_by_application_component" title="is governed by Policy Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Policy Component governs Application Component"
    )
    and component.type="Policy Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Policy Component governs Application Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryInfrastructure_DomainOverpolicy_component_governs_is_governed_by_infrastructure_component" name="QueryInfrastructure_DomainOverpolicy_component_governs_is_governed_by_infrastructure_component" title="governs Infrastructure Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Policy Component governs Infrastructure Component"
    )
    and component.type="Infrastructure Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Policy Component governs Infrastructure Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryPolicy_DomainOverpolicy_component_governs_is_governed_by_infrastructure_component" name="QueryPolicy_DomainOverpolicy_component_governs_is_governed_by_infrastructure_component" title="is governed by Policy Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Policy Component governs Infrastructure Component"
    )
    and component.type="Policy Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Policy Component governs Infrastructure Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="Queryit_architecture_componentOverpolicy_component_governs_is_governed_by_it_architecture_component" name="Queryit_architecture_componentOverpolicy_component_governs_is_governed_by_it_architecture_component" title="governs IT Architecture Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Policy Component governs IT Architecture Component"
    )
    and component.type="IT Architecture Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Policy Component governs IT Architecture Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryPolicy_DomainOverpolicy_component_governs_is_governed_by_it_architecture_component" name="QueryPolicy_DomainOverpolicy_component_governs_is_governed_by_it_architecture_component" title="is governed by Policy Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Policy Component governs IT Architecture Component"
    )
    and component.type="Policy Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Policy Component governs IT Architecture Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryDeliverableOverpolicy_component_governs_is_governed_by_deliverable" name="QueryDeliverableOverpolicy_component_governs_is_governed_by_deliverable" title="governs Deliverable" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Policy Component governs Deliverable"
    )
    and component.type="Deliverable"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Policy Component governs Deliverable" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryPolicy_DomainOverpolicy_component_governs_is_governed_by_deliverable" name="QueryPolicy_DomainOverpolicy_component_governs_is_governed_by_deliverable" title="is governed by Policy Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Policy Component governs Deliverable"
    )
    and component.type="Policy Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Policy Component governs Deliverable" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryCapabilityOverprocess_component_provides_is_provided_by_capability" name="QueryCapabilityOverprocess_component_provides_is_provided_by_capability" title="provides Capability" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Process Component provides Capability"
    )
    and component.type="Capability"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Process Component provides Capability" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryProcess_DomainOverprocess_component_provides_is_provided_by_capability" name="QueryProcess_DomainOverprocess_component_provides_is_provided_by_capability" title="is provided by Process Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Process Component provides Capability"
    )
    and component.type="Process Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Process Component provides Capability" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryCapabilityOverapplication_component_provides_is_provided_by_capability" name="QueryCapabilityOverapplication_component_provides_is_provided_by_capability" title="provides Capability" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Application Component provides Capability"
    )
    and component.type="Capability"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Application Component provides Capability" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryApplication_DomainOverapplication_component_provides_is_provided_by_capability" name="QueryApplication_DomainOverapplication_component_provides_is_provided_by_capability" title="is provided by Application Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Application Component provides Capability"
    )
    and component.type="Application Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Application Component provides Capability" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryCapabilityOverinfrastructure_component_provides_is_provided_by_capability" name="QueryCapabilityOverinfrastructure_component_provides_is_provided_by_capability" title="provides Capability" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Infrastructure Component provides Capability"
    )
    and component.type="Capability"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Infrastructure Component provides Capability" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryInfrastructure_DomainOverinfrastructure_component_provides_is_provided_by_capability" name="QueryInfrastructure_DomainOverinfrastructure_component_provides_is_provided_by_capability" title="is provided by Infrastructure Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Infrastructure Component provides Capability"
    )
    and component.type="Infrastructure Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Infrastructure Component provides Capability" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryDeliverableOverorganization_component_delivers_is_delivered_by_deliverable" name="QueryDeliverableOverorganization_component_delivers_is_delivered_by_deliverable" title="delivers Deliverable" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Organization Component delivers Deliverable"
    )
    and component.type="Deliverable"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Organization Component delivers Deliverable" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryOrganization_DomainOverorganization_component_delivers_is_delivered_by_deliverable" name="QueryOrganization_DomainOverorganization_component_delivers_is_delivered_by_deliverable" title="is delivered by Organization Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Organization Component delivers Deliverable"
    )
    and component.type="Organization Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Organization Component delivers Deliverable" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryOrganization_DomainOverbusiness_process_has_controller_is_controller_for_organization_component" name="QueryOrganization_DomainOverbusiness_process_has_controller_is_controller_for_organization_component" title="has controller Organization Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Business Process has controller Organization Component"
    )
    and component.type="Organization Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Business Process has controller Organization Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryWorkflowProcessOverbusiness_process_has_controller_is_controller_for_organization_component" name="QueryWorkflowProcessOverbusiness_process_has_controller_is_controller_for_organization_component" title="is controller for Business Process" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Business Process has controller Organization Component"
    )
    and component.type="Business Process"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Business Process has controller Organization Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryGeneric_ComponentOverprocess_data_represents_is_data_for_generic_component" name="QueryGeneric_ComponentOverprocess_data_represents_is_data_for_generic_component" title="represents Basic Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Process Data represents Basic Component"
    )
    and component.type="Basic Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Process Data represents Basic Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryBPM_Data_ObjectOverprocess_data_represents_is_data_for_generic_component" name="QueryBPM_Data_ObjectOverprocess_data_represents_is_data_for_generic_component" title="is data for Process Data" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Process Data represents Basic Component"
    )
    and component.type="Process Data"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Process Data represents Basic Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="Queryinformation_componentOvermessage_carries_is_carried_by_information_component" name="Queryinformation_componentOvermessage_carries_is_carried_by_information_component" title="carries Information Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Message carries Information Component"
    )
    and component.type="Information Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Message carries Information Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryInterfaceOvermessage_carries_is_carried_by_information_component" name="QueryInterfaceOvermessage_carries_is_carried_by_information_component" title="is carried by Message" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Message carries Information Component"
    )
    and component.type="Message"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Message carries Information Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="Queryinformation_componentOvercommunication_carries_is_carried_by_information_component" name="Queryinformation_componentOvercommunication_carries_is_carried_by_information_component" title="carries Information Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Communication carries Information Component"
    )
    and component.type="Information Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Communication carries Information Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryCommunicationOvercommunication_carries_is_carried_by_information_component" name="QueryCommunicationOvercommunication_carries_is_carried_by_information_component" title="is carried by Communication" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Communication carries Information Component"
    )
    and component.type="Communication"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Communication carries Information Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryLogicalApplicationOversoftware_product_implements_is_implemented_by_logical_application" name="QueryLogicalApplicationOversoftware_product_implements_is_implemented_by_logical_application" title="implements Logical Application" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Software Product implements Logical Application"
    )
    and component.type="Logical Application"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Software Product implements Logical Application" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryApplicationEnvironmentOversoftware_product_implements_is_implemented_by_logical_application" name="QueryApplicationEnvironmentOversoftware_product_implements_is_implemented_by_logical_application" title="is implemented by Software Product" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Software Product implements Logical Application"
    )
    and component.type="Software Product"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Software Product implements Logical Application" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryLogicalTechnologyItemOverhardware_product_implements_is_implemented_by_logical_technology_item" name="QueryLogicalTechnologyItemOverhardware_product_implements_is_implemented_by_logical_technology_item" title="implements Logical Technology Item" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Hardware Product implements Logical Technology Item"
    )
    and component.type="Logical Technology Item"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Hardware Product implements Logical Technology Item" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryTechnologyProductOverhardware_product_implements_is_implemented_by_logical_technology_item" name="QueryTechnologyProductOverhardware_product_implements_is_implemented_by_logical_technology_item" title="is implemented by Hardware Product" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Hardware Product implements Logical Technology Item"
    )
    and component.type="Hardware Product"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Hardware Product implements Logical Technology Item" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryLogicalDatastoreOverdatastore_implements_is_implemented_by_logical_datastore" name="QueryLogicalDatastoreOverdatastore_implements_is_implemented_by_logical_datastore" title="implements Logical Datastore" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Datastore implements Logical Datastore"
    )
    and component.type="Logical Datastore"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Datastore implements Logical Datastore" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryPhysicalDatastoreOverdatastore_implements_is_implemented_by_logical_datastore" name="QueryPhysicalDatastoreOverdatastore_implements_is_implemented_by_logical_datastore" title="is implemented by Datastore" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Datastore implements Logical Datastore"
    )
    and component.type="Datastore"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Datastore implements Logical Datastore" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryLogicalApplicationOverdeployed_software_implements_is_implemented_by_logical_application" name="QueryLogicalApplicationOverdeployed_software_implements_is_implemented_by_logical_application" title="implements Logical Application" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Deployed Software implements Logical Application"
    )
    and component.type="Logical Application"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Deployed Software implements Logical Application" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryDeployed_InstanceOverdeployed_software_implements_is_implemented_by_logical_application" name="QueryDeployed_InstanceOverdeployed_software_implements_is_implemented_by_logical_application" title="is implemented by Deployed Software" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Deployed Software implements Logical Application"
    )
    and component.type="Deployed Software"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Deployed Software implements Logical Application" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryLogicalTechnologyItemOverinfrastructure_component_implements_is_implemented_by_logical_technology_item" name="QueryLogicalTechnologyItemOverinfrastructure_component_implements_is_implemented_by_logical_technology_item" title="implements Logical Technology Item" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Infrastructure Component implements Logical Technology Item"
    )
    and component.type="Logical Technology Item"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Infrastructure Component implements Logical Technology Item" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryInfrastructure_DomainOverinfrastructure_component_implements_is_implemented_by_logical_technology_item" name="QueryInfrastructure_DomainOverinfrastructure_component_implements_is_implemented_by_logical_technology_item" title="is implemented by Infrastructure Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Infrastructure Component implements Logical Technology Item"
    )
    and component.type="Infrastructure Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Infrastructure Component implements Logical Technology Item" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryStandardOverorganization_defines_is_defined_by_standard" name="QueryStandardOverorganization_defines_is_defined_by_standard" title="defines Standard" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Organization defines Standard"
    )
    and component.type="Standard"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Organization defines Standard" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryOrganizationOverorganization_defines_is_defined_by_standard" name="QueryOrganizationOverorganization_defines_is_defined_by_standard" title="is defined by Organization" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Organization defines Standard"
    )
    and component.type="Organization"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Organization defines Standard" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryITRequirementOvercontract_governs_is_governed_by_requirement" name="QueryITRequirementOvercontract_governs_is_governed_by_requirement" title="governs Requirement" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Contract governs Requirement"
    )
    and component.type="Requirement"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Contract governs Requirement" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryContractOvercontract_governs_is_governed_by_requirement" name="QueryContractOvercontract_governs_is_governed_by_requirement" title="is governed by Contract" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Contract governs Requirement"
    )
    and component.type="Contract"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Contract governs Requirement" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryGeneric_ComponentOverbusiness_process_has_output_is_output_for_generic_component" name="QueryGeneric_ComponentOverbusiness_process_has_output_is_output_for_generic_component" title="has output Basic Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Business Process has output Basic Component"
    )
    and component.type="Basic Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Business Process has output Basic Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryWorkflowProcessOverbusiness_process_has_output_is_output_for_generic_component" name="QueryWorkflowProcessOverbusiness_process_has_output_is_output_for_generic_component" title="is output for Business Process" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Business Process has output Basic Component"
    )
    and component.type="Business Process"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Business Process has output Basic Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryApplicationEnvironmentOverdeployed_software_deploys_is_deployed_in_software_product" name="QueryApplicationEnvironmentOverdeployed_software_deploys_is_deployed_in_software_product" title="deploys Software Product" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Deployed Software deploys Software Product"
    )
    and component.type="Software Product"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Deployed Software deploys Software Product" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryDeployed_InstanceOverdeployed_software_deploys_is_deployed_in_software_product" name="QueryDeployed_InstanceOverdeployed_software_deploys_is_deployed_in_software_product" title="is deployed in Deployed Software" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Deployed Software deploys Software Product"
    )
    and component.type="Deployed Software"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Deployed Software deploys Software Product" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryDeployed_InstanceOverinfrastructure_component_deploys_is_deployed_in_deployed_software" name="QueryDeployed_InstanceOverinfrastructure_component_deploys_is_deployed_in_deployed_software" title="deploys Deployed Software" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Infrastructure Component deploys Deployed Software"
    )
    and component.type="Deployed Software"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Infrastructure Component deploys Deployed Software" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryInfrastructure_DomainOverinfrastructure_component_deploys_is_deployed_in_deployed_software" name="QueryInfrastructure_DomainOverinfrastructure_component_deploys_is_deployed_in_deployed_software" title="is deployed in Infrastructure Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Infrastructure Component deploys Deployed Software"
    )
    and component.type="Infrastructure Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Infrastructure Component deploys Deployed Software" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryDeliverableOverchange_component_develops_is_developed_by_deliverable" name="QueryDeliverableOverchange_component_develops_is_developed_by_deliverable" title="develops Deliverable" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Change Component develops Deliverable"
    )
    and component.type="Deliverable"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Change Component develops Deliverable" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryInitiative_DomainOverchange_component_develops_is_developed_by_deliverable" name="QueryInitiative_DomainOverchange_component_develops_is_developed_by_deliverable" title="is developed by Change Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Change Component develops Deliverable"
    )
    and component.type="Change Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Change Component develops Deliverable" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryGeneric_ComponentOverbusiness_process_has_mechanism_is_mechanism_for_generic_component" name="QueryGeneric_ComponentOverbusiness_process_has_mechanism_is_mechanism_for_generic_component" title="has mechanism Basic Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Business Process has mechanism Basic Component"
    )
    and component.type="Basic Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Business Process has mechanism Basic Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryWorkflowProcessOverbusiness_process_has_mechanism_is_mechanism_for_generic_component" name="QueryWorkflowProcessOverbusiness_process_has_mechanism_is_mechanism_for_generic_component" title="is mechanism for Business Process" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Business Process has mechanism Basic Component"
    )
    and component.type="Business Process"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Business Process has mechanism Basic Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryITRequirementOverrecommendation_satisfies_is_satisfied_by_requirement" name="QueryITRequirementOverrecommendation_satisfies_is_satisfied_by_requirement" title="satisfies Requirement" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Recommendation satisfies Requirement"
    )
    and component.type="Requirement"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Recommendation satisfies Requirement" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryRecommendationOverrecommendation_satisfies_is_satisfied_by_requirement" name="QueryRecommendationOverrecommendation_satisfies_is_satisfied_by_requirement" title="is satisfied by Recommendation" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Recommendation satisfies Requirement"
    )
    and component.type="Recommendation"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Recommendation satisfies Requirement" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryMarketStrategyOverbusiness_process_implements_is_implemented_by_weight_strategy" name="QueryMarketStrategyOverbusiness_process_implements_is_implemented_by_weight_strategy" title="implements Strategy" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Business Process implements Strategy"
    )
    and component.type="Strategy"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Business Process implements Strategy" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryWorkflowProcessOverbusiness_process_implements_is_implemented_by_weight_strategy" name="QueryWorkflowProcessOverbusiness_process_implements_is_implemented_by_weight_strategy" title="is implemented by Business Process" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Business Process implements Strategy"
    )
    and component.type="Business Process"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Business Process implements Strategy" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryMarketStrategyOverchange_component_implements_is_implemented_by_weight_strategy" name="QueryMarketStrategyOverchange_component_implements_is_implemented_by_weight_strategy" title="implements Strategy" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Change Component implements Strategy"
    )
    and component.type="Strategy"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Change Component implements Strategy" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryInitiative_DomainOverchange_component_implements_is_implemented_by_weight_strategy" name="QueryInitiative_DomainOverchange_component_implements_is_implemented_by_weight_strategy" title="is implemented by Change Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Change Component implements Strategy"
    )
    and component.type="Change Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Change Component implements Strategy" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryGoalOveraction_achieves_is_achieved_by_goal" name="QueryGoalOveraction_achieves_is_achieved_by_goal" title="achieves Goal" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Action achieves Goal"
    )
    and component.type="Goal"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Action achieves Goal" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryActionOveraction_achieves_is_achieved_by_goal" name="QueryActionOveraction_achieves_is_achieved_by_goal" title="is achieved by Action" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Action achieves Goal"
    )
    and component.type="Action"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Action achieves Goal" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="Queryinformation_componentOverpolicy_component_governs_is_governed_by_information_component" name="Queryinformation_componentOverpolicy_component_governs_is_governed_by_information_component" title="governs Information Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Policy Component governs Information Component"
    )
    and component.type="Information Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Policy Component governs Information Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryPolicy_DomainOverpolicy_component_governs_is_governed_by_information_component" name="QueryPolicy_DomainOverpolicy_component_governs_is_governed_by_information_component" title="is governed by Policy Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Policy Component governs Information Component"
    )
    and component.type="Policy Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Policy Component governs Information Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryfactorOverfactor_applies_to_has_factor" name="QueryfactorOverfactor_applies_to_has_factor" title="applies to Factor" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Factor applies to Factor"
    )
    and component.type="Factor"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Factor applies to Factor" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryCompetenceOverperson_holds_is_held_by_skill" name="QueryCompetenceOverperson_holds_is_held_by_skill" title="holds Skill" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Person holds Skill"
    )
    and component.type="Skill"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Person holds Skill" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryPersonOverperson_holds_is_held_by_skill" name="QueryPersonOverperson_holds_is_held_by_skill" title="is held by Person" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Person holds Skill"
    )
    and component.type="Person"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Person holds Skill" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryInitiative_DomainOvergoal_applies_to_has_change_component" name="QueryInitiative_DomainOvergoal_applies_to_has_change_component" title="applies to Change Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Goal applies to Change Component"
    )
    and component.type="Change Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Goal applies to Change Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryGoalOvergoal_applies_to_has_change_component" name="QueryGoalOvergoal_applies_to_has_change_component" title="has Goal" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Goal applies to Change Component"
    )
    and component.type="Goal"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Goal applies to Change Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryCompetenceprofileOverperson_holds_is_held_by_skill_profile" name="QueryCompetenceprofileOverperson_holds_is_held_by_skill_profile" title="holds Skill Profile" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Person holds Skill Profile"
    )
    and component.type="Skill Profile"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Person holds Skill Profile" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryPersonOverperson_holds_is_held_by_skill_profile" name="QueryPersonOverperson_holds_is_held_by_skill_profile" title="is held by Person" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Person holds Skill Profile"
    )
    and component.type="Person"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Person holds Skill Profile" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryCompetenceprofileOverapplication_holds_is_held_by_skill_profile" name="QueryCompetenceprofileOverapplication_holds_is_held_by_skill_profile" title="holds Skill Profile" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Application holds Skill Profile"
    )
    and component.type="Skill Profile"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Application holds Skill Profile" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryApplicationOverapplication_holds_is_held_by_skill_profile" name="QueryApplicationOverapplication_holds_is_held_by_skill_profile" title="is held by Application" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Application holds Skill Profile"
    )
    and component.type="Application"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Application holds Skill Profile" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryOrganizationOverdeliverable_has_customer_is_customer_of_organization" name="QueryOrganizationOverdeliverable_has_customer_is_customer_of_organization" title="has customer Organization" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Deliverable has customer Organization"
    )
    and component.type="Organization"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Deliverable has customer Organization" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryDeliverableOverdeliverable_has_customer_is_customer_of_organization" name="QueryDeliverableOverdeliverable_has_customer_is_customer_of_organization" title="is customer of Deliverable" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Deliverable has customer Organization"
    )
    and component.type="Deliverable"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Deliverable has customer Organization" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryDeliverableOverchange_component_delivers_is_delivered_by_deliverable" name="QueryDeliverableOverchange_component_delivers_is_delivered_by_deliverable" title="delivers Deliverable" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Change Component delivers Deliverable"
    )
    and component.type="Deliverable"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Change Component delivers Deliverable" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryInitiative_DomainOverchange_component_delivers_is_delivered_by_deliverable" name="QueryInitiative_DomainOverchange_component_delivers_is_delivered_by_deliverable" title="is delivered by Change Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Change Component delivers Deliverable"
    )
    and component.type="Change Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Change Component delivers Deliverable" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryPersonOverchange_component_has_manager_is_manager_of_person" name="QueryPersonOverchange_component_has_manager_is_manager_of_person" title="has manager Person" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Change Component has manager Person"
    )
    and component.type="Person"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Change Component has manager Person" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryInitiative_DomainOverchange_component_has_manager_is_manager_of_person" name="QueryInitiative_DomainOverchange_component_has_manager_is_manager_of_person" title="is manager of Change Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Change Component has manager Person"
    )
    and component.type="Change Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Change Component has manager Person" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryOrganization_DomainOverchange_component_has_participant_is_participant_in_organization_component" name="QueryOrganization_DomainOverchange_component_has_participant_is_participant_in_organization_component" title="has participant Organization Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Change Component has participant Organization Component"
    )
    and component.type="Organization Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Change Component has participant Organization Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryInitiative_DomainOverchange_component_has_participant_is_participant_in_organization_component" name="QueryInitiative_DomainOverchange_component_has_participant_is_participant_in_organization_component" title="is participant in Change Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Change Component has participant Organization Component"
    )
    and component.type="Change Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Change Component has participant Organization Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryManpowerOverperson_provides_is_provided_by_manpower" name="QueryManpowerOverperson_provides_is_provided_by_manpower" title="provides Manpower" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Person provides Manpower"
    )
    and component.type="Manpower"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Person provides Manpower" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryPersonOverperson_provides_is_provided_by_manpower" name="QueryPersonOverperson_provides_is_provided_by_manpower" title="is provided by Person" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Person provides Manpower"
    )
    and component.type="Person"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Person provides Manpower" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryOrganization_DomainOverstrategy_component_has_stakeholder_is_stakeholder_of_organization_component" name="QueryOrganization_DomainOverstrategy_component_has_stakeholder_is_stakeholder_of_organization_component" title="has stakeholder Organization Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Strategy Component has stakeholder Organization Component"
    )
    and component.type="Organization Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Strategy Component has stakeholder Organization Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="Querystrategy_componentOverstrategy_component_has_stakeholder_is_stakeholder_of_organization_component" name="Querystrategy_componentOverstrategy_component_has_stakeholder_is_stakeholder_of_organization_component" title="is stakeholder of Strategy Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Strategy Component has stakeholder Organization Component"
    )
    and component.type="Strategy Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Strategy Component has stakeholder Organization Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryGoalOverfactor_hinders_is_hindered_by_goal" name="QueryGoalOverfactor_hinders_is_hindered_by_goal" title="hinders Goal" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Factor hinders Goal"
    )
    and component.type="Goal"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Factor hinders Goal" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryfactorOverfactor_hinders_is_hindered_by_goal" name="QueryfactorOverfactor_hinders_is_hindered_by_goal" title="is hindered by Factor" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Factor hinders Goal"
    )
    and component.type="Factor"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Factor hinders Goal" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryInitiative_DomainOverrequirement_affects_is_affected_by_change_component" name="QueryInitiative_DomainOverrequirement_affects_is_affected_by_change_component" title="affects Change Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Requirement affects Change Component"
    )
    and component.type="Change Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Requirement affects Change Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryITRequirementOverrequirement_affects_is_affected_by_change_component" name="QueryITRequirementOverrequirement_affects_is_affected_by_change_component" title="is affected by Requirement" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Requirement affects Change Component"
    )
    and component.type="Requirement"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Requirement affects Change Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="Queryinformation_componentOverdeployed_software_uses_is_used_by_crud_information_component" name="Queryinformation_componentOverdeployed_software_uses_is_used_by_crud_information_component" title="uses Information Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Deployed Software uses Information Component"
    )
    and component.type="Information Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Deployed Software uses Information Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryDeployed_InstanceOverdeployed_software_uses_is_used_by_crud_information_component" name="QueryDeployed_InstanceOverdeployed_software_uses_is_used_by_crud_information_component" title="is used by Deployed Software" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Deployed Software uses Information Component"
    )
    and component.type="Deployed Software"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Deployed Software uses Information Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="Queryinformation_componentOverprocess_component_uses_is_used_by_crud_information_component" name="Queryinformation_componentOverprocess_component_uses_is_used_by_crud_information_component" title="uses Information Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Process Component uses Information Component"
    )
    and component.type="Information Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Process Component uses Information Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryProcess_DomainOverprocess_component_uses_is_used_by_crud_information_component" name="QueryProcess_DomainOverprocess_component_uses_is_used_by_crud_information_component" title="is used by Process Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Process Component uses Information Component"
    )
    and component.type="Process Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Process Component uses Information Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="Queryinformation_componentOverdatastore_stores_is_stored_in_information_component" name="Queryinformation_componentOverdatastore_stores_is_stored_in_information_component" title="stores Information Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Datastore stores Information Component"
    )
    and component.type="Information Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Datastore stores Information Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryPhysicalDatastoreOverdatastore_stores_is_stored_in_information_component" name="QueryPhysicalDatastoreOverdatastore_stores_is_stored_in_information_component" title="is stored in Datastore" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Datastore stores Information Component"
    )
    and component.type="Datastore"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Datastore stores Information Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="Queryinformation_componentOverlogical_datastore_stores_is_stored_in_information_component" name="Queryinformation_componentOverlogical_datastore_stores_is_stored_in_information_component" title="stores Information Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Logical Datastore stores Information Component"
    )
    and component.type="Information Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Logical Datastore stores Information Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryLogicalDatastoreOverlogical_datastore_stores_is_stored_in_information_component" name="QueryLogicalDatastoreOverlogical_datastore_stores_is_stored_in_information_component" title="is stored in Logical Datastore" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Logical Datastore stores Information Component"
    )
    and component.type="Logical Datastore"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Logical Datastore stores Information Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryActionOverplan_implements_is_implemented_by_action" name="QueryActionOverplan_implements_is_implemented_by_action" title="implements Action" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Plan implements Action"
    )
    and component.type="Action"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Plan implements Action" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryTransitionPlanItemOverplan_implements_is_implemented_by_action" name="QueryTransitionPlanItemOverplan_implements_is_implemented_by_action" title="is implemented by Plan" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Plan implements Action"
    )
    and component.type="Plan"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Plan implements Action" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryActionOverchange_component_implements_is_implemented_by_action" name="QueryActionOverchange_component_implements_is_implemented_by_action" title="implements Action" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Change Component implements Action"
    )
    and component.type="Action"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Change Component implements Action" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryInitiative_DomainOverchange_component_implements_is_implemented_by_action" name="QueryInitiative_DomainOverchange_component_implements_is_implemented_by_action" title="is implemented by Change Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Change Component implements Action"
    )
    and component.type="Change Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Change Component implements Action" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryTransitionPlanItemOverchange_component_implements_is_implemented_by_plan" name="QueryTransitionPlanItemOverchange_component_implements_is_implemented_by_plan" title="implements Plan" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Change Component implements Plan"
    )
    and component.type="Plan"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Change Component implements Plan" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryInitiative_DomainOverchange_component_implements_is_implemented_by_plan" name="QueryInitiative_DomainOverchange_component_implements_is_implemented_by_plan" title="is implemented by Change Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Change Component implements Plan"
    )
    and component.type="Change Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Change Component implements Plan" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryTechnologyProductOverhardware_deploys_is_deployed_in_hardware_product" name="QueryTechnologyProductOverhardware_deploys_is_deployed_in_hardware_product" title="deploys Hardware Product" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Hardware deploys Hardware Product"
    )
    and component.type="Hardware Product"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Hardware deploys Hardware Product" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryAutomaticDeviceOverhardware_deploys_is_deployed_in_hardware_product" name="QueryAutomaticDeviceOverhardware_deploys_is_deployed_in_hardware_product" title="is deployed in Hardware" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Hardware deploys Hardware Product"
    )
    and component.type="Hardware"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Hardware deploys Hardware Product" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryArchitectureTemplateElementOverit_product_implements_is_implemented_by_it_architecture_element" name="QueryArchitectureTemplateElementOverit_product_implements_is_implemented_by_it_architecture_element" title="implements IT Architecture Element" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="IT Product implements IT Architecture Element"
    )
    and component.type="IT Architecture Element"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="IT Product implements IT Architecture Element" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryITProductOverit_product_implements_is_implemented_by_it_architecture_element" name="QueryITProductOverit_product_implements_is_implemented_by_it_architecture_element" title="is implemented by IT Product" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="IT Product implements IT Architecture Element"
    )
    and component.type="IT Product"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="IT Product implements IT Architecture Element" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryArchitectureTemplateElementOverdatastore_implements_is_implemented_by_it_architecture_element" name="QueryArchitectureTemplateElementOverdatastore_implements_is_implemented_by_it_architecture_element" title="implements IT Architecture Element" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Datastore implements IT Architecture Element"
    )
    and component.type="IT Architecture Element"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Datastore implements IT Architecture Element" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryPhysicalDatastoreOverdatastore_implements_is_implemented_by_it_architecture_element" name="QueryPhysicalDatastoreOverdatastore_implements_is_implemented_by_it_architecture_element" title="is implemented by Datastore" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Datastore implements IT Architecture Element"
    )
    and component.type="Datastore"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Datastore implements IT Architecture Element" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryArchitectureTemplateElementOverinfrastructure_component_implements_is_implemented_by_it_architecture_element" name="QueryArchitectureTemplateElementOverinfrastructure_component_implements_is_implemented_by_it_architecture_element" title="implements IT Architecture Element" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Infrastructure Component implements IT Architecture Element"
    )
    and component.type="IT Architecture Element"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Infrastructure Component implements IT Architecture Element" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryInfrastructure_DomainOverinfrastructure_component_implements_is_implemented_by_it_architecture_element" name="QueryInfrastructure_DomainOverinfrastructure_component_implements_is_implemented_by_it_architecture_element" title="is implemented by Infrastructure Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Infrastructure Component implements IT Architecture Element"
    )
    and component.type="Infrastructure Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Infrastructure Component implements IT Architecture Element" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryArchitectureTemplateElementOverdeployed_software_implements_is_implemented_by_it_architecture_element" name="QueryArchitectureTemplateElementOverdeployed_software_implements_is_implemented_by_it_architecture_element" title="implements IT Architecture Element" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Deployed Software implements IT Architecture Element"
    )
    and component.type="IT Architecture Element"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Deployed Software implements IT Architecture Element" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryDeployed_InstanceOverdeployed_software_implements_is_implemented_by_it_architecture_element" name="QueryDeployed_InstanceOverdeployed_software_implements_is_implemented_by_it_architecture_element" title="is implemented by Deployed Software" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Deployed Software implements IT Architecture Element"
    )
    and component.type="Deployed Software"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Deployed Software implements IT Architecture Element" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryApplicationEnvironmentOverdatastore_deploys_is_deployed_in_software_product" name="QueryApplicationEnvironmentOverdatastore_deploys_is_deployed_in_software_product" title="deploys Software Product" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Datastore deploys Software Product"
    )
    and component.type="Software Product"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Datastore deploys Software Product" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryPhysicalDatastoreOverdatastore_deploys_is_deployed_in_software_product" name="QueryPhysicalDatastoreOverdatastore_deploys_is_deployed_in_software_product" title="is deployed in Datastore" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Datastore deploys Software Product"
    )
    and component.type="Datastore"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Datastore deploys Software Product" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryMachineOverdeliverable_provides_is_provided_by_resource" name="QueryMachineOverdeliverable_provides_is_provided_by_resource" title="provides Resource" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Deliverable provides Resource"
    )
    and component.type="Resource"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Deliverable provides Resource" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryDeliverableOverdeliverable_provides_is_provided_by_resource" name="QueryDeliverableOverdeliverable_provides_is_provided_by_resource" title="is provided by Deliverable" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Deliverable provides Resource"
    )
    and component.type="Deliverable"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Deliverable provides Resource" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryInterfaceOversoftware_product_implements_is_implemented_by_message" name="QueryInterfaceOversoftware_product_implements_is_implemented_by_message" title="implements Message" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Software Product implements Message"
    )
    and component.type="Message"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Software Product implements Message" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryApplicationEnvironmentOversoftware_product_implements_is_implemented_by_message" name="QueryApplicationEnvironmentOversoftware_product_implements_is_implemented_by_message" title="is implemented by Software Product" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Software Product implements Message"
    )
    and component.type="Software Product"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Software Product implements Message" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="Queryinformation_componentOverinformation_need_needs_is_needed_by_information_component" name="Queryinformation_componentOverinformation_need_needs_is_needed_by_information_component" title="needs Information Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Information Need needs Information Component"
    )
    and component.type="Information Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Information Need needs Information Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryInformationNeedOverinformation_need_needs_is_needed_by_information_component" name="QueryInformationNeedOverinformation_need_needs_is_needed_by_information_component" title="is needed by Information Need" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Information Need needs Information Component"
    )
    and component.type="Information Need"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Information Need needs Information Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryOrganization_DomainOverchange_component_has_initiator_is_initiator_of_organization_component" name="QueryOrganization_DomainOverchange_component_has_initiator_is_initiator_of_organization_component" title="has initiator Organization Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Change Component has initiator Organization Component"
    )
    and component.type="Organization Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Change Component has initiator Organization Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryInitiative_DomainOverchange_component_has_initiator_is_initiator_of_organization_component" name="QueryInitiative_DomainOverchange_component_has_initiator_is_initiator_of_organization_component" title="is initiator of Change Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Change Component has initiator Organization Component"
    )
    and component.type="Change Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Change Component has initiator Organization Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryOrganization_DomainOverstrategy_component_has_initiator_is_initiator_of_organization_component" name="QueryOrganization_DomainOverstrategy_component_has_initiator_is_initiator_of_organization_component" title="has initiator Organization Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Strategy Component has initiator Organization Component"
    )
    and component.type="Organization Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Strategy Component has initiator Organization Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="Querystrategy_componentOverstrategy_component_has_initiator_is_initiator_of_organization_component" name="Querystrategy_componentOverstrategy_component_has_initiator_is_initiator_of_organization_component" title="is initiator of Strategy Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Strategy Component has initiator Organization Component"
    )
    and component.type="Strategy Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Strategy Component has initiator Organization Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryArchitectureTemplateElementOverlogical_application_implements_is_implemented_by_it_architecture_element" name="QueryArchitectureTemplateElementOverlogical_application_implements_is_implemented_by_it_architecture_element" title="implements IT Architecture Element" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Logical Application implements IT Architecture Element"
    )
    and component.type="IT Architecture Element"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Logical Application implements IT Architecture Element" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryLogicalApplicationOverlogical_application_implements_is_implemented_by_it_architecture_element" name="QueryLogicalApplicationOverlogical_application_implements_is_implemented_by_it_architecture_element" title="is implemented by Logical Application" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Logical Application implements IT Architecture Element"
    )
    and component.type="Logical Application"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Logical Application implements IT Architecture Element" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryArchitectureTemplateElementOverlogical_datastore_implements_is_implemented_by_it_architecture_element" name="QueryArchitectureTemplateElementOverlogical_datastore_implements_is_implemented_by_it_architecture_element" title="implements IT Architecture Element" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Logical Datastore implements IT Architecture Element"
    )
    and component.type="IT Architecture Element"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Logical Datastore implements IT Architecture Element" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryLogicalDatastoreOverlogical_datastore_implements_is_implemented_by_it_architecture_element" name="QueryLogicalDatastoreOverlogical_datastore_implements_is_implemented_by_it_architecture_element" title="is implemented by Logical Datastore" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Logical Datastore implements IT Architecture Element"
    )
    and component.type="Logical Datastore"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Logical Datastore implements IT Architecture Element" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryArchitectureTemplateElementOverlogical_technology_item_implements_is_implemented_by_it_architecture_element" name="QueryArchitectureTemplateElementOverlogical_technology_item_implements_is_implemented_by_it_architecture_element" title="implements IT Architecture Element" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Logical Technology Item implements IT Architecture Element"
    )
    and component.type="IT Architecture Element"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Logical Technology Item implements IT Architecture Element" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryLogicalTechnologyItemOverlogical_technology_item_implements_is_implemented_by_it_architecture_element" name="QueryLogicalTechnologyItemOverlogical_technology_item_implements_is_implemented_by_it_architecture_element" title="is implemented by Logical Technology Item" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Logical Technology Item implements IT Architecture Element"
    )
    and component.type="Logical Technology Item"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Logical Technology Item implements IT Architecture Element" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryInitiative_DomainOverrole_applies_to_has_change_component" name="QueryInitiative_DomainOverrole_applies_to_has_change_component" title="applies to Change Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Role applies to Change Component"
    )
    and component.type="Change Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Role applies to Change Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryRoleOverrole_applies_to_has_change_component" name="QueryRoleOverrole_applies_to_has_change_component" title="has Role" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Role applies to Change Component"
    )
    and component.type="Role"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Role applies to Change Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryProcess_DomainOverrole_applies_to_has_process_component" name="QueryProcess_DomainOverrole_applies_to_has_process_component" title="applies to Process Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Role applies to Process Component"
    )
    and component.type="Process Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Role applies to Process Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryRoleOverrole_applies_to_has_process_component" name="QueryRoleOverrole_applies_to_has_process_component" title="has Role" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Role applies to Process Component"
    )
    and component.type="Role"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Role applies to Process Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="Queryit_architecture_componentOverrole_applies_to_has_it_architecture_component" name="Queryit_architecture_componentOverrole_applies_to_has_it_architecture_component" title="applies to IT Architecture Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Role applies to IT Architecture Component"
    )
    and component.type="IT Architecture Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Role applies to IT Architecture Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryRoleOverrole_applies_to_has_it_architecture_component" name="QueryRoleOverrole_applies_to_has_it_architecture_component" title="has Role" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Role applies to IT Architecture Component"
    )
    and component.type="Role"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Role applies to IT Architecture Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryDeliverableOverrole_applies_to_has_deliverable" name="QueryDeliverableOverrole_applies_to_has_deliverable" title="applies to Deliverable" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Role applies to Deliverable"
    )
    and component.type="Deliverable"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Role applies to Deliverable" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryRoleOverrole_applies_to_has_deliverable" name="QueryRoleOverrole_applies_to_has_deliverable" title="has Role" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Role applies to Deliverable"
    )
    and component.type="Role"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Role applies to Deliverable" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryApplication_DomainOverrole_applies_to_has_application_component" name="QueryApplication_DomainOverrole_applies_to_has_application_component" title="applies to Application Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Role applies to Application Component"
    )
    and component.type="Application Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Role applies to Application Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryRoleOverrole_applies_to_has_application_component" name="QueryRoleOverrole_applies_to_has_application_component" title="has Role" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Role applies to Application Component"
    )
    and component.type="Role"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Role applies to Application Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryInfrastructure_DomainOverrole_applies_to_has_infrastructure_component" name="QueryInfrastructure_DomainOverrole_applies_to_has_infrastructure_component" title="applies to Infrastructure Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Role applies to Infrastructure Component"
    )
    and component.type="Infrastructure Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Role applies to Infrastructure Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryRoleOverrole_applies_to_has_infrastructure_component" name="QueryRoleOverrole_applies_to_has_infrastructure_component" title="has Role" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Role applies to Infrastructure Component"
    )
    and component.type="Role"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Role applies to Infrastructure Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryCriticalSuccessFactorOverchange_component_supports_is_supported_by_success_factor" name="QueryCriticalSuccessFactorOverchange_component_supports_is_supported_by_success_factor" title="supports Success Factor" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Change Component supports Success Factor"
    )
    and component.type="Success Factor"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Change Component supports Success Factor" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryInitiative_DomainOverchange_component_supports_is_supported_by_success_factor" name="QueryInitiative_DomainOverchange_component_supports_is_supported_by_success_factor" title="is supported by Change Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Change Component supports Success Factor"
    )
    and component.type="Change Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Change Component supports Success Factor" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryEnablingITTechnologyOverfactor_leads_to_follows_from_technology" name="QueryEnablingITTechnologyOverfactor_leads_to_follows_from_technology" title="leads to Technology" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Factor leads to Technology"
    )
    and component.type="Technology"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Factor leads to Technology" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryfactorOverfactor_leads_to_follows_from_technology" name="QueryfactorOverfactor_leads_to_follows_from_technology" title="follows from Factor" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Factor leads to Technology"
    )
    and component.type="Factor"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Factor leads to Technology" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryPolicy_DomainOverfactor_leads_to_follows_from_policy_component" name="QueryPolicy_DomainOverfactor_leads_to_follows_from_policy_component" title="leads to Policy Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Factor leads to Policy Component"
    )
    and component.type="Policy Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Factor leads to Policy Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryfactorOverfactor_leads_to_follows_from_policy_component" name="QueryfactorOverfactor_leads_to_follows_from_policy_component" title="follows from Factor" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Factor leads to Policy Component"
    )
    and component.type="Factor"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Factor leads to Policy Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryInformationNeedOverfactor_leads_to_follows_from_information_need" name="QueryInformationNeedOverfactor_leads_to_follows_from_information_need" title="leads to Information Need" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Factor leads to Information Need"
    )
    and component.type="Information Need"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Factor leads to Information Need" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryfactorOverfactor_leads_to_follows_from_information_need" name="QueryfactorOverfactor_leads_to_follows_from_information_need" title="follows from Factor" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Factor leads to Information Need"
    )
    and component.type="Factor"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Factor leads to Information Need" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryLocationOvernetwork_links_is_linked_by_location" name="QueryLocationOvernetwork_links_is_linked_by_location" title="links Location" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Network links Location"
    )
    and component.type="Location"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Network links Location" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryNetworkOvernetwork_links_is_linked_by_location" name="QueryNetworkOvernetwork_links_is_linked_by_location" title="is linked by Network" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Network links Location"
    )
    and component.type="Network"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Network links Location" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryLocationTypeOverdeployed_software_is_located_in_is_location_of_logical_location" name="QueryLocationTypeOverdeployed_software_is_located_in_is_location_of_logical_location" title="is located in Logical Location" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Deployed Software is located in Logical Location"
    )
    and component.type="Logical Location"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Deployed Software is located in Logical Location" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryDeployed_InstanceOverdeployed_software_is_located_in_is_location_of_logical_location" name="QueryDeployed_InstanceOverdeployed_software_is_located_in_is_location_of_logical_location" title="is location of Deployed Software" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Deployed Software is located in Logical Location"
    )
    and component.type="Deployed Software"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Deployed Software is located in Logical Location" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryLocationTypeOverdatastore_is_located_in_is_location_of_logical_location" name="QueryLocationTypeOverdatastore_is_located_in_is_location_of_logical_location" title="is located in Logical Location" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Datastore is located in Logical Location"
    )
    and component.type="Logical Location"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Datastore is located in Logical Location" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryPhysicalDatastoreOverdatastore_is_located_in_is_location_of_logical_location" name="QueryPhysicalDatastoreOverdatastore_is_located_in_is_location_of_logical_location" title="is location of Datastore" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Datastore is located in Logical Location"
    )
    and component.type="Datastore"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Datastore is located in Logical Location" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryLocationTypeOverinformation_component_is_located_in_is_location_of_logical_location" name="QueryLocationTypeOverinformation_component_is_located_in_is_location_of_logical_location" title="is located in Logical Location" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Information Component is located in Logical Location"
    )
    and component.type="Logical Location"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Information Component is located in Logical Location" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="Queryinformation_componentOverinformation_component_is_located_in_is_location_of_logical_location" name="Queryinformation_componentOverinformation_component_is_located_in_is_location_of_logical_location" title="is location of Information Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Information Component is located in Logical Location"
    )
    and component.type="Information Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Information Component is located in Logical Location" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryLocationTypeOverinfrastructure_component_is_located_in_is_location_of_logical_location" name="QueryLocationTypeOverinfrastructure_component_is_located_in_is_location_of_logical_location" title="is located in Logical Location" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Infrastructure Component is located in Logical Location"
    )
    and component.type="Logical Location"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Infrastructure Component is located in Logical Location" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryInfrastructure_DomainOverinfrastructure_component_is_located_in_is_location_of_logical_location" name="QueryInfrastructure_DomainOverinfrastructure_component_is_located_in_is_location_of_logical_location" title="is location of Infrastructure Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Infrastructure Component is located in Logical Location"
    )
    and component.type="Infrastructure Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Infrastructure Component is located in Logical Location" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryLocationTypeOverit_architecture_component_is_located_in_is_location_of_logical_location" name="QueryLocationTypeOverit_architecture_component_is_located_in_is_location_of_logical_location" title="is located in Logical Location" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="IT Architecture Component is located in Logical Location"
    )
    and component.type="Logical Location"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="IT Architecture Component is located in Logical Location" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="Queryit_architecture_componentOverit_architecture_component_is_located_in_is_location_of_logical_location" name="Queryit_architecture_componentOverit_architecture_component_is_located_in_is_location_of_logical_location" title="is location of IT Architecture Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="IT Architecture Component is located in Logical Location"
    )
    and component.type="IT Architecture Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="IT Architecture Component is located in Logical Location" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryLocationOverresource_is_located_in_is_location_of_location" name="QueryLocationOverresource_is_located_in_is_location_of_location" title="is located in Location" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Resource is located in Location"
    )
    and component.type="Location"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Resource is located in Location" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryMachineOverresource_is_located_in_is_location_of_location" name="QueryMachineOverresource_is_located_in_is_location_of_location" title="is location of Resource" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Resource is located in Location"
    )
    and component.type="Resource"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Resource is located in Location" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryLocationOverperson_is_located_in_is_location_of_location" name="QueryLocationOverperson_is_located_in_is_location_of_location" title="is located in Location" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Person is located in Location"
    )
    and component.type="Location"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Person is located in Location" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryPersonOverperson_is_located_in_is_location_of_location" name="QueryPersonOverperson_is_located_in_is_location_of_location" title="is location of Person" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Person is located in Location"
    )
    and component.type="Person"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Person is located in Location" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryLocationOverorganization_is_located_in_is_location_of_location" name="QueryLocationOverorganization_is_located_in_is_location_of_location" title="is located in Location" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Organization is located in Location"
    )
    and component.type="Location"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Organization is located in Location" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryOrganizationOverorganization_is_located_in_is_location_of_location" name="QueryOrganizationOverorganization_is_located_in_is_location_of_location" title="is location of Organization" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Organization is located in Location"
    )
    and component.type="Organization"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Organization is located in Location" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryLocationOverstorage_is_located_in_is_location_of_location" name="QueryLocationOverstorage_is_located_in_is_location_of_location" title="is located in Location" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Storage is located in Location"
    )
    and component.type="Location"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Storage is located in Location" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryStorageOverstorage_is_located_in_is_location_of_location" name="QueryStorageOverstorage_is_located_in_is_location_of_location" title="is location of Storage" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Storage is located in Location"
    )
    and component.type="Storage"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Storage is located in Location" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryGoalOverbenefit_achieves_is_achieved_by_goal" name="QueryGoalOverbenefit_achieves_is_achieved_by_goal" title="achieves Goal" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Benefit achieves Goal"
    )
    and component.type="Goal"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Benefit achieves Goal" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryBenefitOverbenefit_achieves_is_achieved_by_goal" name="QueryBenefitOverbenefit_achieves_is_achieved_by_goal" title="is achieved by Benefit" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Benefit achieves Goal"
    )
    and component.type="Benefit"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Benefit achieves Goal" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryGoalOverplan_achieves_is_achieved_by_goal" name="QueryGoalOverplan_achieves_is_achieved_by_goal" title="achieves Goal" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Plan achieves Goal"
    )
    and component.type="Goal"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Plan achieves Goal" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryTransitionPlanItemOverplan_achieves_is_achieved_by_goal" name="QueryTransitionPlanItemOverplan_achieves_is_achieved_by_goal" title="is achieved by Plan" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Plan achieves Goal"
    )
    and component.type="Plan"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Plan achieves Goal" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryProjectRiskOvermeasure_measures_is_measured_by_risk" name="QueryProjectRiskOvermeasure_measures_is_measured_by_risk" title="measures Risk" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Measure measures Risk"
    )
    and component.type="Risk"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Measure measures Risk" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryMeasureOvermeasure_measures_is_measured_by_risk" name="QueryMeasureOvermeasure_measures_is_measured_by_risk" title="is measured by Measure" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Measure measures Risk"
    )
    and component.type="Measure"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Measure measures Risk" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryCompetenceOverplan_needs_is_needed_by_resources_skill" name="QueryCompetenceOverplan_needs_is_needed_by_resources_skill" title="needs Skill" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Plan needs Skill"
    )
    and component.type="Skill"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Plan needs Skill" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryTransitionPlanItemOverplan_needs_is_needed_by_resources_skill" name="QueryTransitionPlanItemOverplan_needs_is_needed_by_resources_skill" title="is needed by Plan" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Plan needs Skill"
    )
    and component.type="Plan"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Plan needs Skill" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryCompetenceOverdeliverable_needs_is_needed_by_resources_skill" name="QueryCompetenceOverdeliverable_needs_is_needed_by_resources_skill" title="needs Skill" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Deliverable needs Skill"
    )
    and component.type="Skill"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Deliverable needs Skill" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryDeliverableOverdeliverable_needs_is_needed_by_resources_skill" name="QueryDeliverableOverdeliverable_needs_is_needed_by_resources_skill" title="is needed by Deliverable" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Deliverable needs Skill"
    )
    and component.type="Deliverable"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Deliverable needs Skill" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryCompetenceOvertechnology_needs_is_needed_by_resources_skill" name="QueryCompetenceOvertechnology_needs_is_needed_by_resources_skill" title="needs Skill" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Technology needs Skill"
    )
    and component.type="Skill"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Technology needs Skill" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryEnablingITTechnologyOvertechnology_needs_is_needed_by_resources_skill" name="QueryEnablingITTechnologyOvertechnology_needs_is_needed_by_resources_skill" title="is needed by Technology" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Technology needs Skill"
    )
    and component.type="Technology"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Technology needs Skill" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryCompetenceOverrole_needs_is_needed_by_resources_skill" name="QueryCompetenceOverrole_needs_is_needed_by_resources_skill" title="needs Skill" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Role needs Skill"
    )
    and component.type="Skill"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Role needs Skill" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryRoleOverrole_needs_is_needed_by_resources_skill" name="QueryRoleOverrole_needs_is_needed_by_resources_skill" title="is needed by Role" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Role needs Skill"
    )
    and component.type="Role"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Role needs Skill" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryCompetenceOverchange_component_needs_is_needed_by_resources_skill" name="QueryCompetenceOverchange_component_needs_is_needed_by_resources_skill" title="needs Skill" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Change Component needs Skill"
    )
    and component.type="Skill"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Change Component needs Skill" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryInitiative_DomainOverchange_component_needs_is_needed_by_resources_skill" name="QueryInitiative_DomainOverchange_component_needs_is_needed_by_resources_skill" title="is needed by Change Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Change Component needs Skill"
    )
    and component.type="Change Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Change Component needs Skill" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryCompetenceOverapplication_component_needs_is_needed_by_resources_skill" name="QueryCompetenceOverapplication_component_needs_is_needed_by_resources_skill" title="needs Skill" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Application Component needs Skill"
    )
    and component.type="Skill"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Application Component needs Skill" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryApplication_DomainOverapplication_component_needs_is_needed_by_resources_skill" name="QueryApplication_DomainOverapplication_component_needs_is_needed_by_resources_skill" title="is needed by Application Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Application Component needs Skill"
    )
    and component.type="Application Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Application Component needs Skill" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryCompetenceOverinfrastructure_component_needs_is_needed_by_resources_skill" name="QueryCompetenceOverinfrastructure_component_needs_is_needed_by_resources_skill" title="needs Skill" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Infrastructure Component needs Skill"
    )
    and component.type="Skill"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Infrastructure Component needs Skill" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryInfrastructure_DomainOverinfrastructure_component_needs_is_needed_by_resources_skill" name="QueryInfrastructure_DomainOverinfrastructure_component_needs_is_needed_by_resources_skill" title="is needed by Infrastructure Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Infrastructure Component needs Skill"
    )
    and component.type="Infrastructure Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Infrastructure Component needs Skill" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryMachineOverdeliverable_needs_is_needed_by_resource" name="QueryMachineOverdeliverable_needs_is_needed_by_resource" title="needs Resource" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Deliverable needs Resource"
    )
    and component.type="Resource"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Deliverable needs Resource" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryDeliverableOverdeliverable_needs_is_needed_by_resource" name="QueryDeliverableOverdeliverable_needs_is_needed_by_resource" title="is needed by Deliverable" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Deliverable needs Resource"
    )
    and component.type="Deliverable"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Deliverable needs Resource" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryInformationNeedOverorganization_component_generates_is_generated_by_information_need" name="QueryInformationNeedOverorganization_component_generates_is_generated_by_information_need" title="generates Information Need" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Organization Component generates Information Need"
    )
    and component.type="Information Need"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Organization Component generates Information Need" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryOrganization_DomainOverorganization_component_generates_is_generated_by_information_need" name="QueryOrganization_DomainOverorganization_component_generates_is_generated_by_information_need" title="is generated by Organization Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Organization Component generates Information Need"
    )
    and component.type="Organization Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Organization Component generates Information Need" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryCompetenceprofileOverposition_needs_is_needed_by_skill_profile" name="QueryCompetenceprofileOverposition_needs_is_needed_by_skill_profile" title="needs Skill Profile" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Position needs Skill Profile"
    )
    and component.type="Skill Profile"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Position needs Skill Profile" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryPositionOverposition_needs_is_needed_by_skill_profile" name="QueryPositionOverposition_needs_is_needed_by_skill_profile" title="is needed by Position" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Position needs Skill Profile"
    )
    and component.type="Position"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Position needs Skill Profile" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="Queryknowledge_componentOverprocess_mechanism_needs_is_needed_by_knowledge_component" name="Queryknowledge_componentOverprocess_mechanism_needs_is_needed_by_knowledge_component" title="needs Knowledge Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Process Mechanism needs Knowledge Component"
    )
    and component.type="Knowledge Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Process Mechanism needs Knowledge Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryMechanismOverprocess_mechanism_needs_is_needed_by_knowledge_component" name="QueryMechanismOverprocess_mechanism_needs_is_needed_by_knowledge_component" title="is needed by Process Mechanism" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Process Mechanism needs Knowledge Component"
    )
    and component.type="Process Mechanism"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Process Mechanism needs Knowledge Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryCompetenceprofileOverrole_needs_is_needed_by_skill_profile" name="QueryCompetenceprofileOverrole_needs_is_needed_by_skill_profile" title="needs Skill Profile" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Role needs Skill Profile"
    )
    and component.type="Skill Profile"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Role needs Skill Profile" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryRoleOverrole_needs_is_needed_by_skill_profile" name="QueryRoleOverrole_needs_is_needed_by_skill_profile" title="is needed by Role" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Role needs Skill Profile"
    )
    and component.type="Role"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Role needs Skill Profile" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryOrganization_DomainOverbusiness_process_has_observer_is_observer_of_organization_component" name="QueryOrganization_DomainOverbusiness_process_has_observer_is_observer_of_organization_component" title="has observer Organization Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Business Process has observer Organization Component"
    )
    and component.type="Organization Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Business Process has observer Organization Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryWorkflowProcessOverbusiness_process_has_observer_is_observer_of_organization_component" name="QueryWorkflowProcessOverbusiness_process_has_observer_is_observer_of_organization_component" title="is observer of Business Process" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Business Process has observer Organization Component"
    )
    and component.type="Business Process"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Business Process has observer Organization Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryInitiative_DomainOverrisk_applies_to_has_change_component" name="QueryInitiative_DomainOverrisk_applies_to_has_change_component" title="applies to Change Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Risk applies to Change Component"
    )
    and component.type="Change Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Risk applies to Change Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryProjectRiskOverrisk_applies_to_has_change_component" name="QueryProjectRiskOverrisk_applies_to_has_change_component" title="has Risk" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Risk applies to Change Component"
    )
    and component.type="Risk"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Risk applies to Change Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryConclusionOverchange_component_delivers_is_delivered_by_finding" name="QueryConclusionOverchange_component_delivers_is_delivered_by_finding" title="delivers Finding" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Change Component delivers Finding"
    )
    and component.type="Finding"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Change Component delivers Finding" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryInitiative_DomainOverchange_component_delivers_is_delivered_by_finding" name="QueryInitiative_DomainOverchange_component_delivers_is_delivered_by_finding" title="is delivered by Change Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Change Component delivers Finding"
    )
    and component.type="Change Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Change Component delivers Finding" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryOrganization_DomainOverapplication_component_has_owner_is_owner_of_organization_component" name="QueryOrganization_DomainOverapplication_component_has_owner_is_owner_of_organization_component" title="has owner Organization Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Application Component has owner Organization Component"
    )
    and component.type="Organization Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Application Component has owner Organization Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryApplication_DomainOverapplication_component_has_owner_is_owner_of_organization_component" name="QueryApplication_DomainOverapplication_component_has_owner_is_owner_of_organization_component" title="is owner of Application Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Application Component has owner Organization Component"
    )
    and component.type="Application Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Application Component has owner Organization Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryOrganization_DomainOverinfrastructure_component_has_owner_is_owner_of_organization_component" name="QueryOrganization_DomainOverinfrastructure_component_has_owner_is_owner_of_organization_component" title="has owner Organization Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Infrastructure Component has owner Organization Component"
    )
    and component.type="Organization Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Infrastructure Component has owner Organization Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryInfrastructure_DomainOverinfrastructure_component_has_owner_is_owner_of_organization_component" name="QueryInfrastructure_DomainOverinfrastructure_component_has_owner_is_owner_of_organization_component" title="is owner of Infrastructure Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Infrastructure Component has owner Organization Component"
    )
    and component.type="Infrastructure Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Infrastructure Component has owner Organization Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryOrganization_DomainOverresource_has_owner_is_owner_of_organization_component" name="QueryOrganization_DomainOverresource_has_owner_is_owner_of_organization_component" title="has owner Organization Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Resource has owner Organization Component"
    )
    and component.type="Organization Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Resource has owner Organization Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryMachineOverresource_has_owner_is_owner_of_organization_component" name="QueryMachineOverresource_has_owner_is_owner_of_organization_component" title="is owner of Resource" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Resource has owner Organization Component"
    )
    and component.type="Resource"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Resource has owner Organization Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryOrganization_DomainOverinformation_component_has_owner_is_owner_of_organization_component" name="QueryOrganization_DomainOverinformation_component_has_owner_is_owner_of_organization_component" title="has owner Organization Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Information Component has owner Organization Component"
    )
    and component.type="Organization Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Information Component has owner Organization Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="Queryinformation_componentOverinformation_component_has_owner_is_owner_of_organization_component" name="Queryinformation_componentOverinformation_component_has_owner_is_owner_of_organization_component" title="is owner of Information Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Information Component has owner Organization Component"
    )
    and component.type="Information Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Information Component has owner Organization Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryITInitiativeOverprogram_governs_is_governed_by_initiative" name="QueryITInitiativeOverprogram_governs_is_governed_by_initiative" title="governs Initiative" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Program governs Initiative"
    )
    and component.type="Initiative"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Program governs Initiative" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryProgramOverprogram_governs_is_governed_by_initiative" name="QueryProgramOverprogram_governs_is_governed_by_initiative" title="is governed by Program" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Program governs Initiative"
    )
    and component.type="Program"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Program governs Initiative" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryOrganization_DomainOverit_product_has_owner_is_owner_of_organization_component" name="QueryOrganization_DomainOverit_product_has_owner_is_owner_of_organization_component" title="has owner Organization Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="IT Product has owner Organization Component"
    )
    and component.type="Organization Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="IT Product has owner Organization Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryITProductOverit_product_has_owner_is_owner_of_organization_component" name="QueryITProductOverit_product_has_owner_is_owner_of_organization_component" title="is owner of IT Product" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="IT Product has owner Organization Component"
    )
    and component.type="IT Product"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="IT Product has owner Organization Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryOrganization_DomainOverapplication_component_has_content_owner_is_content_owner_of_organization_component" name="QueryOrganization_DomainOverapplication_component_has_content_owner_is_content_owner_of_organization_component" title="has content owner Organization Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Application Component has content owner Organization Component"
    )
    and component.type="Organization Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Application Component has content owner Organization Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryApplication_DomainOverapplication_component_has_content_owner_is_content_owner_of_organization_component" name="QueryApplication_DomainOverapplication_component_has_content_owner_is_content_owner_of_organization_component" title="is content owner of Application Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Application Component has content owner Organization Component"
    )
    and component.type="Application Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Application Component has content owner Organization Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryLocationTypeOverprocess_component_is_located_in_is_location_of_logical_location" name="QueryLocationTypeOverprocess_component_is_located_in_is_location_of_logical_location" title="is located in Logical Location" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Process Component is located in Logical Location"
    )
    and component.type="Logical Location"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Process Component is located in Logical Location" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryProcess_DomainOverprocess_component_is_located_in_is_location_of_logical_location" name="QueryProcess_DomainOverprocess_component_is_located_in_is_location_of_logical_location" title="is location of Process Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Process Component is located in Logical Location"
    )
    and component.type="Process Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Process Component is located in Logical Location" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryBPM_Data_ObjectOverdatastore_stores_is_stored_in_process_data" name="QueryBPM_Data_ObjectOverdatastore_stores_is_stored_in_process_data" title="stores Process Data" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Datastore stores Process Data"
    )
    and component.type="Process Data"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Datastore stores Process Data" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryPhysicalDatastoreOverdatastore_stores_is_stored_in_process_data" name="QueryPhysicalDatastoreOverdatastore_stores_is_stored_in_process_data" title="is stored in Datastore" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Datastore stores Process Data"
    )
    and component.type="Datastore"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Datastore stores Process Data" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="Queryprocess_connectionOverdatastore_stores_is_stored_in_process_connection" name="Queryprocess_connectionOverdatastore_stores_is_stored_in_process_connection" title="stores Process Connection" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Datastore stores Process Connection"
    )
    and component.type="Process Connection"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Datastore stores Process Connection" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryPhysicalDatastoreOverdatastore_stores_is_stored_in_process_connection" name="QueryPhysicalDatastoreOverdatastore_stores_is_stored_in_process_connection" title="is stored in Datastore" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Datastore stores Process Connection"
    )
    and component.type="Datastore"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Datastore stores Process Connection" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="Queryprocess_connectionOverstorage_stores_is_stored_in_process_connection" name="Queryprocess_connectionOverstorage_stores_is_stored_in_process_connection" title="stores Process Connection" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Storage stores Process Connection"
    )
    and component.type="Process Connection"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Storage stores Process Connection" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryStorageOverstorage_stores_is_stored_in_process_connection" name="QueryStorageOverstorage_stores_is_stored_in_process_connection" title="is stored in Storage" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Storage stores Process Connection"
    )
    and component.type="Storage"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Storage stores Process Connection" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryBPM_Data_ObjectOverstorage_stores_is_stored_in_process_data" name="QueryBPM_Data_ObjectOverstorage_stores_is_stored_in_process_data" title="stores Process Data" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Storage stores Process Data"
    )
    and component.type="Process Data"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Storage stores Process Data" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryStorageOverstorage_stores_is_stored_in_process_data" name="QueryStorageOverstorage_stores_is_stored_in_process_data" title="is stored in Storage" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Storage stores Process Data"
    )
    and component.type="Storage"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Storage stores Process Data" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryDeliverableOverorganization_component_develops_is_developed_by_deliverable" name="QueryDeliverableOverorganization_component_develops_is_developed_by_deliverable" title="develops Deliverable" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Organization Component develops Deliverable"
    )
    and component.type="Deliverable"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Organization Component develops Deliverable" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryOrganization_DomainOverorganization_component_develops_is_developed_by_deliverable" name="QueryOrganization_DomainOverorganization_component_develops_is_developed_by_deliverable" title="is developed by Organization Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Organization Component develops Deliverable"
    )
    and component.type="Organization Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Organization Component develops Deliverable" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryCapabilityOverdeliverable_provides_is_provided_by_capability" name="QueryCapabilityOverdeliverable_provides_is_provided_by_capability" title="provides Capability" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Deliverable provides Capability"
    )
    and component.type="Capability"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Deliverable provides Capability" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryDeliverableOverdeliverable_provides_is_provided_by_capability" name="QueryDeliverableOverdeliverable_provides_is_provided_by_capability" title="is provided by Deliverable" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Deliverable provides Capability"
    )
    and component.type="Deliverable"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Deliverable provides Capability" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryInterfaceOverapplication_component_receives_is_received_by_message" name="QueryInterfaceOverapplication_component_receives_is_received_by_message" title="receives Message" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Application Component receives Message"
    )
    and component.type="Message"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Application Component receives Message" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryApplication_DomainOverapplication_component_receives_is_received_by_message" name="QueryApplication_DomainOverapplication_component_receives_is_received_by_message" title="is received by Application Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Application Component receives Message"
    )
    and component.type="Application Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Application Component receives Message" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryInterfaceOverorganization_receives_is_received_by_message" name="QueryInterfaceOverorganization_receives_is_received_by_message" title="receives Message" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Organization receives Message"
    )
    and component.type="Message"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Organization receives Message" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryOrganizationOverorganization_receives_is_received_by_message" name="QueryOrganizationOverorganization_receives_is_received_by_message" title="is received by Organization" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Organization receives Message"
    )
    and component.type="Organization"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Organization receives Message" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryApplication_DomainOvercontract_governs_is_governed_by_application_component" name="QueryApplication_DomainOvercontract_governs_is_governed_by_application_component" title="governs Application Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Contract governs Application Component"
    )
    and component.type="Application Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Contract governs Application Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryContractOvercontract_governs_is_governed_by_application_component" name="QueryContractOvercontract_governs_is_governed_by_application_component" title="is governed by Contract" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Contract governs Application Component"
    )
    and component.type="Contract"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Contract governs Application Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryInfrastructure_DomainOvercontract_governs_is_governed_by_infrastructure_component" name="QueryInfrastructure_DomainOvercontract_governs_is_governed_by_infrastructure_component" title="governs Infrastructure Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Contract governs Infrastructure Component"
    )
    and component.type="Infrastructure Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Contract governs Infrastructure Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryContractOvercontract_governs_is_governed_by_infrastructure_component" name="QueryContractOvercontract_governs_is_governed_by_infrastructure_component" title="is governed by Contract" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Contract governs Infrastructure Component"
    )
    and component.type="Contract"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Contract governs Infrastructure Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryDeliverableOvercontract_governs_is_governed_by_deliverable" name="QueryDeliverableOvercontract_governs_is_governed_by_deliverable" title="governs Deliverable" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Contract governs Deliverable"
    )
    and component.type="Deliverable"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Contract governs Deliverable" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryContractOvercontract_governs_is_governed_by_deliverable" name="QueryContractOvercontract_governs_is_governed_by_deliverable" title="is governed by Contract" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Contract governs Deliverable"
    )
    and component.type="Contract"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Contract governs Deliverable" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryInitiative_DomainOvercontract_governs_is_governed_by_change_component" name="QueryInitiative_DomainOvercontract_governs_is_governed_by_change_component" title="governs Change Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Contract governs Change Component"
    )
    and component.type="Change Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Contract governs Change Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryContractOvercontract_governs_is_governed_by_change_component" name="QueryContractOvercontract_governs_is_governed_by_change_component" title="is governed by Contract" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Contract governs Change Component"
    )
    and component.type="Contract"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Contract governs Change Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryMachineOvercontract_governs_is_governed_by_resource" name="QueryMachineOvercontract_governs_is_governed_by_resource" title="governs Resource" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Contract governs Resource"
    )
    and component.type="Resource"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Contract governs Resource" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryContractOvercontract_governs_is_governed_by_resource" name="QueryContractOvercontract_governs_is_governed_by_resource" title="is governed by Contract" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Contract governs Resource"
    )
    and component.type="Contract"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Contract governs Resource" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryDeliverableOverchange_component_uses_is_used_by_deliverable" name="QueryDeliverableOverchange_component_uses_is_used_by_deliverable" title="uses Deliverable" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Change Component uses Deliverable"
    )
    and component.type="Deliverable"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Change Component uses Deliverable" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryInitiative_DomainOverchange_component_uses_is_used_by_deliverable" name="QueryInitiative_DomainOverchange_component_uses_is_used_by_deliverable" title="is used by Change Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Change Component uses Deliverable"
    )
    and component.type="Change Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Change Component uses Deliverable" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryGeneric_ComponentOverconcept_represents_is_represented_by_generic_component" name="QueryGeneric_ComponentOverconcept_represents_is_represented_by_generic_component" title="represents Basic Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Concept represents Basic Component"
    )
    and component.type="Basic Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Concept represents Basic Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryConceptOverconcept_represents_is_represented_by_generic_component" name="QueryConceptOverconcept_represents_is_represented_by_generic_component" title="is represented by Concept" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Concept represents Basic Component"
    )
    and component.type="Concept"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Concept represents Basic Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryOrganization_DomainOverrequirement_applies_to_has_organization_component" name="QueryOrganization_DomainOverrequirement_applies_to_has_organization_component" title="applies to Organization Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Requirement applies to Organization Component"
    )
    and component.type="Organization Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Requirement applies to Organization Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryITRequirementOverrequirement_applies_to_has_organization_component" name="QueryITRequirementOverrequirement_applies_to_has_organization_component" title="has Requirement" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Requirement applies to Organization Component"
    )
    and component.type="Requirement"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Requirement applies to Organization Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryDeliverableOverrequirement_applies_to_has_deliverable" name="QueryDeliverableOverrequirement_applies_to_has_deliverable" title="applies to Deliverable" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Requirement applies to Deliverable"
    )
    and component.type="Deliverable"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Requirement applies to Deliverable" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryITRequirementOverrequirement_applies_to_has_deliverable" name="QueryITRequirementOverrequirement_applies_to_has_deliverable" title="has Requirement" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Requirement applies to Deliverable"
    )
    and component.type="Requirement"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Requirement applies to Deliverable" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryCompetenceprofileOverrequirement_applies_to_has_skill_profile" name="QueryCompetenceprofileOverrequirement_applies_to_has_skill_profile" title="applies to Skill Profile" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Requirement applies to Skill Profile"
    )
    and component.type="Skill Profile"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Requirement applies to Skill Profile" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryITRequirementOverrequirement_applies_to_has_skill_profile" name="QueryITRequirementOverrequirement_applies_to_has_skill_profile" title="has Requirement" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Requirement applies to Skill Profile"
    )
    and component.type="Requirement"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Requirement applies to Skill Profile" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryITRequirementOverorganization_component_generates_is_generated_by_requirement" name="QueryITRequirementOverorganization_component_generates_is_generated_by_requirement" title="generates Requirement" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Organization Component generates Requirement"
    )
    and component.type="Requirement"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Organization Component generates Requirement" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryOrganization_DomainOverorganization_component_generates_is_generated_by_requirement" name="QueryOrganization_DomainOverorganization_component_generates_is_generated_by_requirement" title="is generated by Organization Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Organization Component generates Requirement"
    )
    and component.type="Organization Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Organization Component generates Requirement" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryMeasureOverrequirement_applies_to_has_measure" name="QueryMeasureOverrequirement_applies_to_has_measure" title="applies to Measure" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Requirement applies to Measure"
    )
    and component.type="Measure"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Requirement applies to Measure" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryITRequirementOverrequirement_applies_to_has_measure" name="QueryITRequirementOverrequirement_applies_to_has_measure" title="has Requirement" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Requirement applies to Measure"
    )
    and component.type="Requirement"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Requirement applies to Measure" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryInformationNeedOverinformation_component_satisfies_is_satisfied_by_information_need" name="QueryInformationNeedOverinformation_component_satisfies_is_satisfied_by_information_need" title="satisfies Information Need" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Information Component satisfies Information Need"
    )
    and component.type="Information Need"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Information Component satisfies Information Need" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="Queryinformation_componentOverinformation_component_satisfies_is_satisfied_by_information_need" name="Queryinformation_componentOverinformation_component_satisfies_is_satisfied_by_information_need" title="is satisfied by Information Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Information Component satisfies Information Need"
    )
    and component.type="Information Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Information Component satisfies Information Need" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryInterfaceOverapplication_component_sends_is_sent_by_message" name="QueryInterfaceOverapplication_component_sends_is_sent_by_message" title="sends Message" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Application Component sends Message"
    )
    and component.type="Message"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Application Component sends Message" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryApplication_DomainOverapplication_component_sends_is_sent_by_message" name="QueryApplication_DomainOverapplication_component_sends_is_sent_by_message" title="is sent by Application Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Application Component sends Message"
    )
    and component.type="Application Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Application Component sends Message" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryInterfaceOverorganization_sends_is_sent_by_message" name="QueryInterfaceOverorganization_sends_is_sent_by_message" title="sends Message" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Organization sends Message"
    )
    and component.type="Message"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Organization sends Message" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryOrganizationOverorganization_sends_is_sent_by_message" name="QueryOrganizationOverorganization_sends_is_sent_by_message" title="is sent by Organization" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Organization sends Message"
    )
    and component.type="Organization"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Organization sends Message" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryDeliverableOverorganization_component_services_is_serviced_by_deliverable" name="QueryDeliverableOverorganization_component_services_is_serviced_by_deliverable" title="services Deliverable" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Organization Component services Deliverable"
    )
    and component.type="Deliverable"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Organization Component services Deliverable" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryOrganization_DomainOverorganization_component_services_is_serviced_by_deliverable" name="QueryOrganization_DomainOverorganization_component_services_is_serviced_by_deliverable" title="is serviced by Organization Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Organization Component services Deliverable"
    )
    and component.type="Organization Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Organization Component services Deliverable" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryPhysicalDatastoreOverapplication_component_uses_is_used_by_datastore" name="QueryPhysicalDatastoreOverapplication_component_uses_is_used_by_datastore" title="uses Datastore" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Application Component uses Datastore"
    )
    and component.type="Datastore"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Application Component uses Datastore" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryApplication_DomainOverapplication_component_uses_is_used_by_datastore" name="QueryApplication_DomainOverapplication_component_uses_is_used_by_datastore" title="is used by Application Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Application Component uses Datastore"
    )
    and component.type="Application Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Application Component uses Datastore" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryArchitectureTemplateOverbusiness_process_uses_is_used_by_it_architecture" name="QueryArchitectureTemplateOverbusiness_process_uses_is_used_by_it_architecture" title="uses IT Architecture" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Business Process uses IT Architecture"
    )
    and component.type="IT Architecture"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Business Process uses IT Architecture" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryWorkflowProcessOverbusiness_process_uses_is_used_by_it_architecture" name="QueryWorkflowProcessOverbusiness_process_uses_is_used_by_it_architecture" title="is used by Business Process" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Business Process uses IT Architecture"
    )
    and component.type="Business Process"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Business Process uses IT Architecture" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryPolicy_DomainOverchange_component_supports_is_supported_by_policy_component" name="QueryPolicy_DomainOverchange_component_supports_is_supported_by_policy_component" title="supports Policy Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Change Component supports Policy Component"
    )
    and component.type="Policy Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Change Component supports Policy Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryInitiative_DomainOverchange_component_supports_is_supported_by_policy_component" name="QueryInitiative_DomainOverchange_component_supports_is_supported_by_policy_component" title="is supported by Change Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Change Component supports Policy Component"
    )
    and component.type="Change Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Change Component supports Policy Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryApplicationOverdeliverable_uses_is_used_by_criticality_application" name="QueryApplicationOverdeliverable_uses_is_used_by_criticality_application" title="uses Application" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Deliverable uses Application"
    )
    and component.type="Application"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Deliverable uses Application" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryDeliverableOverdeliverable_uses_is_used_by_criticality_application" name="QueryDeliverableOverdeliverable_uses_is_used_by_criticality_application" title="is used by Deliverable" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Deliverable uses Application"
    )
    and component.type="Deliverable"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Deliverable uses Application" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryProcess_DomainOverdeliverable_uses_is_used_by_criticality_process_component" name="QueryProcess_DomainOverdeliverable_uses_is_used_by_criticality_process_component" title="uses Process Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Deliverable uses Process Component"
    )
    and component.type="Process Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Deliverable uses Process Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryDeliverableOverdeliverable_uses_is_used_by_criticality_process_component" name="QueryDeliverableOverdeliverable_uses_is_used_by_criticality_process_component" title="is used by Deliverable" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Deliverable uses Process Component"
    )
    and component.type="Deliverable"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Deliverable uses Process Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryITRequirementOverpolicy_component_satisfies_is_satisfied_by_requirement" name="QueryITRequirementOverpolicy_component_satisfies_is_satisfied_by_requirement" title="satisfies Requirement" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Policy Component satisfies Requirement"
    )
    and component.type="Requirement"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Policy Component satisfies Requirement" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryPolicy_DomainOverpolicy_component_satisfies_is_satisfied_by_requirement" name="QueryPolicy_DomainOverpolicy_component_satisfies_is_satisfied_by_requirement" title="is satisfied by Policy Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Policy Component satisfies Requirement"
    )
    and component.type="Policy Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Policy Component satisfies Requirement" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryActionOverapplication_provides_is_provided_by_criticality_function" name="QueryActionOverapplication_provides_is_provided_by_criticality_function" title="provides Function" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Application provides Function"
    )
    and component.type="Function"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Application provides Function" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryApplicationOverapplication_provides_is_provided_by_criticality_function" name="QueryApplicationOverapplication_provides_is_provided_by_criticality_function" title="is provided by Application" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Application provides Function"
    )
    and component.type="Application"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Application provides Function" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryMarketStrategyOverenterprise_policy_implements_is_implemented_by_weight_strategy" name="QueryMarketStrategyOverenterprise_policy_implements_is_implemented_by_weight_strategy" title="implements Strategy" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Enterprise Policy implements Strategy"
    )
    and component.type="Strategy"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Enterprise Policy implements Strategy" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryITPrinciplesOverenterprise_policy_implements_is_implemented_by_weight_strategy" name="QueryITPrinciplesOverenterprise_policy_implements_is_implemented_by_weight_strategy" title="is implemented by Enterprise Policy" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Enterprise Policy implements Strategy"
    )
    and component.type="Enterprise Policy"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Enterprise Policy implements Strategy" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryApplicationOverbusiness_process_uses_is_used_by_weight_criticality_application" name="QueryApplicationOverbusiness_process_uses_is_used_by_weight_criticality_application" title="uses Application" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Business Process uses Application"
    )
    and component.type="Application"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Business Process uses Application" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryWorkflowProcessOverbusiness_process_uses_is_used_by_weight_criticality_application" name="QueryWorkflowProcessOverbusiness_process_uses_is_used_by_weight_criticality_application" title="is used by Business Process" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Business Process uses Application"
    )
    and component.type="Business Process"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Business Process uses Application" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryCriticalSuccessFactorOverpolicy_component_supports_is_supported_by_success_factor" name="QueryCriticalSuccessFactorOverpolicy_component_supports_is_supported_by_success_factor" title="supports Success Factor" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Policy Component supports Success Factor"
    )
    and component.type="Success Factor"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Policy Component supports Success Factor" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryPolicy_DomainOverpolicy_component_supports_is_supported_by_success_factor" name="QueryPolicy_DomainOverpolicy_component_supports_is_supported_by_success_factor" title="is supported by Policy Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Policy Component supports Success Factor"
    )
    and component.type="Policy Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Policy Component supports Success Factor" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryGoalOverenterprise_policy_achieves_is_achieved_by_goal" name="QueryGoalOverenterprise_policy_achieves_is_achieved_by_goal" title="achieves Goal" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Enterprise Policy achieves Goal"
    )
    and component.type="Goal"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Enterprise Policy achieves Goal" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryITPrinciplesOverenterprise_policy_achieves_is_achieved_by_goal" name="QueryITPrinciplesOverenterprise_policy_achieves_is_achieved_by_goal" title="is achieved by Enterprise Policy" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Enterprise Policy achieves Goal"
    )
    and component.type="Enterprise Policy"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Enterprise Policy achieves Goal" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryApplication_DomainOverorganization_component_services_is_serviced_by_application_component" name="QueryApplication_DomainOverorganization_component_services_is_serviced_by_application_component" title="services Application Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Organization Component services Application Component"
    )
    and component.type="Application Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Organization Component services Application Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryOrganization_DomainOverorganization_component_services_is_serviced_by_application_component" name="QueryOrganization_DomainOverorganization_component_services_is_serviced_by_application_component" title="is serviced by Organization Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Organization Component services Application Component"
    )
    and component.type="Organization Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Organization Component services Application Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryInfrastructure_DomainOverorganization_component_services_is_serviced_by_infrastructure_component" name="QueryInfrastructure_DomainOverorganization_component_services_is_serviced_by_infrastructure_component" title="services Infrastructure Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Organization Component services Infrastructure Component"
    )
    and component.type="Infrastructure Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Organization Component services Infrastructure Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryOrganization_DomainOverorganization_component_services_is_serviced_by_infrastructure_component" name="QueryOrganization_DomainOverorganization_component_services_is_serviced_by_infrastructure_component" title="is serviced by Organization Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Organization Component services Infrastructure Component"
    )
    and component.type="Organization Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Organization Component services Infrastructure Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryPhysicalDatastoreOverbusiness_process_uses_is_used_by_datastore" name="QueryPhysicalDatastoreOverbusiness_process_uses_is_used_by_datastore" title="uses Datastore" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Business Process uses Datastore"
    )
    and component.type="Datastore"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Business Process uses Datastore" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryWorkflowProcessOverbusiness_process_uses_is_used_by_datastore" name="QueryWorkflowProcessOverbusiness_process_uses_is_used_by_datastore" title="is used by Business Process" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Business Process uses Datastore"
    )
    and component.type="Business Process"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Business Process uses Datastore" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryEnablingITTechnologyOverapplication_component_uses_is_used_by_technology" name="QueryEnablingITTechnologyOverapplication_component_uses_is_used_by_technology" title="uses Technology" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Application Component uses Technology"
    )
    and component.type="Technology"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Application Component uses Technology" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryApplication_DomainOverapplication_component_uses_is_used_by_technology" name="QueryApplication_DomainOverapplication_component_uses_is_used_by_technology" title="is used by Application Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Application Component uses Technology"
    )
    and component.type="Application Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Application Component uses Technology" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryEnablingITTechnologyOverinfrastructure_component_uses_is_used_by_technology" name="QueryEnablingITTechnologyOverinfrastructure_component_uses_is_used_by_technology" title="uses Technology" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Infrastructure Component uses Technology"
    )
    and component.type="Technology"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Infrastructure Component uses Technology" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryInfrastructure_DomainOverinfrastructure_component_uses_is_used_by_technology" name="QueryInfrastructure_DomainOverinfrastructure_component_uses_is_used_by_technology" title="is used by Infrastructure Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Infrastructure Component uses Technology"
    )
    and component.type="Infrastructure Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Infrastructure Component uses Technology" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryEnablingITTechnologyOverdeliverable_uses_is_used_by_technology" name="QueryEnablingITTechnologyOverdeliverable_uses_is_used_by_technology" title="uses Technology" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Deliverable uses Technology"
    )
    and component.type="Technology"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Deliverable uses Technology" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryDeliverableOverdeliverable_uses_is_used_by_technology" name="QueryDeliverableOverdeliverable_uses_is_used_by_technology" title="is used by Deliverable" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Deliverable uses Technology"
    )
    and component.type="Deliverable"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Deliverable uses Technology" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryOrganization_DomainOverdeployed_software_has_user_is_user_of_organization_component" name="QueryOrganization_DomainOverdeployed_software_has_user_is_user_of_organization_component" title="has user Organization Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Deployed Software has user Organization Component"
    )
    and component.type="Organization Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Deployed Software has user Organization Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryDeployed_InstanceOverdeployed_software_has_user_is_user_of_organization_component" name="QueryDeployed_InstanceOverdeployed_software_has_user_is_user_of_organization_component" title="is user of Deployed Software" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Deployed Software has user Organization Component"
    )
    and component.type="Deployed Software"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Deployed Software has user Organization Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryOrganization_DomainOverinfrastructure_component_has_user_is_user_of_organization_component" name="QueryOrganization_DomainOverinfrastructure_component_has_user_is_user_of_organization_component" title="has user Organization Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Infrastructure Component has user Organization Component"
    )
    and component.type="Organization Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Infrastructure Component has user Organization Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryInfrastructure_DomainOverinfrastructure_component_has_user_is_user_of_organization_component" name="QueryInfrastructure_DomainOverinfrastructure_component_has_user_is_user_of_organization_component" title="is user of Infrastructure Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Infrastructure Component has user Organization Component"
    )
    and component.type="Infrastructure Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Infrastructure Component has user Organization Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryOrganization_DomainOverprocess_component_has_user_is_user_of_organization_component" name="QueryOrganization_DomainOverprocess_component_has_user_is_user_of_organization_component" title="has user Organization Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Process Component has user Organization Component"
    )
    and component.type="Organization Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Process Component has user Organization Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryProcess_DomainOverprocess_component_has_user_is_user_of_organization_component" name="QueryProcess_DomainOverprocess_component_has_user_is_user_of_organization_component" title="is user of Process Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Process Component has user Organization Component"
    )
    and component.type="Process Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Process Component has user Organization Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryDeliverableOverdeliverable_consists_of_is_part_of_deliverable" name="QueryDeliverableOverdeliverable_consists_of_is_part_of_deliverable" title="consists of Deliverable" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Deliverable consists of Deliverable"
    )
    and component.type="Deliverable"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Deliverable consists of Deliverable" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryAnalysisOverchange_component_needs_is_needed_by_analysis" name="QueryAnalysisOverchange_component_needs_is_needed_by_analysis" title="needs Analysis" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Change Component needs Analysis"
    )
    and component.type="Analysis"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Change Component needs Analysis" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryInitiative_DomainOverchange_component_needs_is_needed_by_analysis" name="QueryInitiative_DomainOverchange_component_needs_is_needed_by_analysis" title="is needed by Change Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Change Component needs Analysis"
    )
    and component.type="Change Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Change Component needs Analysis" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryUserNeedOverscenario_addresses_is_addressed_by_need" name="QueryUserNeedOverscenario_addresses_is_addressed_by_need" title="addresses Need" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Scenario addresses Need"
    )
    and component.type="Need"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Scenario addresses Need" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryScenarioOverscenario_addresses_is_addressed_by_need" name="QueryScenarioOverscenario_addresses_is_addressed_by_need" title="is addressed by Scenario" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Scenario addresses Need"
    )
    and component.type="Scenario"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Scenario addresses Need" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryProcess_DomainOverscenario_affects_is_affected_by_process_component" name="QueryProcess_DomainOverscenario_affects_is_affected_by_process_component" title="affects Process Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Scenario affects Process Component"
    )
    and component.type="Process Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Scenario affects Process Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryScenarioOverscenario_affects_is_affected_by_process_component" name="QueryScenarioOverscenario_affects_is_affected_by_process_component" title="is affected by Scenario" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Scenario affects Process Component"
    )
    and component.type="Scenario"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Scenario affects Process Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryScenarioOvertrend_affects_is_affected_by_scenario" name="QueryScenarioOvertrend_affects_is_affected_by_scenario" title="affects Scenario" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Trend affects Scenario"
    )
    and component.type="Scenario"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Trend affects Scenario" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryTrendTruthOvertrend_affects_is_affected_by_scenario" name="QueryTrendTruthOvertrend_affects_is_affected_by_scenario" title="is affected by Trend" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Trend affects Scenario"
    )
    and component.type="Trend"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Trend affects Scenario" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryTargetCustomerOvertrend_affects_is_affected_by_target_customer" name="QueryTargetCustomerOvertrend_affects_is_affected_by_target_customer" title="affects Target Customer" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Trend affects Target Customer"
    )
    and component.type="Target Customer"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Trend affects Target Customer" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryTrendTruthOvertrend_affects_is_affected_by_target_customer" name="QueryTrendTruthOvertrend_affects_is_affected_by_target_customer" title="is affected by Trend" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Trend affects Target Customer"
    )
    and component.type="Trend"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Trend affects Target Customer" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryLocationOverdeliverable_is_available_in_has_available_location" name="QueryLocationOverdeliverable_is_available_in_has_available_location" title="is available in Location" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Deliverable is available in Location"
    )
    and component.type="Location"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Deliverable is available in Location" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryDeliverableOverdeliverable_is_available_in_has_available_location" name="QueryDeliverableOverdeliverable_is_available_in_has_available_location" title="has available Deliverable" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Deliverable is available in Location"
    )
    and component.type="Deliverable"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Deliverable is available in Location" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryBPM_Data_ObjectOvercommunication_corresponds_to_corresponds_to_process_data" name="QueryBPM_Data_ObjectOvercommunication_corresponds_to_corresponds_to_process_data" title="corresponds to Process Data" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Communication corresponds to Process Data"
    )
    and component.type="Process Data"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Communication corresponds to Process Data" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryCommunicationOvercommunication_corresponds_to_corresponds_to_process_data" name="QueryCommunicationOvercommunication_corresponds_to_corresponds_to_process_data" title="corresponds to Communication" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Communication corresponds to Process Data"
    )
    and component.type="Communication"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Communication corresponds to Process Data" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryKnowledgeAccessOverapplication_component_provides_is_provided_by_knowledge_access" name="QueryKnowledgeAccessOverapplication_component_provides_is_provided_by_knowledge_access" title="provides Knowledge Access" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Application Component provides Knowledge Access"
    )
    and component.type="Knowledge Access"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Application Component provides Knowledge Access" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryApplication_DomainOverapplication_component_provides_is_provided_by_knowledge_access" name="QueryApplication_DomainOverapplication_component_provides_is_provided_by_knowledge_access" title="is provided by Application Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Application Component provides Knowledge Access"
    )
    and component.type="Application Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Application Component provides Knowledge Access" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryKnowledgeAccessOverdatastore_provides_is_provided_by_knowledge_access" name="QueryKnowledgeAccessOverdatastore_provides_is_provided_by_knowledge_access" title="provides Knowledge Access" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Datastore provides Knowledge Access"
    )
    and component.type="Knowledge Access"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Datastore provides Knowledge Access" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryPhysicalDatastoreOverdatastore_provides_is_provided_by_knowledge_access" name="QueryPhysicalDatastoreOverdatastore_provides_is_provided_by_knowledge_access" title="is provided by Datastore" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Datastore provides Knowledge Access"
    )
    and component.type="Datastore"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Datastore provides Knowledge Access" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryOrganizationOvertarget_customer_corresponds_to_corresponds_to_organization" name="QueryOrganizationOvertarget_customer_corresponds_to_corresponds_to_organization" title="corresponds to Organization" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Target Customer corresponds to Organization"
    )
    and component.type="Organization"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Target Customer corresponds to Organization" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryTargetCustomerOvertarget_customer_corresponds_to_corresponds_to_organization" name="QueryTargetCustomerOvertarget_customer_corresponds_to_corresponds_to_organization" title="corresponds to Target Customer" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Target Customer corresponds to Organization"
    )
    and component.type="Target Customer"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Target Customer corresponds to Organization" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryOrganizationOvertarget_customer_applies_to_has_organization" name="QueryOrganizationOvertarget_customer_applies_to_has_organization" title="applies to Organization" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Target Customer applies to Organization"
    )
    and component.type="Organization"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Target Customer applies to Organization" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryTargetCustomerOvertarget_customer_applies_to_has_organization" name="QueryTargetCustomerOvertarget_customer_applies_to_has_organization" title="has Target Customer" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Target Customer applies to Organization"
    )
    and component.type="Target Customer"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Target Customer applies to Organization" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryOrganizationOvertarget_user_applies_to_has_organization" name="QueryOrganizationOvertarget_user_applies_to_has_organization" title="applies to Organization" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Target User applies to Organization"
    )
    and component.type="Organization"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Target User applies to Organization" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryTargetUserOvertarget_user_applies_to_has_organization" name="QueryTargetUserOvertarget_user_applies_to_has_organization" title="has Target User" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Target User applies to Organization"
    )
    and component.type="Target User"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Target User applies to Organization" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryKnowledgeElementOverskill_profile_consists_of_is_part_of_knowledge_element" name="QueryKnowledgeElementOverskill_profile_consists_of_is_part_of_knowledge_element" title="consists of Knowledge Element" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Skill Profile consists of Knowledge Element"
    )
    and component.type="Knowledge Element"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Skill Profile consists of Knowledge Element" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryCompetenceprofileOverskill_profile_consists_of_is_part_of_knowledge_element" name="QueryCompetenceprofileOverskill_profile_consists_of_is_part_of_knowledge_element" title="is part of Skill Profile" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Skill Profile consists of Knowledge Element"
    )
    and component.type="Skill Profile"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Skill Profile consists of Knowledge Element" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryGeneric_ComponentOverprocess_mechanism_represents_is_mechanism_for_generic_component" name="QueryGeneric_ComponentOverprocess_mechanism_represents_is_mechanism_for_generic_component" title="represents Basic Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Process Mechanism represents Basic Component"
    )
    and component.type="Basic Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Process Mechanism represents Basic Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryMechanismOverprocess_mechanism_represents_is_mechanism_for_generic_component" name="QueryMechanismOverprocess_mechanism_represents_is_mechanism_for_generic_component" title="is mechanism for Process Mechanism" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Process Mechanism represents Basic Component"
    )
    and component.type="Process Mechanism"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Process Mechanism represents Basic Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryDeliverableOvermarket_opportunity_applies_to_has_deliverable" name="QueryDeliverableOvermarket_opportunity_applies_to_has_deliverable" title="applies to Deliverable" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Market Opportunity applies to Deliverable"
    )
    and component.type="Deliverable"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Market Opportunity applies to Deliverable" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryMarketOpportunityOvermarket_opportunity_applies_to_has_deliverable" name="QueryMarketOpportunityOvermarket_opportunity_applies_to_has_deliverable" title="has Market Opportunity" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Market Opportunity applies to Deliverable"
    )
    and component.type="Market Opportunity"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Market Opportunity applies to Deliverable" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryMarketStrategyOverstrategy_leads_to_follows_from_strategy" name="QueryMarketStrategyOverstrategy_leads_to_follows_from_strategy" title="leads to Strategy" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Strategy leads to Strategy"
    )
    and component.type="Strategy"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Strategy leads to Strategy" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryMarketSegmentOverorganization_markets_to_is_marketed_to_by_market_segment" name="QueryMarketSegmentOverorganization_markets_to_is_marketed_to_by_market_segment" title="markets to Market Segment" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Organization markets to Market Segment"
    )
    and component.type="Market Segment"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Organization markets to Market Segment" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryOrganizationOverorganization_markets_to_is_marketed_to_by_market_segment" name="QueryOrganizationOverorganization_markets_to_is_marketed_to_by_market_segment" title="is marketed to by Organization" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Organization markets to Market Segment"
    )
    and component.type="Organization"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Organization markets to Market Segment" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryUserNeedOverbenefit_satisfies_is_satisfied_by_need" name="QueryUserNeedOverbenefit_satisfies_is_satisfied_by_need" title="satisfies Need" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Benefit satisfies Need"
    )
    and component.type="Need"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Benefit satisfies Need" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryBenefitOverbenefit_satisfies_is_satisfied_by_need" name="QueryBenefitOverbenefit_satisfies_is_satisfied_by_need" title="is satisfied by Benefit" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Benefit satisfies Need"
    )
    and component.type="Benefit"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Benefit satisfies Need" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="Queryknowledge_componentOverbusiness_process_needs_is_needed_by_knowledge_component" name="Queryknowledge_componentOverbusiness_process_needs_is_needed_by_knowledge_component" title="needs Knowledge Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Business Process needs Knowledge Component"
    )
    and component.type="Knowledge Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Business Process needs Knowledge Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryWorkflowProcessOverbusiness_process_needs_is_needed_by_knowledge_component" name="QueryWorkflowProcessOverbusiness_process_needs_is_needed_by_knowledge_component" title="is needed by Business Process" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Business Process needs Knowledge Component"
    )
    and component.type="Business Process"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Business Process needs Knowledge Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryAnalysisOverstrategy_component_needs_is_needed_by_analysis" name="QueryAnalysisOverstrategy_component_needs_is_needed_by_analysis" title="needs Analysis" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Strategy Component needs Analysis"
    )
    and component.type="Analysis"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Strategy Component needs Analysis" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="Querystrategy_componentOverstrategy_component_needs_is_needed_by_analysis" name="Querystrategy_componentOverstrategy_component_needs_is_needed_by_analysis" title="is needed by Strategy Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Strategy Component needs Analysis"
    )
    and component.type="Strategy Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Strategy Component needs Analysis" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryTrendTruthOverstrategy_supports_is_supported_by_trend" name="QueryTrendTruthOverstrategy_supports_is_supported_by_trend" title="supports Trend" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Strategy supports Trend"
    )
    and component.type="Trend"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Strategy supports Trend" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryMarketStrategyOverstrategy_supports_is_supported_by_trend" name="QueryMarketStrategyOverstrategy_supports_is_supported_by_trend" title="is supported by Strategy" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Strategy supports Trend"
    )
    and component.type="Strategy"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Strategy supports Trend" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryMarketStrategyOverbenefit_implements_is_implemented_by_strategy" name="QueryMarketStrategyOverbenefit_implements_is_implemented_by_strategy" title="implements Strategy" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Benefit implements Strategy"
    )
    and component.type="Strategy"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Benefit implements Strategy" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryBenefitOverbenefit_implements_is_implemented_by_strategy" name="QueryBenefitOverbenefit_implements_is_implemented_by_strategy" title="is implemented by Benefit" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Benefit implements Strategy"
    )
    and component.type="Benefit"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Benefit implements Strategy" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryTargetCustomerOverdeliverable_has_target_customer_is_target_customer_of_target_customer" name="QueryTargetCustomerOverdeliverable_has_target_customer_is_target_customer_of_target_customer" title="has target customer Target Customer" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Deliverable has target customer Target Customer"
    )
    and component.type="Target Customer"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Deliverable has target customer Target Customer" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryDeliverableOverdeliverable_has_target_customer_is_target_customer_of_target_customer" name="QueryDeliverableOverdeliverable_has_target_customer_is_target_customer_of_target_customer" title="is target customer of Deliverable" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Deliverable has target customer Target Customer"
    )
    and component.type="Deliverable"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Deliverable has target customer Target Customer" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryOrganizationOverdeliverable_has_target_customer_is_target_customer_of_organization" name="QueryOrganizationOverdeliverable_has_target_customer_is_target_customer_of_organization" title="has target customer Organization" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Deliverable has target customer Organization"
    )
    and component.type="Organization"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Deliverable has target customer Organization" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryDeliverableOverdeliverable_has_target_customer_is_target_customer_of_organization" name="QueryDeliverableOverdeliverable_has_target_customer_is_target_customer_of_organization" title="is target customer of Deliverable" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Deliverable has target customer Organization"
    )
    and component.type="Deliverable"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Deliverable has target customer Organization" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryScenarioOverdeliverable_supports_is_supported_by_scenario" name="QueryScenarioOverdeliverable_supports_is_supported_by_scenario" title="supports Scenario" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Deliverable supports Scenario"
    )
    and component.type="Scenario"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Deliverable supports Scenario" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryDeliverableOverdeliverable_supports_is_supported_by_scenario" name="QueryDeliverableOverdeliverable_supports_is_supported_by_scenario" title="is supported by Deliverable" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Deliverable supports Scenario"
    )
    and component.type="Deliverable"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Deliverable supports Scenario" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryActionOverbusiness_process_uses_is_used_by_criticality_function" name="QueryActionOverbusiness_process_uses_is_used_by_criticality_function" title="uses Function" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Business Process uses Function"
    )
    and component.type="Function"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Business Process uses Function" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryWorkflowProcessOverbusiness_process_uses_is_used_by_criticality_function" name="QueryWorkflowProcessOverbusiness_process_uses_is_used_by_criticality_function" title="is used by Business Process" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Business Process uses Function"
    )
    and component.type="Business Process"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Business Process uses Function" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryTargetUserOverdeliverable_has_target_user_is_target_user_of_target_user" name="QueryTargetUserOverdeliverable_has_target_user_is_target_user_of_target_user" title="has target user Target User" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Deliverable has target user Target User"
    )
    and component.type="Target User"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Deliverable has target user Target User" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryDeliverableOverdeliverable_has_target_user_is_target_user_of_target_user" name="QueryDeliverableOverdeliverable_has_target_user_is_target_user_of_target_user" title="is target user of Deliverable" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Deliverable has target user Target User"
    )
    and component.type="Deliverable"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Deliverable has target user Target User" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryOrganization_DomainOverdeliverable_has_user_is_user_of_organization_component" name="QueryOrganization_DomainOverdeliverable_has_user_is_user_of_organization_component" title="has user Organization Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Deliverable has user Organization Component"
    )
    and component.type="Organization Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Deliverable has user Organization Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryDeliverableOverdeliverable_has_user_is_user_of_organization_component" name="QueryDeliverableOverdeliverable_has_user_is_user_of_organization_component" title="is user of Deliverable" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Deliverable has user Organization Component"
    )
    and component.type="Deliverable"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Deliverable has user Organization Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryControlOverprocess_control_corresponds_to_corresponds_to_process_control" name="QueryControlOverprocess_control_corresponds_to_corresponds_to_process_control" title="corresponds to Process Control" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Process Control corresponds to Process Control"
    )
    and component.type="Process Control"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Process Control corresponds to Process Control" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryMechanismOverprocess_mechanism_corresponds_to_corresponds_to_process_mechanism" name="QueryMechanismOverprocess_mechanism_corresponds_to_corresponds_to_process_mechanism" title="corresponds to Process Mechanism" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Process Mechanism corresponds to Process Mechanism"
    )
    and component.type="Process Mechanism"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Process Mechanism corresponds to Process Mechanism" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryWorkflowProcessOverprocess_end_event_sequence_flow_business_process" name="QueryWorkflowProcessOverprocess_end_event_sequence_flow_business_process" title="before Business Process" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Process End Event Sequence Flow Business Process"
    )
    and component.type="Business Process"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Process End Event Sequence Flow Business Process" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryBPM_EndEventOverprocess_end_event_sequence_flow_business_process" name="QueryBPM_EndEventOverprocess_end_event_sequence_flow_business_process" title="after Process End Event" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Process End Event Sequence Flow Business Process"
    )
    and component.type="Process End Event"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Process End Event Sequence Flow Business Process" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="Queryprocess_interactionOverprocess_interaction_sequence_flow_process_interaction" name="Queryprocess_interactionOverprocess_interaction_sequence_flow_process_interaction" title="before Process Interaction" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Process Interaction Sequence Flow Process Interaction"
    )
    and component.type="Process Interaction"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Process Interaction Sequence Flow Process Interaction" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryBPM_Data_ObjectOverprocess_sequence_flow_process_data" name="QueryBPM_Data_ObjectOverprocess_sequence_flow_process_data" title="before Process Data" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Process Sequence Flow Process Data"
    )
    and component.type="Process Data"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Process Sequence Flow Process Data" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryLogicalProcessOverprocess_sequence_flow_process_data" name="QueryLogicalProcessOverprocess_sequence_flow_process_data" title="after Process" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Process Sequence Flow Process Data"
    )
    and component.type="Process"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Process Sequence Flow Process Data" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryWorkflowProcessOverbusiness_process_sequence_flow_business_process" name="QueryWorkflowProcessOverbusiness_process_sequence_flow_business_process" title="before Business Process" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Business Process Sequence Flow Business Process"
    )
    and component.type="Business Process"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Business Process Sequence Flow Business Process" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryLogicalProcessOverprocess_data_sequence_flow_process" name="QueryLogicalProcessOverprocess_data_sequence_flow_process" title="before Process" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Process Data Sequence Flow Process"
    )
    and component.type="Process"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Process Data Sequence Flow Process" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryBPM_Data_ObjectOverprocess_data_sequence_flow_process" name="QueryBPM_Data_ObjectOverprocess_data_sequence_flow_process" title="after Process Data" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Process Data Sequence Flow Process"
    )
    and component.type="Process Data"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Process Data Sequence Flow Process" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryLogicalProcessOverprocess_connection_sequence_flow_process" name="QueryLogicalProcessOverprocess_connection_sequence_flow_process" title="before Process" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Process Connection Sequence Flow Process"
    )
    and component.type="Process"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Process Connection Sequence Flow Process" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="Queryprocess_connectionOverprocess_connection_sequence_flow_process" name="Queryprocess_connectionOverprocess_connection_sequence_flow_process" title="after Process Connection" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Process Connection Sequence Flow Process"
    )
    and component.type="Process Connection"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Process Connection Sequence Flow Process" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="Queryprocess_connectionOverprocess_sequence_flow_process_connection" name="Queryprocess_connectionOverprocess_sequence_flow_process_connection" title="before Process Connection" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Process Sequence Flow Process Connection"
    )
    and component.type="Process Connection"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Process Sequence Flow Process Connection" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryLogicalProcessOverprocess_sequence_flow_process_connection" name="QueryLogicalProcessOverprocess_sequence_flow_process_connection" title="after Process" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Process Sequence Flow Process Connection"
    )
    and component.type="Process"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Process Sequence Flow Process Connection" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryLogicalProcessOverprocess_start_event_sequence_flow_process" name="QueryLogicalProcessOverprocess_start_event_sequence_flow_process" title="before Process" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Process Start Event Sequence Flow Process"
    )
    and component.type="Process"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Process Start Event Sequence Flow Process" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryBPM_StartEventOverprocess_start_event_sequence_flow_process" name="QueryBPM_StartEventOverprocess_start_event_sequence_flow_process" title="after Process Start Event" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Process Start Event Sequence Flow Process"
    )
    and component.type="Process Start Event"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Process Start Event Sequence Flow Process" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryBPM_IntermediateEventOverprocess_sequence_flow_process_intermediate_event" name="QueryBPM_IntermediateEventOverprocess_sequence_flow_process_intermediate_event" title="before Process Intermediate Event" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Process Sequence Flow Process Intermediate Event"
    )
    and component.type="Process Intermediate Event"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Process Sequence Flow Process Intermediate Event" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryLogicalProcessOverprocess_sequence_flow_process_intermediate_event" name="QueryLogicalProcessOverprocess_sequence_flow_process_intermediate_event" title="after Process" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Process Sequence Flow Process Intermediate Event"
    )
    and component.type="Process"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Process Sequence Flow Process Intermediate Event" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryBPM_EndEventOverprocess_sequence_flow_process_end_event" name="QueryBPM_EndEventOverprocess_sequence_flow_process_end_event" title="before Process End Event" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Process Sequence Flow Process End Event"
    )
    and component.type="Process End Event"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Process Sequence Flow Process End Event" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryLogicalProcessOverprocess_sequence_flow_process_end_event" name="QueryLogicalProcessOverprocess_sequence_flow_process_end_event" title="after Process" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Process Sequence Flow Process End Event"
    )
    and component.type="Process"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Process Sequence Flow Process End Event" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryBPM_GatewayOverprocess_sequence_flow_process_gateway" name="QueryBPM_GatewayOverprocess_sequence_flow_process_gateway" title="before Process Gateway" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Process Sequence Flow Process Gateway"
    )
    and component.type="Process Gateway"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Process Sequence Flow Process Gateway" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryLogicalProcessOverprocess_sequence_flow_process_gateway" name="QueryLogicalProcessOverprocess_sequence_flow_process_gateway" title="after Process" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Process Sequence Flow Process Gateway"
    )
    and component.type="Process"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Process Sequence Flow Process Gateway" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryLogicalProcessOverprocess_gateway_sequence_flow_process" name="QueryLogicalProcessOverprocess_gateway_sequence_flow_process" title="before Process" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Process Gateway Sequence Flow Process"
    )
    and component.type="Process"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Process Gateway Sequence Flow Process" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryBPM_GatewayOverprocess_gateway_sequence_flow_process" name="QueryBPM_GatewayOverprocess_gateway_sequence_flow_process" title="after Process Gateway" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Process Gateway Sequence Flow Process"
    )
    and component.type="Process Gateway"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Process Gateway Sequence Flow Process" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryLogicalProcessOverprocess_intermediate_event_sequence_flow_process" name="QueryLogicalProcessOverprocess_intermediate_event_sequence_flow_process" title="before Process" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Process Intermediate Event Sequence Flow Process"
    )
    and component.type="Process"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Process Intermediate Event Sequence Flow Process" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryBPM_IntermediateEventOverprocess_intermediate_event_sequence_flow_process" name="QueryBPM_IntermediateEventOverprocess_intermediate_event_sequence_flow_process" title="after Process Intermediate Event" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Process Intermediate Event Sequence Flow Process"
    )
    and component.type="Process Intermediate Event"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Process Intermediate Event Sequence Flow Process" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryBPM_StartEventOverbusiness_process_sequence_flow_process_start_event" name="QueryBPM_StartEventOverbusiness_process_sequence_flow_process_start_event" title="before Process Start Event" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Business Process Sequence Flow Process Start Event"
    )
    and component.type="Process Start Event"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Business Process Sequence Flow Process Start Event" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryWorkflowProcessOverbusiness_process_sequence_flow_process_start_event" name="QueryWorkflowProcessOverbusiness_process_sequence_flow_process_start_event" title="after Business Process" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Business Process Sequence Flow Process Start Event"
    )
    and component.type="Business Process"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Business Process Sequence Flow Process Start Event" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryLogicalProcessOverprocess_message_flow_process" name="QueryLogicalProcessOverprocess_message_flow_process" title="message to Process" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Process Message Flow Process"
    )
    and component.type="Process"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Process Message Flow Process" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryLogicalProcessOverprocess_end_event_message_flow_process" name="QueryLogicalProcessOverprocess_end_event_message_flow_process" title="message to Process" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="End Event Message Flow Process"
    )
    and component.type="Process"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="End Event Message Flow Process" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryBPM_EndEventOverprocess_end_event_message_flow_process" name="QueryBPM_EndEventOverprocess_end_event_message_flow_process" title="message from Process End Event" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="End Event Message Flow Process"
    )
    and component.type="Process End Event"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="End Event Message Flow Process" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryBPM_IntermediateEventOverprocess_message_flow_process_intermediate_event" name="QueryBPM_IntermediateEventOverprocess_message_flow_process_intermediate_event" title="message to Process Intermediate Event" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Process Message Flow Intermediate Event"
    )
    and component.type="Process Intermediate Event"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Process Message Flow Intermediate Event" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryLogicalProcessOverprocess_message_flow_process_intermediate_event" name="QueryLogicalProcessOverprocess_message_flow_process_intermediate_event" title="message from Process" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Process Message Flow Intermediate Event"
    )
    and component.type="Process"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Process Message Flow Intermediate Event" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryBPM_IntermediateEventOverprocess_end_event_message_flow_process_intermediate_event" name="QueryBPM_IntermediateEventOverprocess_end_event_message_flow_process_intermediate_event" title="message to Process Intermediate Event" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="End Event Message Flow Intermediate Event"
    )
    and component.type="Process Intermediate Event"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="End Event Message Flow Intermediate Event" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryBPM_EndEventOverprocess_end_event_message_flow_process_intermediate_event" name="QueryBPM_EndEventOverprocess_end_event_message_flow_process_intermediate_event" title="message from Process End Event" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="End Event Message Flow Intermediate Event"
    )
    and component.type="Process End Event"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="End Event Message Flow Intermediate Event" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryLogicalProcessOverprocess_output_message_flow_process" name="QueryLogicalProcessOverprocess_output_message_flow_process" title="message to Process" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Output Message Flow Process"
    )
    and component.type="Process"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Output Message Flow Process" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryOutputOverprocess_output_message_flow_process" name="QueryOutputOverprocess_output_message_flow_process" title="message from Process Output" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Output Message Flow Process"
    )
    and component.type="Process Output"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Output Message Flow Process" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryInputOverprocess_output_message_flow_process_input" name="QueryInputOverprocess_output_message_flow_process_input" title="message to Process Input" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Output Message Flow Input"
    )
    and component.type="Process Input"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Output Message Flow Input" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryOutputOverprocess_output_message_flow_process_input" name="QueryOutputOverprocess_output_message_flow_process_input" title="message from Process Output" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Output Message Flow Input"
    )
    and component.type="Process Output"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Output Message Flow Input" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryBPM_StartEventOverprocess_end_event_message_flow_process_start_event" name="QueryBPM_StartEventOverprocess_end_event_message_flow_process_start_event" title="message to Process Start Event" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="End Event Message Flow Start Event"
    )
    and component.type="Process Start Event"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="End Event Message Flow Start Event" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryBPM_EndEventOverprocess_end_event_message_flow_process_start_event" name="QueryBPM_EndEventOverprocess_end_event_message_flow_process_start_event" title="message from Process End Event" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="End Event Message Flow Start Event"
    )
    and component.type="Process End Event"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="End Event Message Flow Start Event" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryLogicalProcessOverprocess_data_association_process" name="QueryLogicalProcessOverprocess_data_association_process" title="association to Process" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Process Data Association Process"
    )
    and component.type="Process"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Process Data Association Process" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryBPM_Data_ObjectOverprocess_data_association_process" name="QueryBPM_Data_ObjectOverprocess_data_association_process" title="association from Process Data" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Process Data Association Process"
    )
    and component.type="Process Data"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Process Data Association Process" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryBPM_Data_ObjectOverprocess_association_process_data" name="QueryBPM_Data_ObjectOverprocess_association_process_data" title="association to Process Data" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Process Association Process Data"
    )
    and component.type="Process Data"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Process Association Process Data" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryLogicalProcessOverprocess_association_process_data" name="QueryLogicalProcessOverprocess_association_process_data" title="association from Process" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Process Association Process Data"
    )
    and component.type="Process"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Process Association Process Data" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryGeneric_ComponentOverprocess_gateway_represents_is_gateway_for_generic_component" name="QueryGeneric_ComponentOverprocess_gateway_represents_is_gateway_for_generic_component" title="represents Basic Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Process Gateway represents Basic Component"
    )
    and component.type="Basic Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Process Gateway represents Basic Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryBPM_GatewayOverprocess_gateway_represents_is_gateway_for_generic_component" name="QueryBPM_GatewayOverprocess_gateway_represents_is_gateway_for_generic_component" title="is gateway for Process Gateway" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Process Gateway represents Basic Component"
    )
    and component.type="Process Gateway"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Process Gateway represents Basic Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryGeneric_ComponentOverprocess_event_represents_is_event_for_generic_component" name="QueryGeneric_ComponentOverprocess_event_represents_is_event_for_generic_component" title="represents Basic Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Process Event represents Basic Component"
    )
    and component.type="Basic Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Process Event represents Basic Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="Queryprocess_eventOverprocess_event_represents_is_event_for_generic_component" name="Queryprocess_eventOverprocess_event_represents_is_event_for_generic_component" title="is event for Process Event" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Process Event represents Basic Component"
    )
    and component.type="Process Event"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Process Event represents Basic Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryGeneric_ComponentOverprocess_input_represents_is_input_for_generic_component" name="QueryGeneric_ComponentOverprocess_input_represents_is_input_for_generic_component" title="represents Basic Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Process Input represents Basic Component"
    )
    and component.type="Basic Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Process Input represents Basic Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryInputOverprocess_input_represents_is_input_for_generic_component" name="QueryInputOverprocess_input_represents_is_input_for_generic_component" title="is input for Process Input" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Process Input represents Basic Component"
    )
    and component.type="Process Input"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Process Input represents Basic Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryGeneric_ComponentOverprocess_control_represents_is_control_for_generic_component" name="QueryGeneric_ComponentOverprocess_control_represents_is_control_for_generic_component" title="represents Basic Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Process Control represents Basic Component"
    )
    and component.type="Basic Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Process Control represents Basic Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryControlOverprocess_control_represents_is_control_for_generic_component" name="QueryControlOverprocess_control_represents_is_control_for_generic_component" title="is control for Process Control" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Process Control represents Basic Component"
    )
    and component.type="Process Control"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Process Control represents Basic Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryGeneric_ComponentOverprocess_output_represents_is_output_for_generic_component" name="QueryGeneric_ComponentOverprocess_output_represents_is_output_for_generic_component" title="represents Basic Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Process Output represents Basic Component"
    )
    and component.type="Basic Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Process Output represents Basic Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryOutputOverprocess_output_represents_is_output_for_generic_component" name="QueryOutputOverprocess_output_represents_is_output_for_generic_component" title="is output for Process Output" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Process Output represents Basic Component"
    )
    and component.type="Process Output"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Process Output represents Basic Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryWorkflowProcessOverbusiness_process_has_template_is_template_for_business_process" name="QueryWorkflowProcessOverbusiness_process_has_template_is_template_for_business_process" title="has template Business Process" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Business Process has template Business Process"
    )
    and component.type="Business Process"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Business Process has template Business Process" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryApplication_DomainOverapplication_component_has_template_is_template_for_application_component" name="QueryApplication_DomainOverapplication_component_has_template_is_template_for_application_component" title="has template Application Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Application Component has template Application Component"
    )
    and component.type="Application Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Application Component has template Application Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryInfrastructure_DomainOverinfrastructure_component_has_template_is_template_for_infrastructure_component" name="QueryInfrastructure_DomainOverinfrastructure_component_has_template_is_template_for_infrastructure_component" title="has template Infrastructure Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Infrastructure Component has template Infrastructure Component"
    )
    and component.type="Infrastructure Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Infrastructure Component has template Infrastructure Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryITRequirementOverstrategy_component_leads_to_follows_from_requirement" name="QueryITRequirementOverstrategy_component_leads_to_follows_from_requirement" title="leads to Requirement" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Strategy Component leads to Requirement"
    )
    and component.type="Requirement"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Strategy Component leads to Requirement" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="Querystrategy_componentOverstrategy_component_leads_to_follows_from_requirement" name="Querystrategy_componentOverstrategy_component_leads_to_follows_from_requirement" title="follows from Strategy Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Strategy Component leads to Requirement"
    )
    and component.type="Strategy Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Strategy Component leads to Requirement" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryPolicy_DomainOverpolicy_component_leads_to_follows_from_policy_component" name="QueryPolicy_DomainOverpolicy_component_leads_to_follows_from_policy_component" title="leads to Policy Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Policy Component leads to Policy Component"
    )
    and component.type="Policy Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Policy Component leads to Policy Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryRoleOvergeneric_component_fills_is_filled_by_general_role" name="QueryRoleOvergeneric_component_fills_is_filled_by_general_role" title="fills General Role" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Basic Component fills General Role"
    )
    and component.type="General Role"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Basic Component fills General Role" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryGeneric_ComponentOvergeneric_component_fills_is_filled_by_general_role" name="QueryGeneric_ComponentOvergeneric_component_fills_is_filled_by_general_role" title="is filled by Basic Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Basic Component fills General Role"
    )
    and component.type="Basic Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Basic Component fills General Role" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryGeneric_ComponentOvergeneric_component_general_relationship_generic_component" name="QueryGeneric_ComponentOvergeneric_component_general_relationship_generic_component" title="from Basic Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Basic Component General Relationship Basic ..."
    )
    and component.type="Basic Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Basic Component General Relationship Basic ..." 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QuerycontainerOvercontainer_general_relationship_container" name="QuerycontainerOvercontainer_general_relationship_container" title="from Container" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Container General Relationship Container"
    )
    and component.type="Container"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Container General Relationship Container" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QuerycontainerOvergeneric_component_general_relationship_container" name="QuerycontainerOvergeneric_component_general_relationship_container" title="from Container" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Basic Component General Relationship Container"
    )
    and component.type="Container"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Basic Component General Relationship Container" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryGeneric_ComponentOvergeneric_component_general_relationship_container" name="QueryGeneric_ComponentOvergeneric_component_general_relationship_container" title="to Basic Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Basic Component General Relationship Container"
    )
    and component.type="Basic Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Basic Component General Relationship Container" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryGeneric_ComponentOvercontainer_general_relationship_generic_component" name="QueryGeneric_ComponentOvercontainer_general_relationship_generic_component" title="from Basic Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Container General Relationship Basic Component"
    )
    and component.type="Basic Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Container General Relationship Basic Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QuerycontainerOvercontainer_general_relationship_generic_component" name="QuerycontainerOvercontainer_general_relationship_generic_component" title="to Container" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Container General Relationship Basic Component"
    )
    and component.type="Container"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Container General Relationship Basic Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QuerycontainerOvercontainer_container_relationship_container" name="QuerycontainerOvercontainer_container_relationship_container" title="from Container" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Container Container Relationship Container"
    )
    and component.type="Container"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Container Container Relationship Container" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryDocumentOvergeneric_component_has_document_is_document_for_document" name="QueryDocumentOvergeneric_component_has_document_is_document_for_document" title="has document Document" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Basic Component has document Document"
    )
    and component.type="Document"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Basic Component has document Document" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryGeneric_ComponentOvergeneric_component_has_document_is_document_for_document" name="QueryGeneric_ComponentOvergeneric_component_has_document_is_document_for_document" title="is document for Basic Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Basic Component has document Document"
    )
    and component.type="Basic Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Basic Component has document Document" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryDocumentOvercontainer_has_document_is_document_for_document" name="QueryDocumentOvercontainer_has_document_is_document_for_document" title="has document Document" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Container has document Document"
    )
    and component.type="Document"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Container has document Document" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QuerycontainerOvercontainer_has_document_is_document_for_document" name="QuerycontainerOvercontainer_has_document_is_document_for_document" title="is document for Container" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Container has document Document"
    )
    and component.type="Container"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Container has document Document" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryDocumentclassOverdocument_class_has_class_is_class_for_document_class" name="QueryDocumentclassOverdocument_class_has_class_is_class_for_document_class" title="has class Document Class" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Document Class has class Document Class"
    )
    and component.type="Document Class"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Document Class has class Document Class" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryDocumentclassOveronline_document_has_class_is_class_for_document_class" name="QueryDocumentclassOveronline_document_has_class_is_class_for_document_class" title="has class Document Class" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Online Document has class Document Class"
    )
    and component.type="Document Class"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Online Document has class Document Class" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryOnlinedocumentOveronline_document_has_class_is_class_for_document_class" name="QueryOnlinedocumentOveronline_document_has_class_is_class_for_document_class" title="is class for Online Document" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Online Document has class Document Class"
    )
    and component.type="Online Document"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Online Document has class Document Class" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryAnalysisOverrecommendation_affects_is_affected_by_analysis" name="QueryAnalysisOverrecommendation_affects_is_affected_by_analysis" title="affects Analysis" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Recommendation affects Analysis"
    )
    and component.type="Analysis"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Recommendation affects Analysis" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryRecommendationOverrecommendation_affects_is_affected_by_analysis" name="QueryRecommendationOverrecommendation_affects_is_affected_by_analysis" title="is affected by Recommendation" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Recommendation affects Analysis"
    )
    and component.type="Recommendation"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Recommendation affects Analysis" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryInitiative_DomainOveranalysis_component_affects_is_affected_by_change_component" name="QueryInitiative_DomainOveranalysis_component_affects_is_affected_by_change_component" title="affects Change Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Analysis Component affects Change Component"
    )
    and component.type="Change Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Analysis Component affects Change Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="Queryanalysis_componentOveranalysis_component_affects_is_affected_by_change_component" name="Queryanalysis_componentOveranalysis_component_affects_is_affected_by_change_component" title="is affected by Analysis Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Analysis Component affects Change Component"
    )
    and component.type="Analysis Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Analysis Component affects Change Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryActionOverrisk_affects_is_affected_by_action" name="QueryActionOverrisk_affects_is_affected_by_action" title="affects Action" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Risk affects Action"
    )
    and component.type="Action"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Risk affects Action" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryProjectRiskOverrisk_affects_is_affected_by_action" name="QueryProjectRiskOverrisk_affects_is_affected_by_action" title="is affected by Risk" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Risk affects Action"
    )
    and component.type="Risk"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Risk affects Action" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryfactorOveranalysis_analyzes_is_analyzed_by_factor" name="QueryfactorOveranalysis_analyzes_is_analyzed_by_factor" title="analyzes Factor" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Analysis analyzes Factor"
    )
    and component.type="Factor"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Analysis analyzes Factor" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryAnalysisOveranalysis_analyzes_is_analyzed_by_factor" name="QueryAnalysisOveranalysis_analyzes_is_analyzed_by_factor" title="is analyzed by Analysis" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Analysis analyzes Factor"
    )
    and component.type="Analysis"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Analysis analyzes Factor" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryfactorOverfactor_leads_to_follows_from_factor" name="QueryfactorOverfactor_leads_to_follows_from_factor" title="leads to Factor" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Factor leads to Factor"
    )
    and component.type="Factor"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Factor leads to Factor" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryGeneric_ComponentOvergeneric_component_evolved_to_evolved_from_generic_component" name="QueryGeneric_ComponentOvergeneric_component_evolved_to_evolved_from_generic_component" title="evolved to Basic Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Basic Component evolved to Basic Component"
    )
    and component.type="Basic Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Basic Component evolved to Basic Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryfactorOvercause_applies_to_has_factor" name="QueryfactorOvercause_applies_to_has_factor" title="applies to Factor" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Cause applies to Factor"
    )
    and component.type="Factor"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Cause applies to Factor" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryCauseOvercause_applies_to_has_factor" name="QueryCauseOvercause_applies_to_has_factor" title="has Cause" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Cause applies to Factor"
    )
    and component.type="Cause"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Cause applies to Factor" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryfactorOverconstraint_constrains_is_constrained_by_factor" name="QueryfactorOverconstraint_constrains_is_constrained_by_factor" title="constrains Factor" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Constraint constrains Factor"
    )
    and component.type="Factor"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Constraint constrains Factor" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryConditionOverconstraint_constrains_is_constrained_by_factor" name="QueryConditionOverconstraint_constrains_is_constrained_by_factor" title="is constrained by Constraint" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Constraint constrains Factor"
    )
    and component.type="Constraint"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Constraint constrains Factor" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryConditionOverconstraint_constrains_is_constrained_by_constraint" name="QueryConditionOverconstraint_constrains_is_constrained_by_constraint" title="constrains Constraint" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Constraint constrains Constraint"
    )
    and component.type="Constraint"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Constraint constrains Constraint" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryITRequirementOverrequirement_leads_to_follows_from_requirement" name="QueryITRequirementOverrequirement_leads_to_follows_from_requirement" title="leads to Requirement" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Requirement leads to Requirement"
    )
    and component.type="Requirement"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Requirement leads to Requirement" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryITRequirementOverrequirement_consists_of_is_part_of_requirement" name="QueryITRequirementOverrequirement_consists_of_is_part_of_requirement" title="consists of Requirement" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Requirement consists of Requirement"
    )
    and component.type="Requirement"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Requirement consists of Requirement" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryConclusionOverfinding_leads_to_follows_from_finding" name="QueryConclusionOverfinding_leads_to_follows_from_finding" title="leads to Finding" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Finding leads to Finding"
    )
    and component.type="Finding"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Finding leads to Finding" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryActionOveranalysis_leads_to_follows_from_action" name="QueryActionOveranalysis_leads_to_follows_from_action" title="leads to Action" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Analysis leads to Action"
    )
    and component.type="Action"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Analysis leads to Action" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryAnalysisOveranalysis_leads_to_follows_from_action" name="QueryAnalysisOveranalysis_leads_to_follows_from_action" title="follows from Analysis" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Analysis leads to Action"
    )
    and component.type="Analysis"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Analysis leads to Action" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryConclusionOveranalysis_leads_to_follows_from_finding" name="QueryConclusionOveranalysis_leads_to_follows_from_finding" title="leads to Finding" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Analysis leads to Finding"
    )
    and component.type="Finding"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Analysis leads to Finding" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryAnalysisOveranalysis_leads_to_follows_from_finding" name="QueryAnalysisOveranalysis_leads_to_follows_from_finding" title="follows from Analysis" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Analysis leads to Finding"
    )
    and component.type="Analysis"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Analysis leads to Finding" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryITRequirementOveranalysis_component_leads_to_follows_from_requirement" name="QueryITRequirementOveranalysis_component_leads_to_follows_from_requirement" title="leads to Requirement" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Analysis Component leads to Requirement"
    )
    and component.type="Requirement"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Analysis Component leads to Requirement" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="Queryanalysis_componentOveranalysis_component_leads_to_follows_from_requirement" name="Queryanalysis_componentOveranalysis_component_leads_to_follows_from_requirement" title="follows from Analysis Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Analysis Component leads to Requirement"
    )
    and component.type="Analysis Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Analysis Component leads to Requirement" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryInformationNeedOveranalysis_leads_to_follows_from_information_need" name="QueryInformationNeedOveranalysis_leads_to_follows_from_information_need" title="leads to Information Need" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Analysis leads to Information Need"
    )
    and component.type="Information Need"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Analysis leads to Information Need" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryAnalysisOveranalysis_leads_to_follows_from_information_need" name="QueryAnalysisOveranalysis_leads_to_follows_from_information_need" title="follows from Analysis" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Analysis leads to Information Need"
    )
    and component.type="Analysis"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Analysis leads to Information Need" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryInformationNeedOverfinding_leads_to_follows_from_information_need" name="QueryInformationNeedOverfinding_leads_to_follows_from_information_need" title="leads to Information Need" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Finding leads to Information Need"
    )
    and component.type="Information Need"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Finding leads to Information Need" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryConclusionOverfinding_leads_to_follows_from_information_need" name="QueryConclusionOverfinding_leads_to_follows_from_information_need" title="follows from Finding" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Finding leads to Information Need"
    )
    and component.type="Finding"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Finding leads to Information Need" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryPolicy_DomainOverfinding_leads_to_follows_from_policy_component" name="QueryPolicy_DomainOverfinding_leads_to_follows_from_policy_component" title="leads to Policy Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Finding leads to Policy Component"
    )
    and component.type="Policy Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Finding leads to Policy Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryConclusionOverfinding_leads_to_follows_from_policy_component" name="QueryConclusionOverfinding_leads_to_follows_from_policy_component" title="follows from Finding" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Finding leads to Policy Component"
    )
    and component.type="Finding"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Finding leads to Policy Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryInformationNeedOverbusiness_question_leads_to_follows_from_information_need" name="QueryInformationNeedOverbusiness_question_leads_to_follows_from_information_need" title="leads to Information Need" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Business Question leads to Information Need"
    )
    and component.type="Information Need"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Business Question leads to Information Need" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryBusinessQuestionOverbusiness_question_leads_to_follows_from_information_need" name="QueryBusinessQuestionOverbusiness_question_leads_to_follows_from_information_need" title="follows from Business Question" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Business Question leads to Information Need"
    )
    and component.type="Business Question"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Business Question leads to Information Need" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryInformationNeedOvermeasure_leads_to_follows_from_information_need" name="QueryInformationNeedOvermeasure_leads_to_follows_from_information_need" title="leads to Information Need" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Measure leads to Information Need"
    )
    and component.type="Information Need"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Measure leads to Information Need" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryMeasureOvermeasure_leads_to_follows_from_information_need" name="QueryMeasureOvermeasure_leads_to_follows_from_information_need" title="follows from Measure" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Measure leads to Information Need"
    )
    and component.type="Measure"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Measure leads to Information Need" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryInitiative_DomainOverrequirement_leads_to_follows_from_change_component" name="QueryInitiative_DomainOverrequirement_leads_to_follows_from_change_component" title="leads to Change Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Requirement leads to Change Component"
    )
    and component.type="Change Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Requirement leads to Change Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryITRequirementOverrequirement_leads_to_follows_from_change_component" name="QueryITRequirementOverrequirement_leads_to_follows_from_change_component" title="follows from Requirement" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Requirement leads to Change Component"
    )
    and component.type="Requirement"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Requirement leads to Change Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryActionOverrequirement_leads_to_follows_from_action" name="QueryActionOverrequirement_leads_to_follows_from_action" title="leads to Action" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Requirement leads to Action"
    )
    and component.type="Action"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Requirement leads to Action" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryITRequirementOverrequirement_leads_to_follows_from_action" name="QueryITRequirementOverrequirement_leads_to_follows_from_action" title="follows from Requirement" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Requirement leads to Action"
    )
    and component.type="Requirement"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Requirement leads to Action" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryMarketStrategyOverrequirement_leads_to_follows_from_strategy" name="QueryMarketStrategyOverrequirement_leads_to_follows_from_strategy" title="leads to Strategy" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Requirement leads to Strategy"
    )
    and component.type="Strategy"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Requirement leads to Strategy" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryITRequirementOverrequirement_leads_to_follows_from_strategy" name="QueryITRequirementOverrequirement_leads_to_follows_from_strategy" title="follows from Requirement" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Requirement leads to Strategy"
    )
    and component.type="Requirement"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Requirement leads to Strategy" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryPolicy_DomainOverrequirement_leads_to_follows_from_policy_component" name="QueryPolicy_DomainOverrequirement_leads_to_follows_from_policy_component" title="leads to Policy Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Requirement leads to Policy Component"
    )
    and component.type="Policy Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Requirement leads to Policy Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryITRequirementOverrequirement_leads_to_follows_from_policy_component" name="QueryITRequirementOverrequirement_leads_to_follows_from_policy_component" title="follows from Requirement" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Requirement leads to Policy Component"
    )
    and component.type="Requirement"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Requirement leads to Policy Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryGoalOverfactor_leads_to_follows_from_goal" name="QueryGoalOverfactor_leads_to_follows_from_goal" title="leads to Goal" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Factor leads to Goal"
    )
    and component.type="Goal"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Factor leads to Goal" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryfactorOverfactor_leads_to_follows_from_goal" name="QueryfactorOverfactor_leads_to_follows_from_goal" title="follows from Factor" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Factor leads to Goal"
    )
    and component.type="Factor"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Factor leads to Goal" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryConditionOveraction_leads_to_follows_from_constraint" name="QueryConditionOveraction_leads_to_follows_from_constraint" title="leads to Constraint" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Action leads to Constraint"
    )
    and component.type="Constraint"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Action leads to Constraint" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryActionOveraction_leads_to_follows_from_constraint" name="QueryActionOveraction_leads_to_follows_from_constraint" title="follows from Action" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Action leads to Constraint"
    )
    and component.type="Action"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Action leads to Constraint" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryfactorOveraction_leads_to_follows_from_factor" name="QueryfactorOveraction_leads_to_follows_from_factor" title="leads to Factor" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Action leads to Factor"
    )
    and component.type="Factor"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Action leads to Factor" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryActionOveraction_leads_to_follows_from_factor" name="QueryActionOveraction_leads_to_follows_from_factor" title="follows from Action" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Action leads to Factor"
    )
    and component.type="Action"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Action leads to Factor" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryfactorOveraction_mitigates_is_mitigated_by_factor" name="QueryfactorOveraction_mitigates_is_mitigated_by_factor" title="mitigates Factor" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Action mitigates Factor"
    )
    and component.type="Factor"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Action mitigates Factor" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryActionOveraction_mitigates_is_mitigated_by_factor" name="QueryActionOveraction_mitigates_is_mitigated_by_factor" title="is mitigated by Action" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Action mitigates Factor"
    )
    and component.type="Action"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Action mitigates Factor" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryActionOveraction_needs_is_needed_by_action" name="QueryActionOveraction_needs_is_needed_by_action" title="needs Action" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Action needs Action"
    )
    and component.type="Action"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Action needs Action" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryProductPropertyOverrequirement_applies_to_has_product_property" name="QueryProductPropertyOverrequirement_applies_to_has_product_property" title="applies to Product Property" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Requirement applies to Product Property"
    )
    and component.type="Product Property"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Requirement applies to Product Property" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryITRequirementOverrequirement_applies_to_has_product_property" name="QueryITRequirementOverrequirement_applies_to_has_product_property" title="has Requirement" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Requirement applies to Product Property"
    )
    and component.type="Requirement"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Requirement applies to Product Property" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryDeployed_InstanceOverdeployed_software_sends_data_to_receives_data_from_deployed_software" name="QueryDeployed_InstanceOverdeployed_software_sends_data_to_receives_data_from_deployed_software" title="sends data to Deployed Software" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Deployed Software sends data to Deployed Software"
    )
    and component.type="Deployed Software"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Deployed Software sends data to Deployed Software" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryApplication_DomainOverapplication_component_needs_is_needed_by_application_component" name="QueryApplication_DomainOverapplication_component_needs_is_needed_by_application_component" title="needs Application Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Application Component needs Application Component"
    )
    and component.type="Application Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Application Component needs Application Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryApplicationAreaOvergeneric_component_has_category_is_category_for_category" name="QueryApplicationAreaOvergeneric_component_has_category_is_category_for_category" title="has category Category" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Basic Component has category Category"
    )
    and component.type="Category"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Basic Component has category Category" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryGeneric_ComponentOvergeneric_component_has_category_is_category_for_category" name="QueryGeneric_ComponentOvergeneric_component_has_category_is_category_for_category" title="is category for Basic Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Basic Component has category Category"
    )
    and component.type="Basic Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Basic Component has category Category" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryApplicationBuildingBlockOverapplication_consists_of_is_part_of_software_module" name="QueryApplicationBuildingBlockOverapplication_consists_of_is_part_of_software_module" title="consists of Software Module" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Application consists of Software Module"
    )
    and component.type="Software Module"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Application consists of Software Module" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryApplicationOverapplication_consists_of_is_part_of_software_module" name="QueryApplicationOverapplication_consists_of_is_part_of_software_module" title="is part of Application" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Application consists of Software Module"
    )
    and component.type="Application"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Application consists of Software Module" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryApplicationOverapplication_consists_of_is_part_of_application" name="QueryApplicationOverapplication_consists_of_is_part_of_application" title="consists of Application" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Application consists of Application"
    )
    and component.type="Application"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Application consists of Application" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryPhysicalDatastoreOversoftware_product_uses_is_used_by_datastore" name="QueryPhysicalDatastoreOversoftware_product_uses_is_used_by_datastore" title="uses Datastore" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Software Product uses Datastore"
    )
    and component.type="Datastore"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Software Product uses Datastore" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryApplicationEnvironmentOversoftware_product_uses_is_used_by_datastore" name="QueryApplicationEnvironmentOversoftware_product_uses_is_used_by_datastore" title="is used by Software Product" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Software Product uses Datastore"
    )
    and component.type="Software Product"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Software Product uses Datastore" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryCompetenceOverskill_profile_consists_of_is_part_of_skill_level_skill" name="QueryCompetenceOverskill_profile_consists_of_is_part_of_skill_level_skill" title="consists of Skill" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Skill Profile consists of Skill"
    )
    and component.type="Skill"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Skill Profile consists of Skill" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryCompetenceprofileOverskill_profile_consists_of_is_part_of_skill_level_skill" name="QueryCompetenceprofileOverskill_profile_consists_of_is_part_of_skill_level_skill" title="is part of Skill Profile" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Skill Profile consists of Skill"
    )
    and component.type="Skill Profile"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Skill Profile consists of Skill" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryCompetenceprofileOvertraining_program_provides_is_provided_by_skill_profile" name="QueryCompetenceprofileOvertraining_program_provides_is_provided_by_skill_profile" title="provides Skill Profile" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Training Program provides Skill Profile"
    )
    and component.type="Skill Profile"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Training Program provides Skill Profile" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryTrainingprogramOvertraining_program_provides_is_provided_by_skill_profile" name="QueryTrainingprogramOvertraining_program_provides_is_provided_by_skill_profile" title="is provided by Training Program" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Training Program provides Skill Profile"
    )
    and component.type="Training Program"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Training Program provides Skill Profile" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryCompetenceOverskill_profile_needs_is_needed_by_skill" name="QueryCompetenceOverskill_profile_needs_is_needed_by_skill" title="needs Skill" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Skill Profile needs Skill"
    )
    and component.type="Skill"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Skill Profile needs Skill" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryCompetenceprofileOverskill_profile_needs_is_needed_by_skill" name="QueryCompetenceprofileOverskill_profile_needs_is_needed_by_skill" title="is needed by Skill Profile" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Skill Profile needs Skill"
    )
    and component.type="Skill Profile"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Skill Profile needs Skill" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="Queryinformation_componentOverinformation_component_relates_to_relates_from_information_component" name="Queryinformation_componentOverinformation_component_relates_to_relates_from_information_component" title="relates to Information Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Information Component relates to Information Component"
    )
    and component.type="Information Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Information Component relates to Information Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryArchitectureTemplateElementOverit_function_corresponds_to_corresponds_to_it_architecture_element" name="QueryArchitectureTemplateElementOverit_function_corresponds_to_corresponds_to_it_architecture_element" title="corresponds to IT Architecture Element" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="IT Function corresponds to IT Architecture Element"
    )
    and component.type="IT Architecture Element"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="IT Function corresponds to IT Architecture Element" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="Queryit_functionOverit_function_corresponds_to_corresponds_to_it_architecture_element" name="Queryit_functionOverit_function_corresponds_to_corresponds_to_it_architecture_element" title="corresponds to IT Function" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="IT Function corresponds to IT Architecture Element"
    )
    and component.type="IT Function"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="IT Function corresponds to IT Architecture Element" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryLogicalApplicationOverit_function_corresponds_to_corresponds_to_logical_application" name="QueryLogicalApplicationOverit_function_corresponds_to_corresponds_to_logical_application" title="corresponds to Logical Application" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="IT Function corresponds to Logical Application"
    )
    and component.type="Logical Application"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="IT Function corresponds to Logical Application" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="Queryit_functionOverit_function_corresponds_to_corresponds_to_logical_application" name="Queryit_functionOverit_function_corresponds_to_corresponds_to_logical_application" title="corresponds to IT Function" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="IT Function corresponds to Logical Application"
    )
    and component.type="IT Function"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="IT Function corresponds to Logical Application" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryLogicalTechnologyItemOverit_function_corresponds_to_corresponds_to_logical_technology_item" name="QueryLogicalTechnologyItemOverit_function_corresponds_to_corresponds_to_logical_technology_item" title="corresponds to Logical Technology Item" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="IT Function corresponds to Logical Technology Item"
    )
    and component.type="Logical Technology Item"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="IT Function corresponds to Logical Technology Item" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="Queryit_functionOverit_function_corresponds_to_corresponds_to_logical_technology_item" name="Queryit_functionOverit_function_corresponds_to_corresponds_to_logical_technology_item" title="corresponds to IT Function" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="IT Function corresponds to Logical Technology Item"
    )
    and component.type="IT Function"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="IT Function corresponds to Logical Technology Item" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryPhysicalDatastoreOverdatastore_sends_data_to_receives_data_from_datastore" name="QueryPhysicalDatastoreOverdatastore_sends_data_to_receives_data_from_datastore" title="sends data to Datastore" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Datastore sends data to Datastore"
    )
    and component.type="Datastore"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Datastore sends data to Datastore" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryDocumentOverdatastore_stores_is_stored_in_document" name="QueryDocumentOverdatastore_stores_is_stored_in_document" title="stores Document" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Datastore stores Document"
    )
    and component.type="Document"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Datastore stores Document" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryPhysicalDatastoreOverdatastore_stores_is_stored_in_document" name="QueryPhysicalDatastoreOverdatastore_stores_is_stored_in_document" title="is stored in Datastore" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Datastore stores Document"
    )
    and component.type="Datastore"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Datastore stores Document" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryInterfaceOverdatastore_stores_is_stored_in_message" name="QueryInterfaceOverdatastore_stores_is_stored_in_message" title="stores Message" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Datastore stores Message"
    )
    and component.type="Message"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Datastore stores Message" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryPhysicalDatastoreOverdatastore_stores_is_stored_in_message" name="QueryPhysicalDatastoreOverdatastore_stores_is_stored_in_message" title="is stored in Datastore" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Datastore stores Message"
    )
    and component.type="Datastore"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Datastore stores Message" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryInterfaceOverstorage_stores_is_stored_in_message" name="QueryInterfaceOverstorage_stores_is_stored_in_message" title="stores Message" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Storage stores Message"
    )
    and component.type="Message"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Storage stores Message" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryStorageOverstorage_stores_is_stored_in_message" name="QueryStorageOverstorage_stores_is_stored_in_message" title="is stored in Storage" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Storage stores Message"
    )
    and component.type="Storage"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Storage stores Message" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryGoalOveranalysis_component_affects_is_affected_by_goal" name="QueryGoalOveranalysis_component_affects_is_affected_by_goal" title="affects Goal" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Analysis Component affects Goal"
    )
    and component.type="Goal"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Analysis Component affects Goal" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="Queryanalysis_componentOveranalysis_component_affects_is_affected_by_goal" name="Queryanalysis_componentOveranalysis_component_affects_is_affected_by_goal" title="is affected by Analysis Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Analysis Component affects Goal"
    )
    and component.type="Analysis Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Analysis Component affects Goal" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryfactorOverfactor_affects_is_affected_by_factor" name="QueryfactorOverfactor_affects_is_affected_by_factor" title="affects Factor" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Factor affects Factor"
    )
    and component.type="Factor"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Factor affects Factor" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryfactorOvertrend_leads_to_follows_from_factor" name="QueryfactorOvertrend_leads_to_follows_from_factor" title="leads to Factor" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Trend leads to Factor"
    )
    and component.type="Factor"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Trend leads to Factor" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryTrendTruthOvertrend_leads_to_follows_from_factor" name="QueryTrendTruthOvertrend_leads_to_follows_from_factor" title="follows from Trend" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Trend leads to Factor"
    )
    and component.type="Trend"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Trend leads to Factor" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryAttributeOverinformation_object_consists_of_is_part_of_information_attribute" name="QueryAttributeOverinformation_object_consists_of_is_part_of_information_attribute" title="consists of Information Attribute" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Information Object consists of Information Attribute"
    )
    and component.type="Information Attribute"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Information Object consists of Information Attribute" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryInformationObjectOverinformation_object_consists_of_is_part_of_information_attribute" name="QueryInformationObjectOverinformation_object_consists_of_is_part_of_information_attribute" title="is part of Information Object" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Information Object consists of Information Attribute"
    )
    and component.type="Information Object"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Information Object consists of Information Attribute" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryInformationgroupOverinformation_group_consists_of_is_part_of_information_group" name="QueryInformationgroupOverinformation_group_consists_of_is_part_of_information_group" title="consists of Information Group" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Information Group consists of Information Group"
    )
    and component.type="Information Group"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Information Group consists of Information Group" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryInformationObjectOverinformation_group_consists_of_is_part_of_information_object" name="QueryInformationObjectOverinformation_group_consists_of_is_part_of_information_object" title="consists of Information Object" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Information Group consists of Information Object"
    )
    and component.type="Information Object"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Information Group consists of Information Object" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryInformationgroupOverinformation_group_consists_of_is_part_of_information_object" name="QueryInformationgroupOverinformation_group_consists_of_is_part_of_information_object" title="is part of Information Group" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Information Group consists of Information Object"
    )
    and component.type="Information Group"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Information Group consists of Information Object" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="Queryinformation_componentOverdatastore_has_structure_is_structure_for_information_component" name="Queryinformation_componentOverdatastore_has_structure_is_structure_for_information_component" title="has structure Information Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Datastore has structure Information Component"
    )
    and component.type="Information Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Datastore has structure Information Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryPhysicalDatastoreOverdatastore_has_structure_is_structure_for_information_component" name="QueryPhysicalDatastoreOverdatastore_has_structure_is_structure_for_information_component" title="is structure for Datastore" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Datastore has structure Information Component"
    )
    and component.type="Datastore"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Datastore has structure Information Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="Queryinformation_componentOverstorage_has_structure_is_structure_for_information_component" name="Queryinformation_componentOverstorage_has_structure_is_structure_for_information_component" title="has structure Information Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Storage has structure Information Component"
    )
    and component.type="Information Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Storage has structure Information Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryStorageOverstorage_has_structure_is_structure_for_information_component" name="QueryStorageOverstorage_has_structure_is_structure_for_information_component" title="is structure for Storage" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Storage has structure Information Component"
    )
    and component.type="Storage"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Storage has structure Information Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="Queryinformation_componentOverdocument_has_structure_is_structure_for_information_component" name="Queryinformation_componentOverdocument_has_structure_is_structure_for_information_component" title="has structure Information Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Document has structure Information Component"
    )
    and component.type="Information Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Document has structure Information Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryDocumentOverdocument_has_structure_is_structure_for_information_component" name="QueryDocumentOverdocument_has_structure_is_structure_for_information_component" title="is structure for Document" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Document has structure Information Component"
    )
    and component.type="Document"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Document has structure Information Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryScenarioOverscenario_relates_to_relates_from_scenario" name="QueryScenarioOverscenario_relates_to_relates_from_scenario" title="relates to Scenario" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Scenario relates to Scenario"
    )
    and component.type="Scenario"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Scenario relates to Scenario" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="Queryit_architecture_componentOverit_architecture_component_connects_to_connects_from_name_it_architecture_component" name="Queryit_architecture_componentOverit_architecture_component_connects_to_connects_from_name_it_architecture_component" title="connects to IT Architecture Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="IT Architecture Component connects to IT Architecture Component"
    )
    and component.type="IT Architecture Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="IT Architecture Component connects to IT Architecture Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryArchitectureTemplateOverit_architecture_has_template_is_template_for_it_architecture" name="QueryArchitectureTemplateOverit_architecture_has_template_is_template_for_it_architecture" title="has template IT Architecture" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="IT Architecture has template IT Architecture"
    )
    and component.type="IT Architecture"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="IT Architecture has template IT Architecture" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryApplicationEnvironmentOverinfrastructure_component_deploys_is_deployed_in_software_product" name="QueryApplicationEnvironmentOverinfrastructure_component_deploys_is_deployed_in_software_product" title="deploys Software Product" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Infrastructure Component deploys Software Product"
    )
    and component.type="Software Product"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Infrastructure Component deploys Software Product" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryInfrastructure_DomainOverinfrastructure_component_deploys_is_deployed_in_software_product" name="QueryInfrastructure_DomainOverinfrastructure_component_deploys_is_deployed_in_software_product" title="is deployed in Infrastructure Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Infrastructure Component deploys Software Product"
    )
    and component.type="Infrastructure Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Infrastructure Component deploys Software Product" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryAutomaticDeviceOverhardware_consists_of_is_part_of_hardware" name="QueryAutomaticDeviceOverhardware_consists_of_is_part_of_hardware" title="consists of Hardware" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Hardware consists of Hardware"
    )
    and component.type="Hardware"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Hardware consists of Hardware" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryArchitectureTemplateElementOverit_architecture_consists_of_is_part_of_it_architecture_element" name="QueryArchitectureTemplateElementOverit_architecture_consists_of_is_part_of_it_architecture_element" title="consists of IT Architecture Element" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="IT Architecture consists of IT Architecture Element"
    )
    and component.type="IT Architecture Element"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="IT Architecture consists of IT Architecture Element" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryArchitectureTemplateOverit_architecture_consists_of_is_part_of_it_architecture_element" name="QueryArchitectureTemplateOverit_architecture_consists_of_is_part_of_it_architecture_element" title="is part of IT Architecture" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="IT Architecture consists of IT Architecture Element"
    )
    and component.type="IT Architecture"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="IT Architecture consists of IT Architecture Element" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryArchitectureTemplateOverit_architecture_consists_of_is_part_of_it_architecture" name="QueryArchitectureTemplateOverit_architecture_consists_of_is_part_of_it_architecture" title="consists of IT Architecture" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="IT Architecture consists of IT Architecture"
    )
    and component.type="IT Architecture"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="IT Architecture consists of IT Architecture" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryImplicationOverpolicy_component_leads_to_follows_from_implication" name="QueryImplicationOverpolicy_component_leads_to_follows_from_implication" title="leads to Implication" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Policy Component leads to Implication"
    )
    and component.type="Implication"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Policy Component leads to Implication" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryPolicy_DomainOverpolicy_component_leads_to_follows_from_implication" name="QueryPolicy_DomainOverpolicy_component_leads_to_follows_from_implication" title="follows from Policy Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Policy Component leads to Implication"
    )
    and component.type="Policy Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Policy Component leads to Implication" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryITRequirementOverpolicy_component_leads_to_follows_from_requirement" name="QueryITRequirementOverpolicy_component_leads_to_follows_from_requirement" title="leads to Requirement" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Policy Component leads to Requirement"
    )
    and component.type="Requirement"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Policy Component leads to Requirement" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryPolicy_DomainOverpolicy_component_leads_to_follows_from_requirement" name="QueryPolicy_DomainOverpolicy_component_leads_to_follows_from_requirement" title="follows from Policy Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Policy Component leads to Requirement"
    )
    and component.type="Policy Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Policy Component leads to Requirement" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryAutomaticDeviceOverhardware_connects_to_connects_from_hardware" name="QueryAutomaticDeviceOverhardware_connects_to_connects_from_hardware" title="connects to Hardware" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Hardware connects to Hardware"
    )
    and component.type="Hardware"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Hardware connects to Hardware" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryNetworkOverhardware_connects_to_connects_from_network" name="QueryNetworkOverhardware_connects_to_connects_from_network" title="connects to Network" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Hardware connects to Network"
    )
    and component.type="Network"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Hardware connects to Network" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryAutomaticDeviceOverhardware_connects_to_connects_from_network" name="QueryAutomaticDeviceOverhardware_connects_to_connects_from_network" title="connects from Hardware" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Hardware connects to Network"
    )
    and component.type="Hardware"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Hardware connects to Network" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryServerOverserver_has_logical_server_is_logical_server_of_server" name="QueryServerOverserver_has_logical_server_is_logical_server_of_server" title="has logical server Server" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Server has logical server Server"
    )
    and component.type="Server"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Server has logical server Server" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryLocationOverlocation_consists_of_is_part_of_location" name="QueryLocationOverlocation_consists_of_is_part_of_location" title="consists of Location" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Location consists of Location"
    )
    and component.type="Location"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Location consists of Location" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryLocationOverlogical_location_consists_of_is_part_of_location" name="QueryLocationOverlogical_location_consists_of_is_part_of_location" title="consists of Location" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Logical Location consists of Location"
    )
    and component.type="Location"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Logical Location consists of Location" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryLocationTypeOverlogical_location_consists_of_is_part_of_location" name="QueryLocationTypeOverlogical_location_consists_of_is_part_of_location" title="is part of Logical Location" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Logical Location consists of Location"
    )
    and component.type="Logical Location"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Logical Location consists of Location" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryOrganization_DomainOvercontract_has_administrator_is_administrator_of_organization_component" name="QueryOrganization_DomainOvercontract_has_administrator_is_administrator_of_organization_component" title="has administrator Organization Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Contract has administrator Organization Component"
    )
    and component.type="Organization Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Contract has administrator Organization Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryContractOvercontract_has_administrator_is_administrator_of_organization_component" name="QueryContractOvercontract_has_administrator_is_administrator_of_organization_component" title="is administrator of Contract" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Contract has administrator Organization Component"
    )
    and component.type="Contract"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Contract has administrator Organization Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryRoleOverorganization_consists_of_is_part_of_role" name="QueryRoleOverorganization_consists_of_is_part_of_role" title="consists of Role" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Organization consists of Role"
    )
    and component.type="Role"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Organization consists of Role" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryOrganizationOverorganization_consists_of_is_part_of_role" name="QueryOrganizationOverorganization_consists_of_is_part_of_role" title="is part of Organization" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Organization consists of Role"
    )
    and component.type="Organization"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Organization consists of Role" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryOrganizationOverorganization_consists_of_is_part_of_organization" name="QueryOrganizationOverorganization_consists_of_is_part_of_organization" title="consists of Organization" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Organization consists of Organization"
    )
    and component.type="Organization"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Organization consists of Organization" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryOrganization_DomainOverorganization_component_cooperates_with_cooperates_with_organization_component" name="QueryOrganization_DomainOverorganization_component_cooperates_with_cooperates_with_organization_component" title="cooperates with Organization Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Organization Component cooperates with Organization Component"
    )
    and component.type="Organization Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Organization Component cooperates with Organization Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryRoleOverchange_component_fills_is_filled_by_role" name="QueryRoleOverchange_component_fills_is_filled_by_role" title="fills Role" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Change Component fills Role"
    )
    and component.type="Role"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Change Component fills Role" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryInitiative_DomainOverchange_component_fills_is_filled_by_role" name="QueryInitiative_DomainOverchange_component_fills_is_filled_by_role" title="is filled by Change Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Change Component fills Role"
    )
    and component.type="Change Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Change Component fills Role" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryRoleOverorganization_fills_is_filled_by_role" name="QueryRoleOverorganization_fills_is_filled_by_role" title="fills Role" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Organization fills Role"
    )
    and component.type="Role"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Organization fills Role" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryOrganizationOverorganization_fills_is_filled_by_role" name="QueryOrganizationOverorganization_fills_is_filled_by_role" title="is filled by Organization" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Organization fills Role"
    )
    and component.type="Organization"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Organization fills Role" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryRoleOverposition_fills_is_filled_by_role" name="QueryRoleOverposition_fills_is_filled_by_role" title="fills Role" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Position fills Role"
    )
    and component.type="Role"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Position fills Role" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryPositionOverposition_fills_is_filled_by_role" name="QueryPositionOverposition_fills_is_filled_by_role" title="is filled by Position" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Position fills Role"
    )
    and component.type="Position"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Position fills Role" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryRoleOverperson_fills_is_filled_by_role" name="QueryRoleOverperson_fills_is_filled_by_role" title="fills Role" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Person fills Role"
    )
    and component.type="Role"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Person fills Role" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryPersonOverperson_fills_is_filled_by_role" name="QueryPersonOverperson_fills_is_filled_by_role" title="is filled by Person" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Person fills Role"
    )
    and component.type="Person"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Person fills Role" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryRoleOverapplication_fills_is_filled_by_role" name="QueryRoleOverapplication_fills_is_filled_by_role" title="fills Role" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Application fills Role"
    )
    and component.type="Role"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Application fills Role" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryApplicationOverapplication_fills_is_filled_by_role" name="QueryApplicationOverapplication_fills_is_filled_by_role" title="is filled by Application" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Application fills Role"
    )
    and component.type="Application"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Application fills Role" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryPositionOverperson_fills_is_filled_by_position" name="QueryPositionOverperson_fills_is_filled_by_position" title="fills Position" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Person fills Position"
    )
    and component.type="Position"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Person fills Position" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryPersonOverperson_fills_is_filled_by_position" name="QueryPersonOverperson_fills_is_filled_by_position" title="is filled by Person" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Person fills Position"
    )
    and component.type="Person"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Person fills Position" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryRoleOverresource_fills_is_filled_by_role" name="QueryRoleOverresource_fills_is_filled_by_role" title="fills Role" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Resource fills Role"
    )
    and component.type="Role"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Resource fills Role" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryMachineOverresource_fills_is_filled_by_role" name="QueryMachineOverresource_fills_is_filled_by_role" title="is filled by Resource" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Resource fills Role"
    )
    and component.type="Resource"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Resource fills Role" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryPersonOverdocument_has_author_is_author_of_person" name="QueryPersonOverdocument_has_author_is_author_of_person" title="has author Person" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Document has author Person"
    )
    and component.type="Person"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Document has author Person" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryDocumentOverdocument_has_author_is_author_of_person" name="QueryDocumentOverdocument_has_author_is_author_of_person" title="is author of Document" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Document has author Person"
    )
    and component.type="Document"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Document has author Person" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryPersonOverorganization_has_employee_is_employee_in_person" name="QueryPersonOverorganization_has_employee_is_employee_in_person" title="has employee Person" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Organization has employee Person"
    )
    and component.type="Person"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Organization has employee Person" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryOrganizationOverorganization_has_employee_is_employee_in_person" name="QueryOrganizationOverorganization_has_employee_is_employee_in_person" title="is employee in Organization" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Organization has employee Person"
    )
    and component.type="Organization"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Organization has employee Person" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryPersonOverorganization_consists_of_is_part_of_person" name="QueryPersonOverorganization_consists_of_is_part_of_person" title="consists of Person" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Organization consists of Person"
    )
    and component.type="Person"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Organization consists of Person" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryOrganizationOverorganization_consists_of_is_part_of_person" name="QueryOrganizationOverorganization_consists_of_is_part_of_person" title="is part of Organization" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Organization consists of Person"
    )
    and component.type="Organization"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Organization consists of Person" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryOrganization_DomainOverchange_component_has_responsible_is_responsible_for_organization_component" name="QueryOrganization_DomainOverchange_component_has_responsible_is_responsible_for_organization_component" title="has responsible Organization Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Change Component has responsible Organization Component"
    )
    and component.type="Organization Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Change Component has responsible Organization Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryInitiative_DomainOverchange_component_has_responsible_is_responsible_for_organization_component" name="QueryInitiative_DomainOverchange_component_has_responsible_is_responsible_for_organization_component" title="is responsible for Change Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Change Component has responsible Organization Component"
    )
    and component.type="Change Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Change Component has responsible Organization Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryOrganization_DomainOverprocess_component_has_responsible_is_responsible_for_organization_component" name="QueryOrganization_DomainOverprocess_component_has_responsible_is_responsible_for_organization_component" title="has responsible Organization Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Process Component has responsible Organization Component"
    )
    and component.type="Organization Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Process Component has responsible Organization Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryProcess_DomainOverprocess_component_has_responsible_is_responsible_for_organization_component" name="QueryProcess_DomainOverprocess_component_has_responsible_is_responsible_for_organization_component" title="is responsible for Process Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Process Component has responsible Organization Component"
    )
    and component.type="Process Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Process Component has responsible Organization Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryOrganization_DomainOverdeliverable_has_responsible_is_responsible_for_organization_component" name="QueryOrganization_DomainOverdeliverable_has_responsible_is_responsible_for_organization_component" title="has responsible Organization Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Deliverable has responsible Organization Component"
    )
    and component.type="Organization Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Deliverable has responsible Organization Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryDeliverableOverdeliverable_has_responsible_is_responsible_for_organization_component" name="QueryDeliverableOverdeliverable_has_responsible_is_responsible_for_organization_component" title="is responsible for Deliverable" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Deliverable has responsible Organization Component"
    )
    and component.type="Deliverable"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Deliverable has responsible Organization Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryOrganization_DomainOveraction_has_responsible_is_responsible_for_organization_component" name="QueryOrganization_DomainOveraction_has_responsible_is_responsible_for_organization_component" title="has responsible Organization Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Action has responsible Organization Component"
    )
    and component.type="Organization Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Action has responsible Organization Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryActionOveraction_has_responsible_is_responsible_for_organization_component" name="QueryActionOveraction_has_responsible_is_responsible_for_organization_component" title="is responsible for Action" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Action has responsible Organization Component"
    )
    and component.type="Action"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Action has responsible Organization Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryOrganization_DomainOverstrategy_component_has_responsible_is_responsible_for_organization_component" name="QueryOrganization_DomainOverstrategy_component_has_responsible_is_responsible_for_organization_component" title="has responsible Organization Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Strategy Component has responsible Organization Component"
    )
    and component.type="Organization Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Strategy Component has responsible Organization Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="Querystrategy_componentOverstrategy_component_has_responsible_is_responsible_for_organization_component" name="Querystrategy_componentOverstrategy_component_has_responsible_is_responsible_for_organization_component" title="is responsible for Strategy Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Strategy Component has responsible Organization Component"
    )
    and component.type="Strategy Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Strategy Component has responsible Organization Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryPersonOverorganization_has_responsible_is_responsible_for_person" name="QueryPersonOverorganization_has_responsible_is_responsible_for_person" title="has responsible Person" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Organization has responsible Person"
    )
    and component.type="Person"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Organization has responsible Person" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryOrganizationOverorganization_has_responsible_is_responsible_for_person" name="QueryOrganizationOverorganization_has_responsible_is_responsible_for_person" title="is responsible for Organization" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Organization has responsible Person"
    )
    and component.type="Organization"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Organization has responsible Person" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryCommunicationOverorganization_component_receives_is_received_by_communication" name="QueryCommunicationOverorganization_component_receives_is_received_by_communication" title="receives Communication" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Organization Component receives Communication"
    )
    and component.type="Communication"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Organization Component receives Communication" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryOrganization_DomainOverorganization_component_receives_is_received_by_communication" name="QueryOrganization_DomainOverorganization_component_receives_is_received_by_communication" title="is received by Organization Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Organization Component receives Communication"
    )
    and component.type="Organization Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Organization Component receives Communication" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryOrganizationOverorganization_has_competitor_is_competitor_of_organization" name="QueryOrganizationOverorganization_has_competitor_is_competitor_of_organization" title="has competitor Organization" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Organization has competitor Organization"
    )
    and component.type="Organization"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Organization has competitor Organization" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryOrganizationOverorganization_has_customer_is_customer_of_organization" name="QueryOrganizationOverorganization_has_customer_is_customer_of_organization" title="has customer Organization" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Organization has customer Organization"
    )
    and component.type="Organization"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Organization has customer Organization" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryPersonOverorganization_has_manager_is_manager_of_person" name="QueryPersonOverorganization_has_manager_is_manager_of_person" title="has manager Person" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Organization has manager Person"
    )
    and component.type="Person"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Organization has manager Person" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryOrganizationOverorganization_has_manager_is_manager_of_person" name="QueryOrganizationOverorganization_has_manager_is_manager_of_person" title="is manager of Organization" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Organization has manager Person"
    )
    and component.type="Organization"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Organization has manager Person" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryOrganizationOverorganization_has_partner_is_partner_of_organization" name="QueryOrganizationOverorganization_has_partner_is_partner_of_organization" title="has partner Organization" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Organization has partner Organization"
    )
    and component.type="Organization"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Organization has partner Organization" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryOrganizationOverorganization_has_supplier_is_supplier_of_organization" name="QueryOrganizationOverorganization_has_supplier_is_supplier_of_organization" title="has supplier Organization" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Organization has supplier Organization"
    )
    and component.type="Organization"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Organization has supplier Organization" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryCommunicationOverorganization_component_sends_is_sent_by_communication" name="QueryCommunicationOverorganization_component_sends_is_sent_by_communication" title="sends Communication" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Organization Component sends Communication"
    )
    and component.type="Communication"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Organization Component sends Communication" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryOrganization_DomainOverorganization_component_sends_is_sent_by_communication" name="QueryOrganization_DomainOverorganization_component_sends_is_sent_by_communication" title="is sent by Organization Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Organization Component sends Communication"
    )
    and component.type="Organization Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Organization Component sends Communication" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryOrganization_DomainOverorganization_component_supervises_is_supervised_by_organization_component" name="QueryOrganization_DomainOverorganization_component_supervises_is_supervised_by_organization_component" title="supervises Organization Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Organization Component supervises Organization Component"
    )
    and component.type="Organization Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Organization Component supervises Organization Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryContractOverorganization_component_signs_is_signed_by_contract" name="QueryContractOverorganization_component_signs_is_signed_by_contract" title="signs Contract" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Organization Component signs Contract"
    )
    and component.type="Contract"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Organization Component signs Contract" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryOrganization_DomainOverorganization_component_signs_is_signed_by_contract" name="QueryOrganization_DomainOverorganization_component_signs_is_signed_by_contract" title="is signed by Organization Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Organization Component signs Contract"
    )
    and component.type="Organization Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Organization Component signs Contract" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryContractOverproject_signs_is_signed_by_contract" name="QueryContractOverproject_signs_is_signed_by_contract" title="signs Contract" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Project signs Contract"
    )
    and component.type="Contract"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Project signs Contract" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryProjectOverproject_signs_is_signed_by_contract" name="QueryProjectOverproject_signs_is_signed_by_contract" title="is signed by Project" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Project signs Contract"
    )
    and component.type="Project"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Project signs Contract" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="Queryprocess_connectionOvercommunication_corresponds_to_corresponds_to_process_connection" name="Queryprocess_connectionOvercommunication_corresponds_to_corresponds_to_process_connection" title="corresponds to Process Connection" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Communication corresponds to Process Connection"
    )
    and component.type="Process Connection"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Communication corresponds to Process Connection" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryCommunicationOvercommunication_corresponds_to_corresponds_to_process_connection" name="QueryCommunicationOvercommunication_corresponds_to_corresponds_to_process_connection" title="corresponds to Communication" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Communication corresponds to Process Connection"
    )
    and component.type="Communication"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Communication corresponds to Process Connection" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryProcess_DomainOverprocess_component_corresponds_to_corresponds_to_process_component" name="QueryProcess_DomainOverprocess_component_corresponds_to_corresponds_to_process_component" title="corresponds to Process Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Process Component corresponds to Process Component"
    )
    and component.type="Process Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Process Component corresponds to Process Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryInitiative_DomainOverchange_component_before_after_change_component" name="QueryInitiative_DomainOverchange_component_before_after_change_component" title="before Change Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Change Component before Change Component"
    )
    and component.type="Change Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Change Component before Change Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryTransitionPlanItemOverplan_before_after_plan" name="QueryTransitionPlanItemOverplan_before_after_plan" title="before Plan" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Plan before Plan"
    )
    and component.type="Plan"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Plan before Plan" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryBPM_Data_ObjectOverbusiness_process_receives_is_received_by_process_data" name="QueryBPM_Data_ObjectOverbusiness_process_receives_is_received_by_process_data" title="receives Process Data" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Business Process receives Process Data"
    )
    and component.type="Process Data"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Business Process receives Process Data" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryWorkflowProcessOverbusiness_process_receives_is_received_by_process_data" name="QueryWorkflowProcessOverbusiness_process_receives_is_received_by_process_data" title="is received by Business Process" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Business Process receives Process Data"
    )
    and component.type="Business Process"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Business Process receives Process Data" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryBPM_Data_ObjectOverbusiness_process_sends_is_sent_by_process_data" name="QueryBPM_Data_ObjectOverbusiness_process_sends_is_sent_by_process_data" title="sends Process Data" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Business Process sends Process Data"
    )
    and component.type="Process Data"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Business Process sends Process Data" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryWorkflowProcessOverbusiness_process_sends_is_sent_by_process_data" name="QueryWorkflowProcessOverbusiness_process_sends_is_sent_by_process_data" title="is sent by Business Process" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Business Process sends Process Data"
    )
    and component.type="Business Process"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Business Process sends Process Data" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryActionOverbusiness_process_provides_is_provided_by_criticality_function" name="QueryActionOverbusiness_process_provides_is_provided_by_criticality_function" title="provides Function" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Business Process provides Function"
    )
    and component.type="Function"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Business Process provides Function" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryWorkflowProcessOverbusiness_process_provides_is_provided_by_criticality_function" name="QueryWorkflowProcessOverbusiness_process_provides_is_provided_by_criticality_function" title="is provided by Business Process" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Business Process provides Function"
    )
    and component.type="Business Process"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Business Process provides Function" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryDeliverableOverdeliverable_affects_is_affected_by_deliverable" name="QueryDeliverableOverdeliverable_affects_is_affected_by_deliverable" title="affects Deliverable" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Deliverable affects Deliverable"
    )
    and component.type="Deliverable"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Deliverable affects Deliverable" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryProductmoduleOverproduct_consists_of_is_part_of_product_module" name="QueryProductmoduleOverproduct_consists_of_is_part_of_product_module" title="consists of Product Module" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Product consists of Product Module"
    )
    and component.type="Product Module"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Product consists of Product Module" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryproductOverproduct_consists_of_is_part_of_product_module" name="QueryproductOverproduct_consists_of_is_part_of_product_module" title="is part of Product" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Product consists of Product Module"
    )
    and component.type="Product"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Product consists of Product Module" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryDeliverableOverdeliverable_corresponds_to_corresponds_to_deliverable" name="QueryDeliverableOverdeliverable_corresponds_to_corresponds_to_deliverable" title="corresponds to Deliverable" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Deliverable corresponds to Deliverable"
    )
    and component.type="Deliverable"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Deliverable corresponds to Deliverable" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryDeliverableOverdeliverable_implements_is_implemented_by_deliverable" name="QueryDeliverableOverdeliverable_implements_is_implemented_by_deliverable" title="implements Deliverable" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Deliverable implements Deliverable"
    )
    and component.type="Deliverable"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Deliverable implements Deliverable" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryActionOverdeliverable_implements_is_implemented_by_function" name="QueryActionOverdeliverable_implements_is_implemented_by_function" title="implements Function" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Deliverable implements Function"
    )
    and component.type="Function"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Deliverable implements Function" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryDeliverableOverdeliverable_implements_is_implemented_by_function" name="QueryDeliverableOverdeliverable_implements_is_implemented_by_function" title="is implemented by Deliverable" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Deliverable implements Function"
    )
    and component.type="Deliverable"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Deliverable implements Function" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryStandardOverstandard_references_is_referenced_by_standard" name="QueryStandardOverstandard_references_is_referenced_by_standard" title="references Standard" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Standard references Standard"
    )
    and component.type="Standard"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Standard references Standard" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryStandardOverapplication_component_uses_is_used_by_standard" name="QueryStandardOverapplication_component_uses_is_used_by_standard" title="uses Standard" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Application Component uses Standard"
    )
    and component.type="Standard"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Application Component uses Standard" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryApplication_DomainOverapplication_component_uses_is_used_by_standard" name="QueryApplication_DomainOverapplication_component_uses_is_used_by_standard" title="is used by Application Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Application Component uses Standard"
    )
    and component.type="Application Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Application Component uses Standard" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryStandardOverinfrastructure_component_uses_is_used_by_standard" name="QueryStandardOverinfrastructure_component_uses_is_used_by_standard" title="uses Standard" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Infrastructure Component uses Standard"
    )
    and component.type="Standard"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Infrastructure Component uses Standard" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryInfrastructure_DomainOverinfrastructure_component_uses_is_used_by_standard" name="QueryInfrastructure_DomainOverinfrastructure_component_uses_is_used_by_standard" title="is used by Infrastructure Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Infrastructure Component uses Standard"
    )
    and component.type="Infrastructure Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Infrastructure Component uses Standard" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryStandardOverdeliverable_uses_is_used_by_standard" name="QueryStandardOverdeliverable_uses_is_used_by_standard" title="uses Standard" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Deliverable uses Standard"
    )
    and component.type="Standard"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Deliverable uses Standard" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryDeliverableOverdeliverable_uses_is_used_by_standard" name="QueryDeliverableOverdeliverable_uses_is_used_by_standard" title="is used by Deliverable" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Deliverable uses Standard"
    )
    and component.type="Deliverable"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Deliverable uses Standard" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryGenericTaskOverproject_consists_of_is_part_of_task" name="QueryGenericTaskOverproject_consists_of_is_part_of_task" title="consists of Task" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Project consists of Task"
    )
    and component.type="Task"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Project consists of Task" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryProjectOverproject_consists_of_is_part_of_task" name="QueryProjectOverproject_consists_of_is_part_of_task" title="is part of Project" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Project consists of Task"
    )
    and component.type="Project"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Project consists of Task" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryProjectOverproject_consists_of_is_part_of_project" name="QueryProjectOverproject_consists_of_is_part_of_project" title="consists of Project" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Project consists of Project"
    )
    and component.type="Project"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Project consists of Project" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryTransitionPlanItemOvermilestone_applies_to_has_plan" name="QueryTransitionPlanItemOvermilestone_applies_to_has_plan" title="applies to Plan" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Milestone applies to Plan"
    )
    and component.type="Plan"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Milestone applies to Plan" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryMilestoneOvermilestone_applies_to_has_plan" name="QueryMilestoneOvermilestone_applies_to_has_plan" title="has Milestone" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Milestone applies to Plan"
    )
    and component.type="Milestone"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Milestone applies to Plan" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryInitiative_DomainOvermilestone_applies_to_has_change_component" name="QueryInitiative_DomainOvermilestone_applies_to_has_change_component" title="applies to Change Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Milestone applies to Change Component"
    )
    and component.type="Change Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Milestone applies to Change Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryMilestoneOvermilestone_applies_to_has_change_component" name="QueryMilestoneOvermilestone_applies_to_has_change_component" title="has Milestone" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Milestone applies to Change Component"
    )
    and component.type="Milestone"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Milestone applies to Change Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryProjectOverprogram_governs_is_governed_by_project" name="QueryProjectOverprogram_governs_is_governed_by_project" title="governs Project" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Program governs Project"
    )
    and component.type="Project"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Program governs Project" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryProgramOverprogram_governs_is_governed_by_project" name="QueryProgramOverprogram_governs_is_governed_by_project" title="is governed by Program" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Program governs Project"
    )
    and component.type="Program"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Program governs Project" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryGoalOverstrategy_achieves_is_achieved_by_weight_goal" name="QueryGoalOverstrategy_achieves_is_achieved_by_weight_goal" title="achieves Goal" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Strategy achieves Goal"
    )
    and component.type="Goal"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Strategy achieves Goal" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryMarketStrategyOverstrategy_achieves_is_achieved_by_weight_goal" name="QueryMarketStrategyOverstrategy_achieves_is_achieved_by_weight_goal" title="is achieved by Strategy" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Strategy achieves Goal"
    )
    and component.type="Strategy"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Strategy achieves Goal" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryPolicy_DomainOvergoal_affects_is_affected_by_policy_component" name="QueryPolicy_DomainOvergoal_affects_is_affected_by_policy_component" title="affects Policy Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Goal affects Policy Component"
    )
    and component.type="Policy Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Goal affects Policy Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryGoalOvergoal_affects_is_affected_by_policy_component" name="QueryGoalOvergoal_affects_is_affected_by_policy_component" title="is affected by Goal" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Goal affects Policy Component"
    )
    and component.type="Goal"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Goal affects Policy Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryCapabilityOvergoal_affects_is_affected_by_capability" name="QueryCapabilityOvergoal_affects_is_affected_by_capability" title="affects Capability" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Goal affects Capability"
    )
    and component.type="Capability"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Goal affects Capability" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryGoalOvergoal_affects_is_affected_by_capability" name="QueryGoalOvergoal_affects_is_affected_by_capability" title="is affected by Goal" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Goal affects Capability"
    )
    and component.type="Goal"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Goal affects Capability" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryGoalOvergoal_conflicts_with_conflicts_with_goal" name="QueryGoalOvergoal_conflicts_with_conflicts_with_goal" title="conflicts with Goal" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Goal conflicts with Goal"
    )
    and component.type="Goal"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Goal conflicts with Goal" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryCriticalSuccessFactorOverstrategy_depends_on_is_critical_to_weight_success_factor" name="QueryCriticalSuccessFactorOverstrategy_depends_on_is_critical_to_weight_success_factor" title="depends on Success Factor" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Strategy depends on Success Factor"
    )
    and component.type="Success Factor"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Strategy depends on Success Factor" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryMarketStrategyOverstrategy_depends_on_is_critical_to_weight_success_factor" name="QueryMarketStrategyOverstrategy_depends_on_is_critical_to_weight_success_factor" title="is critical to Strategy" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Strategy depends on Success Factor"
    )
    and component.type="Strategy"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Strategy depends on Success Factor" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryInformationNeedOversuccess_factor_leads_to_follows_from_information_need" name="QueryInformationNeedOversuccess_factor_leads_to_follows_from_information_need" title="leads to Information Need" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Success Factor leads to Information Need"
    )
    and component.type="Information Need"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Success Factor leads to Information Need" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryCriticalSuccessFactorOversuccess_factor_leads_to_follows_from_information_need" name="QueryCriticalSuccessFactorOversuccess_factor_leads_to_follows_from_information_need" title="follows from Success Factor" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Success Factor leads to Information Need"
    )
    and component.type="Success Factor"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Success Factor leads to Information Need" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryInformationNeedOverstrategy_leads_to_follows_from_weight_information_need" name="QueryInformationNeedOverstrategy_leads_to_follows_from_weight_information_need" title="leads to Information Need" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Strategy leads to Information Need"
    )
    and component.type="Information Need"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Strategy leads to Information Need" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryMarketStrategyOverstrategy_leads_to_follows_from_weight_information_need" name="QueryMarketStrategyOverstrategy_leads_to_follows_from_weight_information_need" title="follows from Strategy" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Strategy leads to Information Need"
    )
    and component.type="Strategy"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Strategy leads to Information Need" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryGoalOvervision_leads_to_follows_from_goal" name="QueryGoalOvervision_leads_to_follows_from_goal" title="leads to Goal" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Vision leads to Goal"
    )
    and component.type="Goal"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Vision leads to Goal" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryVisionOvervision_leads_to_follows_from_goal" name="QueryVisionOvervision_leads_to_follows_from_goal" title="follows from Vision" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Vision leads to Goal"
    )
    and component.type="Vision"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Vision leads to Goal" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryGoalOvergoal_leads_to_follows_from_goal" name="QueryGoalOvergoal_leads_to_follows_from_goal" title="leads to Goal" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Goal leads to Goal"
    )
    and component.type="Goal"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Goal leads to Goal" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryCriticalSuccessFactorOvermeasure_measures_is_measured_by_weight_success_factor" name="QueryCriticalSuccessFactorOvermeasure_measures_is_measured_by_weight_success_factor" title="measures Success Factor" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Measure measures Success Factor"
    )
    and component.type="Success Factor"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Measure measures Success Factor" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryMeasureOvermeasure_measures_is_measured_by_weight_success_factor" name="QueryMeasureOvermeasure_measures_is_measured_by_weight_success_factor" title="is measured by Measure" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Measure measures Success Factor"
    )
    and component.type="Measure"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Measure measures Success Factor" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryGoalOvermeasure_measures_is_measured_by_goal" name="QueryGoalOvermeasure_measures_is_measured_by_goal" title="measures Goal" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Measure measures Goal"
    )
    and component.type="Goal"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Measure measures Goal" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryMeasureOvermeasure_measures_is_measured_by_goal" name="QueryMeasureOvermeasure_measures_is_measured_by_goal" title="is measured by Measure" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Measure measures Goal"
    )
    and component.type="Measure"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Measure measures Goal" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryInitiative_DomainOvermeasure_measures_is_measured_by_change_component" name="QueryInitiative_DomainOvermeasure_measures_is_measured_by_change_component" title="measures Change Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Measure measures Change Component"
    )
    and component.type="Change Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Measure measures Change Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryMeasureOvermeasure_measures_is_measured_by_change_component" name="QueryMeasureOvermeasure_measures_is_measured_by_change_component" title="is measured by Measure" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Measure measures Change Component"
    )
    and component.type="Measure"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Measure measures Change Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryMarketStrategyOvermeasure_measures_is_measured_by_strategy" name="QueryMarketStrategyOvermeasure_measures_is_measured_by_strategy" title="measures Strategy" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Measure measures Strategy"
    )
    and component.type="Strategy"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Measure measures Strategy" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryMeasureOvermeasure_measures_is_measured_by_strategy" name="QueryMeasureOvermeasure_measures_is_measured_by_strategy" title="is measured by Measure" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Measure measures Strategy"
    )
    and component.type="Measure"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Measure measures Strategy" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryMarketStrategyOvercharter_applies_to_has_strategy" name="QueryMarketStrategyOvercharter_applies_to_has_strategy" title="applies to Strategy" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Charter applies to Strategy"
    )
    and component.type="Strategy"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Charter applies to Strategy" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryTransitionDirectiveOvercharter_applies_to_has_strategy" name="QueryTransitionDirectiveOvercharter_applies_to_has_strategy" title="has Charter" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Charter applies to Strategy"
    )
    and component.type="Charter"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Charter applies to Strategy" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryTransitionPlanItemOverstrategy_applies_to_has_plan" name="QueryTransitionPlanItemOverstrategy_applies_to_has_plan" title="applies to Plan" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Strategy applies to Plan"
    )
    and component.type="Plan"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Strategy applies to Plan" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryMarketStrategyOverstrategy_applies_to_has_plan" name="QueryMarketStrategyOverstrategy_applies_to_has_plan" title="has Strategy" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Strategy applies to Plan"
    )
    and component.type="Strategy"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Strategy applies to Plan" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryITInitiativeOverproject_supports_is_supported_by_initiative" name="QueryITInitiativeOverproject_supports_is_supported_by_initiative" title="supports Initiative" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Project supports Initiative"
    )
    and component.type="Initiative"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Project supports Initiative" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryProjectOverproject_supports_is_supported_by_initiative" name="QueryProjectOverproject_supports_is_supported_by_initiative" title="is supported by Project" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Project supports Initiative"
    )
    and component.type="Project"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Project supports Initiative" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryITInitiativeOverinitiative_leads_to_follows_from_initiative" name="QueryITInitiativeOverinitiative_leads_to_follows_from_initiative" title="leads to Initiative" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Initiative leads to Initiative"
    )
    and component.type="Initiative"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Initiative leads to Initiative" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryInitiative_DomainOverplan_applies_to_has_change_component" name="QueryInitiative_DomainOverplan_applies_to_has_change_component" title="applies to Change Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Plan applies to Change Component"
    )
    and component.type="Change Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Plan applies to Change Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryTransitionPlanItemOverplan_applies_to_has_change_component" name="QueryTransitionPlanItemOverplan_applies_to_has_change_component" title="has Plan" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Plan applies to Change Component"
    )
    and component.type="Plan"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Plan applies to Change Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryInitiative_DomainOverconstraint_constrains_is_constrained_by_change_component" name="QueryInitiative_DomainOverconstraint_constrains_is_constrained_by_change_component" title="constrains Change Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Constraint constrains Change Component"
    )
    and component.type="Change Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Constraint constrains Change Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryConditionOverconstraint_constrains_is_constrained_by_change_component" name="QueryConditionOverconstraint_constrains_is_constrained_by_change_component" title="is constrained by Constraint" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Constraint constrains Change Component"
    )
    and component.type="Constraint"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Constraint constrains Change Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryTransitionPlanItemOverbenefit_supports_is_supported_by_plan" name="QueryTransitionPlanItemOverbenefit_supports_is_supported_by_plan" title="supports Plan" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Benefit supports Plan"
    )
    and component.type="Plan"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Benefit supports Plan" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryBenefitOverbenefit_supports_is_supported_by_plan" name="QueryBenefitOverbenefit_supports_is_supported_by_plan" title="is supported by Benefit" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Benefit supports Plan"
    )
    and component.type="Benefit"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Benefit supports Plan" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryKnowledgeSourceOverknowledge_access_accesses_is_accessed_by_knowledge_source" name="QueryKnowledgeSourceOverknowledge_access_accesses_is_accessed_by_knowledge_source" title="accesses Knowledge Source" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Knowledge Access accesses Knowledge Source"
    )
    and component.type="Knowledge Source"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Knowledge Access accesses Knowledge Source" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryKnowledgeAccessOverknowledge_access_accesses_is_accessed_by_knowledge_source" name="QueryKnowledgeAccessOverknowledge_access_accesses_is_accessed_by_knowledge_source" title="is accessed by Knowledge Access" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Knowledge Access accesses Knowledge Source"
    )
    and component.type="Knowledge Access"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Knowledge Access accesses Knowledge Source" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryKnowledgeElementOverknowledge_source_consists_of_is_part_of_knowledge_element" name="QueryKnowledgeElementOverknowledge_source_consists_of_is_part_of_knowledge_element" title="consists of Knowledge Element" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Knowledge Source consists of Knowledge Element"
    )
    and component.type="Knowledge Element"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Knowledge Source consists of Knowledge Element" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryKnowledgeSourceOverknowledge_source_consists_of_is_part_of_knowledge_element" name="QueryKnowledgeSourceOverknowledge_source_consists_of_is_part_of_knowledge_element" title="is part of Knowledge Source" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Knowledge Source consists of Knowledge Element"
    )
    and component.type="Knowledge Source"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Knowledge Source consists of Knowledge Element" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryKnowledgeSourceOverbusiness_process_stores_is_stored_in_knowledge_source" name="QueryKnowledgeSourceOverbusiness_process_stores_is_stored_in_knowledge_source" title="stores Knowledge Source" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Business Process stores Knowledge Source"
    )
    and component.type="Knowledge Source"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Business Process stores Knowledge Source" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryWorkflowProcessOverbusiness_process_stores_is_stored_in_knowledge_source" name="QueryWorkflowProcessOverbusiness_process_stores_is_stored_in_knowledge_source" title="is stored in Business Process" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Business Process stores Knowledge Source"
    )
    and component.type="Business Process"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Business Process stores Knowledge Source" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryKnowledgeSourceOverorganization_component_stores_is_stored_in_knowledge_source" name="QueryKnowledgeSourceOverorganization_component_stores_is_stored_in_knowledge_source" title="stores Knowledge Source" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Organization Component stores Knowledge Source"
    )
    and component.type="Knowledge Source"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Organization Component stores Knowledge Source" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryOrganization_DomainOverorganization_component_stores_is_stored_in_knowledge_source" name="QueryOrganization_DomainOverorganization_component_stores_is_stored_in_knowledge_source" title="is stored in Organization Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Organization Component stores Knowledge Source"
    )
    and component.type="Organization Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Organization Component stores Knowledge Source" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryKnowledgeSourceOverdocument_stores_is_stored_in_knowledge_source" name="QueryKnowledgeSourceOverdocument_stores_is_stored_in_knowledge_source" title="stores Knowledge Source" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Document stores Knowledge Source"
    )
    and component.type="Knowledge Source"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Document stores Knowledge Source" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryDocumentOverdocument_stores_is_stored_in_knowledge_source" name="QueryDocumentOverdocument_stores_is_stored_in_knowledge_source" title="is stored in Document" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Document stores Knowledge Source"
    )
    and component.type="Document"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Document stores Knowledge Source" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryKnowledgeSourceOvertraining_program_stores_is_stored_in_knowledge_source" name="QueryKnowledgeSourceOvertraining_program_stores_is_stored_in_knowledge_source" title="stores Knowledge Source" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Training Program stores Knowledge Source"
    )
    and component.type="Knowledge Source"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Training Program stores Knowledge Source" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryTrainingprogramOvertraining_program_stores_is_stored_in_knowledge_source" name="QueryTrainingprogramOvertraining_program_stores_is_stored_in_knowledge_source" title="is stored in Training Program" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Training Program stores Knowledge Source"
    )
    and component.type="Training Program"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Training Program stores Knowledge Source" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryKnowledgeSourceOverapplication_component_stores_is_stored_in_knowledge_source" name="QueryKnowledgeSourceOverapplication_component_stores_is_stored_in_knowledge_source" title="stores Knowledge Source" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Application Component stores Knowledge Source"
    )
    and component.type="Knowledge Source"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Application Component stores Knowledge Source" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryApplication_DomainOverapplication_component_stores_is_stored_in_knowledge_source" name="QueryApplication_DomainOverapplication_component_stores_is_stored_in_knowledge_source" title="is stored in Application Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Application Component stores Knowledge Source"
    )
    and component.type="Application Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Application Component stores Knowledge Source" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryKnowledgeSourceOverdatastore_stores_is_stored_in_knowledge_source" name="QueryKnowledgeSourceOverdatastore_stores_is_stored_in_knowledge_source" title="stores Knowledge Source" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Datastore stores Knowledge Source"
    )
    and component.type="Knowledge Source"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Datastore stores Knowledge Source" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryPhysicalDatastoreOverdatastore_stores_is_stored_in_knowledge_source" name="QueryPhysicalDatastoreOverdatastore_stores_is_stored_in_knowledge_source" title="is stored in Datastore" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Datastore stores Knowledge Source"
    )
    and component.type="Datastore"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Datastore stores Knowledge Source" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryKnowledgeSourceOverinfrastructure_component_stores_is_stored_in_knowledge_source" name="QueryKnowledgeSourceOverinfrastructure_component_stores_is_stored_in_knowledge_source" title="stores Knowledge Source" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Infrastructure Component stores Knowledge Source"
    )
    and component.type="Knowledge Source"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Infrastructure Component stores Knowledge Source" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryInfrastructure_DomainOverinfrastructure_component_stores_is_stored_in_knowledge_source" name="QueryInfrastructure_DomainOverinfrastructure_component_stores_is_stored_in_knowledge_source" title="is stored in Infrastructure Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Infrastructure Component stores Knowledge Source"
    )
    and component.type="Infrastructure Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Infrastructure Component stores Knowledge Source" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryKnowledgeSourceOverresource_stores_is_stored_in_knowledge_source" name="QueryKnowledgeSourceOverresource_stores_is_stored_in_knowledge_source" title="stores Knowledge Source" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Resource stores Knowledge Source"
    )
    and component.type="Knowledge Source"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Resource stores Knowledge Source" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryMachineOverresource_stores_is_stored_in_knowledge_source" name="QueryMachineOverresource_stores_is_stored_in_knowledge_source" title="is stored in Resource" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Resource stores Knowledge Source"
    )
    and component.type="Resource"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Resource stores Knowledge Source" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryBenefitOverscenario_describes_is_described_by_benefit" name="QueryBenefitOverscenario_describes_is_described_by_benefit" title="describes Benefit" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Scenario describes Benefit"
    )
    and component.type="Benefit"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Scenario describes Benefit" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryScenarioOverscenario_describes_is_described_by_benefit" name="QueryScenarioOverscenario_describes_is_described_by_benefit" title="is described by Scenario" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Scenario describes Benefit"
    )
    and component.type="Scenario"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Scenario describes Benefit" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryITRequirementOverstrategy_affects_is_affected_by_requirement" name="QueryITRequirementOverstrategy_affects_is_affected_by_requirement" title="affects Requirement" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Strategy affects Requirement"
    )
    and component.type="Requirement"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Strategy affects Requirement" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryMarketStrategyOverstrategy_affects_is_affected_by_requirement" name="QueryMarketStrategyOverstrategy_affects_is_affected_by_requirement" title="is affected by Strategy" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Strategy affects Requirement"
    )
    and component.type="Strategy"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Strategy affects Requirement" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryCriticalSuccessFactorOverstrategy_affects_is_affected_by_success_factor" name="QueryCriticalSuccessFactorOverstrategy_affects_is_affected_by_success_factor" title="affects Success Factor" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Strategy affects Success Factor"
    )
    and component.type="Success Factor"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Strategy affects Success Factor" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryMarketStrategyOverstrategy_affects_is_affected_by_success_factor" name="QueryMarketStrategyOverstrategy_affects_is_affected_by_success_factor" title="is affected by Strategy" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Strategy affects Success Factor"
    )
    and component.type="Strategy"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Strategy affects Success Factor" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryScenarioOverstrategy_affects_is_affected_by_scenario" name="QueryScenarioOverstrategy_affects_is_affected_by_scenario" title="affects Scenario" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Strategy affects Scenario"
    )
    and component.type="Scenario"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Strategy affects Scenario" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryMarketStrategyOverstrategy_affects_is_affected_by_scenario" name="QueryMarketStrategyOverstrategy_affects_is_affected_by_scenario" title="is affected by Strategy" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Strategy affects Scenario"
    )
    and component.type="Strategy"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Strategy affects Scenario" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryDeliverableOverstrategy_affects_is_affected_by_deliverable" name="QueryDeliverableOverstrategy_affects_is_affected_by_deliverable" title="affects Deliverable" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Strategy affects Deliverable"
    )
    and component.type="Deliverable"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Strategy affects Deliverable" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryMarketStrategyOverstrategy_affects_is_affected_by_deliverable" name="QueryMarketStrategyOverstrategy_affects_is_affected_by_deliverable" title="is affected by Strategy" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Strategy affects Deliverable"
    )
    and component.type="Strategy"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Strategy affects Deliverable" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryMarketSegmentOvertrend_applies_to_has_market_segment" name="QueryMarketSegmentOvertrend_applies_to_has_market_segment" title="applies to Market Segment" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Trend applies to Market Segment"
    )
    and component.type="Market Segment"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Trend applies to Market Segment" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryTrendTruthOvertrend_applies_to_has_market_segment" name="QueryTrendTruthOvertrend_applies_to_has_market_segment" title="has Trend" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Trend applies to Market Segment"
    )
    and component.type="Trend"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Trend applies to Market Segment" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryMarketSegmentOverstrategy_applies_to_has_market_segment" name="QueryMarketSegmentOverstrategy_applies_to_has_market_segment" title="applies to Market Segment" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Strategy applies to Market Segment"
    )
    and component.type="Market Segment"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Strategy applies to Market Segment" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryMarketStrategyOverstrategy_applies_to_has_market_segment" name="QueryMarketStrategyOverstrategy_applies_to_has_market_segment" title="has Strategy" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Strategy applies to Market Segment"
    )
    and component.type="Strategy"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Strategy applies to Market Segment" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryScenarioOverprerequisite_applies_to_has_scenario" name="QueryScenarioOverprerequisite_applies_to_has_scenario" title="applies to Scenario" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Prerequisite applies to Scenario"
    )
    and component.type="Scenario"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Prerequisite applies to Scenario" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryPrerequisiteOverprerequisite_applies_to_has_scenario" name="QueryPrerequisiteOverprerequisite_applies_to_has_scenario" title="has Prerequisite" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Prerequisite applies to Scenario"
    )
    and component.type="Prerequisite"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Prerequisite applies to Scenario" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryMarketOpportunityOverstrategy_supports_is_supported_by_market_opportunity" name="QueryMarketOpportunityOverstrategy_supports_is_supported_by_market_opportunity" title="supports Market Opportunity" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Strategy supports Market Opportunity"
    )
    and component.type="Market Opportunity"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Strategy supports Market Opportunity" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryMarketStrategyOverstrategy_supports_is_supported_by_market_opportunity" name="QueryMarketStrategyOverstrategy_supports_is_supported_by_market_opportunity" title="is supported by Strategy" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Strategy supports Market Opportunity"
    )
    and component.type="Strategy"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Strategy supports Market Opportunity" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryMarketOpportunityOverscenario_applies_to_has_market_opportunity" name="QueryMarketOpportunityOverscenario_applies_to_has_market_opportunity" title="applies to Market Opportunity" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Scenario applies to Market Opportunity"
    )
    and component.type="Market Opportunity"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Scenario applies to Market Opportunity" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryScenarioOverscenario_applies_to_has_market_opportunity" name="QueryScenarioOverscenario_applies_to_has_market_opportunity" title="has Scenario" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Scenario applies to Market Opportunity"
    )
    and component.type="Scenario"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Scenario applies to Market Opportunity" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryTargetCustomerOvermarket_segment_consists_of_is_part_of_target_customer" name="QueryTargetCustomerOvermarket_segment_consists_of_is_part_of_target_customer" title="consists of Target Customer" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Market Segment consists of Target Customer"
    )
    and component.type="Target Customer"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Market Segment consists of Target Customer" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryMarketSegmentOvermarket_segment_consists_of_is_part_of_target_customer" name="QueryMarketSegmentOvermarket_segment_consists_of_is_part_of_target_customer" title="is part of Market Segment" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Market Segment consists of Target Customer"
    )
    and component.type="Market Segment"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Market Segment consists of Target Customer" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryTargetCustomerOverstrategy_affects_is_affected_by_target_customer" name="QueryTargetCustomerOverstrategy_affects_is_affected_by_target_customer" title="affects Target Customer" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Strategy affects Target Customer"
    )
    and component.type="Target Customer"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Strategy affects Target Customer" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryMarketStrategyOverstrategy_affects_is_affected_by_target_customer" name="QueryMarketStrategyOverstrategy_affects_is_affected_by_target_customer" title="is affected by Strategy" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Strategy affects Target Customer"
    )
    and component.type="Strategy"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Strategy affects Target Customer" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryTargetUserOverstrategy_affects_is_affected_by_target_user" name="QueryTargetUserOverstrategy_affects_is_affected_by_target_user" title="affects Target User" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Strategy affects Target User"
    )
    and component.type="Target User"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Strategy affects Target User" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryMarketStrategyOverstrategy_affects_is_affected_by_target_user" name="QueryMarketStrategyOverstrategy_affects_is_affected_by_target_user" title="is affected by Strategy" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Strategy affects Target User"
    )
    and component.type="Strategy"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Strategy affects Target User" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryTargetCustomerOvermarket_opportunity_applies_to_has_target_customer" name="QueryTargetCustomerOvermarket_opportunity_applies_to_has_target_customer" title="applies to Target Customer" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Market Opportunity applies to Target Customer"
    )
    and component.type="Target Customer"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Market Opportunity applies to Target Customer" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryMarketOpportunityOvermarket_opportunity_applies_to_has_target_customer" name="QueryMarketOpportunityOvermarket_opportunity_applies_to_has_target_customer" title="has Market Opportunity" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Market Opportunity applies to Target Customer"
    )
    and component.type="Market Opportunity"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Market Opportunity applies to Target Customer" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryTargetUserOvermarket_opportunity_applies_to_has_target_user" name="QueryTargetUserOvermarket_opportunity_applies_to_has_target_user" title="applies to Target User" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Market Opportunity applies to Target User"
    )
    and component.type="Target User"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Market Opportunity applies to Target User" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryMarketOpportunityOvermarket_opportunity_applies_to_has_target_user" name="QueryMarketOpportunityOvermarket_opportunity_applies_to_has_target_user" title="has Market Opportunity" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Market Opportunity applies to Target User"
    )
    and component.type="Market Opportunity"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Market Opportunity applies to Target User" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryTargetUserOvertarget_customer_consists_of_is_part_of_target_user" name="QueryTargetUserOvertarget_customer_consists_of_is_part_of_target_user" title="consists of Target User" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Target Customer consists of Target User"
    )
    and component.type="Target User"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Target Customer consists of Target User" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryTargetCustomerOvertarget_customer_consists_of_is_part_of_target_user" name="QueryTargetCustomerOvertarget_customer_consists_of_is_part_of_target_user" title="is part of Target Customer" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Target Customer consists of Target User"
    )
    and component.type="Target Customer"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Target Customer consists of Target User" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryOrganizationOverdeliverable_has_reference_is_reference_for_organization" name="QueryOrganizationOverdeliverable_has_reference_is_reference_for_organization" title="has reference Organization" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Deliverable has reference Organization"
    )
    and component.type="Organization"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Deliverable has reference Organization" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryDeliverableOverdeliverable_has_reference_is_reference_for_organization" name="QueryDeliverableOverdeliverable_has_reference_is_reference_for_organization" title="is reference for Deliverable" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Deliverable has reference Organization"
    )
    and component.type="Deliverable"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Deliverable has reference Organization" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryOrganizationOverscenario_has_reference_is_reference_for_organization" name="QueryOrganizationOverscenario_has_reference_is_reference_for_organization" title="has reference Organization" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Scenario has reference Organization"
    )
    and component.type="Organization"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Scenario has reference Organization" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryScenarioOverscenario_has_reference_is_reference_for_organization" name="QueryScenarioOverscenario_has_reference_is_reference_for_organization" title="is reference for Scenario" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Scenario has reference Organization"
    )
    and component.type="Scenario"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Scenario has reference Organization" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryTargetUserOverscenario_has_reference_is_reference_for_target_user" name="QueryTargetUserOverscenario_has_reference_is_reference_for_target_user" title="has reference Target User" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Scenario has reference Target User"
    )
    and component.type="Target User"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Scenario has reference Target User" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryScenarioOverscenario_has_reference_is_reference_for_target_user" name="QueryScenarioOverscenario_has_reference_is_reference_for_target_user" title="is reference for Scenario" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Scenario has reference Target User"
    )
    and component.type="Scenario"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Scenario has reference Target User" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryMarketSegmentOvermarket_opportunity_applies_to_has_market_segment" name="QueryMarketSegmentOvermarket_opportunity_applies_to_has_market_segment" title="applies to Market Segment" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Market Opportunity applies to Market Segment"
    )
    and component.type="Market Segment"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Market Opportunity applies to Market Segment" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryMarketOpportunityOvermarket_opportunity_applies_to_has_market_segment" name="QueryMarketOpportunityOvermarket_opportunity_applies_to_has_market_segment" title="has Market Opportunity" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Market Opportunity applies to Market Segment"
    )
    and component.type="Market Opportunity"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Market Opportunity applies to Market Segment" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryUserNeedOvertarget_customer_generates_is_generated_by_need" name="QueryUserNeedOvertarget_customer_generates_is_generated_by_need" title="generates Need" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Target Customer generates Need"
    )
    and component.type="Need"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Target Customer generates Need" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryTargetCustomerOvertarget_customer_generates_is_generated_by_need" name="QueryTargetCustomerOvertarget_customer_generates_is_generated_by_need" title="is generated by Target Customer" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Target Customer generates Need"
    )
    and component.type="Target Customer"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Target Customer generates Need" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryScenarioOvertarget_customer_generates_is_generated_by_scenario" name="QueryScenarioOvertarget_customer_generates_is_generated_by_scenario" title="generates Scenario" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Target Customer generates Scenario"
    )
    and component.type="Scenario"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Target Customer generates Scenario" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryTargetCustomerOvertarget_customer_generates_is_generated_by_scenario" name="QueryTargetCustomerOvertarget_customer_generates_is_generated_by_scenario" title="is generated by Target Customer" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Target Customer generates Scenario"
    )
    and component.type="Target Customer"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Target Customer generates Scenario" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryBenefitOvertarget_customer_generates_is_generated_by_benefit" name="QueryBenefitOvertarget_customer_generates_is_generated_by_benefit" title="generates Benefit" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Target Customer generates Benefit"
    )
    and component.type="Benefit"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Target Customer generates Benefit" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryTargetCustomerOvertarget_customer_generates_is_generated_by_benefit" name="QueryTargetCustomerOvertarget_customer_generates_is_generated_by_benefit" title="is generated by Target Customer" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Target Customer generates Benefit"
    )
    and component.type="Target Customer"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Target Customer generates Benefit" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryUserNeedOvertarget_user_generates_is_generated_by_need" name="QueryUserNeedOvertarget_user_generates_is_generated_by_need" title="generates Need" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Target User generates Need"
    )
    and component.type="Need"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Target User generates Need" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryTargetUserOvertarget_user_generates_is_generated_by_need" name="QueryTargetUserOvertarget_user_generates_is_generated_by_need" title="is generated by Target User" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Target User generates Need"
    )
    and component.type="Target User"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Target User generates Need" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryScenarioOvertarget_user_generates_is_generated_by_scenario" name="QueryScenarioOvertarget_user_generates_is_generated_by_scenario" title="generates Scenario" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Target User generates Scenario"
    )
    and component.type="Scenario"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Target User generates Scenario" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryTargetUserOvertarget_user_generates_is_generated_by_scenario" name="QueryTargetUserOvertarget_user_generates_is_generated_by_scenario" title="is generated by Target User" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Target User generates Scenario"
    )
    and component.type="Target User"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Target User generates Scenario" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryBenefitOvertarget_user_generates_is_generated_by_benefit" name="QueryBenefitOvertarget_user_generates_is_generated_by_benefit" title="generates Benefit" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Target User generates Benefit"
    )
    and component.type="Benefit"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Target User generates Benefit" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryTargetUserOvertarget_user_generates_is_generated_by_benefit" name="QueryTargetUserOvertarget_user_generates_is_generated_by_benefit" title="is generated by Target User" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Target User generates Benefit"
    )
    and component.type="Target User"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Target User generates Benefit" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryBenefitOverdeliverable_achieves_is_achieved_by_benefit" name="QueryBenefitOverdeliverable_achieves_is_achieved_by_benefit" title="achieves Benefit" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Deliverable achieves Benefit"
    )
    and component.type="Benefit"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Deliverable achieves Benefit" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryDeliverableOverdeliverable_achieves_is_achieved_by_benefit" name="QueryDeliverableOverdeliverable_achieves_is_achieved_by_benefit" title="is achieved by Deliverable" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Deliverable achieves Benefit"
    )
    and component.type="Deliverable"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Deliverable achieves Benefit" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryproductOverproduct_connects_functionally_to_connects_functionally_from_product" name="QueryproductOverproduct_connects_functionally_to_connects_functionally_from_product" title="connects functionally to Product" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Product connects functionally to Product"
    )
    and component.type="Product"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Product connects functionally to Product" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryActionOverdeliverable_provides_is_provided_by_criticality_function" name="QueryActionOverdeliverable_provides_is_provided_by_criticality_function" title="provides Function" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Deliverable provides Function"
    )
    and component.type="Function"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Deliverable provides Function" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryDeliverableOverdeliverable_provides_is_provided_by_criticality_function" name="QueryDeliverableOverdeliverable_provides_is_provided_by_criticality_function" title="is provided by Deliverable" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Deliverable provides Function"
    )
    and component.type="Deliverable"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Deliverable provides Function" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryCatalogpartOverbusiness_product_connects_geometrically_to_connects_geometrically_from_business_product" name="QueryCatalogpartOverbusiness_product_connects_geometrically_to_connects_geometrically_from_business_product" title="connects geometrically to Business Product" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Business Product connects geometrically to Business Product"
    )
    and component.type="Business Product"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Business Product connects geometrically to Business Product" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryProductPropertyOverproduct_consists_of_is_part_of_product_property" name="QueryProductPropertyOverproduct_consists_of_is_part_of_product_property" title="consists of Product Property" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Product consists of Product Property"
    )
    and component.type="Product Property"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Product consists of Product Property" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryproductOverproduct_consists_of_is_part_of_product_property" name="QueryproductOverproduct_consists_of_is_part_of_product_property" title="is part of Product" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Product consists of Product Property"
    )
    and component.type="Product"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Product consists of Product Property" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryActionOverdeliverable_needs_is_needed_by_function" name="QueryActionOverdeliverable_needs_is_needed_by_function" title="needs Function" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Deliverable needs Function"
    )
    and component.type="Function"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Deliverable needs Function" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryDeliverableOverdeliverable_needs_is_needed_by_function" name="QueryDeliverableOverdeliverable_needs_is_needed_by_function" title="is needed by Deliverable" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Deliverable needs Function"
    )
    and component.type="Deliverable"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Deliverable needs Function" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryProductMethodOverproduct_consists_of_is_part_of_product_method" name="QueryProductMethodOverproduct_consists_of_is_part_of_product_method" title="consists of Product Method" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Product consists of Product Method"
    )
    and component.type="Product Method"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Product consists of Product Method" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryproductOverproduct_consists_of_is_part_of_product_method" name="QueryproductOverproduct_consists_of_is_part_of_product_method" title="is part of Product" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Product consists of Product Method"
    )
    and component.type="Product"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Product consists of Product Method" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryDeliverableOverdeliverable_needs_is_needed_by_deliverable" name="QueryDeliverableOverdeliverable_needs_is_needed_by_deliverable" title="needs Deliverable" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Deliverable needs Deliverable"
    )
    and component.type="Deliverable"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Deliverable needs Deliverable" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryproductOverproduct_connects_technically_to_connects_technically_from_product" name="QueryproductOverproduct_connects_technically_to_connects_technically_from_product" title="connects technically to Product" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Product connects technically to Product"
    )
    and component.type="Product"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Product connects technically to Product" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryITRequirementOverfunction_satisfies_is_satisfied_by_requirement" name="QueryITRequirementOverfunction_satisfies_is_satisfied_by_requirement" title="satisfies Requirement" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Function satisfies Requirement"
    )
    and component.type="Requirement"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Function satisfies Requirement" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryActionOverfunction_satisfies_is_satisfied_by_requirement" name="QueryActionOverfunction_satisfies_is_satisfied_by_requirement" title="is satisfied by Function" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Function satisfies Requirement"
    )
    and component.type="Function"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Function satisfies Requirement" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryActionOverfunction_leads_to_follows_from_function" name="QueryActionOverfunction_leads_to_follows_from_function" title="leads to Function" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Function leads to Function"
    )
    and component.type="Function"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Function leads to Function" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryGoalOverchange_component_achieves_is_achieved_by_goal" name="QueryGoalOverchange_component_achieves_is_achieved_by_goal" title="achieves Goal" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Change Component achieves Goal"
    )
    and component.type="Goal"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Change Component achieves Goal" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryInitiative_DomainOverchange_component_achieves_is_achieved_by_goal" name="QueryInitiative_DomainOverchange_component_achieves_is_achieved_by_goal" title="is achieved by Change Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Change Component achieves Goal"
    )
    and component.type="Change Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Change Component achieves Goal" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryOrganization_DomainOverit_product_has_administrator_is_administrator_of_organization_component" name="QueryOrganization_DomainOverit_product_has_administrator_is_administrator_of_organization_component" title="has administrator Organization Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="IT Product has administrator Organization Component"
    )
    and component.type="Organization Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="IT Product has administrator Organization Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryITProductOverit_product_has_administrator_is_administrator_of_organization_component" name="QueryITProductOverit_product_has_administrator_is_administrator_of_organization_component" title="is administrator of IT Product" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="IT Product has administrator Organization Component"
    )
    and component.type="IT Product"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="IT Product has administrator Organization Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryOrganization_DomainOverapplication_has_sponsor_is_sponsor_of_organization_component" name="QueryOrganization_DomainOverapplication_has_sponsor_is_sponsor_of_organization_component" title="has sponsor Organization Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Application has sponsor Organization Component"
    )
    and component.type="Organization Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Application has sponsor Organization Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryApplicationOverapplication_has_sponsor_is_sponsor_of_organization_component" name="QueryApplicationOverapplication_has_sponsor_is_sponsor_of_organization_component" title="is sponsor of Application" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Application has sponsor Organization Component"
    )
    and component.type="Application"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Application has sponsor Organization Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QuerySecurity_PolicyOverapplication_component_is_in_remediation_with_is_in_remediation_with_security_policy" name="QuerySecurity_PolicyOverapplication_component_is_in_remediation_with_is_in_remediation_with_security_policy" title="is in remediation with Security Policy" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Application Component is in remediation with Security Policy"
    )
    and component.type="Security Policy"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Application Component is in remediation with Security Policy" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryApplication_DomainOverapplication_component_is_in_remediation_with_is_in_remediation_with_security_policy" name="QueryApplication_DomainOverapplication_component_is_in_remediation_with_is_in_remediation_with_security_policy" title="is in remediation with Application Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Application Component is in remediation with Security Policy"
    )
    and component.type="Application Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Application Component is in remediation with Security Policy" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryOrganization_DomainOverplan_has_approver_is_approver_of_approved_organization_component" name="QueryOrganization_DomainOverplan_has_approver_is_approver_of_approved_organization_component" title="has approver Organization Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Plan has approver Organization Component"
    )
    and component.type="Organization Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Plan has approver Organization Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryTransitionPlanItemOverplan_has_approver_is_approver_of_approved_organization_component" name="QueryTransitionPlanItemOverplan_has_approver_is_approver_of_approved_organization_component" title="is approver of Plan" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Plan has approver Organization Component"
    )
    and component.type="Plan"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Plan has approver Organization Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryPersonOverplan_has_author_is_author_of_person" name="QueryPersonOverplan_has_author_is_author_of_person" title="has author Person" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Plan has author Person"
    )
    and component.type="Person"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Plan has author Person" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryTransitionPlanItemOverplan_has_author_is_author_of_person" name="QueryTransitionPlanItemOverplan_has_author_is_author_of_person" title="is author of Plan" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Plan has author Person"
    )
    and component.type="Plan"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Plan has author Person" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryOrganization_DomainOverplan_has_sponsor_is_sponsor_of_organization_component" name="QueryOrganization_DomainOverplan_has_sponsor_is_sponsor_of_organization_component" title="has sponsor Organization Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Plan has sponsor Organization Component"
    )
    and component.type="Organization Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Plan has sponsor Organization Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryTransitionPlanItemOverplan_has_sponsor_is_sponsor_of_organization_component" name="QueryTransitionPlanItemOverplan_has_sponsor_is_sponsor_of_organization_component" title="is sponsor of Plan" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Plan has sponsor Organization Component"
    )
    and component.type="Plan"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Plan has sponsor Organization Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryOrganization_DomainOverplan_has_participant_is_participant_in_organization_component" name="QueryOrganization_DomainOverplan_has_participant_is_participant_in_organization_component" title="has participant Organization Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Plan has participant Organization Component"
    )
    and component.type="Organization Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Plan has participant Organization Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryTransitionPlanItemOverplan_has_participant_is_participant_in_organization_component" name="QueryTransitionPlanItemOverplan_has_participant_is_participant_in_organization_component" title="is participant in Plan" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Plan has participant Organization Component"
    )
    and component.type="Plan"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Plan has participant Organization Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryPersonOverdisaster_recovery_plan_has_manager_is_manager_of_person" name="QueryPersonOverdisaster_recovery_plan_has_manager_is_manager_of_person" title="has manager Person" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Disaster Recovery Plan has manager Person"
    )
    and component.type="Person"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Disaster Recovery Plan has manager Person" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryDR_PlanOverdisaster_recovery_plan_has_manager_is_manager_of_person" name="QueryDR_PlanOverdisaster_recovery_plan_has_manager_is_manager_of_person" title="is manager of Disaster Recovery Plan" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Disaster Recovery Plan has manager Person"
    )
    and component.type="Disaster Recovery Plan"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Disaster Recovery Plan has manager Person" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryPersonOverdisaster_recovery_plan_has_stakeholder_is_stakeholder_of_person" name="QueryPersonOverdisaster_recovery_plan_has_stakeholder_is_stakeholder_of_person" title="has stakeholder Person" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Disaster Recovery Plan has stakeholder Person"
    )
    and component.type="Person"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Disaster Recovery Plan has stakeholder Person" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryDR_PlanOverdisaster_recovery_plan_has_stakeholder_is_stakeholder_of_person" name="QueryDR_PlanOverdisaster_recovery_plan_has_stakeholder_is_stakeholder_of_person" title="is stakeholder of Disaster Recovery Plan" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Disaster Recovery Plan has stakeholder Person"
    )
    and component.type="Disaster Recovery Plan"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Disaster Recovery Plan has stakeholder Person" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryGoalOverbusiness_process_achieves_is_achieved_by_goal" name="QueryGoalOverbusiness_process_achieves_is_achieved_by_goal" title="achieves Goal" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Business Process achieves Goal"
    )
    and component.type="Goal"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Business Process achieves Goal" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryWorkflowProcessOverbusiness_process_achieves_is_achieved_by_goal" name="QueryWorkflowProcessOverbusiness_process_achieves_is_achieved_by_goal" title="is achieved by Business Process" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Business Process achieves Goal"
    )
    and component.type="Business Process"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Business Process achieves Goal" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryLocationOverinfrastructure_component_is_located_in_is_location_of_location" name="QueryLocationOverinfrastructure_component_is_located_in_is_location_of_location" title="is located in Location" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Infrastructure Component is located in Location"
    )
    and component.type="Location"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Infrastructure Component is located in Location" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryInfrastructure_DomainOverinfrastructure_component_is_located_in_is_location_of_location" name="QueryInfrastructure_DomainOverinfrastructure_component_is_located_in_is_location_of_location" title="is location of Infrastructure Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Infrastructure Component is located in Location"
    )
    and component.type="Infrastructure Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Infrastructure Component is located in Location" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryInfrastructure_DomainOverincident_affects_is_affected_by_infrastructure_component" name="QueryInfrastructure_DomainOverincident_affects_is_affected_by_infrastructure_component" title="affects Infrastructure Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Incident affects Infrastructure Component"
    )
    and component.type="Infrastructure Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Incident affects Infrastructure Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryIncidentOverincident_affects_is_affected_by_infrastructure_component" name="QueryIncidentOverincident_affects_is_affected_by_infrastructure_component" title="is affected by Incident" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Incident affects Infrastructure Component"
    )
    and component.type="Incident"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Incident affects Infrastructure Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QuerySecurity_PolicyOverinfrastructure_component_is_in_remediation_with_is_in_remediation_with_security_policy" name="QuerySecurity_PolicyOverinfrastructure_component_is_in_remediation_with_is_in_remediation_with_security_policy" title="is in remediation with Security Policy" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Infrastructure Component is in remediation with Security Policy"
    )
    and component.type="Security Policy"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Infrastructure Component is in remediation with Security Policy" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryInfrastructure_DomainOverinfrastructure_component_is_in_remediation_with_is_in_remediation_with_security_policy" name="QueryInfrastructure_DomainOverinfrastructure_component_is_in_remediation_with_is_in_remediation_with_security_policy" title="is in remediation with Infrastructure Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Infrastructure Component is in remediation with Security Policy"
    )
    and component.type="Infrastructure Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Infrastructure Component is in remediation with Security Policy" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryTransitionOverchange_component_drives_is_driven_by_transition" name="QueryTransitionOverchange_component_drives_is_driven_by_transition" title="drives Transition" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Change Component drives Transition"
    )
    and component.type="Transition"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Change Component drives Transition" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryInitiative_DomainOverchange_component_drives_is_driven_by_transition" name="QueryInitiative_DomainOverchange_component_drives_is_driven_by_transition" title="is driven by Change Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Change Component drives Transition"
    )
    and component.type="Change Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Change Component drives Transition" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryTransitionOverfactor_drives_is_driven_by_transition" name="QueryTransitionOverfactor_drives_is_driven_by_transition" title="drives Transition" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Factor drives Transition"
    )
    and component.type="Transition"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Factor drives Transition" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryfactorOverfactor_drives_is_driven_by_transition" name="QueryfactorOverfactor_drives_is_driven_by_transition" title="is driven by Factor" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Factor drives Transition"
    )
    and component.type="Factor"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Factor drives Transition" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryDatabaseOverdatabase_server_deploys_is_deployed_in_database" name="QueryDatabaseOverdatabase_server_deploys_is_deployed_in_database" title="deploys Database" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Database Server deploys Database"
    )
    and component.type="Database"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Database Server deploys Database" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryDatabase_ServerOverdatabase_server_deploys_is_deployed_in_database" name="QueryDatabase_ServerOverdatabase_server_deploys_is_deployed_in_database" title="is deployed in Database Server" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Database Server deploys Database"
    )
    and component.type="Database Server"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Database Server deploys Database" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryIncidentOverevent_measures_outage_has_outage_measure_incident" name="QueryIncidentOverevent_measures_outage_has_outage_measure_incident" title="measures outage Incident" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Event measures outage Incident"
    )
    and component.type="Incident"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Event measures outage Incident" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryEventOverevent_measures_outage_has_outage_measure_incident" name="QueryEventOverevent_measures_outage_has_outage_measure_incident" title="has outage measure Event" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Event measures outage Incident"
    )
    and component.type="Event"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Event measures outage Incident" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryOrganization_DomainOvercatalog_has_owner_is_owner_of_organization_component" name="QueryOrganization_DomainOvercatalog_has_owner_is_owner_of_organization_component" title="has owner Organization Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Catalog has owner Organization Component"
    )
    and component.type="Organization Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Catalog has owner Organization Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QuerycatalogOvercatalog_has_owner_is_owner_of_organization_component" name="QuerycatalogOvercatalog_has_owner_is_owner_of_organization_component" title="is owner of Catalog" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Catalog has owner Organization Component"
    )
    and component.type="Catalog"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Catalog has owner Organization Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryOrganization_DomainOverbusiness_process_has_sponsor_is_sponsor_of_organization_component" name="QueryOrganization_DomainOverbusiness_process_has_sponsor_is_sponsor_of_organization_component" title="has sponsor Organization Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Business Process has sponsor Organization Component"
    )
    and component.type="Organization Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Business Process has sponsor Organization Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryWorkflowProcessOverbusiness_process_has_sponsor_is_sponsor_of_organization_component" name="QueryWorkflowProcessOverbusiness_process_has_sponsor_is_sponsor_of_organization_component" title="is sponsor of Business Process" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Business Process has sponsor Organization Component"
    )
    and component.type="Business Process"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Business Process has sponsor Organization Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QuerySecurity_PolicyOverbusiness_process_is_in_remediation_with_is_in_remediation_with_security_policy" name="QuerySecurity_PolicyOverbusiness_process_is_in_remediation_with_is_in_remediation_with_security_policy" title="is in remediation with Security Policy" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Business Process is in remediation with Security Policy"
    )
    and component.type="Security Policy"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Business Process is in remediation with Security Policy" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryWorkflowProcessOverbusiness_process_is_in_remediation_with_is_in_remediation_with_security_policy" name="QueryWorkflowProcessOverbusiness_process_is_in_remediation_with_is_in_remediation_with_security_policy" title="is in remediation with Business Process" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Business Process is in remediation with Security Policy"
    )
    and component.type="Business Process"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Business Process is in remediation with Security Policy" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryRoleOverbusiness_process_needs_is_needed_by_role" name="QueryRoleOverbusiness_process_needs_is_needed_by_role" title="needs Role" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Business Process needs Role"
    )
    and component.type="Role"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Business Process needs Role" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryWorkflowProcessOverbusiness_process_needs_is_needed_by_role" name="QueryWorkflowProcessOverbusiness_process_needs_is_needed_by_role" title="is needed by Business Process" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Business Process needs Role"
    )
    and component.type="Business Process"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Business Process needs Role" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryTableOversoftware_module_references_is_referenced_by_database_table" name="QueryTableOversoftware_module_references_is_referenced_by_database_table" title="references Database Table" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Software Module references Database Table"
    )
    and component.type="Database Table"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Software Module references Database Table" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryApplicationBuildingBlockOversoftware_module_references_is_referenced_by_database_table" name="QueryApplicationBuildingBlockOversoftware_module_references_is_referenced_by_database_table" title="is referenced by Software Module" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Software Module references Database Table"
    )
    and component.type="Software Module"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Software Module references Database Table" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryTransitionOverphase_transitions_from_using_is_from_transition_for_transition" name="QueryTransitionOverphase_transitions_from_using_is_from_transition_for_transition" title="transitions from using Transition" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Phase transitions from using Transition"
    )
    and component.type="Transition"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Phase transitions from using Transition" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryPhaseOverphase_transitions_from_using_is_from_transition_for_transition" name="QueryPhaseOverphase_transitions_from_using_is_from_transition_for_transition" title="is from transition for Phase" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Phase transitions from using Transition"
    )
    and component.type="Phase"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Phase transitions from using Transition" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryTransitionOverphase_transitions_to_using_is_to_transition_for_transition" name="QueryTransitionOverphase_transitions_to_using_is_to_transition_for_transition" title="transitions to using Transition" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Phase transitions to using Transition"
    )
    and component.type="Transition"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Phase transitions to using Transition" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryPhaseOverphase_transitions_to_using_is_to_transition_for_transition" name="QueryPhaseOverphase_transitions_to_using_is_to_transition_for_transition" title="is to transition for Phase" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Phase transitions to using Transition"
    )
    and component.type="Phase"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Phase transitions to using Transition" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryViewOversoftware_module_references_is_referenced_by_database_view" name="QueryViewOversoftware_module_references_is_referenced_by_database_view" title="references Database View" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Software Module references Database View"
    )
    and component.type="Database View"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Software Module references Database View" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryApplicationBuildingBlockOversoftware_module_references_is_referenced_by_database_view" name="QueryApplicationBuildingBlockOversoftware_module_references_is_referenced_by_database_view" title="is referenced by Software Module" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Software Module references Database View"
    )
    and component.type="Software Module"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Software Module references Database View" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryOrganizationOverrole_supports_is_supported_by_organization" name="QueryOrganizationOverrole_supports_is_supported_by_organization" title="supports Organization" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Role supports Organization"
    )
    and component.type="Organization"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Role supports Organization" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryRoleOverrole_supports_is_supported_by_organization" name="QueryRoleOverrole_supports_is_supported_by_organization" title="is supported by Role" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Role supports Organization"
    )
    and component.type="Role"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Role supports Organization" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryComputing_HardwareOvercabinet_stores_is_stored_in_computing_hardware" name="QueryComputing_HardwareOvercabinet_stores_is_stored_in_computing_hardware" title="stores Computing Hardware" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Cabinet stores Computing Hardware"
    )
    and component.type="Computing Hardware"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Cabinet stores Computing Hardware" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryCabinetOvercabinet_stores_is_stored_in_computing_hardware" name="QueryCabinetOvercabinet_stores_is_stored_in_computing_hardware" title="is stored in Cabinet" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Cabinet stores Computing Hardware"
    )
    and component.type="Cabinet"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Cabinet stores Computing Hardware" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryColumnOverdatabase_type_classifies_is_classified_by_database_column" name="QueryColumnOverdatabase_type_classifies_is_classified_by_database_column" title="classifies Database Column" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Database Type classifies Database Column"
    )
    and component.type="Database Column"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Database Type classifies Database Column" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryTypeOverdatabase_type_classifies_is_classified_by_database_column" name="QueryTypeOverdatabase_type_classifies_is_classified_by_database_column" title="is classified by Database Type" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Database Type classifies Database Column"
    )
    and component.type="Database Type"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Database Type classifies Database Column" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryTypeOverdatabase_column_references_is_referenced_by_database_type" name="QueryTypeOverdatabase_column_references_is_referenced_by_database_type" title="references Database Type" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Database Column references Database Type"
    )
    and component.type="Database Type"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Database Column references Database Type" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryColumnOverdatabase_column_references_is_referenced_by_database_type" name="QueryColumnOverdatabase_column_references_is_referenced_by_database_type" title="is referenced by Database Column" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Database Column references Database Type"
    )
    and component.type="Database Column"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Database Column references Database Type" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryApplicationBuildingBlockOversoftware_module_consists_of_is_part_of_software_module" name="QueryApplicationBuildingBlockOversoftware_module_consists_of_is_part_of_software_module" title="consists of Software Module" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Software Module consists of Software Module"
    )
    and component.type="Software Module"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Software Module consists of Software Module" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryFileOverdatastore_consists_of_is_part_of_file" name="QueryFileOverdatastore_consists_of_is_part_of_file" title="consists of File" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Datastore consists of File"
    )
    and component.type="File"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Datastore consists of File" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryPhysicalDatastoreOverdatastore_consists_of_is_part_of_file" name="QueryPhysicalDatastoreOverdatastore_consists_of_is_part_of_file" title="is part of Datastore" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Datastore consists of File"
    )
    and component.type="Datastore"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Datastore consists of File" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QuerySchemaOverdatabase_consists_of_is_part_of_database_schema" name="QuerySchemaOverdatabase_consists_of_is_part_of_database_schema" title="consists of Database Schema" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Database consists of Database Schema"
    )
    and component.type="Database Schema"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Database consists of Database Schema" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryDatabaseOverdatabase_consists_of_is_part_of_database_schema" name="QueryDatabaseOverdatabase_consists_of_is_part_of_database_schema" title="is part of Database" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Database consists of Database Schema"
    )
    and component.type="Database"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Database consists of Database Schema" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryTransitionOverevent_drives_is_driven_by_transition" name="QueryTransitionOverevent_drives_is_driven_by_transition" title="drives Transition" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Event drives Transition"
    )
    and component.type="Transition"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Event drives Transition" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryEventOverevent_drives_is_driven_by_transition" name="QueryEventOverevent_drives_is_driven_by_transition" title="is driven by Event" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Event drives Transition"
    )
    and component.type="Event"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Event drives Transition" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryPrivilegeOverorganization_component_holds_is_held_by_privilege" name="QueryPrivilegeOverorganization_component_holds_is_held_by_privilege" title="holds Privilege" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Organization Component holds Privilege"
    )
    and component.type="Privilege"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Organization Component holds Privilege" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryOrganization_DomainOverorganization_component_holds_is_held_by_privilege" name="QueryOrganization_DomainOverorganization_component_holds_is_held_by_privilege" title="is held by Organization Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Organization Component holds Privilege"
    )
    and component.type="Organization Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Organization Component holds Privilege" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryTypeOverdatabase_type_inherits_to_inherits_from_database_type" name="QueryTypeOverdatabase_type_inherits_to_inherits_from_database_type" title="inherits to Database Type" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Database Type inherits to Database Type"
    )
    and component.type="Database Type"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Database Type inherits to Database Type" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QuerySoftware_PatchOversoftware_module_deploys_is_deployed_in_software_patch" name="QuerySoftware_PatchOversoftware_module_deploys_is_deployed_in_software_patch" title="deploys Software Patch" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Software Module deploys Software Patch"
    )
    and component.type="Software Patch"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Software Module deploys Software Patch" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryApplicationBuildingBlockOversoftware_module_deploys_is_deployed_in_software_patch" name="QueryApplicationBuildingBlockOversoftware_module_deploys_is_deployed_in_software_patch" title="is deployed in Software Module" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Software Module deploys Software Patch"
    )
    and component.type="Software Module"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Software Module deploys Software Patch" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QuerySoftware_Product_VersionOverdeployed_software_deploys_is_deployed_in_software_product_version" name="QuerySoftware_Product_VersionOverdeployed_software_deploys_is_deployed_in_software_product_version" title="deploys Software Product Version" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Deployed Software deploys Software Product Version"
    )
    and component.type="Software Product Version"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Deployed Software deploys Software Product Version" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryDeployed_InstanceOverdeployed_software_deploys_is_deployed_in_software_product_version" name="QueryDeployed_InstanceOverdeployed_software_deploys_is_deployed_in_software_product_version" title="is deployed in Deployed Software" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Deployed Software deploys Software Product Version"
    )
    and component.type="Deployed Software"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Deployed Software deploys Software Product Version" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryGeneric_ComponentOverlifecycle_applies_to_has_generic_component" name="QueryGeneric_ComponentOverlifecycle_applies_to_has_generic_component" title="applies to Basic Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Lifecycle applies to Basic Component"
    )
    and component.type="Basic Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Lifecycle applies to Basic Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryLifecycleOverlifecycle_applies_to_has_generic_component" name="QueryLifecycleOverlifecycle_applies_to_has_generic_component" title="has Lifecycle" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Lifecycle applies to Basic Component"
    )
    and component.type="Lifecycle"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Lifecycle applies to Basic Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryNetworkOvernetwork_consists_of_is_part_of_network" name="QueryNetworkOvernetwork_consists_of_is_part_of_network" title="consists of Network" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Network consists of Network"
    )
    and component.type="Network"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Network consists of Network" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QuerySoftware_Product_VersionOversoftware_patch_patches_is_patched_by_software_product_version" name="QuerySoftware_Product_VersionOversoftware_patch_patches_is_patched_by_software_product_version" title="patches Software Product Version" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Software Patch patches Software Product Version"
    )
    and component.type="Software Product Version"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Software Patch patches Software Product Version" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QuerySoftware_PatchOversoftware_patch_patches_is_patched_by_software_product_version" name="QuerySoftware_PatchOversoftware_patch_patches_is_patched_by_software_product_version" title="is patched by Software Patch" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Software Patch patches Software Product Version"
    )
    and component.type="Software Patch"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Software Patch patches Software Product Version" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryWorkflowProcessOverbusiness_process_consists_of_is_part_of_business_process" name="QueryWorkflowProcessOverbusiness_process_consists_of_is_part_of_business_process" title="consists of Business Process" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Business Process consists of Business Process"
    )
    and component.type="Business Process"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Business Process consists of Business Process" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryPersonOverorganization_has_representative_is_representative_for_person" name="QueryPersonOverorganization_has_representative_is_representative_for_person" title="has representative Person" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Organization has representative Person"
    )
    and component.type="Person"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Organization has representative Person" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryOrganizationOverorganization_has_representative_is_representative_for_person" name="QueryOrganizationOverorganization_has_representative_is_representative_for_person" title="is representative for Organization" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Organization has representative Person"
    )
    and component.type="Organization"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Organization has representative Person" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QuerySoftware_PatchOversoftware_patch_requires_is_required_by_software_patch" name="QuerySoftware_PatchOversoftware_patch_requires_is_required_by_software_patch" title="requires Software Patch" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Software Patch requires Software Patch"
    )
    and component.type="Software Patch"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Software Patch requires Software Patch" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QuerySoftware_Product_VersionOversoftware_product_has_version_is_version_of_software_product_version" name="QuerySoftware_Product_VersionOversoftware_product_has_version_is_version_of_software_product_version" title="has version Software Product Version" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Software Product has version Software Product Version"
    )
    and component.type="Software Product Version"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Software Product has version Software Product Version" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryApplicationEnvironmentOversoftware_product_has_version_is_version_of_software_product_version" name="QueryApplicationEnvironmentOversoftware_product_has_version_is_version_of_software_product_version" title="is version of Software Product" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Software Product has version Software Product Version"
    )
    and component.type="Software Product"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Software Product has version Software Product Version" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryColumnOverdatabase_table_consists_of_is_part_of_database_column" name="QueryColumnOverdatabase_table_consists_of_is_part_of_database_column" title="consists of Database Column" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Database Table consists of Database Column"
    )
    and component.type="Database Column"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Database Table consists of Database Column" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryTableOverdatabase_table_consists_of_is_part_of_database_column" name="QueryTableOverdatabase_table_consists_of_is_part_of_database_column" title="is part of Database Table" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Database Table consists of Database Column"
    )
    and component.type="Database Table"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Database Table consists of Database Column" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryTableOverdatabase_table_references_is_referenced_by_database_table" name="QueryTableOverdatabase_table_references_is_referenced_by_database_table" title="references Database Table" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Database Table references Database Table"
    )
    and component.type="Database Table"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Database Table references Database Table" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryTableOverdatabase_view_references_is_referenced_by_database_table" name="QueryTableOverdatabase_view_references_is_referenced_by_database_table" title="references Database Table" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Database View references Database Table"
    )
    and component.type="Database Table"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Database View references Database Table" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryViewOverdatabase_view_references_is_referenced_by_database_table" name="QueryViewOverdatabase_view_references_is_referenced_by_database_table" title="is referenced by Database View" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Database View references Database Table"
    )
    and component.type="Database View"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Database View references Database Table" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryTypeOverdatabase_type_references_is_referenced_by_database_type" name="QueryTypeOverdatabase_type_references_is_referenced_by_database_type" title="references Database Type" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Database Type references Database Type"
    )
    and component.type="Database Type"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Database Type references Database Type" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryColumnOverdatabase_view_consists_of_is_part_of_database_column" name="QueryColumnOverdatabase_view_consists_of_is_part_of_database_column" title="consists of Database Column" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Database View consists of Database Column"
    )
    and component.type="Database Column"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Database View consists of Database Column" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryViewOverdatabase_view_consists_of_is_part_of_database_column" name="QueryViewOverdatabase_view_consists_of_is_part_of_database_column" title="is part of Database View" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Database View consists of Database Column"
    )
    and component.type="Database View"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Database View consists of Database Column" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryViewOverdatabase_view_references_is_referenced_by_database_view" name="QueryViewOverdatabase_view_references_is_referenced_by_database_view" title="references Database View" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Database View references Database View"
    )
    and component.type="Database View"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Database View references Database View" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="Queryit_architecture_componentOverrequirement_applies_to_has_it_architecture_component" name="Queryit_architecture_componentOverrequirement_applies_to_has_it_architecture_component" title="applies to IT Architecture Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Requirement applies to IT Architecture Component"
    )
    and component.type="IT Architecture Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Requirement applies to IT Architecture Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryITRequirementOverrequirement_applies_to_has_it_architecture_component" name="QueryITRequirementOverrequirement_applies_to_has_it_architecture_component" title="has Requirement" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Requirement applies to IT Architecture Component"
    )
    and component.type="Requirement"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Requirement applies to IT Architecture Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="Querydemand_componentOverrequirement_applies_to_has_demand_component" name="Querydemand_componentOverrequirement_applies_to_has_demand_component" title="applies to Demand Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Requirement applies to Demand Component"
    )
    and component.type="Demand Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Requirement applies to Demand Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryITRequirementOverrequirement_applies_to_has_demand_component" name="QueryITRequirementOverrequirement_applies_to_has_demand_component" title="has Requirement" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Requirement applies to Demand Component"
    )
    and component.type="Requirement"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Requirement applies to Demand Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryProjectRiskOvercause_applies_to_has_risk" name="QueryProjectRiskOvercause_applies_to_has_risk" title="applies to Risk" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Cause applies to Risk"
    )
    and component.type="Risk"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Cause applies to Risk" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryCauseOvercause_applies_to_has_risk" name="QueryCauseOvercause_applies_to_has_risk" title="has Cause" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Cause applies to Risk"
    )
    and component.type="Cause"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Cause applies to Risk" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryApplication_DomainOverdisaster_recovery_plan_applies_to_has_application_component" name="QueryApplication_DomainOverdisaster_recovery_plan_applies_to_has_application_component" title="applies to Application Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Disaster Recovery Plan applies to Application Component"
    )
    and component.type="Application Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Disaster Recovery Plan applies to Application Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryDR_PlanOverdisaster_recovery_plan_applies_to_has_application_component" name="QueryDR_PlanOverdisaster_recovery_plan_applies_to_has_application_component" title="has Disaster Recovery Plan" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Disaster Recovery Plan applies to Application Component"
    )
    and component.type="Disaster Recovery Plan"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Disaster Recovery Plan applies to Application Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryInfrastructure_DomainOverdisaster_recovery_plan_applies_to_has_infrastructure_component" name="QueryInfrastructure_DomainOverdisaster_recovery_plan_applies_to_has_infrastructure_component" title="applies to Infrastructure Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Disaster Recovery Plan applies to Infrastructure Component"
    )
    and component.type="Infrastructure Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Disaster Recovery Plan applies to Infrastructure Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryDR_PlanOverdisaster_recovery_plan_applies_to_has_infrastructure_component" name="QueryDR_PlanOverdisaster_recovery_plan_applies_to_has_infrastructure_component" title="has Disaster Recovery Plan" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Disaster Recovery Plan applies to Infrastructure Component"
    )
    and component.type="Disaster Recovery Plan"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Disaster Recovery Plan applies to Infrastructure Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryITRequirementOverrequirement_conflicts_with_conflicts_with_requirement" name="QueryITRequirementOverrequirement_conflicts_with_conflicts_with_requirement" title="conflicts with Requirement" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Requirement conflicts with Requirement"
    )
    and component.type="Requirement"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Requirement conflicts with Requirement" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryPhysicalDatastoreOverdatastore_connects_to_connects_from_datastore" name="QueryPhysicalDatastoreOverdatastore_connects_to_connects_from_datastore" title="connects to Datastore" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Datastore connects to Datastore"
    )
    and component.type="Datastore"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Datastore connects to Datastore" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryDatabaseOverdatastore_consists_of_is_part_of_database" name="QueryDatabaseOverdatastore_consists_of_is_part_of_database" title="consists of Database" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Datastore consists of Database"
    )
    and component.type="Database"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Datastore consists of Database" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryPhysicalDatastoreOverdatastore_consists_of_is_part_of_database" name="QueryPhysicalDatastoreOverdatastore_consists_of_is_part_of_database" title="is part of Datastore" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Datastore consists of Database"
    )
    and component.type="Datastore"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Datastore consists of Database" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryTableOverdatabase_schema_consists_of_is_part_of_database_table" name="QueryTableOverdatabase_schema_consists_of_is_part_of_database_table" title="consists of Database Table" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Database Schema consists of Database Table"
    )
    and component.type="Database Table"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Database Schema consists of Database Table" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QuerySchemaOverdatabase_schema_consists_of_is_part_of_database_table" name="QuerySchemaOverdatabase_schema_consists_of_is_part_of_database_table" title="is part of Database Schema" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Database Schema consists of Database Table"
    )
    and component.type="Database Schema"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Database Schema consists of Database Table" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryViewOverdatabase_schema_consists_of_is_part_of_database_view" name="QueryViewOverdatabase_schema_consists_of_is_part_of_database_view" title="consists of Database View" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Database Schema consists of Database View"
    )
    and component.type="Database View"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Database Schema consists of Database View" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QuerySchemaOverdatabase_schema_consists_of_is_part_of_database_view" name="QuerySchemaOverdatabase_schema_consists_of_is_part_of_database_view" title="is part of Database Schema" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Database Schema consists of Database View"
    )
    and component.type="Database Schema"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Database Schema consists of Database View" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryDeliverableOvercatalog_consists_of_is_part_of_deliverable" name="QueryDeliverableOvercatalog_consists_of_is_part_of_deliverable" title="consists of Deliverable" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Catalog consists of Deliverable"
    )
    and component.type="Deliverable"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Catalog consists of Deliverable" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QuerycatalogOvercatalog_consists_of_is_part_of_deliverable" name="QuerycatalogOvercatalog_consists_of_is_part_of_deliverable" title="is part of Catalog" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Catalog consists of Deliverable"
    )
    and component.type="Catalog"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Catalog consists of Deliverable" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryDeliverableOverinfrastructure_component_delivers_is_delivered_by_deliverable" name="QueryDeliverableOverinfrastructure_component_delivers_is_delivered_by_deliverable" title="delivers Deliverable" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Infrastructure Component delivers Deliverable"
    )
    and component.type="Deliverable"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Infrastructure Component delivers Deliverable" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryInfrastructure_DomainOverinfrastructure_component_delivers_is_delivered_by_deliverable" name="QueryInfrastructure_DomainOverinfrastructure_component_delivers_is_delivered_by_deliverable" title="is delivered by Infrastructure Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Infrastructure Component delivers Deliverable"
    )
    and component.type="Infrastructure Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Infrastructure Component delivers Deliverable" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryBenefitOverchange_component_delivers_is_delivered_by_benefit" name="QueryBenefitOverchange_component_delivers_is_delivered_by_benefit" title="delivers Benefit" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Change Component delivers Benefit"
    )
    and component.type="Benefit"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Change Component delivers Benefit" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryInitiative_DomainOverchange_component_delivers_is_delivered_by_benefit" name="QueryInitiative_DomainOverchange_component_delivers_is_delivered_by_benefit" title="is delivered by Change Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Change Component delivers Benefit"
    )
    and component.type="Change Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Change Component delivers Benefit" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QuerycatalogOverorganization_delivers_is_delivered_by_catalog" name="QuerycatalogOverorganization_delivers_is_delivered_by_catalog" title="delivers Catalog" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Organization delivers Catalog"
    )
    and component.type="Catalog"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Organization delivers Catalog" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryOrganizationOverorganization_delivers_is_delivered_by_catalog" name="QueryOrganizationOverorganization_delivers_is_delivered_by_catalog" title="is delivered by Organization" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Organization delivers Catalog"
    )
    and component.type="Organization"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Organization delivers Catalog" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QuerySoftware_Product_VersionOverdatastore_deploys_is_deployed_in_software_product_version" name="QuerySoftware_Product_VersionOverdatastore_deploys_is_deployed_in_software_product_version" title="deploys Software Product Version" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Datastore deploys Software Product Version"
    )
    and component.type="Software Product Version"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Datastore deploys Software Product Version" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryPhysicalDatastoreOverdatastore_deploys_is_deployed_in_software_product_version" name="QueryPhysicalDatastoreOverdatastore_deploys_is_deployed_in_software_product_version" title="is deployed in Datastore" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Datastore deploys Software Product Version"
    )
    and component.type="Datastore"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Datastore deploys Software Product Version" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="Queryhardware_product_versionOverhardware_deploys_is_deployed_in_hardware_product_version" name="Queryhardware_product_versionOverhardware_deploys_is_deployed_in_hardware_product_version" title="deploys Hardware Product Model" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Hardware deploys Hardware Product Model"
    )
    and component.type="Hardware Product Model"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Hardware deploys Hardware Product Model" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryAutomaticDeviceOverhardware_deploys_is_deployed_in_hardware_product_version" name="QueryAutomaticDeviceOverhardware_deploys_is_deployed_in_hardware_product_version" title="is deployed in Hardware" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Hardware deploys Hardware Product Model"
    )
    and component.type="Hardware"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Hardware deploys Hardware Product Model" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QuerySoftware_Product_VersionOverinfrastructure_component_deploys_is_deployed_in_software_product_version" name="QuerySoftware_Product_VersionOverinfrastructure_component_deploys_is_deployed_in_software_product_version" title="deploys Software Product Version" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Infrastructure Component deploys Software Product Version"
    )
    and component.type="Software Product Version"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Infrastructure Component deploys Software Product Version" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryInfrastructure_DomainOverinfrastructure_component_deploys_is_deployed_in_software_product_version" name="QueryInfrastructure_DomainOverinfrastructure_component_deploys_is_deployed_in_software_product_version" title="is deployed in Infrastructure Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Infrastructure Component deploys Software Product Version"
    )
    and component.type="Infrastructure Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Infrastructure Component deploys Software Product Version" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryInterfaceOverevent_drives_is_driven_by_message" name="QueryInterfaceOverevent_drives_is_driven_by_message" title="drives Message" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Event drives Message"
    )
    and component.type="Message"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Event drives Message" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryEventOverevent_drives_is_driven_by_message" name="QueryEventOverevent_drives_is_driven_by_message" title="is driven by Event" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Event drives Message"
    )
    and component.type="Event"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Event drives Message" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryBPM_Data_ObjectOverevent_drives_is_driven_by_process_data" name="QueryBPM_Data_ObjectOverevent_drives_is_driven_by_process_data" title="drives Process Data" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Event drives Process Data"
    )
    and component.type="Process Data"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Event drives Process Data" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryEventOverevent_drives_is_driven_by_process_data" name="QueryEventOverevent_drives_is_driven_by_process_data" title="is driven by Event" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Event drives Process Data"
    )
    and component.type="Event"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Event drives Process Data" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryCommunicationOverevent_drives_is_driven_by_communication" name="QueryCommunicationOverevent_drives_is_driven_by_communication" title="drives Communication" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Event drives Communication"
    )
    and component.type="Communication"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Event drives Communication" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryEventOverevent_drives_is_driven_by_communication" name="QueryEventOverevent_drives_is_driven_by_communication" title="is driven by Event" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Event drives Communication"
    )
    and component.type="Event"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Event drives Communication" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryPersonOverapplication_component_has_business_owner_is_business_owner_of_person" name="QueryPersonOverapplication_component_has_business_owner_is_business_owner_of_person" title="has business owner Person" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Application Component has business owner Person"
    )
    and component.type="Person"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Application Component has business owner Person" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryApplication_DomainOverapplication_component_has_business_owner_is_business_owner_of_person" name="QueryApplication_DomainOverapplication_component_has_business_owner_is_business_owner_of_person" title="is business owner of Application Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Application Component has business owner Person"
    )
    and component.type="Application Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Application Component has business owner Person" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryPersonOverinfrastructure_component_has_business_owner_is_business_owner_of_person" name="QueryPersonOverinfrastructure_component_has_business_owner_is_business_owner_of_person" title="has business owner Person" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Infrastructure Component has business owner Person"
    )
    and component.type="Person"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Infrastructure Component has business owner Person" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryInfrastructure_DomainOverinfrastructure_component_has_business_owner_is_business_owner_of_person" name="QueryInfrastructure_DomainOverinfrastructure_component_has_business_owner_is_business_owner_of_person" title="is business owner of Infrastructure Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Infrastructure Component has business owner Person"
    )
    and component.type="Infrastructure Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Infrastructure Component has business owner Person" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryPersonOverprocess_component_has_business_owner_is_business_owner_of_person" name="QueryPersonOverprocess_component_has_business_owner_is_business_owner_of_person" title="has business owner Person" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Process Component has business owner Person"
    )
    and component.type="Person"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Process Component has business owner Person" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryProcess_DomainOverprocess_component_has_business_owner_is_business_owner_of_person" name="QueryProcess_DomainOverprocess_component_has_business_owner_is_business_owner_of_person" title="is business owner of Process Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Process Component has business owner Person"
    )
    and component.type="Process Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Process Component has business owner Person" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryPersonOverchange_component_has_business_owner_is_business_owner_of_person" name="QueryPersonOverchange_component_has_business_owner_is_business_owner_of_person" title="has business owner Person" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Change Component has business owner Person"
    )
    and component.type="Person"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Change Component has business owner Person" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryInitiative_DomainOverchange_component_has_business_owner_is_business_owner_of_person" name="QueryInitiative_DomainOverchange_component_has_business_owner_is_business_owner_of_person" title="is business owner of Change Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Change Component has business owner Person"
    )
    and component.type="Change Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Change Component has business owner Person" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryPersonOverdeliverable_has_business_owner_is_business_owner_of_person" name="QueryPersonOverdeliverable_has_business_owner_is_business_owner_of_person" title="has business owner Person" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Deliverable has business owner Person"
    )
    and component.type="Person"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Deliverable has business owner Person" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryDeliverableOverdeliverable_has_business_owner_is_business_owner_of_person" name="QueryDeliverableOverdeliverable_has_business_owner_is_business_owner_of_person" title="is business owner of Deliverable" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Deliverable has business owner Person"
    )
    and component.type="Deliverable"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Deliverable has business owner Person" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryOrganization_DomainOverdata_component_has_content_owner_is_content_owner_of_organization_component" name="QueryOrganization_DomainOverdata_component_has_content_owner_is_content_owner_of_organization_component" title="has content owner Organization Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Data Component has content owner Organization Component"
    )
    and component.type="Organization Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Data Component has content owner Organization Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryData_DomainOverdata_component_has_content_owner_is_content_owner_of_organization_component" name="QueryData_DomainOverdata_component_has_content_owner_is_content_owner_of_organization_component" title="is content owner of Data Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Data Component has content owner Organization Component"
    )
    and component.type="Data Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Data Component has content owner Organization Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryGeneric_ComponentOverbusiness_process_has_input_is_input_for_generic_component" name="QueryGeneric_ComponentOverbusiness_process_has_input_is_input_for_generic_component" title="has input Basic Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Business Process has input Basic Component"
    )
    and component.type="Basic Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Business Process has input Basic Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryWorkflowProcessOverbusiness_process_has_input_is_input_for_generic_component" name="QueryWorkflowProcessOverbusiness_process_has_input_is_input_for_generic_component" title="is input for Business Process" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Business Process has input Basic Component"
    )
    and component.type="Business Process"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Business Process has input Basic Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryPersonOverapplication_component_has_it_owner_is_it_owner_of_person" name="QueryPersonOverapplication_component_has_it_owner_is_it_owner_of_person" title="has IT owner Person" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Application Component has IT owner Person"
    )
    and component.type="Person"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Application Component has IT owner Person" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryApplication_DomainOverapplication_component_has_it_owner_is_it_owner_of_person" name="QueryApplication_DomainOverapplication_component_has_it_owner_is_it_owner_of_person" title="is IT owner of Application Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Application Component has IT owner Person"
    )
    and component.type="Application Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Application Component has IT owner Person" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryPersonOverinfrastructure_component_has_it_owner_is_it_owner_of_person" name="QueryPersonOverinfrastructure_component_has_it_owner_is_it_owner_of_person" title="has IT owner Person" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Infrastructure Component has IT owner Person"
    )
    and component.type="Person"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Infrastructure Component has IT owner Person" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryInfrastructure_DomainOverinfrastructure_component_has_it_owner_is_it_owner_of_person" name="QueryInfrastructure_DomainOverinfrastructure_component_has_it_owner_is_it_owner_of_person" title="is IT owner of Infrastructure Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Infrastructure Component has IT owner Person"
    )
    and component.type="Infrastructure Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Infrastructure Component has IT owner Person" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryPersonOverprocess_component_has_it_owner_is_it_owner_of_person" name="QueryPersonOverprocess_component_has_it_owner_is_it_owner_of_person" title="has IT owner Person" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Process Component has IT owner Person"
    )
    and component.type="Person"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Process Component has IT owner Person" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryProcess_DomainOverprocess_component_has_it_owner_is_it_owner_of_person" name="QueryProcess_DomainOverprocess_component_has_it_owner_is_it_owner_of_person" title="is IT owner of Process Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Process Component has IT owner Person"
    )
    and component.type="Process Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Process Component has IT owner Person" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryPersonOverchange_component_has_it_owner_is_it_owner_of_person" name="QueryPersonOverchange_component_has_it_owner_is_it_owner_of_person" title="has IT owner Person" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Change Component has IT owner Person"
    )
    and component.type="Person"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Change Component has IT owner Person" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryInitiative_DomainOverchange_component_has_it_owner_is_it_owner_of_person" name="QueryInitiative_DomainOverchange_component_has_it_owner_is_it_owner_of_person" title="is IT owner of Change Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Change Component has IT owner Person"
    )
    and component.type="Change Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Change Component has IT owner Person" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryPersonOverdeliverable_has_it_owner_is_it_owner_of_person" name="QueryPersonOverdeliverable_has_it_owner_is_it_owner_of_person" title="has IT owner Person" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Deliverable has IT owner Person"
    )
    and component.type="Person"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Deliverable has IT owner Person" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryDeliverableOverdeliverable_has_it_owner_is_it_owner_of_person" name="QueryDeliverableOverdeliverable_has_it_owner_is_it_owner_of_person" title="is IT owner of Deliverable" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Deliverable has IT owner Person"
    )
    and component.type="Deliverable"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Deliverable has IT owner Person" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryPersonOverenterprise_policy_has_manager_is_manager_of_person" name="QueryPersonOverenterprise_policy_has_manager_is_manager_of_person" title="has manager Person" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Enterprise Policy has manager Person"
    )
    and component.type="Person"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Enterprise Policy has manager Person" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryITPrinciplesOverenterprise_policy_has_manager_is_manager_of_person" name="QueryITPrinciplesOverenterprise_policy_has_manager_is_manager_of_person" title="is manager of Enterprise Policy" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Enterprise Policy has manager Person"
    )
    and component.type="Enterprise Policy"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Enterprise Policy has manager Person" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryColumnOverdatabase_table_has_primary_key_is_primary_key_for_database_column" name="QueryColumnOverdatabase_table_has_primary_key_is_primary_key_for_database_column" title="has primary key Database Column" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Database Table has primary key Database Column"
    )
    and component.type="Database Column"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Database Table has primary key Database Column" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryTableOverdatabase_table_has_primary_key_is_primary_key_for_database_column" name="QueryTableOverdatabase_table_has_primary_key_is_primary_key_for_database_column" title="is primary key for Database Table" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Database Table has primary key Database Column"
    )
    and component.type="Database Table"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Database Table has primary key Database Column" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryColumnOverdatabase_view_has_primary_key_is_primary_key_for_database_column" name="QueryColumnOverdatabase_view_has_primary_key_is_primary_key_for_database_column" title="has primary key Database Column" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Database View has primary key Database Column"
    )
    and component.type="Database Column"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Database View has primary key Database Column" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryViewOverdatabase_view_has_primary_key_is_primary_key_for_database_column" name="QueryViewOverdatabase_view_has_primary_key_is_primary_key_for_database_column" title="is primary key for Database View" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Database View has primary key Database Column"
    )
    and component.type="Database View"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Database View has primary key Database Column" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryTargetCustomerOverscenario_has_reference_is_reference_for_target_customer" name="QueryTargetCustomerOverscenario_has_reference_is_reference_for_target_customer" title="has reference Target Customer" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Scenario has reference Target Customer"
    )
    and component.type="Target Customer"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Scenario has reference Target Customer" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryScenarioOverscenario_has_reference_is_reference_for_target_customer" name="QueryScenarioOverscenario_has_reference_is_reference_for_target_customer" title="is reference for Scenario" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Scenario has reference Target Customer"
    )
    and component.type="Scenario"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Scenario has reference Target Customer" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryOrganization_DomainOverchange_component_has_sponsor_is_sponsor_of_organization_component" name="QueryOrganization_DomainOverchange_component_has_sponsor_is_sponsor_of_organization_component" title="has sponsor Organization Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Change Component has sponsor Organization Component"
    )
    and component.type="Organization Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Change Component has sponsor Organization Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryInitiative_DomainOverchange_component_has_sponsor_is_sponsor_of_organization_component" name="QueryInitiative_DomainOverchange_component_has_sponsor_is_sponsor_of_organization_component" title="is sponsor of Change Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Change Component has sponsor Organization Component"
    )
    and component.type="Change Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Change Component has sponsor Organization Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryTargetCustomerOvercatalog_has_target_customer_is_target_customer_of_target_customer" name="QueryTargetCustomerOvercatalog_has_target_customer_is_target_customer_of_target_customer" title="has target customer Target Customer" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Catalog has target customer Target Customer"
    )
    and component.type="Target Customer"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Catalog has target customer Target Customer" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QuerycatalogOvercatalog_has_target_customer_is_target_customer_of_target_customer" name="QuerycatalogOvercatalog_has_target_customer_is_target_customer_of_target_customer" title="is target customer of Catalog" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Catalog has target customer Target Customer"
    )
    and component.type="Catalog"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Catalog has target customer Target Customer" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryOrganizationOvercatalog_has_target_customer_is_target_customer_of_organization" name="QueryOrganizationOvercatalog_has_target_customer_is_target_customer_of_organization" title="has target customer Organization" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Catalog has target customer Organization"
    )
    and component.type="Organization"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Catalog has target customer Organization" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QuerycatalogOvercatalog_has_target_customer_is_target_customer_of_organization" name="QuerycatalogOvercatalog_has_target_customer_is_target_customer_of_organization" title="is target customer of Catalog" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Catalog has target customer Organization"
    )
    and component.type="Catalog"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Catalog has target customer Organization" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="Queryproduct_versionOverproduct_has_version_is_version_of_product_version" name="Queryproduct_versionOverproduct_has_version_is_version_of_product_version" title="has version Product Version" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Product has version Product Version"
    )
    and component.type="Product Version"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Product has version Product Version" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryproductOverproduct_has_version_is_version_of_product_version" name="QueryproductOverproduct_has_version_is_version_of_product_version" title="is version of Product" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Product has version Product Version"
    )
    and component.type="Product"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Product has version Product Version" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="Querybusiness_product_versionOverbusiness_product_has_version_is_version_of_business_product_version" name="Querybusiness_product_versionOverbusiness_product_has_version_is_version_of_business_product_version" title="has version Business Product Version" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Business Product has version Business Product Version"
    )
    and component.type="Business Product Version"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Business Product has version Business Product Version" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryCatalogpartOverbusiness_product_has_version_is_version_of_business_product_version" name="QueryCatalogpartOverbusiness_product_has_version_is_version_of_business_product_version" title="is version of Business Product" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Business Product has version Business Product Version"
    )
    and component.type="Business Product"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Business Product has version Business Product Version" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="Queryit_product_versionOverit_product_has_version_is_version_of_it_product_version" name="Queryit_product_versionOverit_product_has_version_is_version_of_it_product_version" title="has version IT Product Version" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="IT Product has version IT Product Version"
    )
    and component.type="IT Product Version"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="IT Product has version IT Product Version" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryITProductOverit_product_has_version_is_version_of_it_product_version" name="QueryITProductOverit_product_has_version_is_version_of_it_product_version" title="is version of IT Product" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="IT Product has version IT Product Version"
    )
    and component.type="IT Product"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="IT Product has version IT Product Version" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="Queryhardware_product_versionOverhardware_product_has_version_is_version_of_hardware_product_version" name="Queryhardware_product_versionOverhardware_product_has_version_is_version_of_hardware_product_version" title="has version Hardware Product Model" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Hardware Product has version Hardware Product Version"
    )
    and component.type="Hardware Product Model"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Hardware Product has version Hardware Product Version" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryTechnologyProductOverhardware_product_has_version_is_version_of_hardware_product_version" name="QueryTechnologyProductOverhardware_product_has_version_is_version_of_hardware_product_version" title="is version of Hardware Product" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Hardware Product has version Hardware Product Version"
    )
    and component.type="Hardware Product"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Hardware Product has version Hardware Product Version" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="Queryinformation_componentOverdatabase_object_implements_is_implemented_by_information_component" name="Queryinformation_componentOverdatabase_object_implements_is_implemented_by_information_component" title="implements Information Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Database Object implements Information Component"
    )
    and component.type="Information Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Database Object implements Information Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryData_ObjectOverdatabase_object_implements_is_implemented_by_information_component" name="QueryData_ObjectOverdatabase_object_implements_is_implemented_by_information_component" title="is implemented by Database Object" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Database Object implements Information Component"
    )
    and component.type="Database Object"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Database Object implements Information Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryInterfaceOverdeployed_software_implements_is_implemented_by_message" name="QueryInterfaceOverdeployed_software_implements_is_implemented_by_message" title="implements Message" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Deployed Software implements Message"
    )
    and component.type="Message"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Deployed Software implements Message" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryDeployed_InstanceOverdeployed_software_implements_is_implemented_by_message" name="QueryDeployed_InstanceOverdeployed_software_implements_is_implemented_by_message" title="is implemented by Deployed Software" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Deployed Software implements Message"
    )
    and component.type="Deployed Software"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Deployed Software implements Message" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryInterfaceOvertechnology_implements_is_implemented_by_message" name="QueryInterfaceOvertechnology_implements_is_implemented_by_message" title="implements Message" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Technology implements Message"
    )
    and component.type="Message"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Technology implements Message" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryEnablingITTechnologyOvertechnology_implements_is_implemented_by_message" name="QueryEnablingITTechnologyOvertechnology_implements_is_implemented_by_message" title="is implemented by Technology" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Technology implements Message"
    )
    and component.type="Technology"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Technology implements Message" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryInterfaceOverorganization_component_implements_is_implemented_by_message" name="QueryInterfaceOverorganization_component_implements_is_implemented_by_message" title="implements Message" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Organization Component implements Message"
    )
    and component.type="Message"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Organization Component implements Message" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryOrganization_DomainOverorganization_component_implements_is_implemented_by_message" name="QueryOrganization_DomainOverorganization_component_implements_is_implemented_by_message" title="is implemented by Organization Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Organization Component implements Message"
    )
    and component.type="Organization Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Organization Component implements Message" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryBPM_Data_ObjectOversoftware_product_implements_is_implemented_by_process_data" name="QueryBPM_Data_ObjectOversoftware_product_implements_is_implemented_by_process_data" title="implements Process Data" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Software Product implements Process Data"
    )
    and component.type="Process Data"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Software Product implements Process Data" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryApplicationEnvironmentOversoftware_product_implements_is_implemented_by_process_data" name="QueryApplicationEnvironmentOversoftware_product_implements_is_implemented_by_process_data" title="is implemented by Software Product" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Software Product implements Process Data"
    )
    and component.type="Software Product"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Software Product implements Process Data" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryBPM_Data_ObjectOverdeployed_software_implements_is_implemented_by_process_data" name="QueryBPM_Data_ObjectOverdeployed_software_implements_is_implemented_by_process_data" title="implements Process Data" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Deployed Software implements Process Data"
    )
    and component.type="Process Data"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Deployed Software implements Process Data" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryDeployed_InstanceOverdeployed_software_implements_is_implemented_by_process_data" name="QueryDeployed_InstanceOverdeployed_software_implements_is_implemented_by_process_data" title="is implemented by Deployed Software" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Deployed Software implements Process Data"
    )
    and component.type="Deployed Software"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Deployed Software implements Process Data" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryBPM_Data_ObjectOvertechnology_implements_is_implemented_by_process_data" name="QueryBPM_Data_ObjectOvertechnology_implements_is_implemented_by_process_data" title="implements Process Data" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Technology implements Process Data"
    )
    and component.type="Process Data"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Technology implements Process Data" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryEnablingITTechnologyOvertechnology_implements_is_implemented_by_process_data" name="QueryEnablingITTechnologyOvertechnology_implements_is_implemented_by_process_data" title="is implemented by Technology" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Technology implements Process Data"
    )
    and component.type="Technology"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Technology implements Process Data" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryBPM_Data_ObjectOverorganization_component_implements_is_implemented_by_process_data" name="QueryBPM_Data_ObjectOverorganization_component_implements_is_implemented_by_process_data" title="implements Process Data" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Organization Component implements Process Data"
    )
    and component.type="Process Data"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Organization Component implements Process Data" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryOrganization_DomainOverorganization_component_implements_is_implemented_by_process_data" name="QueryOrganization_DomainOverorganization_component_implements_is_implemented_by_process_data" title="is implemented by Organization Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Organization Component implements Process Data"
    )
    and component.type="Organization Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Organization Component implements Process Data" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryCommunicationOversoftware_product_implements_is_implemented_by_communication" name="QueryCommunicationOversoftware_product_implements_is_implemented_by_communication" title="implements Communication" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Software Product implements Communication"
    )
    and component.type="Communication"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Software Product implements Communication" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryApplicationEnvironmentOversoftware_product_implements_is_implemented_by_communication" name="QueryApplicationEnvironmentOversoftware_product_implements_is_implemented_by_communication" title="is implemented by Software Product" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Software Product implements Communication"
    )
    and component.type="Software Product"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Software Product implements Communication" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryCommunicationOvertechnology_implements_is_implemented_by_communication" name="QueryCommunicationOvertechnology_implements_is_implemented_by_communication" title="implements Communication" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Technology implements Communication"
    )
    and component.type="Communication"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Technology implements Communication" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryEnablingITTechnologyOvertechnology_implements_is_implemented_by_communication" name="QueryEnablingITTechnologyOvertechnology_implements_is_implemented_by_communication" title="is implemented by Technology" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Technology implements Communication"
    )
    and component.type="Technology"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Technology implements Communication" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryLocationOverdeployed_software_is_located_in_is_location_of_location" name="QueryLocationOverdeployed_software_is_located_in_is_location_of_location" title="is located in Location" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Deployed Software is located in Location"
    )
    and component.type="Location"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Deployed Software is located in Location" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryDeployed_InstanceOverdeployed_software_is_located_in_is_location_of_location" name="QueryDeployed_InstanceOverdeployed_software_is_located_in_is_location_of_location" title="is location of Deployed Software" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Deployed Software is located in Location"
    )
    and component.type="Deployed Software"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Deployed Software is located in Location" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryLocationOverdatastore_is_located_in_is_location_of_location" name="QueryLocationOverdatastore_is_located_in_is_location_of_location" title="is located in Location" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Datastore is located in Location"
    )
    and component.type="Location"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Datastore is located in Location" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryPhysicalDatastoreOverdatastore_is_located_in_is_location_of_location" name="QueryPhysicalDatastoreOverdatastore_is_located_in_is_location_of_location" title="is location of Datastore" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Datastore is located in Location"
    )
    and component.type="Datastore"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Datastore is located in Location" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryCompetenceOverprocess_component_needs_is_needed_by_resources_skill" name="QueryCompetenceOverprocess_component_needs_is_needed_by_resources_skill" title="needs Skill" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Process Component needs Skill"
    )
    and component.type="Skill"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Process Component needs Skill" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryProcess_DomainOverprocess_component_needs_is_needed_by_resources_skill" name="QueryProcess_DomainOverprocess_component_needs_is_needed_by_resources_skill" title="is needed by Process Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Process Component needs Skill"
    )
    and component.type="Process Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Process Component needs Skill" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryMachineOverinfrastructure_component_provides_is_provided_by_resource" name="QueryMachineOverinfrastructure_component_provides_is_provided_by_resource" title="provides Resource" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Infrastructure Component provides Resource"
    )
    and component.type="Resource"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Infrastructure Component provides Resource" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryInfrastructure_DomainOverinfrastructure_component_provides_is_provided_by_resource" name="QueryInfrastructure_DomainOverinfrastructure_component_provides_is_provided_by_resource" title="is provided by Infrastructure Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Infrastructure Component provides Resource"
    )
    and component.type="Infrastructure Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Infrastructure Component provides Resource" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryActionOverinfrastructure_component_provides_is_provided_by_criticality_function" name="QueryActionOverinfrastructure_component_provides_is_provided_by_criticality_function" title="provides Function" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Infrastructure Component provides Function"
    )
    and component.type="Function"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Infrastructure Component provides Function" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryInfrastructure_DomainOverinfrastructure_component_provides_is_provided_by_criticality_function" name="QueryInfrastructure_DomainOverinfrastructure_component_provides_is_provided_by_criticality_function" title="is provided by Infrastructure Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Infrastructure Component provides Function"
    )
    and component.type="Infrastructure Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Infrastructure Component provides Function" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryCapabilityOverfunction_provides_is_provided_by_capability" name="QueryCapabilityOverfunction_provides_is_provided_by_capability" title="provides Capability" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Function provides Capability"
    )
    and component.type="Capability"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Function provides Capability" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryActionOverfunction_provides_is_provided_by_capability" name="QueryActionOverfunction_provides_is_provided_by_capability" title="is provided by Function" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Function provides Capability"
    )
    and component.type="Function"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Function provides Capability" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="Queryit_architecture_componentOverit_architecture_component_sends_data_to_receives_data_from_it_architecture_component" name="Queryit_architecture_componentOverit_architecture_component_sends_data_to_receives_data_from_it_architecture_component" title="sends data to IT Architecture Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="IT Architecture Component sends data to IT Architecture Component"
    )
    and component.type="IT Architecture Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="IT Architecture Component sends data to IT Architecture Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryProjectRiskOvergoal_targeting_generates_is_generated_by_targeting_risk" name="QueryProjectRiskOvergoal_targeting_generates_is_generated_by_targeting_risk" title="targeting generates Risk" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Goal targeting generates Risk"
    )
    and component.type="Risk"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Goal targeting generates Risk" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryGoalOvergoal_targeting_generates_is_generated_by_targeting_risk" name="QueryGoalOvergoal_targeting_generates_is_generated_by_targeting_risk" title="is generated by targeting Goal" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Goal targeting generates Risk"
    )
    and component.type="Goal"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Goal targeting generates Risk" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryProjectRiskOvergoal_not_targeting_generates_is_generated_by_not_targeting_risk" name="QueryProjectRiskOvergoal_not_targeting_generates_is_generated_by_not_targeting_risk" title="not targeting generates Risk" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Goal not targeting generates Risk"
    )
    and component.type="Risk"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Goal not targeting generates Risk" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryGoalOvergoal_not_targeting_generates_is_generated_by_not_targeting_risk" name="QueryGoalOvergoal_not_targeting_generates_is_generated_by_not_targeting_risk" title="is generated by not targeting Goal" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Goal not targeting generates Risk"
    )
    and component.type="Goal"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Goal not targeting generates Risk" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryLogicalTechnologyItemOverapplication_uses_is_used_by_logical_technology_item" name="QueryLogicalTechnologyItemOverapplication_uses_is_used_by_logical_technology_item" title="uses Logical Technology Item" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Application uses Logical Technology Item"
    )
    and component.type="Logical Technology Item"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Application uses Logical Technology Item" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryApplicationOverapplication_uses_is_used_by_logical_technology_item" name="QueryApplicationOverapplication_uses_is_used_by_logical_technology_item" title="is used by Application" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Application uses Logical Technology Item"
    )
    and component.type="Application"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Application uses Logical Technology Item" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryData_ObjectOverdeployed_software_uses_is_used_by_crud_database_object" name="QueryData_ObjectOverdeployed_software_uses_is_used_by_crud_database_object" title="uses Database Object" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Deployed Software uses Database Object"
    )
    and component.type="Database Object"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Deployed Software uses Database Object" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryDeployed_InstanceOverdeployed_software_uses_is_used_by_crud_database_object" name="QueryDeployed_InstanceOverdeployed_software_uses_is_used_by_crud_database_object" title="is used by Deployed Software" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Deployed Software uses Database Object"
    )
    and component.type="Deployed Software"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Deployed Software uses Database Object" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryDeliverableOverbusiness_process_uses_is_used_by_criticality_deliverable" name="QueryDeliverableOverbusiness_process_uses_is_used_by_criticality_deliverable" title="uses Deliverable" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Business Process uses Deliverable"
    )
    and component.type="Deliverable"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Business Process uses Deliverable" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryWorkflowProcessOverbusiness_process_uses_is_used_by_criticality_deliverable" name="QueryWorkflowProcessOverbusiness_process_uses_is_used_by_criticality_deliverable" title="is used by Business Process" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Business Process uses Deliverable"
    )
    and component.type="Business Process"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Business Process uses Deliverable" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="Queryinformation_componentOverstorage_stores_is_stored_in_information_component" name="Queryinformation_componentOverstorage_stores_is_stored_in_information_component" title="stores Information Component" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Storage stores Information Component"
    )
    and component.type="Information Component"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Storage stores Information Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryStorageOverstorage_stores_is_stored_in_information_component" name="QueryStorageOverstorage_stores_is_stored_in_information_component" title="is stored in Storage" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Storage stores Information Component"
    )
    and component.type="Storage"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Storage stores Information Component" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryDocumentOverstorage_stores_is_stored_in_document" name="QueryDocumentOverstorage_stores_is_stored_in_document" title="stores Document" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Storage stores Document"
    )
    and component.type="Document"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Storage stores Document" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryStorageOverstorage_stores_is_stored_in_document" name="QueryStorageOverstorage_stores_is_stored_in_document" title="is stored in Storage" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Storage stores Document"
    )
    and component.type="Storage"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Storage stores Document" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryTargetCustomerOverissue_affects_is_affected_by_target_customer" name="QueryTargetCustomerOverissue_affects_is_affected_by_target_customer" title="affects Target Customer" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Issue affects Target Customer"
    )
    and component.type="Target Customer"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Issue affects Target Customer" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryIssueOverissue_affects_is_affected_by_target_customer" name="QueryIssueOverissue_affects_is_affected_by_target_customer" title="is affected by Issue" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Issue affects Target Customer"
    )
    and component.type="Issue"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Issue affects Target Customer" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryTargetUserOverissue_affects_is_affected_by_target_user" name="QueryTargetUserOverissue_affects_is_affected_by_target_user" title="affects Target User" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Issue affects Target User"
    )
    and component.type="Target User"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Issue affects Target User" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryIssueOverissue_affects_is_affected_by_target_user" name="QueryIssueOverissue_affects_is_affected_by_target_user" title="is affected by Issue" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Issue affects Target User"
    )
    and component.type="Issue"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Issue affects Target User" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="Queryprocess_eventOverprocess_event_association_process_event" name="Queryprocess_eventOverprocess_event_association_process_event" title="association to Process Event" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Process Event Association Process Event"
    )
    and component.type="Process Event"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Process Event Association Process Event" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryBPM_StartEventOverprocess_message_flow_process_start_event" name="QueryBPM_StartEventOverprocess_message_flow_process_start_event" title="message to Process Start Event" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Process Message Flow Start Event"
    )
    and component.type="Process Start Event"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Process Message Flow Start Event" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryLogicalProcessOverprocess_message_flow_process_start_event" name="QueryLogicalProcessOverprocess_message_flow_process_start_event" title="message from Process" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Process Message Flow Start Event"
    )
    and component.type="Process"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Process Message Flow Start Event" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryInputOverprocess_message_flow_process_input" name="QueryInputOverprocess_message_flow_process_input" title="message to Process Input" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Process Message Flow Input"
    )
    and component.type="Process Input"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Process Message Flow Input" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryLogicalProcessOverprocess_message_flow_process_input" name="QueryLogicalProcessOverprocess_message_flow_process_input" title="message from Process" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Process Message Flow Input"
    )
    and component.type="Process"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Process Message Flow Input" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryLogicalProcessOverprocess_intermediate_event_message_flow_process" name="QueryLogicalProcessOverprocess_intermediate_event_message_flow_process" title="message to Process" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Intermediate Event Message Flow Process"
    )
    and component.type="Process"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Intermediate Event Message Flow Process" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryBPM_IntermediateEventOverprocess_intermediate_event_message_flow_process" name="QueryBPM_IntermediateEventOverprocess_intermediate_event_message_flow_process" title="message from Process Intermediate Event" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Intermediate Event Message Flow Process"
    )
    and component.type="Process Intermediate Event"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Intermediate Event Message Flow Process" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryBPM_StartEventOverprocess_intermediate_event_message_flow_process_start_event" name="QueryBPM_StartEventOverprocess_intermediate_event_message_flow_process_start_event" title="message to Process Start Event" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Intermediate Event Message Flow Start Event"
    )
    and component.type="Process Start Event"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Intermediate Event Message Flow Start Event" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryBPM_IntermediateEventOverprocess_intermediate_event_message_flow_process_start_event" name="QueryBPM_IntermediateEventOverprocess_intermediate_event_message_flow_process_start_event" title="message from Process Intermediate Event" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Intermediate Event Message Flow Start Event"
    )
    and component.type="Process Intermediate Event"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Intermediate Event Message Flow Start Event" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryInputOverprocess_intermediate_event_message_flow_process_input" name="QueryInputOverprocess_intermediate_event_message_flow_process_input" title="message to Process Input" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Intermediate Event Message Flow Input"
    )
    and component.type="Process Input"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Intermediate Event Message Flow Input" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryBPM_IntermediateEventOverprocess_intermediate_event_message_flow_process_input" name="QueryBPM_IntermediateEventOverprocess_intermediate_event_message_flow_process_input" title="message from Process Intermediate Event" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Intermediate Event Message Flow Input"
    )
    and component.type="Process Intermediate Event"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Intermediate Event Message Flow Input" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryBPM_IntermediateEventOverprocess_intermediate_event_message_flow_process_intermediate_event" name="QueryBPM_IntermediateEventOverprocess_intermediate_event_message_flow_process_intermediate_event" title="message to Process Intermediate Event" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Intermediate Event Message Flow Intermediate Event"
    )
    and component.type="Process Intermediate Event"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Intermediate Event Message Flow Intermediate Event" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryInputOverprocess_end_event_message_flow_process_input" name="QueryInputOverprocess_end_event_message_flow_process_input" title="message to Process Input" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="End Event Message Flow Input"
    )
    and component.type="Process Input"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="End Event Message Flow Input" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryBPM_EndEventOverprocess_end_event_message_flow_process_input" name="QueryBPM_EndEventOverprocess_end_event_message_flow_process_input" title="message from Process End Event" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="End Event Message Flow Input"
    )
    and component.type="Process End Event"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="End Event Message Flow Input" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryBPM_StartEventOverprocess_output_message_flow_process_start_event" name="QueryBPM_StartEventOverprocess_output_message_flow_process_start_event" title="message to Process Start Event" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Output Message Flow Start Event"
    )
    and component.type="Process Start Event"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Output Message Flow Start Event" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryOutputOverprocess_output_message_flow_process_start_event" name="QueryOutputOverprocess_output_message_flow_process_start_event" title="message from Process Output" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Output Message Flow Start Event"
    )
    and component.type="Process Output"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Output Message Flow Start Event" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryBPM_IntermediateEventOverprocess_output_message_flow_process_intermediate_event" name="QueryBPM_IntermediateEventOverprocess_output_message_flow_process_intermediate_event" title="message to Process Intermediate Event" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Output Message Flow Intermediate Event"
    )
    and component.type="Process Intermediate Event"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Output Message Flow Intermediate Event" 

   </string>
  </arg-list>
 </cpp-method>

 <cpp-method id="QueryOutputOverprocess_output_message_flow_process_intermediate_event" name="QueryOutputOverprocess_output_message_flow_process_intermediate_event" title="message from Process Output" language="c++" bind="NO.METIS.TrouxClient.Populate" required-dll="metistroux_client" object-flag="true" nested-flag="true" tree-flag="true">
  <arg-list size="3">
   <string name="Query0">

    component.hasRelationship(
     relationship.hasComponent(
       component.uuid="%DESTINATION_ID%"
     )
     and relationship.type="Output Message Flow Intermediate Event"
    )
    and component.type="Process Output"

   </string>
   <integer name="ComponentFlag1">0</integer>
   <string name="Query1">

    relationship.hasComponent(
     component.uuid="%DESTINATION_ID%"
    ) 
    and relationship.type="Output Message Flow Intermediate Event" 

   </string>
  </arg-list>
 </cpp-method>

</metis>
